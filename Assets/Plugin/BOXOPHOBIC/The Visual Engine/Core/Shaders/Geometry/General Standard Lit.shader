// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2020
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Wind Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalWindLayerValue("Global Wind Layer", Float) = 0
		[StyledEnum(Push Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPushLayerValue("Global Push Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 20
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_CutoutShadowMode("Cutout Shadow", Float) = 1
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[Space(10)]_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Globals / Elements", Float) = 1
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Enum(Off,0,Affect Shadow Pass,1)]_DitherShadowMode("Dither Shadow", Float) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 20
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		_EmissiveExposureValue("Emissive Weight", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)]_SubsurfaceAproxInfo("# Subsurface Aprox Info", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceThicknessValue("Subsurface Thickness", Range( 0 , 1)) = 0
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Wave Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Wave Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion 01 Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion 01 Pivots", Range( 0 , 1)) = 0.5
		_MotionBasePhaseValue("Motion 01 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion 01 Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion 01 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion 02 Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion 02 Pivots", Range( 0 , 1)) = 0
		_MotionSmallPhaseValue("Motion 02 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion 02 Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion 02 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion 03 Intensity", Range( 0 , 8)) = 0
		_MotionTinyTillingValue("Motion 03 Tilling", Range( 0 , 40)) = 20
		_MotionTinySpeedValue("Motion 03 Speed", Range( 0 , 40)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion 03 Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion 03 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionNoiseValue("Motion Wind Noise", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionSpeedValue("Motion Wind Speed", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_mask_mode("_motion_push_mask_mode", Float) = 0
		[HideInInspector]_motion_push_vert_mode("_motion_push_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_proc_mode("_motion_push_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_push_layer_value("_global_push_layer_value", Float) = 0
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 1
		[HideInInspector]_render_dst("_render_dst", Float) = 0
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsStandardShader("_IsStandardShader", Float) = 1

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			ColorMask [_LightLayersMaskBuffer4] 4
			ColorMask [_LightLayersMaskBuffer5] 5

			HLSLPROGRAM
            #pragma shader_feature_local _ _DOUBLESIDED_ON
            #define _ENERGY_CONSERVING_SPECULAR 1
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_SPECULAR_COLOR 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_SRP_VERSION 140011
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ LIGHT_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;
	
	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
						)
			{

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);
				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord9;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				half3 Input_Albedo24_g170749 = Out_Albedo4_g170750;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170749 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170749 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170749 = staticSwitch22_g170749;
				float4 break24_g170744 = Out_Shader4_g170750;
				half Metallic95_g170744 = break24_g170744.x;
				half Input_Metallic25_g170749 = Metallic95_g170744;
				half OneMinusReflectivity31_g170749 = ( (ColorSpaceDielectricSpec23_g170749).w - ( (ColorSpaceDielectricSpec23_g170749).w * Input_Metallic25_g170749 ) );
				
				float3 appendResult23_g170744 = (float3(Out_NormalTS4_g170750 , 1.0));
				float3 temp_output_13_0_g170748 = appendResult23_g170744;
				float3 temp_output_33_0_g170748 = ( temp_output_13_0_g170748 * _render_normal );
				float3 switchResult12_g170748 = (((isFrontFace>0)?(temp_output_13_0_g170748):(temp_output_33_0_g170748)));
				
				float3 lerpResult28_g170749 = lerp( (ColorSpaceDielectricSpec23_g170749).xyz , Input_Albedo24_g170749 , Input_Metallic25_g170749);
				half RenderSpec102_g170744 = _RenderSpecular;
				
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170749 * OneMinusReflectivity31_g170749 );
				surfaceDescription.Normal = switchResult12_g170748;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170749 * RenderSpec102_g170744 );
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170750).xyz;
				surfaceDescription.Smoothness = break24_g170744.w;
				surfaceDescription.Occlusion = break24_g170744.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 0;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );
				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);

				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.uv3.x , 0.0 , inputMesh.uv3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldPos;
				
				outputPackedVaryingsMeshToPS.ase_texcoord2 = inputMesh.uv0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.xy = inputMesh.uv2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord3.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;

				outputPackedVaryingsMeshToPS.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					outputPackedVaryingsMeshToPS.VizUV.xy = vizUV;
					outputPackedVaryingsMeshToPS.LightCoord = lightCoord;
				#endif

				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = float3(1.0, 1.0, 1.0);

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord7.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord9;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = packedInput.ase_texcoord10.xyz;
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				half3 Input_Albedo24_g170749 = Out_Albedo4_g170750;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170749 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170749 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170749 = staticSwitch22_g170749;
				float4 break24_g170744 = Out_Shader4_g170750;
				half Metallic95_g170744 = break24_g170744.x;
				half Input_Metallic25_g170749 = Metallic95_g170744;
				half OneMinusReflectivity31_g170749 = ( (ColorSpaceDielectricSpec23_g170749).w - ( (ColorSpaceDielectricSpec23_g170749).w * Input_Metallic25_g170749 ) );
				
				float3 appendResult23_g170744 = (float3(Out_NormalTS4_g170750 , 1.0));
				float3 temp_output_13_0_g170748 = appendResult23_g170744;
				float3 temp_output_33_0_g170748 = ( temp_output_13_0_g170748 * _render_normal );
				float3 switchResult12_g170748 = (((isFrontFace>0)?(temp_output_13_0_g170748):(temp_output_33_0_g170748)));
				
				float3 lerpResult28_g170749 = lerp( (ColorSpaceDielectricSpec23_g170749).xyz , Input_Albedo24_g170749 , Input_Metallic25_g170749);
				half RenderSpec102_g170744 = _RenderSpecular;
				
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170749 * OneMinusReflectivity31_g170749 );
				surfaceDescription.Normal = switchResult12_g170748;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170749 * RenderSpec102_g170744 );
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170750).xyz;
				surfaceDescription.Smoothness = break24_g170744.w;
				surfaceDescription.Occlusion = break24_g170744.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                    {
                        surfaceData.metallic = 0;
                    }
                    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord8;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
				outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

                #if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
				DecalPrepassData decalPrepassData;
				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
				decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
                #endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                   {
                        surfaceData.metallic = 0;
                   }
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord8;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                    {
                        surfaceData.metallic = 0;
                    }
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord8;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				float3 appendResult23_g170744 = (float3(Out_NormalTS4_g170750 , 1.0));
				float3 temp_output_13_0_g170748 = appendResult23_g170744;
				float3 temp_output_33_0_g170748 = ( temp_output_13_0_g170748 * _render_normal );
				float3 switchResult12_g170748 = (((isFrontFace>0)?(temp_output_13_0_g170748):(temp_output_33_0_g170748)));
				
				float4 break24_g170744 = Out_Shader4_g170750;
				
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.Normal = switchResult12_g170748;
				surfaceDescription.Smoothness = break24_g170744.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
				outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    				depthColor = packedInput.positionCS.z;
    				depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
    				DecalPrepassData decalPrepassData;
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
    				decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif

				#endif // SCENESELECTIONPASS

			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshInterp00 : TEXCOORD0;
				float3 vpassInterpolators0 : TEXCOORD1; //interpolators0
				float3 vpassInterpolators1 : TEXCOORD2; //interpolators1
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord10 = vertexToFrag24_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord11.xyz = ase_worldPos;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord11.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				outputPackedVaryingsMeshToPS.vmeshPositionCS = VMESHpositionCS;
				outputPackedVaryingsMeshToPS.vmeshInterp00.xyz = VMESHpositionRWS;

				outputPackedVaryingsMeshToPS.vpassInterpolators0 = float3(VPASSpositionCS.xyw);
				outputPackedVaryingsMeshToPS.vpassInterpolators1 = float3(VPASSpreviousPositionCS.xyw);
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif

					#ifdef _DEPTHOFFSET_ON
					, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
				, bool ase_vface : SV_IsFrontFace
				)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshInterp00.xyz;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord8.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord10;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = packedInput.ase_texcoord11.xyz;
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				float3 appendResult23_g170744 = (float3(Out_NormalTS4_g170750 , 1.0));
				float3 temp_output_13_0_g170748 = appendResult23_g170744;
				float3 temp_output_33_0_g170748 = ( temp_output_13_0_g170748 * _render_normal );
				float3 switchResult12_g170748 = (((ase_vface>0)?(temp_output_13_0_g170748):(temp_output_33_0_g170748)));
				
				float4 break24_g170744 = Out_Shader4_g170750;
				
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.Normal = switchResult12_g170748;
				surfaceDescription.Smoothness = break24_g170744.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassInterpolators0.xy, 0.0, packedInput.vpassInterpolators0.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassInterpolators1.xy, 0.0, packedInput.vpassInterpolators1.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
					#endif
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
					outDecalBuffer.w = (GetMeshRenderingLightLayer() & 0x000000FF) / 255.0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
			#pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
				, out float4 outColor:SV_Target0
            #ifdef UNITY_VIRTUAL_TEXTURING
				, out float4 outVTFeedback : SV_Target1
            #endif
            #ifdef OUTPUT_SPLIT_LIGHTING
				, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
				, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
            #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
				, out float4 outMotionVec : MOTION_VECTOR_TARGET
            #endif
            #ifdef _DEPTHOFFSET_ON
				, out float outputDepth : DEPTH_OFFSET_SEMANTIC
            #endif
		    
						)
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				

				
				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
			

				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord11;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				half3 Input_Albedo24_g170749 = Out_Albedo4_g170750;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170749 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170749 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170749 = staticSwitch22_g170749;
				float4 break24_g170744 = Out_Shader4_g170750;
				half Metallic95_g170744 = break24_g170744.x;
				half Input_Metallic25_g170749 = Metallic95_g170744;
				half OneMinusReflectivity31_g170749 = ( (ColorSpaceDielectricSpec23_g170749).w - ( (ColorSpaceDielectricSpec23_g170749).w * Input_Metallic25_g170749 ) );
				
				float3 appendResult23_g170744 = (float3(Out_NormalTS4_g170750 , 1.0));
				float3 temp_output_13_0_g170748 = appendResult23_g170744;
				float3 temp_output_33_0_g170748 = ( temp_output_13_0_g170748 * _render_normal );
				float3 switchResult12_g170748 = (((isFrontFace>0)?(temp_output_13_0_g170748):(temp_output_33_0_g170748)));
				
				float3 lerpResult28_g170749 = lerp( (ColorSpaceDielectricSpec23_g170749).xyz , Input_Albedo24_g170749 , Input_Metallic25_g170749);
				half RenderSpec102_g170744 = _RenderSpecular;
				
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170749 * OneMinusReflectivity31_g170749 );
				surfaceDescription.Normal = switchResult12_g170748;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170749 * RenderSpec102_g170744 );
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170750).xyz;
				surfaceDescription.Smoothness = break24_g170744.w;
				surfaceDescription.Occlusion = break24_g170744.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
						outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
	
            CBUFFER_START( UnityPerMaterial )
			half4 _motion_tiny_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _MotionHighlightColor;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _ThirdBlendRemap;
			half4 _OverlayCoordValue;
			half4 _ThirdProjRemap;
			half4 _dryness_vert_mode;
			half4 _OverlayGlitterColor;
			half4 _third_vert_mode;
			half4 _overlay_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _third_mask_coord_value;
			half4 _VariationNoiseRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayMeshRemap;
			half4 _ThirdMultiRemap;
			half4 _ThirdMeshRemap;
			half4 _object_phase_mode;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _NormalMeshRemap;
			half4 _normal_vert_mode;
			half4 _VariationColorTwo;
			half4 _MotionPushMaskRemap;
			float4 _TintingColor;
			half4 _motion_push_proc_mode;
			half4 _motion_push_vert_mode;
			half4 _GradientMeshRemap;
			half4 _MotionBaseMaskRemap;
			half4 _gradient_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _DrynessLumaRemap;
			half4 _motion_base_vert_mode;
			half4 _GradientColorOne;
			half4 _tinting_vert_mode;
			half4 _TintingMeshRemap;
			half4 _GradientColorTwo;
			half4 _MotionTinyMaskRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MainMultiRemap;
			half4 _TintingBlendRemap;
			half4 _OcclusionMeshRemap;
			float4 _DrynessColor;
			half4 _occlusion_vert_mode;
			half4 _TintingLumaRemap;
			half4 _OverlayBlendRemap1;
			half4 _OverlayProjRemap;
			half4 _VariationColorOne;
			half4 _emissive_vert_mode;
			half4 _MainCoordValue;
			half4 _CutoutMeshRemap;
			half4 _EmissiveMaskRemap;
			half4 _SecondMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _second_vert_mode;
			half4 _ThirdCoordValue;
			half4 _Color;
			half4 _SecondProjRemap;
			half4 _emissive_coord_value;
			half4 _SecondMaskRemap;
			half4 _second_mask_coord_value;
			half4 _SecondCoordValue;
			half4 _EmissiveMeshRemap;
			half4 _SecondMaskCoordValue;
			half4 _EmissiveCoordValue;
			half4 _main_coord_value;
			half4 _cutout_vert_mode;
			half4 _SecondColor;
			half4 _second_coord_value;
			half4 _WetnessWaterColor;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _MainColorTwo;
			half4 _SubsurfaceColor;
			half4 _MainColor;
			half4 _SecondColorTwo;
			half4 _third_coord_value;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half3 _motion_highlight_color;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _SecondSmoothnessValue;
			half _OcclusionIntensityValue;
			half _ThirdAlphaClipValue;
			half _SecondColorMode;
			half _ThirdMetallicValue;
			half _ThirdColorMode;
			half _ThirdBlendAlbedoValue;
			half _ThirdIntensityValue;
			half _ThirdAlbedoValue;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _ThirdMaskValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _ThirdMeshValue;
			half _SecondMeshMode;
			half _ThirdMeshMode;
			half _ThirdProjValue;
			half _SecondMeshValue;
			half _SecondProjValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _SecondMaskValue;
			half _ThirdBlendShaderValue;
			half _ThirdSmoothnessValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _OcclusionMeshMode;
			half _ThirdOcclusionValue;
			half _SubsurfaceScatteringValue;
			half _VariationNoiseTillingValue;
			half _DitherProximityValue;
			half _DitherProximityDistValue;
			half _DitherConstantValue;
			half _CutoutShadowMode;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseValue;
			half _CutoutNoiseTillingValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsDistValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _DitherGlancingAngleValue;
			half _SubsurfaceThicknessValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveIntensityValue;
			half _WetnessDropsTillingValue;
			half _EmissiveMaskValue;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _DitherMultiValue;
			half _DitherNoiseTillingValue;
			half _DitherGlancingValue;
			half _EmissiveCoordMode;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _DrynessMeshMode;
			half _DrynessMeshValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _DrynessIntensityValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _DrynessSmoothnessValue;
			half _TintingMeshMode;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingIntensityValue;
			half _TintingGrayValue;
			half _TintingElementMode;
			half _VariationMultiValue;
			half _VariationIntensityValue;
			half _TintingMeshValue;
			half _VariationNoisePivotValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlaySubsurfaceValue;
			half _OverlaySmoothnessValue;
			half _OverlayNormalValue;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _MotionHighlightValue;
			half _OverlayMaskValue;
			half _OverlayMaskSampleMode;
			half _OverlayIntensityValue;
			half _OverlayGlitterDistValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayTextureMode;
			half _OverlayCoordMode;
			half _OverlayMaskCoordMode;
			half _MainAlphaClipValue;
			half _MainCategory;
			half _MainColorMode;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _ObjectCategory;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _SizeFadeElementMode;
			half _GlobalPaintLayerValue;
			half _SizeFadeEnd;
			half _GlobalPaintPivotValue;
			half _GlobalGlowPivotValue;
			half _MotionIntensityValue;
			half _MotionNoiseValue;
			half _MotionSpeedValue;
			half _MotionTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionSmallMaskMode;
			half _motion_small_mask_mode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _GlobalPushLayerValue;
			half _GlobalWindLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _GlobalFadeLayerValue;
			half _GlobalAtmoPivotValue;
			half _GlobalAtmoLayerValue;
			half _GlobalGlowLayerValue;
			half _global_wind_layer_value;
			half _SizeFadeCategory;
			half _MotionWindElementMode;
			half _IsTVEShader;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _Cutoff;
			half _RenderZWrite;
			half _IsStandardShader;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _IsCustomShader;
			half _MotionPushElementMode;
			half _IsShared;
			half _IsCollected;
			half _MotionInteractionEnd;
			half _MotionInteractionCategory;
			half _MotionWindEnd;
			half _MotionWindCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _RenderShadow;
			half _RenderClip;
			half _RenderMotion;
			half _RenderQueue;
			half _RenderPriority;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _IsIdentifier;
			half _IsConverted;
			half _HasDefaultTextures;
			half _MainNormalValue;
			half _global_push_layer_value;
			half _MotionPushPhaseValue;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _DetailCategory;
			half _OverlaySpace;
			half _DetailEnd;
			half _ThirdCoordMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _SecondBakeMode;
			half _SecondElementMode;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdSampleMode;
			half _MotionPushPivotValue;
			half _OverlayEnd;
			half _WetnessBakeMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionPushMaskMode;
			half _motion_push_mask_mode;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _MotionBaseIntensityValue;
			half _MotionDistValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionTinyMaskMode;
			half _motion_tiny_mask_mode;
			half _MotionTinyIntensityValue;
			half _MotionFrontValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionPushIntensityValue;
			half _NormalMeshMode;
			half _OverlayCategory;
			half _SubsurfaceCategory;
			half _SubsurfaceDirectValue;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissiveElementMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceEnd;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_LandParams;
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_WindParams;
			float TVE_PushLayers[10];
			TEXTURE2D_ARRAY(TVE_PushBaseTex);
			TEXTURE2D_ARRAY(TVE_PushNearTex);
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_TimeParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTex);
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck36_g170681( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170689( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170742 = (TVEModelData)0;
				float In_Dummy16_g170742 = 0.0;
				TVEModelData Data16_g170719 = (TVEModelData)0;
				half Dummy1575_g170717 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170719 = Dummy1575_g170717;
				TVEModelData Data16_g170697 = (TVEModelData)0;
				float In_Dummy16_g170697 = 0.0;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				half Dummy181_g170467 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170483 = Dummy181_g170467;
				TVEModelData Data16_g170431 = (TVEModelData)0;
				half Dummy181_g170428 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170431 = Dummy181_g170428;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170211 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170211 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170211 = PositionOS131_g170196;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_worldPos;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170211 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170198 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170198 = ( localObjectPosition_UNITY_MATRIX_M14_g170198 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170198 = localObjectPosition_UNITY_MATRIX_M14_g170198;
				#endif
				half3 ObjectData20_g170200 = staticSwitch13_g170198;
				half3 WorldData19_g170200 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170200 = WorldData19_g170200;
				#else
				float3 staticSwitch14_g170200 = ObjectData20_g170200;
				#endif
				float3 temp_output_124_0_g170198 = staticSwitch14_g170200;
				float3 temp_output_239_7_g170196 = temp_output_124_0_g170198;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170202 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170206 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170206;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170202 = PivotOS149_g170196;
				float3 PivotsOnly105_g170202 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170202 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170202 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170202 = ( localObjectPosition_UNITY_MATRIX_M14_g170202 + PivotsOnly105_g170202 );
				#endif
				half3 ObjectData20_g170204 = staticSwitch13_g170202;
				half3 WorldData19_g170204 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170204 = WorldData19_g170204;
				#else
				float3 staticSwitch14_g170204 = ObjectData20_g170204;
				#endif
				float3 temp_output_124_0_g170202 = staticSwitch14_g170204;
				float3 temp_output_237_7_g170196 = temp_output_124_0_g170202;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_237_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_239_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170211 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170211 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170211 = float3( 0,0,0 );
				float3 In_PivotOS16_g170211 = PivotOS149_g170196;
				float3 In_PivotWS16_g170211 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170211 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170211 = NormalOS134_g170196;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170211 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170211 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170211 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170211 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170211 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170211 = VertexMasks171_g170196;
				float4 break33_g170209 = _object_phase_mode;
				float temp_output_30_0_g170209 = ( inputMesh.ase_color.r * break33_g170209.x );
				float temp_output_29_0_g170209 = ( inputMesh.ase_color.g * break33_g170209.y );
				float temp_output_31_0_g170209 = ( inputMesh.ase_color.b * break33_g170209.z );
				float temp_output_28_0_g170209 = ( temp_output_30_0_g170209 + temp_output_29_0_g170209 + temp_output_31_0_g170209 + ( inputMesh.ase_color.a * break33_g170209.w ) );
				float3 break243_g170196 = PivotWO133_g170196;
				float4 appendResult177_g170196 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g170209 + ( break243_g170196.x + break243_g170196.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_MotionData16_g170211 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170211 = BoundsData254_g170196;
				float4 In_RotationData16_g170211 = float4( 0,0,0,0 );
				{
				Data16_g170211.Dummy = In_Dummy16_g170211;
				Data16_g170211.PositionOS = In_PositionOS16_g170211;
				Data16_g170211.PositionWS = In_PositionWS16_g170211;
				Data16_g170211.PositionWO = In_PositionWO16_g170211;
				Data16_g170211.PositionRawOS = In_PositionRawOS16_g170211;
				Data16_g170211.PositionAddOS = In_PositionAddOS16_g170211;
				Data16_g170211.PivotOS = In_PivotOS16_g170211;
				Data16_g170211.PivotWS = In_PivotWS16_g170211;
				Data16_g170211.PivotWO = In_PivotWO16_g170211;
				Data16_g170211.NormalOS = In_NormalOS16_g170211;
				Data16_g170211.NormalWS = In_NormalWS16_g170211;
				Data16_g170211.NormalRawOS = In_NormalRawOS16_g170211;
				Data16_g170211.NormalRawWS = In_NormalRawWS16_g170211;
				Data16_g170211.TangentOS = In_TangentOS16_g170211;
				Data16_g170211.ViewDirWS = In_ViewDirWS16_g170211;
				Data16_g170211.VertexData = In_VertexData16_g170211;
				Data16_g170211.MotionData = In_MotionData16_g170211;
				Data16_g170211.BoundsData = In_BoundsData16_g170211;
				Data16_g170211.RotationData = In_RotationData16_g170211;
				}
				TVEModelData Data15_g170371 = Data16_g170211;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_MotionData15_g170371 = Data15_g170371.MotionData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_MotionData16_g170370 = Out_MotionData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.MotionData = In_MotionData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_worldViewDir = ( _WorldSpaceCameraPos.xyz - ase_worldPos );
				ase_worldViewDir = SafeNormalize( ase_worldViewDir );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_worldViewDir , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_MotionData16_g170393 = Out_MotionData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.MotionData = In_MotionData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170430 = Data16_g170393;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				}
				half3 Model_PositionOS147_g170428 = Out_PositionOS15_g170430;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170428 = Out_PivotWO15_g170430;
				half3 Model_PivotWO162_g170428 = temp_output_210_19_g170428;
				float temp_output_7_0_g170429 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170429 = ( _SizeFadeDistMinValue - temp_output_7_0_g170429 );
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170432 = Data204_g170212;
				float Out_Dummy15_g170432 = 0;
				float4 Out_CoatParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170432 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_CoatParams15_g170432 = Data15_g170432.CoatParams;
				Out_PaintParams15_g170432 = Data15_g170432.PaintParams;
				Out_GlowParams15_g170432 = Data15_g170432.GlowParams;
				Out_AtmoParams15_g170432= Data15_g170432.AtmoParams;
				Out_FadeParams15_g170432= Data15_g170432.FadeParams;
				Out_FormParams15_g170432 = Data15_g170432.FormParams;
				Out_LandParams15_g170432 = Data15_g170432.LandParams;
				Out_WindParams15_g170432 = Data15_g170432.WindParams;
				Out_PushParams15_g170432 = Data15_g170432.PushParams;
				}
				half4 Input_FormParams188_g170428 = Out_FormParams15_g170432;
				float lerpResult213_g170428 = lerp( 1.0 , (Input_FormParams188_g170428).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170428 = lerpResult213_g170428;
				#else
				float staticSwitch194_g170428 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170428 = staticSwitch194_g170428;
				float temp_output_189_0_g170428 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170428 ) - temp_output_7_0_g170429 ) / ( temp_output_10_0_g170429 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170428 );
				float3 appendResult200_g170428 = (float3(temp_output_189_0_g170428 , temp_output_189_0_g170428 , temp_output_189_0_g170428));
				float3 appendResult201_g170428 = (float3(1.0 , temp_output_189_0_g170428 , 1.0));
				float3 lerpResult202_g170428 = lerp( appendResult200_g170428 , appendResult201_g170428 , _SizeFadeScaleMode);
				float3 lerpResult184_g170428 = lerp( temp_cast_5 , lerpResult202_g170428 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170428 = ( lerpResult184_g170428 * Model_PositionOS147_g170428 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170428 = temp_output_167_0_g170428;
				#else
				float3 staticSwitch199_g170428 = Model_PositionOS147_g170428;
				#endif
				half3 Final_Position178_g170428 = staticSwitch199_g170428;
				float3 In_PositionOS16_g170431 = Final_Position178_g170428;
				float3 In_PositionWS16_g170431 = Out_PositionWS15_g170430;
				float3 In_PositionWO16_g170431 = Out_PositionWO15_g170430;
				float3 In_PositionRawOS16_g170431 = Out_PositionRawOS15_g170430;
				float3 In_PositionAddOS16_g170431 = Out_PositionAddOS15_g170430;
				float3 temp_output_210_24_g170428 = Out_PivotOS15_g170430;
				float3 In_PivotOS16_g170431 = temp_output_210_24_g170428;
				float3 In_PivotWS16_g170431 = Out_PivotWS15_g170430;
				float3 In_PivotWO16_g170431 = temp_output_210_19_g170428;
				float3 In_NormalOS16_g170431 = Out_NormalOS15_g170430;
				float3 In_NormalWS16_g170431 = Out_NormalWS15_g170430;
				float3 In_NormalRawOS16_g170431 = Out_NormalRawOS15_g170430;
				float3 In_NormalRawWS16_g170431 = Out_NormalRawWS15_g170430;
				float4 In_TangentOS16_g170431 = Out_TangentOS15_g170430;
				float3 In_ViewDirWS16_g170431 = Out_ViewDirWS15_g170430;
				float4 In_VertexData16_g170431 = Out_VertexData15_g170430;
				float4 In_MotionData16_g170431 = Out_MotionData15_g170430;
				float4 In_BoundsData16_g170431 = Out_BoundsData15_g170430;
				float4 In_RotationData16_g170431 = Out_RotationData15_g170430;
				{
				Data16_g170431.Dummy = In_Dummy16_g170431;
				Data16_g170431.PositionOS = In_PositionOS16_g170431;
				Data16_g170431.PositionWS = In_PositionWS16_g170431;
				Data16_g170431.PositionWO = In_PositionWO16_g170431;
				Data16_g170431.PositionRawOS = In_PositionRawOS16_g170431;
				Data16_g170431.PositionAddOS = In_PositionAddOS16_g170431;
				Data16_g170431.PivotOS = In_PivotOS16_g170431;
				Data16_g170431.PivotWS = In_PivotWS16_g170431;
				Data16_g170431.PivotWO = In_PivotWO16_g170431;
				Data16_g170431.NormalOS = In_NormalOS16_g170431;
				Data16_g170431.NormalWS = In_NormalWS16_g170431;
				Data16_g170431.NormalRawOS = In_NormalRawOS16_g170431;
				Data16_g170431.NormalRawWS = In_NormalRawWS16_g170431;
				Data16_g170431.TangentOS = In_TangentOS16_g170431;
				Data16_g170431.ViewDirWS = In_ViewDirWS16_g170431;
				Data16_g170431.VertexData = In_VertexData16_g170431;
				Data16_g170431.MotionData = In_MotionData16_g170431;
				Data16_g170431.BoundsData = In_BoundsData16_g170431;
				Data16_g170431.RotationData = In_RotationData16_g170431;
				}
				TVEModelData Data15_g170479 = Data16_g170431;
				float Out_Dummy15_g170479 = 0;
				float3 Out_PositionOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170479 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170479 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170479 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170479 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170479 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170479 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170479 = float3( 0,0,0 );
				float4 Out_VertexData15_g170479 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170479 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170479 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170479 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170479 = Data15_g170479.Dummy;
				Out_PositionOS15_g170479 = Data15_g170479.PositionOS;
				Out_PositionWS15_g170479 = Data15_g170479.PositionWS;
				Out_PositionWO15_g170479 = Data15_g170479.PositionWO;
				Out_PositionRawOS15_g170479 = Data15_g170479.PositionRawOS;
				Out_PositionAddOS15_g170479 = Data15_g170479.PositionAddOS;
				Out_PivotOS15_g170479 = Data15_g170479.PivotOS;
				Out_PivotWS15_g170479 = Data15_g170479.PivotWS;
				Out_PivotWO15_g170479 = Data15_g170479.PivotWO;
				Out_NormalOS15_g170479 = Data15_g170479.NormalOS;
				Out_NormalWS15_g170479 = Data15_g170479.NormalWS;
				Out_NormalRawOS15_g170479 = Data15_g170479.NormalRawOS;
				Out_NormalRawWS15_g170479 = Data15_g170479.NormalRawWS;
				Out_TangentOS15_g170479 = Data15_g170479.TangentOS;
				Out_ViewDirWS15_g170479 = Data15_g170479.ViewDirWS;
				Out_VertexData15_g170479 = Data15_g170479.VertexData;
				Out_MotionData15_g170479 = Data15_g170479.MotionData;
				Out_BoundsData15_g170479 = Data15_g170479.BoundsData;
				Out_RotationData15_g170479 = Data15_g170479.RotationData;
				}
				float3 temp_output_1567_0_g170467 = Out_PositionOS15_g170479;
				float3 In_PositionOS16_g170483 = temp_output_1567_0_g170467;
				float3 temp_output_1567_16_g170467 = Out_PositionWS15_g170479;
				float3 In_PositionWS16_g170483 = temp_output_1567_16_g170467;
				float3 temp_output_1567_17_g170467 = Out_PositionWO15_g170479;
				float3 In_PositionWO16_g170483 = temp_output_1567_17_g170467;
				float3 In_PositionRawOS16_g170483 = Out_PositionRawOS15_g170479;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170467 = Out_VertexData15_g170479;
				half4 Model_VertexMasks518_g170467 = temp_output_1567_29_g170467;
				float4 break1689_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170481 = _motion_small_vert_mode;
				float temp_output_30_0_g170481 = ( break1689_g170467.x * break33_g170481.x );
				float temp_output_29_0_g170481 = ( break1689_g170467.y * break33_g170481.y );
				float temp_output_31_0_g170481 = ( break1689_g170467.z * break33_g170481.z );
				float temp_output_28_0_g170481 = ( temp_output_30_0_g170481 + temp_output_29_0_g170481 + temp_output_31_0_g170481 + ( break1689_g170467.w * break33_g170481.w ) );
				float temp_output_1727_0_g170467 = temp_output_28_0_g170481;
				float4 temp_output_1567_30_g170467 = Out_BoundsData15_g170479;
				half4 Model_BoundsData1322_g170467 = temp_output_1567_30_g170467;
				float4 break33_g170484 = _motion_small_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170467).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170467).w * break33_g170484.y );
				float temp_output_1734_0_g170467 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1906_g170467 = lerp( temp_output_1727_0_g170467 , temp_output_1734_0_g170467 , _motion_small_mask_mode);
				float enc1805_g170467 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170467 = DecodeFloatToVector2( enc1805_g170467 );
				float2 break1804_g170467 = localDecodeFloatToVector21805_g170467;
				half Small_Mask_Legacy1806_g170467 = break1804_g170467.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170467 = Small_Mask_Legacy1806_g170467;
				#else
				float staticSwitch1800_g170467 = lerpResult1906_g170467;
				#endif
				float clampResult17_g170486 = clamp( staticSwitch1800_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170487 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170487 );
				float temp_output_6_0_g170488 = saturate( ( ( clampResult17_g170486 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170488 = ( temp_output_6_0_g170488 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170488 = temp_output_6_0_g170488;
				#endif
				half Small_Mask640_g170467 = staticSwitch14_g170488;
				half3 Model_PositionOS147_g170467 = temp_output_1567_0_g170467;
				float3 normalizeResult1832_g170467 = normalize( Model_PositionOS147_g170467 );
				float4 lerpResult627_g170521 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170521 = (lerpResult627_g170521).xy;
				half3 Model_PositionWO162_g170467 = temp_output_1567_17_g170467;
				float3 temp_output_1567_19_g170467 = Out_PivotWO15_g170479;
				half3 Model_PivotWO402_g170467 = temp_output_1567_19_g170467;
				float3 lerpResult829_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170467 = Out_MotionData15_g170479;
				half4 Model_MotionMasks489_g170467 = temp_output_1567_27_g170467;
				half3 Base_Position1394_g170467 = ( lerpResult829_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170521 = Base_Position1394_g170467;
				half Flow_Tillling1397_g170467 = _MotionTillingValue;
				half Input_MotionTilling321_g170521 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170521 = ( -(Input_PositionWO419_g170521).xz * Input_MotionTilling321_g170521 * 0.005 );
				float2 temp_output_3_0_g170534 = Noise_Coord515_g170521;
				float2 temp_output_606_0_g170521 = (Global_WindDirection593_g170521*2.0 + -1.0);
				float2 temp_output_21_0_g170534 = temp_output_606_0_g170521;
				float lerpResult128_g170522 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170467 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170521 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170521 = ( lerpResult128_g170522 * Input_MotionSpeed62_g170521 );
				half Noise_Speed516_g170521 = ( temp_output_505_0_g170521 * 0.02 );
				float temp_output_15_0_g170534 = Noise_Speed516_g170521;
				float temp_output_23_0_g170534 = frac( temp_output_15_0_g170534 );
				float4 lerpResult39_g170534 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * temp_output_23_0_g170534 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170534 + ( temp_output_21_0_g170534 * frac( ( temp_output_15_0_g170534 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170534 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170521 = lerpResult39_g170534;
				half Flow_Noise1843_g170467 = _MotionNoiseValue;
				half Input_MotionNoise552_g170521 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170521 = lerp( Global_WindDirection593_g170521 , (Noise_Params535_g170521).rg , Input_MotionNoise552_g170521);
				half Global_WindIntensity576_g170521 = (lerpResult627_g170521).z;
				half Flow_Value1855_g170467 = _MotionIntensityValue;
				half Input_MotionValue629_g170521 = Flow_Value1855_g170467;
				float2 lerpResult574_g170521 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170521 , ( Global_WindIntensity576_g170521 * Input_MotionValue629_g170521 ));
				float3 appendResult566_g170521 = (float3(lerpResult574_g170521 , (Noise_Params535_g170521).b));
				float temp_output_136_0_g170523 = _global_wind_layer_value;
				float temp_output_19_0_g170525 = TVE_WindLayers[(int)temp_output_136_0_g170523];
				half3 Input_Position180_g170526 = Input_PositionWO419_g170521;
				float2 temp_output_75_0_g170526 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_82_0_g170526 = temp_output_136_0_g170523;
				float2 temp_output_119_0_g170526 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170526).xz ) );
				float temp_output_7_0_g170531 = 1.0;
				float temp_output_10_0_g170531 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170531 );
				float4 lerpResult131_g170526 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170526,temp_output_82_0_g170526, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170526,temp_output_82_0_g170526, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170526 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170531 ) / temp_output_10_0_g170531 ) ));
				float4 temp_output_17_0_g170525 = lerpResult131_g170526;
				float4 temp_output_3_0_g170525 = TVE_WindParams;
				float4 ifLocalVar18_g170525 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170525 >= 0.5 )
				ifLocalVar18_g170525 = temp_output_17_0_g170525;
				else
				ifLocalVar18_g170525 = temp_output_3_0_g170525;
				float4 lerpResult22_g170525 = lerp( temp_output_3_0_g170525 , temp_output_17_0_g170525 , temp_output_19_0_g170525);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170525 = lerpResult22_g170525;
				#else
				float4 staticSwitch24_g170525 = ifLocalVar18_g170525;
				#endif
				float4 temp_output_610_0_g170521 = staticSwitch24_g170525;
				float3 lerpResult623_g170521 = lerp( appendResult566_g170521 , (temp_output_610_0_g170521).rgb , (temp_output_610_0_g170521).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170521 = lerpResult623_g170521;
				#else
				float3 staticSwitch612_g170521 = appendResult566_g170521;
				#endif
				float3 temp_output_1902_567_g170467 = staticSwitch612_g170521;
				float2 temp_output_1403_0_g170467 = (temp_output_1902_567_g170467).xy;
				float temp_output_136_0_g170468 = _global_push_layer_value;
				float temp_output_19_0_g170469 = TVE_PushLayers[(int)temp_output_136_0_g170468];
				float3 lerpResult1547_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170467 = ( lerpResult1547_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170470 = Bend_Position1549_g170467;
				float2 temp_output_75_0_g170470 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_82_0_g170470 = temp_output_136_0_g170468;
				float2 temp_output_119_0_g170470 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170470).xz ) );
				float temp_output_7_0_g170475 = 1.0;
				float temp_output_10_0_g170475 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170475 );
				float4 lerpResult131_g170470 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170470,temp_output_82_0_g170470, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170470,temp_output_82_0_g170470, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170470 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170475 ) / temp_output_10_0_g170475 ) ));
				float4 temp_output_17_0_g170469 = lerpResult131_g170470;
				float4 temp_output_3_0_g170469 = TVE_PushParams;
				float4 ifLocalVar18_g170469 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170469 >= 0.5 )
				ifLocalVar18_g170469 = temp_output_17_0_g170469;
				else
				ifLocalVar18_g170469 = temp_output_3_0_g170469;
				float4 lerpResult22_g170469 = lerp( temp_output_3_0_g170469 , temp_output_17_0_g170469 , temp_output_19_0_g170469);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170469 = lerpResult22_g170469;
				#else
				float4 staticSwitch24_g170469 = ifLocalVar18_g170469;
				#endif
				half4 Global_BendParams214_g170467 = staticSwitch24_g170469;
				half Bend_Intensity1501_g170467 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170467 = saturate( ( (Global_BendParams214_g170467).a * Bend_Intensity1501_g170467 ) );
				#else
				float staticSwitch1527_g170467 = 0.0;
				#endif
				half Bend_Influence1504_g170467 = staticSwitch1527_g170467;
				float2 lerpResult1507_g170467 = lerp( temp_output_1403_0_g170467 , (Global_BendParams214_g170467).rg , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170467 = lerpResult1507_g170467;
				#else
				float2 staticSwitch1506_g170467 = temp_output_1403_0_g170467;
				#endif
				float2 break83_g170477 = (staticSwitch1506_g170467*2.0 + -1.0);
				float3 appendResult79_g170477 = (float3(break83_g170477.x , 0.0 , break83_g170477.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170477 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170506 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170506 = (lerpResult627_g170506).xy;
				float3 lerpResult1411_g170467 = lerp( Model_PositionWO162_g170467 , Model_PivotWO402_g170467 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170467 = ( lerpResult1411_g170467 + ( (Model_MotionMasks489_g170467).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170506 = Small_Position1421_g170467;
				half Input_MotionTilling321_g170506 = ( Flow_Tillling1397_g170467 + 0.2 );
				half2 Noise_Coord515_g170506 = ( -(Input_PositionWO419_g170506).xz * Input_MotionTilling321_g170506 * 0.005 );
				float2 temp_output_3_0_g170519 = Noise_Coord515_g170506;
				float2 temp_output_606_0_g170506 = (Global_WindDirection593_g170506*2.0 + -1.0);
				float2 temp_output_21_0_g170519 = temp_output_606_0_g170506;
				float lerpResult128_g170507 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = Flow_Speed1398_g170467;
				float temp_output_505_0_g170506 = ( lerpResult128_g170507 * Input_MotionSpeed62_g170506 );
				half Noise_Speed516_g170506 = ( temp_output_505_0_g170506 * 0.02 );
				float temp_output_15_0_g170519 = Noise_Speed516_g170506;
				float temp_output_23_0_g170519 = frac( temp_output_15_0_g170519 );
				float4 lerpResult39_g170519 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * temp_output_23_0_g170519 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170519 + ( temp_output_21_0_g170519 * frac( ( temp_output_15_0_g170519 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170519 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170506 = lerpResult39_g170519;
				half Input_MotionNoise552_g170506 = Flow_Noise1843_g170467;
				float2 lerpResult560_g170506 = lerp( Global_WindDirection593_g170506 , (Noise_Params535_g170506).rg , Input_MotionNoise552_g170506);
				half Global_WindIntensity576_g170506 = (lerpResult627_g170506).z;
				half Input_MotionValue629_g170506 = Flow_Value1855_g170467;
				float2 lerpResult574_g170506 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170506 , ( Global_WindIntensity576_g170506 * Input_MotionValue629_g170506 ));
				float3 appendResult566_g170506 = (float3(lerpResult574_g170506 , (Noise_Params535_g170506).b));
				float temp_output_136_0_g170508 = _global_wind_layer_value;
				float temp_output_19_0_g170510 = TVE_WindLayers[(int)temp_output_136_0_g170508];
				half3 Input_Position180_g170511 = Input_PositionWO419_g170506;
				float2 temp_output_75_0_g170511 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_82_0_g170511 = temp_output_136_0_g170508;
				float2 temp_output_119_0_g170511 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170511).xz ) );
				float temp_output_7_0_g170516 = 1.0;
				float temp_output_10_0_g170516 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170516 );
				float4 lerpResult131_g170511 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170511,temp_output_82_0_g170511, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170511,temp_output_82_0_g170511, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170511 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170516 ) / temp_output_10_0_g170516 ) ));
				float4 temp_output_17_0_g170510 = lerpResult131_g170511;
				float4 temp_output_3_0_g170510 = TVE_WindParams;
				float4 ifLocalVar18_g170510 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170510 >= 0.5 )
				ifLocalVar18_g170510 = temp_output_17_0_g170510;
				else
				ifLocalVar18_g170510 = temp_output_3_0_g170510;
				float4 lerpResult22_g170510 = lerp( temp_output_3_0_g170510 , temp_output_17_0_g170510 , temp_output_19_0_g170510);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170510 = lerpResult22_g170510;
				#else
				float4 staticSwitch24_g170510 = ifLocalVar18_g170510;
				#endif
				float4 temp_output_610_0_g170506 = staticSwitch24_g170510;
				float3 lerpResult623_g170506 = lerp( appendResult566_g170506 , (temp_output_610_0_g170506).rgb , (temp_output_610_0_g170506).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170506 = lerpResult623_g170506;
				#else
				float3 staticSwitch612_g170506 = appendResult566_g170506;
				#endif
				float3 temp_output_1901_567_g170467 = staticSwitch612_g170506;
				float2 break83_g170478 = ((temp_output_1901_567_g170467).xy*2.0 + -1.0);
				float3 appendResult79_g170478 = (float3(break83_g170478.x , 0.0 , break83_g170478.y));
				half2 Small_Direction1489_g170467 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170478 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170467 = Small_Direction1489_g170467;
				#else
				float2 staticSwitch1485_g170467 = Base_Direction893_g170467;
				#endif
				half2 Wind_Direction1486_g170467 = staticSwitch1485_g170467;
				float2 break1828_g170467 = -Wind_Direction1486_g170467;
				float3 appendResult1830_g170467 = (float3(break1828_g170467.x , 0.0 , break1828_g170467.y));
				float dotResult1831_g170467 = dot( normalizeResult1832_g170467 , appendResult1830_g170467 );
				float lerpResult1826_g170467 = lerp( 1.0 , (dotResult1831_g170467*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170467 = lerpResult1826_g170467;
				float2 break1433_g170467 = Small_Direction1489_g170467;
				float3 appendResult1434_g170467 = (float3(break1433_g170467.x , length( Small_Direction1489_g170467 ) , break1433_g170467.y));
				half Small_Noise1427_g170467 = abs( (temp_output_1901_567_g170467).z );
				float3 appendResult1786_g170467 = (float3(Small_Noise1427_g170467 , (Small_Noise1427_g170467*0.4 + -0.2) , Small_Noise1427_g170467));
				half3 Small_Squash789_g170467 = ( _MotionSmallIntensityValue * Small_Mask640_g170467 * Motion_FrontMask1142_g170467 * appendResult1434_g170467 * appendResult1786_g170467 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170467 = Small_Squash789_g170467;
				#else
				float3 staticSwitch495_g170467 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170482 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170482 = ( break1710_g170467.x * break33_g170482.x );
				float temp_output_29_0_g170482 = ( break1710_g170467.y * break33_g170482.y );
				float temp_output_31_0_g170482 = ( break1710_g170467.z * break33_g170482.z );
				float temp_output_28_0_g170482 = ( temp_output_30_0_g170482 + temp_output_29_0_g170482 + temp_output_31_0_g170482 + ( break1710_g170467.w * break33_g170482.w ) );
				float temp_output_1729_0_g170467 = temp_output_28_0_g170482;
				float4 break33_g170485 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170485 = ( (Model_BoundsData1322_g170467).z * break33_g170485.x );
				float temp_output_29_0_g170485 = ( (Model_BoundsData1322_g170467).w * break33_g170485.y );
				float temp_output_1735_0_g170467 = ( temp_output_30_0_g170485 + temp_output_29_0_g170485 );
				float lerpResult1908_g170467 = lerp( temp_output_1729_0_g170467 , temp_output_1735_0_g170467 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170467 = break1804_g170467.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170467 = Tiny_Mask_Legacy1807_g170467;
				#else
				float staticSwitch1810_g170467 = lerpResult1908_g170467;
				#endif
				float clampResult17_g170489 = clamp( staticSwitch1810_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170490 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170490 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170490 );
				float temp_output_6_0_g170491 = saturate( ( ( clampResult17_g170489 - temp_output_7_0_g170490 ) / ( temp_output_10_0_g170490 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170491 = ( temp_output_6_0_g170491 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170491 = temp_output_6_0_g170491;
				#endif
				half Tiny_Mask218_g170467 = staticSwitch14_g170491;
				half3 Input_Position500_g170492 = Model_PositionWO162_g170467;
				half Input_MotionTilling321_g170492 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170492 = 0.0;
				float lerpResult128_g170494 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170492 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170492 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170492).xz * Input_MotionTilling321_g170492 * 0.03 ) + Input_MotionPhase330_g170492 + ( lerpResult128_g170494 * Input_MotionSpeed62_g170492 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170492 = (float3(tex2DNode460_g170492.r , tex2DNode460_g170492.g , tex2DNode460_g170492.b));
				half3 Flutter_Texture489_g170492 = (appendResult462_g170492*2.0 + -1.0);
				half3 Tiny_Direction859_g170467 = Flutter_Texture489_g170492;
				half Base_Noise1159_g170467 = abs( (temp_output_1902_567_g170467).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170467 = Small_Noise1427_g170467;
				#else
				float staticSwitch1453_g170467 = Base_Noise1159_g170467;
				#endif
				half Wind_Noise1475_g170467 = staticSwitch1453_g170467;
				half3 Model_PositionWS1819_g170467 = temp_output_1567_16_g170467;
				half Motion_FadeMask1820_g170467 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170467 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170467 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170467 * Tiny_Direction859_g170467 * length( Wind_Direction1486_g170467 ) * Wind_Noise1475_g170467 * Motion_FrontMask1142_g170467 * Motion_FadeMask1820_g170467 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170467 = Tiny_Flutter1451_g170467;
				#else
				float3 staticSwitch414_g170467 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170467 = ( staticSwitch495_g170467 + staticSwitch414_g170467 );
				float3 In_PositionAddOS16_g170483 = Final_PositionADD1569_g170467;
				float3 temp_output_1567_24_g170467 = Out_PivotOS15_g170479;
				float3 In_PivotOS16_g170483 = temp_output_1567_24_g170467;
				float3 In_PivotWS16_g170483 = Out_PivotWS15_g170479;
				float3 In_PivotWO16_g170483 = temp_output_1567_19_g170467;
				float3 temp_output_1567_20_g170467 = Out_NormalOS15_g170479;
				float3 In_NormalOS16_g170483 = temp_output_1567_20_g170467;
				float3 In_NormalWS16_g170483 = Out_NormalWS15_g170479;
				float3 In_NormalRawOS16_g170483 = Out_NormalRawOS15_g170479;
				float3 In_NormalRawWS16_g170483 = Out_NormalRawWS15_g170479;
				float4 In_TangentOS16_g170483 = Out_TangentOS15_g170479;
				float3 In_ViewDirWS16_g170483 = Out_ViewDirWS15_g170479;
				float4 In_VertexData16_g170483 = temp_output_1567_29_g170467;
				float4 In_MotionData16_g170483 = temp_output_1567_27_g170467;
				float4 In_BoundsData16_g170483 = temp_output_1567_30_g170467;
				half Base_Intensity1883_g170467 = _MotionBaseIntensityValue;
				float4 break748_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170499 = _motion_base_vert_mode;
				float temp_output_30_0_g170499 = ( break748_g170467.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break748_g170467.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break748_g170467.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break748_g170467.w * break33_g170499.w ) );
				float temp_output_1731_0_g170467 = temp_output_28_0_g170499;
				float4 break33_g170500 = _motion_base_proc_mode;
				float temp_output_30_0_g170500 = ( (Model_BoundsData1322_g170467).z * break33_g170500.x );
				float temp_output_29_0_g170500 = ( (Model_BoundsData1322_g170467).w * break33_g170500.y );
				float temp_output_1733_0_g170467 = ( temp_output_30_0_g170500 + temp_output_29_0_g170500 );
				float lerpResult1904_g170467 = lerp( temp_output_1731_0_g170467 , temp_output_1733_0_g170467 , _motion_base_mask_mode);
				float clampResult17_g170496 = clamp( lerpResult1904_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170497 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170497 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170497 );
				float temp_output_6_0_g170498 = saturate( ( ( clampResult17_g170496 - temp_output_7_0_g170497 ) / ( temp_output_10_0_g170497 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Base_Mask217_g170467 = staticSwitch14_g170498;
				float lerpResult1768_g170467 = lerp( (Base_Noise1159_g170467*2.0 + -1.0) , Base_Noise1159_g170467 , length( Base_Direction893_g170467 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170467 = ( Base_Intensity1883_g170467 * Base_Mask217_g170467 * lerpResult1768_g170467 );
				#else
				float staticSwitch1573_g170467 = 0.0;
				#endif
				float4 break1864_g170467 = Model_VertexMasks518_g170467;
				float4 break33_g170504 = _motion_push_vert_mode;
				float temp_output_30_0_g170504 = ( break1864_g170467.x * break33_g170504.x );
				float temp_output_29_0_g170504 = ( break1864_g170467.y * break33_g170504.y );
				float temp_output_31_0_g170504 = ( break1864_g170467.z * break33_g170504.z );
				float temp_output_28_0_g170504 = ( temp_output_30_0_g170504 + temp_output_29_0_g170504 + temp_output_31_0_g170504 + ( break1864_g170467.w * break33_g170504.w ) );
				float temp_output_1867_0_g170467 = temp_output_28_0_g170504;
				float4 break33_g170505 = _motion_push_proc_mode;
				float temp_output_30_0_g170505 = ( (Model_BoundsData1322_g170467).z * break33_g170505.x );
				float temp_output_29_0_g170505 = ( (Model_BoundsData1322_g170467).w * break33_g170505.y );
				float temp_output_1868_0_g170467 = ( temp_output_30_0_g170505 + temp_output_29_0_g170505 );
				float lerpResult1910_g170467 = lerp( temp_output_1867_0_g170467 , temp_output_1868_0_g170467 , _motion_push_mask_mode);
				float clampResult17_g170502 = clamp( lerpResult1910_g170467 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170503 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170503 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170503 );
				float temp_output_6_0_g170536 = saturate( ( ( clampResult17_g170502 - temp_output_7_0_g170503 ) / ( temp_output_10_0_g170503 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170536 = ( temp_output_6_0_g170536 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170536 = temp_output_6_0_g170536;
				#endif
				half Push_Mask1877_g170467 = staticSwitch14_g170536;
				float lerpResult1496_g170467 = lerp( staticSwitch1573_g170467 , ( Bend_Intensity1501_g170467 * Push_Mask1877_g170467 ) , Bend_Influence1504_g170467);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170467 = lerpResult1496_g170467;
				#else
				float staticSwitch1517_g170467 = staticSwitch1573_g170467;
				#endif
				half2 Base_Bending1440_g170467 = ( staticSwitch1517_g170467 * Base_Direction893_g170467 );
				half2 Final_VertexBend1570_g170467 = Base_Bending1440_g170467;
				float4 In_RotationData16_g170483 = float4( Final_VertexBend1570_g170467, 0.0 , 0.0 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionOS = In_PositionOS16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PositionRawOS = In_PositionRawOS16_g170483;
				Data16_g170483.PositionAddOS = In_PositionAddOS16_g170483;
				Data16_g170483.PivotOS = In_PivotOS16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalOS = In_NormalOS16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.NormalRawOS = In_NormalRawOS16_g170483;
				Data16_g170483.NormalRawWS = In_NormalRawWS16_g170483;
				Data16_g170483.TangentOS = In_TangentOS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.MotionData = In_MotionData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				Data16_g170483.RotationData = In_RotationData16_g170483;
				}
				TVEModelData Data15_g170696 = Data16_g170483;
				float Out_Dummy15_g170696 = 0;
				float3 Out_PositionOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170696 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170696 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170696 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170696 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170696 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170696 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170696 = float3( 0,0,0 );
				float4 Out_VertexData15_g170696 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170696 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170696 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_PositionOS15_g170696 = Data15_g170696.PositionOS;
				Out_PositionWS15_g170696 = Data15_g170696.PositionWS;
				Out_PositionWO15_g170696 = Data15_g170696.PositionWO;
				Out_PositionRawOS15_g170696 = Data15_g170696.PositionRawOS;
				Out_PositionAddOS15_g170696 = Data15_g170696.PositionAddOS;
				Out_PivotOS15_g170696 = Data15_g170696.PivotOS;
				Out_PivotWS15_g170696 = Data15_g170696.PivotWS;
				Out_PivotWO15_g170696 = Data15_g170696.PivotWO;
				Out_NormalOS15_g170696 = Data15_g170696.NormalOS;
				Out_NormalWS15_g170696 = Data15_g170696.NormalWS;
				Out_NormalRawOS15_g170696 = Data15_g170696.NormalRawOS;
				Out_NormalRawWS15_g170696 = Data15_g170696.NormalRawWS;
				Out_TangentOS15_g170696 = Data15_g170696.TangentOS;
				Out_ViewDirWS15_g170696 = Data15_g170696.ViewDirWS;
				Out_VertexData15_g170696 = Data15_g170696.VertexData;
				Out_MotionData15_g170696 = Data15_g170696.MotionData;
				Out_BoundsData15_g170696 = Data15_g170696.BoundsData;
				Out_RotationData15_g170696 = Data15_g170696.RotationData;
				}
				half3 Model_PositionOS147_g170695 = Out_PositionOS15_g170696;
				half3 Input_False58_g170701 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170698 = Model_PositionOS147_g170695;
				half3 VertexPos40_g170699 = VertexPos40_g170698;
				float3 appendResult74_g170699 = (float3(VertexPos40_g170699.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170699 = appendResult74_g170699;
				float3 break84_g170699 = VertexPos40_g170699;
				float3 appendResult81_g170699 = (float3(0.0 , break84_g170699.y , break84_g170699.z));
				half3 VertexPosOtherAxis82_g170699 = appendResult81_g170699;
				float4 temp_output_1567_33_g170695 = Out_RotationData15_g170696;
				half4 Model_VertexBend1569_g170695 = temp_output_1567_33_g170695;
				half2 Angle44_g170698 = (Model_VertexBend1569_g170695).xy;
				half Angle44_g170699 = (Angle44_g170698).y;
				half3 VertexPos40_g170700 = ( VertexPosRotationAxis50_g170699 + ( VertexPosOtherAxis82_g170699 * cos( Angle44_g170699 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170699 ) * sin( Angle44_g170699 ) ) );
				float3 appendResult74_g170700 = (float3(0.0 , 0.0 , VertexPos40_g170700.z));
				half3 VertexPosRotationAxis50_g170700 = appendResult74_g170700;
				float3 break84_g170700 = VertexPos40_g170700;
				float3 appendResult81_g170700 = (float3(break84_g170700.x , break84_g170700.y , 0.0));
				half3 VertexPosOtherAxis82_g170700 = appendResult81_g170700;
				half Angle44_g170700 = -(Angle44_g170698).x;
				half3 Input_True57_g170701 = ( VertexPosRotationAxis50_g170700 + ( VertexPosOtherAxis82_g170700 * cos( Angle44_g170700 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170700 ) * sin( Angle44_g170700 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch65_g170701 = Input_False58_g170701;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch67_g170701 = staticSwitch65_g170701;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170701 = Input_True57_g170701;
				#else
				float3 staticSwitch69_g170701 = staticSwitch67_g170701;
				#endif
				float3 temp_output_1567_31_g170695 = Out_PositionAddOS15_g170696;
				half3 Model_PositionADD1568_g170695 = temp_output_1567_31_g170695;
				half3 Final_PositionOS178_g170695 = ( staticSwitch69_g170701 + Model_PositionADD1568_g170695 );
				float3 In_PositionOS16_g170697 = Final_PositionOS178_g170695;
				float3 In_PositionWS16_g170697 = Out_PositionWS15_g170696;
				float3 In_PositionWO16_g170697 = Out_PositionWO15_g170696;
				float3 In_PositionRawOS16_g170697 = Out_PositionRawOS15_g170696;
				float3 In_PositionAddOS16_g170697 = temp_output_1567_31_g170695;
				float3 In_PivotOS16_g170697 = Out_PivotOS15_g170696;
				float3 In_PivotWS16_g170697 = Out_PivotWS15_g170696;
				float3 In_PivotWO16_g170697 = Out_PivotWO15_g170696;
				float3 In_NormalOS16_g170697 = Out_NormalOS15_g170696;
				float3 In_NormalWS16_g170697 = Out_NormalWS15_g170696;
				float3 In_NormalRawOS16_g170697 = Out_NormalRawOS15_g170696;
				float3 In_NormalRawWS16_g170697 = Out_NormalRawWS15_g170696;
				float4 In_TangentOS16_g170697 = Out_TangentOS15_g170696;
				float3 In_ViewDirWS16_g170697 = Out_ViewDirWS15_g170696;
				float4 In_VertexData16_g170697 = Out_VertexData15_g170696;
				float4 In_MotionData16_g170697 = Out_MotionData15_g170696;
				float4 In_BoundsData16_g170697 = Out_BoundsData15_g170696;
				float4 In_RotationData16_g170697 = temp_output_1567_33_g170695;
				{
				Data16_g170697.Dummy = In_Dummy16_g170697;
				Data16_g170697.PositionOS = In_PositionOS16_g170697;
				Data16_g170697.PositionWS = In_PositionWS16_g170697;
				Data16_g170697.PositionWO = In_PositionWO16_g170697;
				Data16_g170697.PositionRawOS = In_PositionRawOS16_g170697;
				Data16_g170697.PositionAddOS = In_PositionAddOS16_g170697;
				Data16_g170697.PivotOS = In_PivotOS16_g170697;
				Data16_g170697.PivotWS = In_PivotWS16_g170697;
				Data16_g170697.PivotWO = In_PivotWO16_g170697;
				Data16_g170697.NormalOS = In_NormalOS16_g170697;
				Data16_g170697.NormalWS = In_NormalWS16_g170697;
				Data16_g170697.NormalRawOS = In_NormalRawOS16_g170697;
				Data16_g170697.NormalRawWS = In_NormalRawWS16_g170697;
				Data16_g170697.TangentOS = In_TangentOS16_g170697;
				Data16_g170697.ViewDirWS = In_ViewDirWS16_g170697;
				Data16_g170697.VertexData = In_VertexData16_g170697;
				Data16_g170697.MotionData = In_MotionData16_g170697;
				Data16_g170697.BoundsData = In_BoundsData16_g170697;
				Data16_g170697.RotationData = In_RotationData16_g170697;
				}
				TVEModelData Data15_g170718 = Data16_g170697;
				float Out_Dummy15_g170718 = 0;
				float3 Out_PositionOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170718 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170718 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170718 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170718 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170718 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170718 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170718 = float3( 0,0,0 );
				float4 Out_VertexData15_g170718 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170718 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170718 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170718 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170718 = Data15_g170718.Dummy;
				Out_PositionOS15_g170718 = Data15_g170718.PositionOS;
				Out_PositionWS15_g170718 = Data15_g170718.PositionWS;
				Out_PositionWO15_g170718 = Data15_g170718.PositionWO;
				Out_PositionRawOS15_g170718 = Data15_g170718.PositionRawOS;
				Out_PositionAddOS15_g170718 = Data15_g170718.PositionAddOS;
				Out_PivotOS15_g170718 = Data15_g170718.PivotOS;
				Out_PivotWS15_g170718 = Data15_g170718.PivotWS;
				Out_PivotWO15_g170718 = Data15_g170718.PivotWO;
				Out_NormalOS15_g170718 = Data15_g170718.NormalOS;
				Out_NormalWS15_g170718 = Data15_g170718.NormalWS;
				Out_NormalRawOS15_g170718 = Data15_g170718.NormalRawOS;
				Out_NormalRawWS15_g170718 = Data15_g170718.NormalRawWS;
				Out_TangentOS15_g170718 = Data15_g170718.TangentOS;
				Out_ViewDirWS15_g170718 = Data15_g170718.ViewDirWS;
				Out_VertexData15_g170718 = Data15_g170718.VertexData;
				Out_MotionData15_g170718 = Data15_g170718.MotionData;
				Out_BoundsData15_g170718 = Data15_g170718.BoundsData;
				Out_RotationData15_g170718 = Data15_g170718.RotationData;
				}
				float3 In_PositionOS16_g170719 = Out_PositionOS15_g170718;
				float3 In_PositionWS16_g170719 = Out_PositionWS15_g170718;
				float3 temp_output_1567_17_g170717 = Out_PositionWO15_g170718;
				float3 In_PositionWO16_g170719 = temp_output_1567_17_g170717;
				float3 temp_output_1567_26_g170717 = Out_PositionRawOS15_g170718;
				float3 In_PositionRawOS16_g170719 = temp_output_1567_26_g170717;
				float3 In_PositionAddOS16_g170719 = Out_PositionAddOS15_g170718;
				float3 In_PivotOS16_g170719 = Out_PivotOS15_g170718;
				float3 In_PivotWS16_g170719 = Out_PivotWS15_g170718;
				float3 In_PivotWO16_g170719 = Out_PivotWO15_g170718;
				half3 Model_NormalOS1568_g170717 = Out_NormalOS15_g170718;
				float3 lerpResult1589_g170717 = lerp( Model_NormalOS1568_g170717 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170717 = temp_output_1567_26_g170717;
				float3 normalizeResult1594_g170717 = ASESafeNormalize( ( Model_PositionRAW1592_g170717 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170717 = lerp( lerpResult1589_g170717 , normalizeResult1594_g170717 , _NormalSphereValue);
				half3 Input_False58_g170732 = lerpResult1585_g170717;
				half3 VertexPos40_g170721 = lerpResult1585_g170717;
				half3 VertexPos40_g170722 = VertexPos40_g170721;
				float3 appendResult74_g170722 = (float3(VertexPos40_g170722.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170722 = appendResult74_g170722;
				float3 break84_g170722 = VertexPos40_g170722;
				float3 appendResult81_g170722 = (float3(0.0 , break84_g170722.y , break84_g170722.z));
				half3 VertexPosOtherAxis82_g170722 = appendResult81_g170722;
				float4 temp_output_1567_33_g170717 = Out_RotationData15_g170718;
				half4 Model_RotationData1583_g170717 = temp_output_1567_33_g170717;
				half2 Angle44_g170721 = Model_RotationData1583_g170717.xy;
				half Angle44_g170722 = (Angle44_g170721).y;
				half3 VertexPos40_g170723 = ( VertexPosRotationAxis50_g170722 + ( VertexPosOtherAxis82_g170722 * cos( Angle44_g170722 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170722 ) * sin( Angle44_g170722 ) ) );
				float3 appendResult74_g170723 = (float3(0.0 , 0.0 , VertexPos40_g170723.z));
				half3 VertexPosRotationAxis50_g170723 = appendResult74_g170723;
				float3 break84_g170723 = VertexPos40_g170723;
				float3 appendResult81_g170723 = (float3(break84_g170723.x , break84_g170723.y , 0.0));
				half3 VertexPosOtherAxis82_g170723 = appendResult81_g170723;
				half Angle44_g170723 = -(Angle44_g170721).x;
				float3 lerpResult1591_g170717 = lerp( lerpResult1585_g170717 , ( VertexPosRotationAxis50_g170723 + ( VertexPosOtherAxis82_g170723 * cos( Angle44_g170723 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170723 ) * sin( Angle44_g170723 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170732 = lerpResult1591_g170717;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch65_g170732 = Input_False58_g170732;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch67_g170732 = staticSwitch65_g170732;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170732 = Input_True57_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch67_g170732;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170717 = staticSwitch69_g170732;
				#else
				float3 staticSwitch1595_g170717 = lerpResult1585_g170717;
				#endif
				float4 temp_output_1567_29_g170717 = Out_VertexData15_g170718;
				half4 Model_VertexData1608_g170717 = temp_output_1567_29_g170717;
				float4 break1683_g170717 = Model_VertexData1608_g170717;
				float4 break33_g170725 = _normal_vert_mode;
				float temp_output_30_0_g170725 = ( break1683_g170717.x * break33_g170725.x );
				float temp_output_29_0_g170725 = ( break1683_g170717.y * break33_g170725.y );
				float temp_output_31_0_g170725 = ( break1683_g170717.z * break33_g170725.z );
				float temp_output_28_0_g170725 = ( temp_output_30_0_g170725 + temp_output_29_0_g170725 + temp_output_31_0_g170725 + ( break1683_g170717.w * break33_g170725.w ) );
				float clampResult17_g170727 = clamp( temp_output_28_0_g170725 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170726 = _NormalMeshRemap.x;
				float temp_output_10_0_g170726 = ( _NormalMeshRemap.y - temp_output_7_0_g170726 );
				float lerpResult1695_g170717 = lerp( 1.0 , saturate( ( ( clampResult17_g170727 - temp_output_7_0_g170726 ) / ( temp_output_10_0_g170726 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170728 = lerpResult1695_g170717;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170728 = ( temp_output_6_0_g170728 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170728 = temp_output_6_0_g170728;
				#endif
				float temp_output_1690_0_g170717 = staticSwitch14_g170728;
				half Normal_MeskMask1691_g170717 = temp_output_1690_0_g170717;
				half Normal_Proj_Mask1647_g170717 = 1.0;
				float temp_output_1699_0_g170717 = ( Normal_MeskMask1691_g170717 * Normal_Proj_Mask1647_g170717 );
				float3 lerpResult1670_g170717 = lerp( Model_NormalOS1568_g170717 , staticSwitch1595_g170717 , temp_output_1699_0_g170717);
				half3 Final_NormalOS178_g170717 = lerpResult1670_g170717;
				float3 In_NormalOS16_g170719 = Final_NormalOS178_g170717;
				float3 temp_output_1567_21_g170717 = Out_NormalWS15_g170718;
				float3 In_NormalWS16_g170719 = temp_output_1567_21_g170717;
				float3 In_NormalRawOS16_g170719 = Out_NormalRawOS15_g170718;
				float3 In_NormalRawWS16_g170719 = Out_NormalRawWS15_g170718;
				float4 In_TangentOS16_g170719 = Out_TangentOS15_g170718;
				float3 In_ViewDirWS16_g170719 = Out_ViewDirWS15_g170718;
				float4 In_VertexData16_g170719 = temp_output_1567_29_g170717;
				float4 In_MotionData16_g170719 = Out_MotionData15_g170718;
				float4 In_BoundsData16_g170719 = Out_BoundsData15_g170718;
				float4 In_RotationData16_g170719 = temp_output_1567_33_g170717;
				{
				Data16_g170719.Dummy = In_Dummy16_g170719;
				Data16_g170719.PositionOS = In_PositionOS16_g170719;
				Data16_g170719.PositionWS = In_PositionWS16_g170719;
				Data16_g170719.PositionWO = In_PositionWO16_g170719;
				Data16_g170719.PositionRawOS = In_PositionRawOS16_g170719;
				Data16_g170719.PositionAddOS = In_PositionAddOS16_g170719;
				Data16_g170719.PivotOS = In_PivotOS16_g170719;
				Data16_g170719.PivotWS = In_PivotWS16_g170719;
				Data16_g170719.PivotWO = In_PivotWO16_g170719;
				Data16_g170719.NormalOS = In_NormalOS16_g170719;
				Data16_g170719.NormalWS = In_NormalWS16_g170719;
				Data16_g170719.NormalRawOS = In_NormalRawOS16_g170719;
				Data16_g170719.NormalRawWS = In_NormalRawWS16_g170719;
				Data16_g170719.TangentOS = In_TangentOS16_g170719;
				Data16_g170719.ViewDirWS = In_ViewDirWS16_g170719;
				Data16_g170719.VertexData = In_VertexData16_g170719;
				Data16_g170719.MotionData = In_MotionData16_g170719;
				Data16_g170719.BoundsData = In_BoundsData16_g170719;
				Data16_g170719.RotationData = In_RotationData16_g170719;
				}
				TVEModelData Data15_g170741 = Data16_g170719;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170741 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170741 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170741 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionOS15_g170741 = Data15_g170741.PositionOS;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PositionRawOS15_g170741 = Data15_g170741.PositionRawOS;
				Out_PositionAddOS15_g170741 = Data15_g170741.PositionAddOS;
				Out_PivotOS15_g170741 = Data15_g170741.PivotOS;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalOS15_g170741 = Data15_g170741.NormalOS;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_NormalRawOS15_g170741 = Data15_g170741.NormalRawOS;
				Out_NormalRawWS15_g170741 = Data15_g170741.NormalRawWS;
				Out_TangentOS15_g170741 = Data15_g170741.TangentOS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_MotionData15_g170741 = Data15_g170741.MotionData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				Out_RotationData15_g170741 = Data15_g170741.RotationData;
				}
				float3 temp_output_217_24_g170740 = Out_PivotOS15_g170741;
				float3 In_PositionOS16_g170742 = ( Out_PositionOS15_g170741 + temp_output_217_24_g170740 );
				float3 In_PositionWS16_g170742 = Out_PositionWS15_g170741;
				float3 In_PositionWO16_g170742 = Out_PositionWO15_g170741;
				float3 In_PositionRawOS16_g170742 = Out_PositionRawOS15_g170741;
				float3 In_PositionAddOS16_g170742 = Out_PositionAddOS15_g170741;
				float3 In_PivotOS16_g170742 = temp_output_217_24_g170740;
				float3 In_PivotWS16_g170742 = Out_PivotWS15_g170741;
				float3 In_PivotWO16_g170742 = Out_PivotWO15_g170741;
				float3 In_NormalOS16_g170742 = Out_NormalOS15_g170741;
				float3 In_NormalWS16_g170742 = Out_NormalWS15_g170741;
				float3 In_NormalRawOS16_g170742 = Out_NormalRawOS15_g170741;
				float3 In_NormalRawWS16_g170742 = Out_NormalRawWS15_g170741;
				float4 In_TangentOS16_g170742 = Out_TangentOS15_g170741;
				float3 In_ViewDirWS16_g170742 = Out_ViewDirWS15_g170741;
				float4 In_VertexData16_g170742 = Out_VertexData15_g170741;
				float4 In_MotionData16_g170742 = Out_MotionData15_g170741;
				float4 In_BoundsData16_g170742 = Out_BoundsData15_g170741;
				float4 In_RotationData16_g170742 = Out_RotationData15_g170741;
				{
				Data16_g170742.Dummy = In_Dummy16_g170742;
				Data16_g170742.PositionOS = In_PositionOS16_g170742;
				Data16_g170742.PositionWS = In_PositionWS16_g170742;
				Data16_g170742.PositionWO = In_PositionWO16_g170742;
				Data16_g170742.PositionRawOS = In_PositionRawOS16_g170742;
				Data16_g170742.PositionAddOS = In_PositionAddOS16_g170742;
				Data16_g170742.PivotOS = In_PivotOS16_g170742;
				Data16_g170742.PivotWS = In_PivotWS16_g170742;
				Data16_g170742.PivotWO = In_PivotWO16_g170742;
				Data16_g170742.NormalOS = In_NormalOS16_g170742;
				Data16_g170742.NormalWS = In_NormalWS16_g170742;
				Data16_g170742.NormalRawOS = In_NormalRawOS16_g170742;
				Data16_g170742.NormalRawWS = In_NormalRawWS16_g170742;
				Data16_g170742.TangentOS = In_TangentOS16_g170742;
				Data16_g170742.ViewDirWS = In_ViewDirWS16_g170742;
				Data16_g170742.VertexData = In_VertexData16_g170742;
				Data16_g170742.MotionData = In_MotionData16_g170742;
				Data16_g170742.BoundsData = In_BoundsData16_g170742;
				Data16_g170742.RotationData = In_RotationData16_g170742;
				}
				TVEModelData Data15_g170747 = Data16_g170742;
				float Out_Dummy15_g170747 = 0;
				float3 Out_PositionOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170747 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170747 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170747 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170747 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170747 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170747 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170747 = float3( 0,0,0 );
				float4 Out_VertexData15_g170747 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170747 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170747 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170747 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170747 = Data15_g170747.Dummy;
				Out_PositionOS15_g170747 = Data15_g170747.PositionOS;
				Out_PositionWS15_g170747 = Data15_g170747.PositionWS;
				Out_PositionWO15_g170747 = Data15_g170747.PositionWO;
				Out_PositionRawOS15_g170747 = Data15_g170747.PositionRawOS;
				Out_PositionAddOS15_g170747 = Data15_g170747.PositionAddOS;
				Out_PivotOS15_g170747 = Data15_g170747.PivotOS;
				Out_PivotWS15_g170747 = Data15_g170747.PivotWS;
				Out_PivotWO15_g170747 = Data15_g170747.PivotWO;
				Out_NormalOS15_g170747 = Data15_g170747.NormalOS;
				Out_NormalWS15_g170747 = Data15_g170747.NormalWS;
				Out_NormalRawOS15_g170747 = Data15_g170747.NormalRawOS;
				Out_NormalRawWS15_g170747 = Data15_g170747.NormalRawWS;
				Out_TangentOS15_g170747 = Data15_g170747.TangentOS;
				Out_ViewDirWS15_g170747 = Data15_g170747.ViewDirWS;
				Out_VertexData15_g170747 = Data15_g170747.VertexData;
				Out_MotionData15_g170747 = Data15_g170747.MotionData;
				Out_BoundsData15_g170747 = Data15_g170747.BoundsData;
				Out_RotationData15_g170747 = Data15_g170747.RotationData;
				}
				float3 temp_output_31_0_g170744 = Out_PositionOS15_g170747;
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g170196;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170501 = ( _MotionHighlightValue * length( Wind_Direction1486_g170467 ) * Motion_FadeMask1820_g170467 * ( Base_Mask217_g170467 * Base_Mask217_g170467 ) * ( Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 * Wind_Noise1475_g170467 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170501 = ( temp_output_6_0_g170501 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170501 = temp_output_6_0_g170501;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170501;
				float4 appendResult23_g170566 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170566 = appendResult23_g170566;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170566;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue =  ( temp_output_31_0_g170744 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170747;
				inputMesh.tangentOS = Out_TangentOS15_g170747;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;
				float localCustomAlphaClip19_g170751 = ( 0.0 );
				float localBreakData4_g170750 = ( 0.0 );
				float localCompData3_g170735 = ( 0.0 );
				TVEVisualData Data3_g170735 = (TVEVisualData)0;
				half Dummy145_g170733 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170735 = Dummy145_g170733;
				float localBreakData4_g170734 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy145_g170702 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170714 = Dummy145_g170702;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170688 = ( 0.0 );
				TVEVisualData Data3_g170688 = (TVEVisualData)0;
				half Dummy594_g170684 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170688 = Dummy594_g170684;
				float localBreakData4_g170687 = ( 0.0 );
				float localCompData3_g170673 = ( 0.0 );
				TVEVisualData Data3_g170673 = (TVEVisualData)0;
				half Dummy594_g170671 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170673 = Dummy594_g170671;
				float localBreakData4_g170672 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half Dummy594_g170653 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170655 = Dummy594_g170653;
				float localBreakData4_g170654 = ( 0.0 );
				float localCompData3_g170620 = ( 0.0 );
				TVEVisualData Data3_g170620 = (TVEVisualData)0;
				half Dummy594_g170617 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170620 = Dummy594_g170617;
				float localBreakData4_g170618 = ( 0.0 );
				float localCompData3_g170616 = ( 0.0 );
				TVEVisualData Data3_g170616 = (TVEVisualData)0;
				float In_Dummy3_g170616 = 0.0;
				float localBreakData4_g170615 = ( 0.0 );
				float localCompData3_g170595 = ( 0.0 );
				TVEVisualData Data3_g170595 = (TVEVisualData)0;
				half Dummy205_g170591 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170595 = Dummy205_g170591;
				float localBreakData4_g170593 = ( 0.0 );
				float localCompData3_g170570 = ( 0.0 );
				TVEVisualData Data3_g170570 = (TVEVisualData)0;
				half Dummy205_g170567 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170570 = Dummy205_g170567;
				float localBreakData4_g170572 = ( 0.0 );
				float localCompData3_g170561 = ( 0.0 );
				TVEVisualData Data3_g170561 = (TVEVisualData)0;
				half Dummy220_g170557 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170561 = Dummy220_g170557;
				float localBreakData4_g170559 = ( 0.0 );
				float localCompData3_g170551 = ( 0.0 );
				TVEVisualData Data3_g170551 = (TVEVisualData)0;
				half Dummy220_g170547 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170551 = Dummy220_g170547;
				float localBreakData4_g170550 = ( 0.0 );
				float localCompData3_g170539 = ( 0.0 );
				TVEVisualData Data3_g170539 = (TVEVisualData)0;
				half Dummy202_g170537 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170539 = Dummy202_g170537;
				float localBreakData4_g170538 = ( 0.0 );
				float localCompData3_g170451 = ( 0.0 );
				TVEVisualData Data3_g170451 = (TVEVisualData)0;
				half4 Dummy944_g170434 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170451 = Dummy944_g170434.x;
				float localBreakData4_g170450 = ( 0.0 );
				float localCompData3_g170405 = ( 0.0 );
				TVEVisualData Data3_g170405 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170405 = Dummy946_g170394.x;
				float localBreakData4_g170408 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170382 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170383) = _MainAlbedoTex;
				SamplerState Sampler276_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170383 = Local_Coords180_g170372;
				half4 Coords276_g170383 = temp_output_37_0_g170383;
				half2 TexCoord276_g170383 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170383 = SampleMain( Texture276_g170383 , Sampler276_g170383 , Coords276_g170383 , TexCoord276_g170383 );
				TEXTURE2D(Texture275_g170383) = _MainAlbedoTex;
				SamplerState Sampler275_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170383 = temp_output_37_0_g170383;
				half2 TexCoord275_g170383 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170383 = SampleExtra( Texture275_g170383 , Sampler275_g170383 , Coords275_g170383 , TexCoord275_g170383 );
				TEXTURE2D(Texture238_g170383) = _MainAlbedoTex;
				SamplerState Sampler238_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170383 = temp_output_37_0_g170383;
				TVEModelData Data16_g170210 = (TVEModelData)0;
				float In_Dummy16_g170210 = 0.0;
				float3 In_PositionOS16_g170210 = float3( 0,0,0 );
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170210 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170210 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170210 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotOS16_g170210 = float3( 0,0,0 );
				float3 In_PivotWS16_g170210 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170210 = PivotWO133_g170196;
				float3 In_NormalOS16_g170210 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( packedInput.normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170210 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170210 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170210 = float3( 0,0,0 );
				float4 In_TangentOS16_g170210 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170210 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170210 = VertexMasks171_g170196;
				float4 In_MotionData16_g170210 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170210 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170210 = float4( 0,0,0,0 );
				{
				Data16_g170210.Dummy = In_Dummy16_g170210;
				Data16_g170210.PositionOS = In_PositionOS16_g170210;
				Data16_g170210.PositionWS = In_PositionWS16_g170210;
				Data16_g170210.PositionWO = In_PositionWO16_g170210;
				Data16_g170210.PositionRawOS = In_PositionRawOS16_g170210;
				Data16_g170210.PositionAddOS = In_PositionAddOS16_g170210;
				Data16_g170210.PivotOS = In_PivotOS16_g170210;
				Data16_g170210.PivotWS = In_PivotWS16_g170210;
				Data16_g170210.PivotWO = In_PivotWO16_g170210;
				Data16_g170210.NormalOS = In_NormalOS16_g170210;
				Data16_g170210.NormalWS = In_NormalWS16_g170210;
				Data16_g170210.NormalRawOS = In_NormalRawOS16_g170210;
				Data16_g170210.NormalRawWS = In_NormalRawWS16_g170210;
				Data16_g170210.TangentOS = In_TangentOS16_g170210;
				Data16_g170210.ViewDirWS = In_ViewDirWS16_g170210;
				Data16_g170210.VertexData = In_VertexData16_g170210;
				Data16_g170210.MotionData = In_MotionData16_g170210;
				Data16_g170210.BoundsData = In_BoundsData16_g170210;
				Data16_g170210.RotationData = In_RotationData16_g170210;
				}
				TVEModelData Data15_g170373 = Data16_g170210;
				float Out_Dummy15_g170373 = 0;
				float3 Out_PositionOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170373 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170373 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170373 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170373 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170373 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170373 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170373 = float3( 0,0,0 );
				float4 Out_VertexData15_g170373 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170373 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170373 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170373 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170373 = Data15_g170373.Dummy;
				Out_PositionOS15_g170373 = Data15_g170373.PositionOS;
				Out_PositionWS15_g170373 = Data15_g170373.PositionWS;
				Out_PositionWO15_g170373 = Data15_g170373.PositionWO;
				Out_PositionRawOS15_g170373 = Data15_g170373.PositionRawOS;
				Out_PositionAddOS15_g170373 = Data15_g170373.PositionAddOS;
				Out_PivotOS15_g170373 = Data15_g170373.PivotOS;
				Out_PivotWS15_g170373 = Data15_g170373.PivotWS;
				Out_PivotWO15_g170373 = Data15_g170373.PivotWO;
				Out_NormalOS15_g170373 = Data15_g170373.NormalOS;
				Out_NormalWS15_g170373 = Data15_g170373.NormalWS;
				Out_NormalRawOS15_g170373 = Data15_g170373.NormalRawOS;
				Out_NormalRawWS15_g170373 = Data15_g170373.NormalRawWS;
				Out_TangentOS15_g170373 = Data15_g170373.TangentOS;
				Out_ViewDirWS15_g170373 = Data15_g170373.ViewDirWS;
				Out_VertexData15_g170373 = Data15_g170373.VertexData;
				Out_MotionData15_g170373 = Data15_g170373.MotionData;
				Out_BoundsData15_g170373 = Data15_g170373.BoundsData;
				Out_RotationData15_g170373 = Data15_g170373.RotationData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170373;
				float3 temp_output_279_0_g170383 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170383 = temp_output_279_0_g170383;
				half4 localSamplePlanar2D238_g170383 = SamplePlanar2D( Texture238_g170383 , Sampler238_g170383 , Coords238_g170383 , WorldPosition238_g170383 );
				TEXTURE2D(Texture246_g170383) = _MainAlbedoTex;
				SamplerState Sampler246_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition246_g170383 = temp_output_279_0_g170383;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170373;
				float3 temp_output_280_0_g170383 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170383 = temp_output_280_0_g170383;
				half4 localSamplePlanar3D246_g170383 = SamplePlanar3D( Texture246_g170383 , Sampler246_g170383 , Coords246_g170383 , WorldPosition246_g170383 , WorldNormal246_g170383 );
				TEXTURE2D(Texture234_g170383) = _MainAlbedoTex;
				SamplerState Sampler234_g170383 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170383 = temp_output_37_0_g170383;
				float3 WorldPosition234_g170383 = temp_output_279_0_g170383;
				float4 localSampleStochastic2D234_g170383 = SampleStochastic2D( Texture234_g170383 , Sampler234_g170383 , Coords234_g170383 , WorldPosition234_g170383 );
				TEXTURE2D(Texture263_g170383) = _MainAlbedoTex;
				SamplerState Sampler263_g170383 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170383 = temp_output_37_0_g170383;
				half3 WorldPosition263_g170383 = temp_output_279_0_g170383;
				half3 WorldNormal263_g170383 = temp_output_280_0_g170383;
				half4 localSampleStochastic3D263_g170383 = SampleStochastic3D( Texture263_g170383 , Sampler263_g170383 , Coords263_g170383 , WorldPosition263_g170383 , WorldNormal263_g170383 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170383;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170383;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170383;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170383;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170385) = _MainShaderTex;
				SamplerState Sampler276_g170385 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170385 = Local_Coords180_g170372;
				half4 Coords276_g170385 = temp_output_37_0_g170385;
				half2 TexCoord276_g170385 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170385 = SampleMain( Texture276_g170385 , Sampler276_g170385 , Coords276_g170385 , TexCoord276_g170385 );
				TEXTURE2D(Texture275_g170385) = _MainShaderTex;
				SamplerState Sampler275_g170385 = sampler_Linear_Repeat;
				half4 Coords275_g170385 = temp_output_37_0_g170385;
				half2 TexCoord275_g170385 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170385 = SampleExtra( Texture275_g170385 , Sampler275_g170385 , Coords275_g170385 , TexCoord275_g170385 );
				TEXTURE2D(Texture238_g170385) = _MainShaderTex;
				SamplerState Sampler238_g170385 = sampler_Linear_Repeat;
				half4 Coords238_g170385 = temp_output_37_0_g170385;
				float3 temp_output_279_0_g170385 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170385 = temp_output_279_0_g170385;
				half4 localSamplePlanar2D238_g170385 = SamplePlanar2D( Texture238_g170385 , Sampler238_g170385 , Coords238_g170385 , WorldPosition238_g170385 );
				TEXTURE2D(Texture246_g170385) = _MainShaderTex;
				SamplerState Sampler246_g170385 = sampler_Linear_Repeat;
				half4 Coords246_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition246_g170385 = temp_output_279_0_g170385;
				float3 temp_output_280_0_g170385 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170385 = temp_output_280_0_g170385;
				half4 localSamplePlanar3D246_g170385 = SamplePlanar3D( Texture246_g170385 , Sampler246_g170385 , Coords246_g170385 , WorldPosition246_g170385 , WorldNormal246_g170385 );
				TEXTURE2D(Texture234_g170385) = _MainShaderTex;
				SamplerState Sampler234_g170385 = sampler_Linear_Repeat;
				float4 Coords234_g170385 = temp_output_37_0_g170385;
				float3 WorldPosition234_g170385 = temp_output_279_0_g170385;
				float4 localSampleStochastic2D234_g170385 = SampleStochastic2D( Texture234_g170385 , Sampler234_g170385 , Coords234_g170385 , WorldPosition234_g170385 );
				TEXTURE2D(Texture263_g170385) = _MainShaderTex;
				SamplerState Sampler263_g170385 = sampler_Linear_Repeat;
				half4 Coords263_g170385 = temp_output_37_0_g170385;
				half3 WorldPosition263_g170385 = temp_output_279_0_g170385;
				half3 WorldNormal263_g170385 = temp_output_280_0_g170385;
				half4 localSampleStochastic3D263_g170385 = SampleStochastic3D( Texture263_g170385 , Sampler263_g170385 , Coords263_g170385 , WorldPosition263_g170385 , WorldNormal263_g170385 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170385;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170385;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170385;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170385;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170378 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _MainMultiRemap.x;
				float temp_output_10_0_g170379 = ( _MainMultiRemap.y - temp_output_7_0_g170379 );
				half Local_MultiMask78_g170372 = saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170382 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170384) = _MainNormalTex;
				SamplerState Sampler276_g170384 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170384 = Local_Coords180_g170372;
				half4 Coords276_g170384 = temp_output_37_0_g170384;
				half2 TexCoord276_g170384 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170384 = SampleMain( Texture276_g170384 , Sampler276_g170384 , Coords276_g170384 , TexCoord276_g170384 );
				TEXTURE2D(Texture275_g170384) = _MainNormalTex;
				SamplerState Sampler275_g170384 = sampler_Linear_Repeat;
				half4 Coords275_g170384 = temp_output_37_0_g170384;
				half2 TexCoord275_g170384 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170384 = SampleExtra( Texture275_g170384 , Sampler275_g170384 , Coords275_g170384 , TexCoord275_g170384 );
				TEXTURE2D(Texture238_g170384) = _MainNormalTex;
				SamplerState Sampler238_g170384 = sampler_Linear_Repeat;
				half4 Coords238_g170384 = temp_output_37_0_g170384;
				float3 temp_output_279_0_g170384 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170384 = temp_output_279_0_g170384;
				half4 localSamplePlanar2D238_g170384 = SamplePlanar2D( Texture238_g170384 , Sampler238_g170384 , Coords238_g170384 , WorldPosition238_g170384 );
				TEXTURE2D(Texture246_g170384) = _MainNormalTex;
				SamplerState Sampler246_g170384 = sampler_Linear_Repeat;
				half4 Coords246_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition246_g170384 = temp_output_279_0_g170384;
				float3 temp_output_280_0_g170384 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170384 = temp_output_280_0_g170384;
				half4 localSamplePlanar3D246_g170384 = SamplePlanar3D( Texture246_g170384 , Sampler246_g170384 , Coords246_g170384 , WorldPosition246_g170384 , WorldNormal246_g170384 );
				TEXTURE2D(Texture234_g170384) = _MainNormalTex;
				SamplerState Sampler234_g170384 = sampler_Linear_Repeat;
				float4 Coords234_g170384 = temp_output_37_0_g170384;
				float3 WorldPosition234_g170384 = temp_output_279_0_g170384;
				float4 localSampleStochastic2D234_g170384 = SampleStochastic2D( Texture234_g170384 , Sampler234_g170384 , Coords234_g170384 , WorldPosition234_g170384 );
				TEXTURE2D(Texture263_g170384) = _MainNormalTex;
				SamplerState Sampler263_g170384 = sampler_Linear_Repeat;
				half4 Coords263_g170384 = temp_output_37_0_g170384;
				half3 WorldPosition263_g170384 = temp_output_279_0_g170384;
				half3 WorldNormal263_g170384 = temp_output_280_0_g170384;
				half4 localSampleStochastic3D263_g170384 = SampleStochastic3D( Texture263_g170384 , Sampler263_g170384 , Coords263_g170384 , WorldPosition263_g170384 , WorldNormal263_g170384 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170384;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170384;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170384;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170384;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170374 = Local_NormaTex191_g170372;
				float2 appendResult58_g170374 = (float2(( (Normal_Packed45_g170374).x * (Normal_Packed45_g170374).w ) , (Normal_Packed45_g170374).y));
				half2 Normal_Default50_g170374 = appendResult58_g170374;
				half2 Normal_ASTC41_g170374 = (Normal_Packed45_g170374).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170374 = Normal_ASTC41_g170374;
				#else
				float2 staticSwitch38_g170374 = Normal_Default50_g170374;
				#endif
				half2 Normal_NO_DTX544_g170374 = (Normal_Packed45_g170374).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170374 = Normal_NO_DTX544_g170374;
				#else
				float2 staticSwitch37_g170374 = staticSwitch38_g170374;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170374*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(packedInput.tangentWS.xyz,ase_worldBitangent,packedInput.normalWS);
				half2 Normal_Planar45_g170375 = temp_output_26_0_g170372;
				float2 break71_g170375 = Normal_Planar45_g170375;
				float3 appendResult72_g170375 = (float3(break71_g170375.x , 0.0 , break71_g170375.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170375 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170382 = Local_NormalTS108_g170372;
				float3 appendResult68_g170376 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( packedInput.tangentWS.xyz.x, ase_worldBitangent.x, packedInput.normalWS.x );
				float3 tanToWorld1 = float3( packedInput.tangentWS.xyz.y, ase_worldBitangent.y, packedInput.normalWS.y );
				float3 tanToWorld2 = float3( packedInput.tangentWS.xyz.z, ase_worldBitangent.z, packedInput.normalWS.z );
				float3 tanNormal74_g170376 = appendResult68_g170376;
				float3 worldNormal74_g170376 = normalize( float3(dot(tanToWorld0,tanNormal74_g170376), dot(tanToWorld1,tanNormal74_g170376), dot(tanToWorld2,tanNormal74_g170376)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170376;
				float3 In_NormalWS3_g170382 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170382 = Local_Masks109_g170372;
				float4 In_Emissive3_g170382 = half4(1,1,1,1);
				float3 temp_output_3_0_g170377 = Local_Albedo139_g170372;
				float dotResult20_g170377 = dot( temp_output_3_0_g170377 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170377;
				float In_Grayscale3_g170382 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170382 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170382 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170382 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170382 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170382 = temp_cast_4;
				float In_Transmission3_g170382 = 1.0;
				float In_Thickness3_g170382 = 0.0;
				float In_Diffusion3_g170382 = 0.0;
				{
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				}
				TVEVisualData Data4_g170408 = Data3_g170382;
				float Out_Dummy4_g170408 = 0;
				float3 Out_Albedo4_g170408 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170408 = float2( 0,0 );
				float3 Out_NormalWS4_g170408 = float3( 0,0,0 );
				float4 Out_Shader4_g170408 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170408 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170408 = 0;
				float Out_Grayscale4_g170408 = 0;
				float Out_Luminosity4_g170408 = 0;
				float Out_AlphaClip4_g170408 = 0;
				float Out_AlphaFade4_g170408 = 0;
				float3 Out_Translucency4_g170408 = float3( 0,0,0 );
				float Out_Transmission4_g170408 = 0;
				float Out_Thickness4_g170408 = 0;
				float Out_Diffusion4_g170408 = 0;
				{
				Out_Dummy4_g170408 = Data4_g170408.Dummy;
				Out_Albedo4_g170408 = Data4_g170408.Albedo;
				Out_NormalTS4_g170408 = Data4_g170408.NormalTS;
				Out_NormalWS4_g170408 = Data4_g170408.NormalWS;
				Out_Shader4_g170408 = Data4_g170408.Shader;
				Out_Emissive4_g170408= Data4_g170408.Emissive;
				Out_MultiMask4_g170408 = Data4_g170408.MultiMask;
				Out_Grayscale4_g170408 = Data4_g170408.Grayscale;
				Out_Luminosity4_g170408= Data4_g170408.Luminosity;
				Out_AlphaClip4_g170408 = Data4_g170408.AlphaClip;
				Out_AlphaFade4_g170408 = Data4_g170408.AlphaFade;
				Out_Translucency4_g170408 = Data4_g170408.Translucency;
				Out_Transmission4_g170408 = Data4_g170408.Transmission;
				Out_Thickness4_g170408 = Data4_g170408.Thickness;
				Out_Diffusion4_g170408 = Data4_g170408.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170408;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				SamplerState Sampler276_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170406 = Data16_g170210;
				float Out_Dummy15_g170406 = 0;
				float3 Out_PositionOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170406 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170406 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170406 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170406 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170406 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170406 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170406 = float3( 0,0,0 );
				float4 Out_VertexData15_g170406 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170406 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170406 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170406 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170406 = Data15_g170406.Dummy;
				Out_PositionOS15_g170406 = Data15_g170406.PositionOS;
				Out_PositionWS15_g170406 = Data15_g170406.PositionWS;
				Out_PositionWO15_g170406 = Data15_g170406.PositionWO;
				Out_PositionRawOS15_g170406 = Data15_g170406.PositionRawOS;
				Out_PositionAddOS15_g170406 = Data15_g170406.PositionAddOS;
				Out_PivotOS15_g170406 = Data15_g170406.PivotOS;
				Out_PivotWS15_g170406 = Data15_g170406.PivotWS;
				Out_PivotWO15_g170406 = Data15_g170406.PivotWO;
				Out_NormalOS15_g170406 = Data15_g170406.NormalOS;
				Out_NormalWS15_g170406 = Data15_g170406.NormalWS;
				Out_NormalRawOS15_g170406 = Data15_g170406.NormalRawOS;
				Out_NormalRawWS15_g170406 = Data15_g170406.NormalRawWS;
				Out_TangentOS15_g170406 = Data15_g170406.TangentOS;
				Out_ViewDirWS15_g170406 = Data15_g170406.ViewDirWS;
				Out_VertexData15_g170406 = Data15_g170406.VertexData;
				Out_MotionData15_g170406 = Data15_g170406.MotionData;
				Out_BoundsData15_g170406 = Data15_g170406.BoundsData;
				Out_RotationData15_g170406 = Data15_g170406.RotationData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170406;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170406;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				SamplerState Sampler276_g170397 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = sampler_Linear_Repeat;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = sampler_Linear_Repeat;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = sampler_Linear_Repeat;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = sampler_Linear_Repeat;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = sampler_Linear_Repeat;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170402 = _SecondMultiRemap.x;
				float temp_output_10_0_g170402 = ( _SecondMultiRemap.y - temp_output_7_0_g170402 );
				float temp_output_765_0_g170394 = saturate( ( ( clampResult17_g170401 - temp_output_7_0_g170402 ) / ( temp_output_10_0_g170402 + 0.0001 ) ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170412 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170411 = _SecondMaskRemap.x;
				float temp_output_10_0_g170411 = ( _SecondMaskRemap.y - temp_output_7_0_g170411 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170412 - temp_output_7_0_g170411 ) / ( temp_output_10_0_g170411 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170408;
				float clampResult17_g170413 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170414 = _SecondProjRemap.x;
				float temp_output_10_0_g170414 = ( _SecondProjRemap.y - temp_output_7_0_g170414 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170413 - temp_output_7_0_g170414 ) / ( temp_output_10_0_g170414 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170406;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170415 = _second_vert_mode;
				float temp_output_30_0_g170415 = ( break965_g170394.x * break33_g170415.x );
				float temp_output_29_0_g170415 = ( break965_g170394.y * break33_g170415.y );
				float temp_output_31_0_g170415 = ( break965_g170394.z * break33_g170415.z );
				float temp_output_28_0_g170415 = ( temp_output_30_0_g170415 + temp_output_29_0_g170415 + temp_output_31_0_g170415 + ( break965_g170394.w * break33_g170415.w ) );
				float clampResult17_g170409 = clamp( temp_output_28_0_g170415 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170410 = _SecondMeshRemap.x;
				float temp_output_10_0_g170410 = ( _SecondMeshRemap.y - temp_output_7_0_g170410 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( clampResult17_g170409 - temp_output_7_0_g170410 ) / ( temp_output_10_0_g170410 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170423 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170423 = ( temp_output_6_0_g170423 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170423 = temp_output_6_0_g170423;
				#endif
				float temp_output_987_0_g170394 = staticSwitch14_g170423;
				half Blend_VertMask918_g170394 = temp_output_987_0_g170394;
				float localBuildGlobalData204_g170212 = ( 0.0 );
				TVEGlobalData Data204_g170212 = (TVEGlobalData)0;
				half Dummy211_g170212 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g170212 = Dummy211_g170212;
				float temp_output_82_0_g170223 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170225 = TVE_CoatLayers[(int)temp_output_82_0_g170223];
				TVEModelData Data15_g170213 = Data16_g170210;
				float Out_Dummy15_g170213 = 0;
				float3 Out_PositionOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170213 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170213 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170213 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170213 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170213 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170213 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170213 = float3( 0,0,0 );
				float4 Out_VertexData15_g170213 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170213 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170213 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170213 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170213 = Data15_g170213.Dummy;
				Out_PositionOS15_g170213 = Data15_g170213.PositionOS;
				Out_PositionWS15_g170213 = Data15_g170213.PositionWS;
				Out_PositionWO15_g170213 = Data15_g170213.PositionWO;
				Out_PositionRawOS15_g170213 = Data15_g170213.PositionRawOS;
				Out_PositionAddOS15_g170213 = Data15_g170213.PositionAddOS;
				Out_PivotOS15_g170213 = Data15_g170213.PivotOS;
				Out_PivotWS15_g170213 = Data15_g170213.PivotWS;
				Out_PivotWO15_g170213 = Data15_g170213.PivotWO;
				Out_NormalOS15_g170213 = Data15_g170213.NormalOS;
				Out_NormalWS15_g170213 = Data15_g170213.NormalWS;
				Out_NormalRawOS15_g170213 = Data15_g170213.NormalRawOS;
				Out_NormalRawWS15_g170213 = Data15_g170213.NormalRawWS;
				Out_TangentOS15_g170213 = Data15_g170213.TangentOS;
				Out_ViewDirWS15_g170213 = Data15_g170213.ViewDirWS;
				Out_VertexData15_g170213 = Data15_g170213.VertexData;
				Out_MotionData15_g170213 = Data15_g170213.MotionData;
				Out_BoundsData15_g170213 = Data15_g170213.BoundsData;
				Out_RotationData15_g170213 = Data15_g170213.RotationData;
				}
				half3 Model_PositionWS143_g170212 = Out_PositionWS15_g170213;
				half3 Model_PivotWS145_g170212 = Out_PivotWS15_g170213;
				float3 lerpResult300_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170226 = lerpResult300_g170212;
				float2 temp_output_75_0_g170226 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_82_0_g170226 = temp_output_82_0_g170223;
				float2 temp_output_119_0_g170226 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170226).xz ) );
				float temp_output_7_0_g170231 = 1.0;
				float temp_output_10_0_g170231 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170231 );
				float4 lerpResult131_g170226 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170226,temp_output_82_0_g170226, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170226,temp_output_82_0_g170226, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170226 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170231 ) / temp_output_10_0_g170231 ) ));
				float4 temp_output_17_0_g170225 = lerpResult131_g170226;
				float4 temp_output_3_0_g170225 = TVE_CoatParams;
				float4 ifLocalVar18_g170225 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170225 >= 0.5 )
				ifLocalVar18_g170225 = temp_output_17_0_g170225;
				else
				ifLocalVar18_g170225 = temp_output_3_0_g170225;
				float4 lerpResult22_g170225 = lerp( temp_output_3_0_g170225 , temp_output_17_0_g170225 , temp_output_19_0_g170225);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170225 = lerpResult22_g170225;
				#else
				float4 staticSwitch24_g170225 = ifLocalVar18_g170225;
				#endif
				half4 Coat_Params302_g170212 = staticSwitch24_g170225;
				float4 In_CoatParams204_g170212 = Coat_Params302_g170212;
				float temp_output_82_0_g170214 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170216 = TVE_PaintLayers[(int)temp_output_82_0_g170214];
				float3 lerpResult85_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170217 = lerpResult85_g170212;
				float2 temp_output_75_0_g170217 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_82_0_g170217 = temp_output_82_0_g170214;
				float2 temp_output_119_0_g170217 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170217).xz ) );
				float temp_output_7_0_g170222 = 1.0;
				float temp_output_10_0_g170222 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170222 );
				float4 lerpResult131_g170217 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170217,temp_output_82_0_g170217, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170217,temp_output_82_0_g170217, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170217 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170222 ) / temp_output_10_0_g170222 ) ));
				float4 temp_output_17_0_g170216 = lerpResult131_g170217;
				float4 temp_output_3_0_g170216 = TVE_PaintParams;
				float4 ifLocalVar18_g170216 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170216 >= 0.5 )
				ifLocalVar18_g170216 = temp_output_17_0_g170216;
				else
				ifLocalVar18_g170216 = temp_output_3_0_g170216;
				float4 lerpResult22_g170216 = lerp( temp_output_3_0_g170216 , temp_output_17_0_g170216 , temp_output_19_0_g170216);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170216 = lerpResult22_g170216;
				#else
				float4 staticSwitch24_g170216 = ifLocalVar18_g170216;
				#endif
				half4 Paint_Params71_g170212 = staticSwitch24_g170216;
				float4 In_PaintParams204_g170212 = Paint_Params71_g170212;
				float temp_output_82_0_g170232 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170234 = TVE_GlowLayers[(int)temp_output_82_0_g170232];
				float3 lerpResult247_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170235 = lerpResult247_g170212;
				float2 temp_output_75_0_g170235 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_82_0_g170235 = temp_output_82_0_g170232;
				float2 temp_output_119_0_g170235 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170235).xz ) );
				float temp_output_7_0_g170240 = 1.0;
				float temp_output_10_0_g170240 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170240 );
				float4 lerpResult131_g170235 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170235,temp_output_82_0_g170235, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170235,temp_output_82_0_g170235, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170235 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170240 ) / temp_output_10_0_g170240 ) ));
				float4 temp_output_17_0_g170234 = lerpResult131_g170235;
				float4 temp_output_3_0_g170234 = TVE_GlowParams;
				float4 ifLocalVar18_g170234 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170234 >= 0.5 )
				ifLocalVar18_g170234 = temp_output_17_0_g170234;
				else
				ifLocalVar18_g170234 = temp_output_3_0_g170234;
				float4 lerpResult22_g170234 = lerp( temp_output_3_0_g170234 , temp_output_17_0_g170234 , temp_output_19_0_g170234);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170234 = lerpResult22_g170234;
				#else
				float4 staticSwitch24_g170234 = ifLocalVar18_g170234;
				#endif
				half4 Glow_Params248_g170212 = staticSwitch24_g170234;
				float4 In_GlowParams204_g170212 = Glow_Params248_g170212;
				float temp_output_132_0_g170277 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170279 = TVE_AtmoLayers[(int)temp_output_132_0_g170277];
				float3 lerpResult104_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170280 = lerpResult104_g170212;
				float2 temp_output_75_0_g170280 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_82_0_g170280 = temp_output_132_0_g170277;
				float2 temp_output_119_0_g170280 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170280).xz ) );
				float temp_output_7_0_g170285 = 1.0;
				float temp_output_10_0_g170285 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170285 );
				float4 lerpResult131_g170280 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170280,temp_output_82_0_g170280, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170280,temp_output_82_0_g170280, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170280 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170285 ) / temp_output_10_0_g170285 ) ));
				float4 temp_output_17_0_g170279 = lerpResult131_g170280;
				float4 temp_output_3_0_g170279 = TVE_AtmoParams;
				float4 ifLocalVar18_g170279 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170279 >= 0.5 )
				ifLocalVar18_g170279 = temp_output_17_0_g170279;
				else
				ifLocalVar18_g170279 = temp_output_3_0_g170279;
				float4 lerpResult22_g170279 = lerp( temp_output_3_0_g170279 , temp_output_17_0_g170279 , temp_output_19_0_g170279);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170279 = lerpResult22_g170279;
				#else
				float4 staticSwitch24_g170279 = ifLocalVar18_g170279;
				#endif
				half4 Atmo_Params80_g170212 = staticSwitch24_g170279;
				float4 In_AtmoParams204_g170212 = Atmo_Params80_g170212;
				float temp_output_132_0_g170286 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170288 = TVE_FadeLayers[(int)temp_output_132_0_g170286];
				float3 lerpResult382_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFadePivotValue);
				half3 Input_Position180_g170289 = lerpResult382_g170212;
				float2 temp_output_75_0_g170289 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_82_0_g170289 = temp_output_132_0_g170286;
				float2 temp_output_119_0_g170289 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170289).xz ) );
				float temp_output_7_0_g170294 = 1.0;
				float temp_output_10_0_g170294 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170294 );
				float4 lerpResult131_g170289 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170289,temp_output_82_0_g170289, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170289,temp_output_82_0_g170289, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170289 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170294 ) / temp_output_10_0_g170294 ) ));
				float4 temp_output_17_0_g170288 = lerpResult131_g170289;
				float4 temp_output_3_0_g170288 = TVE_FadeParams;
				float4 ifLocalVar18_g170288 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170288 >= 0.5 )
				ifLocalVar18_g170288 = temp_output_17_0_g170288;
				else
				ifLocalVar18_g170288 = temp_output_3_0_g170288;
				float4 lerpResult22_g170288 = lerp( temp_output_3_0_g170288 , temp_output_17_0_g170288 , temp_output_19_0_g170288);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170288 = lerpResult22_g170288;
				#else
				float4 staticSwitch24_g170288 = ifLocalVar18_g170288;
				#endif
				half4 Fade_Params387_g170212 = staticSwitch24_g170288;
				float4 In_FadeParams204_g170212 = Fade_Params387_g170212;
				float temp_output_130_0_g170268 = _GlobalFormLayerValue;
				float temp_output_19_0_g170270 = TVE_FormLayers[(int)temp_output_130_0_g170268];
				float3 lerpResult168_g170212 = lerp( Model_PositionWS143_g170212 , Model_PivotWS145_g170212 , _GlobalFormPivotValue);
				half3 Input_Position180_g170271 = lerpResult168_g170212;
				float2 temp_output_75_0_g170271 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_82_0_g170271 = temp_output_130_0_g170268;
				float2 temp_output_119_0_g170271 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170271).xz ) );
				float temp_output_7_0_g170276 = 1.0;
				float temp_output_10_0_g170276 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170276 );
				float4 lerpResult131_g170271 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170271,temp_output_82_0_g170271, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170271,temp_output_82_0_g170271, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170271 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170276 ) / temp_output_10_0_g170276 ) ));
				float4 temp_output_17_0_g170270 = lerpResult131_g170271;
				float4 temp_output_3_0_g170270 = TVE_FormParams;
				float4 ifLocalVar18_g170270 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170270 >= 0.5 )
				ifLocalVar18_g170270 = temp_output_17_0_g170270;
				else
				ifLocalVar18_g170270 = temp_output_3_0_g170270;
				float4 lerpResult22_g170270 = lerp( temp_output_3_0_g170270 , temp_output_17_0_g170270 , temp_output_19_0_g170270);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170270 = lerpResult22_g170270;
				#else
				float4 staticSwitch24_g170270 = ifLocalVar18_g170270;
				#endif
				half4 Form_Params112_g170212 = staticSwitch24_g170270;
				float4 In_FormParams204_g170212 = Form_Params112_g170212;
				half4 Land_Params375_g170212 = TVE_LandParams;
				float4 In_LandParams204_g170212 = Land_Params375_g170212;
				float temp_output_136_0_g170259 = _GlobalWindLayerValue;
				float temp_output_19_0_g170261 = TVE_WindLayers[(int)temp_output_136_0_g170259];
				half3 Input_Position180_g170262 = Model_PositionWS143_g170212;
				float2 temp_output_75_0_g170262 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_82_0_g170262 = temp_output_136_0_g170259;
				float2 temp_output_119_0_g170262 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170262).xz ) );
				float temp_output_7_0_g170267 = 1.0;
				float temp_output_10_0_g170267 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170267 );
				float4 lerpResult131_g170262 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170262,temp_output_82_0_g170262, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170262,temp_output_82_0_g170262, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170262 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170267 ) / temp_output_10_0_g170267 ) ));
				float4 temp_output_17_0_g170261 = lerpResult131_g170262;
				float4 temp_output_3_0_g170261 = TVE_WindParams;
				float4 ifLocalVar18_g170261 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170261 >= 0.5 )
				ifLocalVar18_g170261 = temp_output_17_0_g170261;
				else
				ifLocalVar18_g170261 = temp_output_3_0_g170261;
				float4 lerpResult22_g170261 = lerp( temp_output_3_0_g170261 , temp_output_17_0_g170261 , temp_output_19_0_g170261);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170261 = lerpResult22_g170261;
				#else
				float4 staticSwitch24_g170261 = ifLocalVar18_g170261;
				#endif
				half4 Wind_Params88_g170212 = staticSwitch24_g170261;
				float4 In_WindParams204_g170212 = Wind_Params88_g170212;
				float temp_output_136_0_g170241 = _GlobalPushLayerValue;
				float temp_output_19_0_g170242 = TVE_PushLayers[(int)temp_output_136_0_g170241];
				half3 Input_Position180_g170243 = Model_PivotWS145_g170212;
				float2 temp_output_75_0_g170243 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_82_0_g170243 = temp_output_136_0_g170241;
				float2 temp_output_119_0_g170243 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170243).xz ) );
				float temp_output_7_0_g170248 = 1.0;
				float temp_output_10_0_g170248 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170248 );
				float4 lerpResult131_g170243 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170243,temp_output_82_0_g170243, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, temp_output_119_0_g170243,temp_output_82_0_g170243, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170243 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170248 ) / temp_output_10_0_g170248 ) ));
				float4 temp_output_17_0_g170242 = lerpResult131_g170243;
				float4 temp_output_3_0_g170242 = TVE_PushParams;
				float4 ifLocalVar18_g170242 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170242 >= 0.5 )
				ifLocalVar18_g170242 = temp_output_17_0_g170242;
				else
				ifLocalVar18_g170242 = temp_output_3_0_g170242;
				float4 lerpResult22_g170242 = lerp( temp_output_3_0_g170242 , temp_output_17_0_g170242 , temp_output_19_0_g170242);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170242 = lerpResult22_g170242;
				#else
				float4 staticSwitch24_g170242 = ifLocalVar18_g170242;
				#endif
				half4 Push_Params335_g170212 = staticSwitch24_g170242;
				float4 In_PushParams204_g170212 = Push_Params335_g170212;
				{
				Data204_g170212.Dummy = In_Dummy204_g170212;
				Data204_g170212.CoatParams = In_CoatParams204_g170212;
				Data204_g170212.PaintParams = In_PaintParams204_g170212;
				Data204_g170212.GlowParams = In_GlowParams204_g170212;
				Data204_g170212.AtmoParams = In_AtmoParams204_g170212;
				Data204_g170212.FadeParams = In_FadeParams204_g170212;
				Data204_g170212.FormParams= In_FormParams204_g170212;
				Data204_g170212.LandParams = In_LandParams204_g170212;
				Data204_g170212.WindParams = In_WindParams204_g170212;
				Data204_g170212.PushParams = In_PushParams204_g170212;
				}
				TVEGlobalData Data15_g170407 = Data204_g170212;
				float Out_Dummy15_g170407 = 0;
				float4 Out_CoatParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170407 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170407 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170407 = Data15_g170407.Dummy;
				Out_CoatParams15_g170407 = Data15_g170407.CoatParams;
				Out_PaintParams15_g170407 = Data15_g170407.PaintParams;
				Out_GlowParams15_g170407 = Data15_g170407.GlowParams;
				Out_AtmoParams15_g170407= Data15_g170407.AtmoParams;
				Out_FadeParams15_g170407= Data15_g170407.FadeParams;
				Out_FormParams15_g170407 = Data15_g170407.FormParams;
				Out_LandParams15_g170407 = Data15_g170407.LandParams;
				Out_WindParams15_g170407 = Data15_g170407.WindParams;
				Out_PushParams15_g170407 = Data15_g170407.PushParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170407;
				float lerpResult1013_g170394 = lerp( 1.0 , (Global_CoatParams975_g170394).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = lerpResult1013_g170394;
				#else
				float staticSwitch971_g170394 = 1.0;
				#endif
				half Blend_GlobalMask972_g170394 = staticSwitch971_g170394;
				float temp_output_432_0_g170394 = ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 );
				float clampResult17_g170417 = clamp( temp_output_432_0_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondBlendRemap.x;
				float temp_output_10_0_g170416 = ( _SecondBlendRemap.y - temp_output_7_0_g170416 );
				half Blend_Mask412_g170394 = ( saturate( ( ( clampResult17_g170417 - temp_output_7_0_g170416 ) / ( temp_output_10_0_g170416 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170405 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170408;
				float2 lerpResult40_g170419 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				SamplerState Sampler276_g170396 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = sampler_Linear_Repeat;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = sampler_Linear_Repeat;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = sampler_Linear_Repeat;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = sampler_Linear_Repeat;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = sampler_Linear_Repeat;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170419 = ( lerpResult40_g170419 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170419 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170405 = Final_NormalTS612_g170394;
				float3 appendResult68_g170420 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170420 = appendResult68_g170420;
				float3 worldNormal74_g170420 = normalize( float3(dot(tanToWorld0,tanNormal74_g170420), dot(tanToWorld1,tanNormal74_g170420), dot(tanToWorld2,tanNormal74_g170420)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170420;
				float3 In_NormalWS3_g170405 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170408;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170405 = Final_Masks613_g170394;
				float4 In_Emissive3_g170405 = Out_Emissive4_g170408;
				float3 temp_output_3_0_g170422 = Final_Albedo601_g170394;
				float dotResult20_g170422 = dot( temp_output_3_0_g170422 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170422;
				float In_Grayscale3_g170405 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170405 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170408;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170405 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170408;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170405 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170408;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170405 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170405 = Out_Translucency4_g170408;
				float In_Transmission3_g170405 = Out_Transmission4_g170408;
				float In_Thickness3_g170405 = Out_Thickness4_g170408;
				float In_Diffusion3_g170405 = Out_Diffusion4_g170408;
				{
				Data3_g170405.Dummy = In_Dummy3_g170405;
				Data3_g170405.Albedo = In_Albedo3_g170405;
				Data3_g170405.NormalTS = In_NormalTS3_g170405;
				Data3_g170405.NormalWS = In_NormalWS3_g170405;
				Data3_g170405.Shader = In_Shader3_g170405;
				Data3_g170405.Emissive= In_Emissive3_g170405;
				Data3_g170405.MultiMask = In_MultiMask3_g170405;
				Data3_g170405.Grayscale = In_Grayscale3_g170405;
				Data3_g170405.Luminosity = In_Luminosity3_g170405;
				Data3_g170405.AlphaClip = In_AlphaClip3_g170405;
				Data3_g170405.AlphaFade = In_AlphaFade3_g170405;
				Data3_g170405.Translucency = In_Translucency3_g170405;
				Data3_g170405.Transmission = In_Transmission3_g170405;
				Data3_g170405.Thickness = In_Thickness3_g170405;
				Data3_g170405.Diffusion = In_Diffusion3_g170405;
				}
				TVEVisualData Data4_g170450 = Data3_g170405;
				float Out_Dummy4_g170450 = 0;
				float3 Out_Albedo4_g170450 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170450 = float2( 0,0 );
				float3 Out_NormalWS4_g170450 = float3( 0,0,0 );
				float4 Out_Shader4_g170450 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170450 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170450 = 0;
				float Out_Grayscale4_g170450 = 0;
				float Out_Luminosity4_g170450 = 0;
				float Out_AlphaClip4_g170450 = 0;
				float Out_AlphaFade4_g170450 = 0;
				float3 Out_Translucency4_g170450 = float3( 0,0,0 );
				float Out_Transmission4_g170450 = 0;
				float Out_Thickness4_g170450 = 0;
				float Out_Diffusion4_g170450 = 0;
				{
				Out_Dummy4_g170450 = Data4_g170450.Dummy;
				Out_Albedo4_g170450 = Data4_g170450.Albedo;
				Out_NormalTS4_g170450 = Data4_g170450.NormalTS;
				Out_NormalWS4_g170450 = Data4_g170450.NormalWS;
				Out_Shader4_g170450 = Data4_g170450.Shader;
				Out_Emissive4_g170450= Data4_g170450.Emissive;
				Out_MultiMask4_g170450 = Data4_g170450.MultiMask;
				Out_Grayscale4_g170450 = Data4_g170450.Grayscale;
				Out_Luminosity4_g170450= Data4_g170450.Luminosity;
				Out_AlphaClip4_g170450 = Data4_g170450.AlphaClip;
				Out_AlphaFade4_g170450 = Data4_g170450.AlphaFade;
				Out_Translucency4_g170450 = Data4_g170450.Translucency;
				Out_Transmission4_g170450 = Data4_g170450.Transmission;
				Out_Thickness4_g170450 = Data4_g170450.Thickness;
				Out_Diffusion4_g170450 = Data4_g170450.Diffusion;
				}
				half3 Visual_Albedo527_g170434 = Out_Albedo4_g170450;
				TEXTURE2D(Texture276_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170434 = _third_coord_value;
				float4 temp_output_37_0_g170435 = Local_LayerCoords790_g170434;
				half4 Coords276_g170435 = temp_output_37_0_g170435;
				half2 TexCoord276_g170435 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170435 = SampleMain( Texture276_g170435 , Sampler276_g170435 , Coords276_g170435 , TexCoord276_g170435 );
				TEXTURE2D(Texture275_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170435 = temp_output_37_0_g170435;
				half2 TexCoord275_g170435 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170435 = SampleExtra( Texture275_g170435 , Sampler275_g170435 , Coords275_g170435 , TexCoord275_g170435 );
				TEXTURE2D(Texture238_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170435 = temp_output_37_0_g170435;
				TVEModelData Data15_g170462 = Data16_g170210;
				float Out_Dummy15_g170462 = 0;
				float3 Out_PositionOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170462 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170462 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170462 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170462 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170462 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170462 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170462 = float3( 0,0,0 );
				float4 Out_VertexData15_g170462 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170462 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170462 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170462 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_PositionOS15_g170462 = Data15_g170462.PositionOS;
				Out_PositionWS15_g170462 = Data15_g170462.PositionWS;
				Out_PositionWO15_g170462 = Data15_g170462.PositionWO;
				Out_PositionRawOS15_g170462 = Data15_g170462.PositionRawOS;
				Out_PositionAddOS15_g170462 = Data15_g170462.PositionAddOS;
				Out_PivotOS15_g170462 = Data15_g170462.PivotOS;
				Out_PivotWS15_g170462 = Data15_g170462.PivotWS;
				Out_PivotWO15_g170462 = Data15_g170462.PivotWO;
				Out_NormalOS15_g170462 = Data15_g170462.NormalOS;
				Out_NormalWS15_g170462 = Data15_g170462.NormalWS;
				Out_NormalRawOS15_g170462 = Data15_g170462.NormalRawOS;
				Out_NormalRawWS15_g170462 = Data15_g170462.NormalRawWS;
				Out_TangentOS15_g170462 = Data15_g170462.TangentOS;
				Out_ViewDirWS15_g170462 = Data15_g170462.ViewDirWS;
				Out_VertexData15_g170462 = Data15_g170462.VertexData;
				Out_MotionData15_g170462 = Data15_g170462.MotionData;
				Out_BoundsData15_g170462 = Data15_g170462.BoundsData;
				Out_RotationData15_g170462 = Data15_g170462.RotationData;
				}
				half3 Model_PositionWO636_g170434 = Out_PositionWO15_g170462;
				float3 temp_output_279_0_g170435 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170435 = temp_output_279_0_g170435;
				half4 localSamplePlanar2D238_g170435 = SamplePlanar2D( Texture238_g170435 , Sampler238_g170435 , Coords238_g170435 , WorldPosition238_g170435 );
				TEXTURE2D(Texture246_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition246_g170435 = temp_output_279_0_g170435;
				half3 Model_NormalWS869_g170434 = Out_NormalWS15_g170462;
				float3 temp_output_280_0_g170435 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170435 = temp_output_280_0_g170435;
				half4 localSamplePlanar3D246_g170435 = SamplePlanar3D( Texture246_g170435 , Sampler246_g170435 , Coords246_g170435 , WorldPosition246_g170435 , WorldNormal246_g170435 );
				TEXTURE2D(Texture234_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170435 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170435 = temp_output_37_0_g170435;
				float3 WorldPosition234_g170435 = temp_output_279_0_g170435;
				float4 localSampleStochastic2D234_g170435 = SampleStochastic2D( Texture234_g170435 , Sampler234_g170435 , Coords234_g170435 , WorldPosition234_g170435 );
				TEXTURE2D(Texture263_g170435) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170435 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170435 = temp_output_37_0_g170435;
				half3 WorldPosition263_g170435 = temp_output_279_0_g170435;
				half3 WorldNormal263_g170435 = temp_output_280_0_g170435;
				half4 localSampleStochastic3D263_g170435 = SampleStochastic3D( Texture263_g170435 , Sampler263_g170435 , Coords263_g170435 , WorldPosition263_g170435 , WorldNormal263_g170435 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170434 = localSampleExtra275_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170434 = localSamplePlanar2D238_g170435;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170434 = localSamplePlanar3D246_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170434 = localSampleStochastic2D234_g170435;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170434 = localSampleStochastic3D263_g170435;
				#else
				float4 staticSwitch693_g170434 = localSampleMain276_g170435;
				#endif
				half4 Local_AlbedoTex777_g170434 = staticSwitch693_g170434;
				float3 lerpResult716_g170434 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170434).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170434 = lerpResult716_g170434;
				TEXTURE2D(Texture276_g170437) = _ThirdShaderTex;
				SamplerState Sampler276_g170437 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170437 = Local_LayerCoords790_g170434;
				half4 Coords276_g170437 = temp_output_37_0_g170437;
				half2 TexCoord276_g170437 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170437 = SampleMain( Texture276_g170437 , Sampler276_g170437 , Coords276_g170437 , TexCoord276_g170437 );
				TEXTURE2D(Texture275_g170437) = _ThirdShaderTex;
				SamplerState Sampler275_g170437 = sampler_Linear_Repeat;
				half4 Coords275_g170437 = temp_output_37_0_g170437;
				half2 TexCoord275_g170437 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170437 = SampleExtra( Texture275_g170437 , Sampler275_g170437 , Coords275_g170437 , TexCoord275_g170437 );
				TEXTURE2D(Texture238_g170437) = _ThirdShaderTex;
				SamplerState Sampler238_g170437 = sampler_Linear_Repeat;
				half4 Coords238_g170437 = temp_output_37_0_g170437;
				float3 temp_output_279_0_g170437 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170437 = temp_output_279_0_g170437;
				half4 localSamplePlanar2D238_g170437 = SamplePlanar2D( Texture238_g170437 , Sampler238_g170437 , Coords238_g170437 , WorldPosition238_g170437 );
				TEXTURE2D(Texture246_g170437) = _ThirdShaderTex;
				SamplerState Sampler246_g170437 = sampler_Linear_Repeat;
				half4 Coords246_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition246_g170437 = temp_output_279_0_g170437;
				float3 temp_output_280_0_g170437 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170437 = temp_output_280_0_g170437;
				half4 localSamplePlanar3D246_g170437 = SamplePlanar3D( Texture246_g170437 , Sampler246_g170437 , Coords246_g170437 , WorldPosition246_g170437 , WorldNormal246_g170437 );
				TEXTURE2D(Texture234_g170437) = _ThirdShaderTex;
				SamplerState Sampler234_g170437 = sampler_Linear_Repeat;
				float4 Coords234_g170437 = temp_output_37_0_g170437;
				float3 WorldPosition234_g170437 = temp_output_279_0_g170437;
				float4 localSampleStochastic2D234_g170437 = SampleStochastic2D( Texture234_g170437 , Sampler234_g170437 , Coords234_g170437 , WorldPosition234_g170437 );
				TEXTURE2D(Texture263_g170437) = _ThirdShaderTex;
				SamplerState Sampler263_g170437 = sampler_Linear_Repeat;
				half4 Coords263_g170437 = temp_output_37_0_g170437;
				half3 WorldPosition263_g170437 = temp_output_279_0_g170437;
				half3 WorldNormal263_g170437 = temp_output_280_0_g170437;
				half4 localSampleStochastic3D263_g170437 = SampleStochastic3D( Texture263_g170437 , Sampler263_g170437 , Coords263_g170437 , WorldPosition263_g170437 , WorldNormal263_g170437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170434 = localSampleExtra275_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170434 = localSamplePlanar2D238_g170437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170434 = localSamplePlanar3D246_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170434 = localSampleStochastic2D234_g170437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170434 = localSampleStochastic3D263_g170437;
				#else
				float4 staticSwitch722_g170434 = localSampleMain276_g170437;
				#endif
				half4 Local_ShaderTex775_g170434 = staticSwitch722_g170434;
				float lerpResult739_g170434 = lerp( 1.0 , (Local_ShaderTex775_g170434).y , _ThirdOcclusionValue);
				float4 appendResult749_g170434 = (float4(( (Local_ShaderTex775_g170434).x * _ThirdMetallicValue ) , lerpResult739_g170434 , (Local_ShaderTex775_g170434).z , ( (Local_ShaderTex775_g170434).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170434 = appendResult749_g170434;
				float clampResult17_g170440 = clamp( (Local_Masks750_g170434).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170441 = ( _ThirdMultiRemap.y - temp_output_7_0_g170441 );
				float temp_output_765_0_g170434 = saturate( ( ( clampResult17_g170440 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) );
				half Local_MultiMask767_g170434 = temp_output_765_0_g170434;
				float lerpResult705_g170434 = lerp( 1.0 , Local_MultiMask767_g170434 , _ThirdColorMode);
				float4 lerpResult706_g170434 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170434);
				half3 Local_ColorRGB774_g170434 = (lerpResult706_g170434).rgb;
				half3 Local_Albedo768_g170434 = ( Local_AlbedoRGB771_g170434 * Local_ColorRGB774_g170434 );
				float3 lerpResult985_g170434 = lerp( Local_Albedo768_g170434 , ( Visual_Albedo527_g170434 * Local_Albedo768_g170434 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170461) = _ThirdMaskTex;
				SamplerState Sampler276_g170461 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170434 = _third_mask_coord_value;
				float4 temp_output_37_0_g170461 = Local_MaskCoords813_g170434;
				half4 Coords276_g170461 = temp_output_37_0_g170461;
				half2 TexCoord276_g170461 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170461 = SampleMain( Texture276_g170461 , Sampler276_g170461 , Coords276_g170461 , TexCoord276_g170461 );
				TEXTURE2D(Texture275_g170461) = _ThirdMaskTex;
				SamplerState Sampler275_g170461 = sampler_Linear_Repeat;
				half4 Coords275_g170461 = temp_output_37_0_g170461;
				half2 TexCoord275_g170461 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170461 = SampleExtra( Texture275_g170461 , Sampler275_g170461 , Coords275_g170461 , TexCoord275_g170461 );
				TEXTURE2D(Texture238_g170461) = _ThirdMaskTex;
				SamplerState Sampler238_g170461 = sampler_Linear_Repeat;
				half4 Coords238_g170461 = temp_output_37_0_g170461;
				float3 temp_output_279_0_g170461 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170461 = temp_output_279_0_g170461;
				half4 localSamplePlanar2D238_g170461 = SamplePlanar2D( Texture238_g170461 , Sampler238_g170461 , Coords238_g170461 , WorldPosition238_g170461 );
				TEXTURE2D(Texture246_g170461) = _ThirdMaskTex;
				SamplerState Sampler246_g170461 = sampler_Linear_Repeat;
				half4 Coords246_g170461 = temp_output_37_0_g170461;
				half3 WorldPosition246_g170461 = temp_output_279_0_g170461;
				float3 temp_output_280_0_g170461 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170461 = temp_output_280_0_g170461;
				half4 localSamplePlanar3D246_g170461 = SamplePlanar3D( Texture246_g170461 , Sampler246_g170461 , Coords246_g170461 , WorldPosition246_g170461 , WorldNormal246_g170461 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170434 = localSampleExtra275_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170434 = localSamplePlanar2D238_g170461;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170434 = localSamplePlanar3D246_g170461;
				#else
				float4 staticSwitch817_g170434 = localSampleMain276_g170461;
				#endif
				half4 Local_MaskTex861_g170434 = staticSwitch817_g170434;
				float clampResult17_g170445 = clamp( (Local_MaskTex861_g170434).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170446 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170446 = ( _ThirdMaskRemap.y - temp_output_7_0_g170446 );
				float lerpResult1028_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170445 - temp_output_7_0_g170446 ) / ( temp_output_10_0_g170446 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170434 = lerpResult1028_g170434;
				half4 Model_VertexMasks960_g170434 = Out_VertexData15_g170462;
				float4 break961_g170434 = Model_VertexMasks960_g170434;
				float4 break33_g170449 = _third_vert_mode;
				float temp_output_30_0_g170449 = ( break961_g170434.x * break33_g170449.x );
				float temp_output_29_0_g170449 = ( break961_g170434.y * break33_g170449.y );
				float temp_output_31_0_g170449 = ( break961_g170434.z * break33_g170449.z );
				float temp_output_28_0_g170449 = ( temp_output_30_0_g170449 + temp_output_29_0_g170449 + temp_output_31_0_g170449 + ( break961_g170434.w * break33_g170449.w ) );
				float clampResult17_g170443 = clamp( temp_output_28_0_g170449 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170444 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170444 = ( _ThirdMeshRemap.y - temp_output_7_0_g170444 );
				float lerpResult1026_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170443 - temp_output_7_0_g170444 ) / ( temp_output_10_0_g170444 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170460 = lerpResult1026_g170434;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_992_0_g170434 = staticSwitch14_g170460;
				half Blend_VertMask913_g170434 = temp_output_992_0_g170434;
				half3 Visual_NormalWS953_g170434 = Out_NormalWS4_g170450;
				float clampResult17_g170447 = clamp( saturate( (Visual_NormalWS953_g170434).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _ThirdProjRemap.x;
				float temp_output_10_0_g170448 = ( _ThirdProjRemap.y - temp_output_7_0_g170448 );
				float lerpResult1004_g170434 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170434 = lerpResult1004_g170434;
				TVEGlobalData Data15_g170452 = Data204_g170212;
				float Out_Dummy15_g170452 = 0;
				float4 Out_CoatParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170452 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_CoatParams15_g170452 = Data15_g170452.CoatParams;
				Out_PaintParams15_g170452 = Data15_g170452.PaintParams;
				Out_GlowParams15_g170452 = Data15_g170452.GlowParams;
				Out_AtmoParams15_g170452= Data15_g170452.AtmoParams;
				Out_FadeParams15_g170452= Data15_g170452.FadeParams;
				Out_FormParams15_g170452 = Data15_g170452.FormParams;
				Out_LandParams15_g170452 = Data15_g170452.LandParams;
				Out_WindParams15_g170452 = Data15_g170452.WindParams;
				Out_PushParams15_g170452 = Data15_g170452.PushParams;
				}
				half4 Global_CoatParams972_g170434 = Out_CoatParams15_g170452;
				float lerpResult1023_g170434 = lerp( 1.0 , (Global_CoatParams972_g170434).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170434 = lerpResult1023_g170434;
				#else
				float staticSwitch965_g170434 = 1.0;
				#endif
				half Blend_GlobalMask968_g170434 = staticSwitch965_g170434;
				float temp_output_432_0_g170434 = ( _ThirdIntensityValue * Detail_TexMask429_g170434 * Blend_VertMask913_g170434 * Blend_ProjMask912_g170434 * Blend_GlobalMask968_g170434 );
				float clampResult17_g170454 = clamp( temp_output_432_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170453 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170453 = ( _ThirdBlendRemap.y - temp_output_7_0_g170453 );
				half Detail_Mask412_g170434 = ( saturate( ( ( clampResult17_g170454 - temp_output_7_0_g170453 ) / ( temp_output_10_0_g170453 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170434 = lerp( Visual_Albedo527_g170434 , lerpResult985_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170434 = lerpResult989_g170434;
				#else
				float3 staticSwitch415_g170434 = Visual_Albedo527_g170434;
				#endif
				half3 Final_Albedo601_g170434 = staticSwitch415_g170434;
				float3 In_Albedo3_g170451 = Final_Albedo601_g170434;
				half2 Visual_NormalTS529_g170434 = Out_NormalTS4_g170450;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170434 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170436) = _ThirdNormalTex;
				SamplerState Sampler276_g170436 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170436 = Local_LayerCoords790_g170434;
				half4 Coords276_g170436 = temp_output_37_0_g170436;
				half2 TexCoord276_g170436 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170436 = SampleMain( Texture276_g170436 , Sampler276_g170436 , Coords276_g170436 , TexCoord276_g170436 );
				TEXTURE2D(Texture275_g170436) = _ThirdNormalTex;
				SamplerState Sampler275_g170436 = sampler_Linear_Repeat;
				half4 Coords275_g170436 = temp_output_37_0_g170436;
				half2 TexCoord275_g170436 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170436 = SampleExtra( Texture275_g170436 , Sampler275_g170436 , Coords275_g170436 , TexCoord275_g170436 );
				TEXTURE2D(Texture238_g170436) = _ThirdNormalTex;
				SamplerState Sampler238_g170436 = sampler_Linear_Repeat;
				half4 Coords238_g170436 = temp_output_37_0_g170436;
				float3 temp_output_279_0_g170436 = Model_PositionWO636_g170434;
				half3 WorldPosition238_g170436 = temp_output_279_0_g170436;
				half4 localSamplePlanar2D238_g170436 = SamplePlanar2D( Texture238_g170436 , Sampler238_g170436 , Coords238_g170436 , WorldPosition238_g170436 );
				TEXTURE2D(Texture246_g170436) = _ThirdNormalTex;
				SamplerState Sampler246_g170436 = sampler_Linear_Repeat;
				half4 Coords246_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition246_g170436 = temp_output_279_0_g170436;
				float3 temp_output_280_0_g170436 = Model_NormalWS869_g170434;
				half3 WorldNormal246_g170436 = temp_output_280_0_g170436;
				half4 localSamplePlanar3D246_g170436 = SamplePlanar3D( Texture246_g170436 , Sampler246_g170436 , Coords246_g170436 , WorldPosition246_g170436 , WorldNormal246_g170436 );
				TEXTURE2D(Texture234_g170436) = _ThirdNormalTex;
				SamplerState Sampler234_g170436 = sampler_Linear_Repeat;
				float4 Coords234_g170436 = temp_output_37_0_g170436;
				float3 WorldPosition234_g170436 = temp_output_279_0_g170436;
				float4 localSampleStochastic2D234_g170436 = SampleStochastic2D( Texture234_g170436 , Sampler234_g170436 , Coords234_g170436 , WorldPosition234_g170436 );
				TEXTURE2D(Texture263_g170436) = _ThirdNormalTex;
				SamplerState Sampler263_g170436 = sampler_Linear_Repeat;
				half4 Coords263_g170436 = temp_output_37_0_g170436;
				half3 WorldPosition263_g170436 = temp_output_279_0_g170436;
				half3 WorldNormal263_g170436 = temp_output_280_0_g170436;
				half4 localSampleStochastic3D263_g170436 = SampleStochastic3D( Texture263_g170436 , Sampler263_g170436 , Coords263_g170436 , WorldPosition263_g170436 , WorldNormal263_g170436 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170434 = localSampleExtra275_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170434 = localSamplePlanar2D238_g170436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170434 = localSamplePlanar3D246_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170434 = localSampleStochastic2D234_g170436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170434 = localSampleStochastic3D263_g170436;
				#else
				float4 staticSwitch698_g170434 = localSampleMain276_g170436;
				#endif
				half4 Local_NormalTex776_g170434 = staticSwitch698_g170434;
				half4 Normal_Packed45_g170438 = Local_NormalTex776_g170434;
				float2 appendResult58_g170438 = (float2(( (Normal_Packed45_g170438).x * (Normal_Packed45_g170438).w ) , (Normal_Packed45_g170438).y));
				half2 Normal_Default50_g170438 = appendResult58_g170438;
				half2 Normal_ASTC41_g170438 = (Normal_Packed45_g170438).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170438 = Normal_ASTC41_g170438;
				#else
				float2 staticSwitch38_g170438 = Normal_Default50_g170438;
				#endif
				half2 Normal_NO_DTX544_g170438 = (Normal_Packed45_g170438).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170438 = Normal_NO_DTX544_g170438;
				#else
				float2 staticSwitch37_g170438 = staticSwitch38_g170438;
				#endif
				float2 temp_output_724_0_g170434 = ( (staticSwitch37_g170438*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170439 = temp_output_724_0_g170434;
				float2 break71_g170439 = Normal_Planar45_g170439;
				float3 appendResult72_g170439 = (float3(break71_g170439.x , 0.0 , break71_g170439.y));
				float2 temp_output_858_0_g170434 = (mul( ase_worldToTangent, appendResult72_g170439 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170434 = temp_output_858_0_g170434;
				#else
				float2 staticSwitch727_g170434 = temp_output_724_0_g170434;
				#endif
				half2 Local_NormalTS729_g170434 = staticSwitch727_g170434;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170434 );
				float2 lerpResult405_g170434 = lerp( Visual_NormalTS529_g170434 , temp_output_36_0_g170456 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170434 = lerpResult405_g170434;
				#else
				float2 staticSwitch418_g170434 = Visual_NormalTS529_g170434;
				#endif
				half2 Final_NormalTS612_g170434 = staticSwitch418_g170434;
				float2 In_NormalTS3_g170451 = Final_NormalTS612_g170434;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170434 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3(dot(tanToWorld0,tanNormal74_g170457), dot(tanToWorld1,tanNormal74_g170457), dot(tanToWorld2,tanNormal74_g170457)) );
				half3 Final_NormalWS956_g170434 = worldNormal74_g170457;
				float3 In_NormalWS3_g170451 = Final_NormalWS956_g170434;
				half4 Visual_Shader531_g170434 = Out_Shader4_g170450;
				float4 lerpResult1000_g170434 = lerp( Local_Masks750_g170434 , ( Visual_Shader531_g170434 * Local_Masks750_g170434 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170434 = lerp( Visual_Shader531_g170434 , lerpResult1000_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170434 = lerpResult998_g170434;
				#else
				float4 staticSwitch451_g170434 = Visual_Shader531_g170434;
				#endif
				half4 Final_Masks613_g170434 = staticSwitch451_g170434;
				float4 In_Shader3_g170451 = Final_Masks613_g170434;
				float4 In_Emissive3_g170451 = Out_Emissive4_g170450;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170434;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170434 = dotResult20_g170459;
				float In_Grayscale3_g170451 = Final_Grayscale615_g170434;
				float clampResult651_g170434 = clamp( saturate( ( Final_Grayscale615_g170434 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170434 = clampResult651_g170434;
				float In_Luminosity3_g170451 = Final_Luminosity652_g170434;
				half Visual_MultiMask547_g170434 = Out_MultiMask4_g170450;
				float lerpResult477_g170434 = lerp( Visual_MultiMask547_g170434 , Local_MultiMask767_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch482_g170434 = lerpResult477_g170434;
				#else
				float staticSwitch482_g170434 = Visual_MultiMask547_g170434;
				#endif
				half Final_MultiMask572_g170434 = staticSwitch482_g170434;
				float In_MultiMask3_g170451 = Final_MultiMask572_g170434;
				half Visual_AlphaClip559_g170434 = Out_AlphaClip4_g170450;
				float temp_output_718_0_g170434 = (Local_AlbedoTex777_g170434).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170434 = ( temp_output_718_0_g170434 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170434 = temp_output_718_0_g170434;
				#endif
				half Local_AlphaClip772_g170434 = staticSwitch924_g170434;
				float lerpResult448_g170434 = lerp( Visual_AlphaClip559_g170434 , Local_AlphaClip772_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch564_g170434 = lerpResult448_g170434;
				#else
				float staticSwitch564_g170434 = Visual_AlphaClip559_g170434;
				#endif
				half Final_AlphaClip602_g170434 = staticSwitch564_g170434;
				float In_AlphaClip3_g170451 = Final_AlphaClip602_g170434;
				half Visual_AlphaFade588_g170434 = Out_AlphaFade4_g170450;
				half Local_AlphaFade773_g170434 = (lerpResult706_g170434).a;
				float lerpResult604_g170434 = lerp( Visual_AlphaFade588_g170434 , Local_AlphaFade773_g170434 , Detail_Mask412_g170434);
				#ifdef TVE_THIRD
				float staticSwitch608_g170434 = lerpResult604_g170434;
				#else
				float staticSwitch608_g170434 = Visual_AlphaFade588_g170434;
				#endif
				half Final_AlphaFade611_g170434 = staticSwitch608_g170434;
				float In_AlphaFade3_g170451 = Final_AlphaFade611_g170434;
				float3 In_Translucency3_g170451 = Out_Translucency4_g170450;
				float In_Transmission3_g170451 = Out_Transmission4_g170450;
				float In_Thickness3_g170451 = Out_Thickness4_g170450;
				float In_Diffusion3_g170451 = Out_Diffusion4_g170450;
				{
				Data3_g170451.Dummy = In_Dummy3_g170451;
				Data3_g170451.Albedo = In_Albedo3_g170451;
				Data3_g170451.NormalTS = In_NormalTS3_g170451;
				Data3_g170451.NormalWS = In_NormalWS3_g170451;
				Data3_g170451.Shader = In_Shader3_g170451;
				Data3_g170451.Emissive= In_Emissive3_g170451;
				Data3_g170451.MultiMask = In_MultiMask3_g170451;
				Data3_g170451.Grayscale = In_Grayscale3_g170451;
				Data3_g170451.Luminosity = In_Luminosity3_g170451;
				Data3_g170451.AlphaClip = In_AlphaClip3_g170451;
				Data3_g170451.AlphaFade = In_AlphaFade3_g170451;
				Data3_g170451.Translucency = In_Translucency3_g170451;
				Data3_g170451.Transmission = In_Transmission3_g170451;
				Data3_g170451.Thickness = In_Thickness3_g170451;
				Data3_g170451.Diffusion = In_Diffusion3_g170451;
				}
				TVEVisualData Data4_g170538 = Data3_g170451;
				float Out_Dummy4_g170538 = 0;
				float3 Out_Albedo4_g170538 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170538 = float2( 0,0 );
				float3 Out_NormalWS4_g170538 = float3( 0,0,0 );
				float4 Out_Shader4_g170538 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170538 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170538 = 0;
				float Out_Grayscale4_g170538 = 0;
				float Out_Luminosity4_g170538 = 0;
				float Out_AlphaClip4_g170538 = 0;
				float Out_AlphaFade4_g170538 = 0;
				float3 Out_Translucency4_g170538 = float3( 0,0,0 );
				float Out_Transmission4_g170538 = 0;
				float Out_Thickness4_g170538 = 0;
				float Out_Diffusion4_g170538 = 0;
				{
				Out_Dummy4_g170538 = Data4_g170538.Dummy;
				Out_Albedo4_g170538 = Data4_g170538.Albedo;
				Out_NormalTS4_g170538 = Data4_g170538.NormalTS;
				Out_NormalWS4_g170538 = Data4_g170538.NormalWS;
				Out_Shader4_g170538 = Data4_g170538.Shader;
				Out_Emissive4_g170538= Data4_g170538.Emissive;
				Out_MultiMask4_g170538 = Data4_g170538.MultiMask;
				Out_Grayscale4_g170538 = Data4_g170538.Grayscale;
				Out_Luminosity4_g170538= Data4_g170538.Luminosity;
				Out_AlphaClip4_g170538 = Data4_g170538.AlphaClip;
				Out_AlphaFade4_g170538 = Data4_g170538.AlphaFade;
				Out_Translucency4_g170538 = Data4_g170538.Translucency;
				Out_Transmission4_g170538 = Data4_g170538.Transmission;
				Out_Thickness4_g170538 = Data4_g170538.Thickness;
				Out_Diffusion4_g170538 = Data4_g170538.Diffusion;
				}
				half3 Visual_Albedo127_g170537 = Out_Albedo4_g170538;
				TVEModelData Data15_g170540 = Data16_g170210;
				float Out_Dummy15_g170540 = 0;
				float3 Out_PositionOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170540 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170540 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170540 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170540 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170540 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170540 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170540 = float3( 0,0,0 );
				float4 Out_VertexData15_g170540 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170540 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170540 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170540 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170540 = Data15_g170540.Dummy;
				Out_PositionOS15_g170540 = Data15_g170540.PositionOS;
				Out_PositionWS15_g170540 = Data15_g170540.PositionWS;
				Out_PositionWO15_g170540 = Data15_g170540.PositionWO;
				Out_PositionRawOS15_g170540 = Data15_g170540.PositionRawOS;
				Out_PositionAddOS15_g170540 = Data15_g170540.PositionAddOS;
				Out_PivotOS15_g170540 = Data15_g170540.PivotOS;
				Out_PivotWS15_g170540 = Data15_g170540.PivotWS;
				Out_PivotWO15_g170540 = Data15_g170540.PivotWO;
				Out_NormalOS15_g170540 = Data15_g170540.NormalOS;
				Out_NormalWS15_g170540 = Data15_g170540.NormalWS;
				Out_NormalRawOS15_g170540 = Data15_g170540.NormalRawOS;
				Out_NormalRawWS15_g170540 = Data15_g170540.NormalRawWS;
				Out_TangentOS15_g170540 = Data15_g170540.TangentOS;
				Out_ViewDirWS15_g170540 = Data15_g170540.ViewDirWS;
				Out_VertexData15_g170540 = Data15_g170540.VertexData;
				Out_MotionData15_g170540 = Data15_g170540.MotionData;
				Out_BoundsData15_g170540 = Data15_g170540.BoundsData;
				Out_RotationData15_g170540 = Data15_g170540.RotationData;
				}
				half4 Model_VertexData206_g170537 = Out_VertexData15_g170540;
				float4 break208_g170537 = Model_VertexData206_g170537;
				float4 break33_g170545 = _occlusion_vert_mode;
				float temp_output_30_0_g170545 = ( break208_g170537.x * break33_g170545.x );
				float temp_output_29_0_g170545 = ( break208_g170537.y * break33_g170545.y );
				float temp_output_31_0_g170545 = ( break208_g170537.z * break33_g170545.z );
				float temp_output_28_0_g170545 = ( temp_output_30_0_g170545 + temp_output_29_0_g170545 + temp_output_31_0_g170545 + ( break208_g170537.w * break33_g170545.w ) );
				float temp_output_194_0_g170537 = temp_output_28_0_g170545;
				float clampResult17_g170543 = clamp( temp_output_194_0_g170537 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170542 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170542 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170542 );
				float temp_output_6_0_g170544 = saturate( ( ( clampResult17_g170543 - temp_output_7_0_g170542 ) / ( temp_output_10_0_g170542 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170544 = ( temp_output_6_0_g170544 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170544 = temp_output_6_0_g170544;
				#endif
				half Occlusion_Mask82_g170537 = staticSwitch14_g170544;
				float3 lerpResult75_g170537 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170537);
				float3 lerpResult186_g170537 = lerp( Visual_Albedo127_g170537 , ( Visual_Albedo127_g170537 * lerpResult75_g170537 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170537 = lerpResult186_g170537;
				#else
				float3 staticSwitch171_g170537 = Visual_Albedo127_g170537;
				#endif
				half3 Final_Albedo160_g170537 = staticSwitch171_g170537;
				float3 In_Albedo3_g170539 = Final_Albedo160_g170537;
				float2 In_NormalTS3_g170539 = Out_NormalTS4_g170538;
				float3 In_NormalWS3_g170539 = Out_NormalWS4_g170538;
				float4 In_Shader3_g170539 = Out_Shader4_g170538;
				float4 In_Emissive3_g170539 = Out_Emissive4_g170538;
				float3 temp_output_3_0_g170541 = Final_Albedo160_g170537;
				float dotResult20_g170541 = dot( temp_output_3_0_g170541 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170537 = dotResult20_g170541;
				float In_Grayscale3_g170539 = Final_Grayscale164_g170537;
				float clampResult180_g170537 = clamp( saturate( ( Final_Grayscale164_g170537 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170537 = clampResult180_g170537;
				float In_Luminosity3_g170539 = Final_Shading181_g170537;
				float In_MultiMask3_g170539 = Out_MultiMask4_g170538;
				float In_AlphaClip3_g170539 = Out_AlphaClip4_g170538;
				float In_AlphaFade3_g170539 = Out_AlphaFade4_g170538;
				float3 In_Translucency3_g170539 = Out_Translucency4_g170538;
				float In_Transmission3_g170539 = Out_Transmission4_g170538;
				float In_Thickness3_g170539 = Out_Thickness4_g170538;
				float In_Diffusion3_g170539 = Out_Diffusion4_g170538;
				{
				Data3_g170539.Dummy = In_Dummy3_g170539;
				Data3_g170539.Albedo = In_Albedo3_g170539;
				Data3_g170539.NormalTS = In_NormalTS3_g170539;
				Data3_g170539.NormalWS = In_NormalWS3_g170539;
				Data3_g170539.Shader = In_Shader3_g170539;
				Data3_g170539.Emissive= In_Emissive3_g170539;
				Data3_g170539.MultiMask = In_MultiMask3_g170539;
				Data3_g170539.Grayscale = In_Grayscale3_g170539;
				Data3_g170539.Luminosity = In_Luminosity3_g170539;
				Data3_g170539.AlphaClip = In_AlphaClip3_g170539;
				Data3_g170539.AlphaFade = In_AlphaFade3_g170539;
				Data3_g170539.Translucency = In_Translucency3_g170539;
				Data3_g170539.Transmission = In_Transmission3_g170539;
				Data3_g170539.Thickness = In_Thickness3_g170539;
				Data3_g170539.Diffusion = In_Diffusion3_g170539;
				}
				TVEVisualData Data4_g170550 = Data3_g170539;
				float Out_Dummy4_g170550 = 0;
				float3 Out_Albedo4_g170550 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170550 = float2( 0,0 );
				float3 Out_NormalWS4_g170550 = float3( 0,0,0 );
				float4 Out_Shader4_g170550 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170550 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170550 = 0;
				float Out_Grayscale4_g170550 = 0;
				float Out_Luminosity4_g170550 = 0;
				float Out_AlphaClip4_g170550 = 0;
				float Out_AlphaFade4_g170550 = 0;
				float3 Out_Translucency4_g170550 = float3( 0,0,0 );
				float Out_Transmission4_g170550 = 0;
				float Out_Thickness4_g170550 = 0;
				float Out_Diffusion4_g170550 = 0;
				{
				Out_Dummy4_g170550 = Data4_g170550.Dummy;
				Out_Albedo4_g170550 = Data4_g170550.Albedo;
				Out_NormalTS4_g170550 = Data4_g170550.NormalTS;
				Out_NormalWS4_g170550 = Data4_g170550.NormalWS;
				Out_Shader4_g170550 = Data4_g170550.Shader;
				Out_Emissive4_g170550= Data4_g170550.Emissive;
				Out_MultiMask4_g170550 = Data4_g170550.MultiMask;
				Out_Grayscale4_g170550 = Data4_g170550.Grayscale;
				Out_Luminosity4_g170550= Data4_g170550.Luminosity;
				Out_AlphaClip4_g170550 = Data4_g170550.AlphaClip;
				Out_AlphaFade4_g170550 = Data4_g170550.AlphaFade;
				Out_Translucency4_g170550 = Data4_g170550.Translucency;
				Out_Transmission4_g170550 = Data4_g170550.Transmission;
				Out_Thickness4_g170550 = Data4_g170550.Thickness;
				Out_Diffusion4_g170550 = Data4_g170550.Diffusion;
				}
				half3 Visual_Albedo127_g170547 = Out_Albedo4_g170550;
				TVEModelData Data15_g170548 = Data16_g170210;
				float Out_Dummy15_g170548 = 0;
				float3 Out_PositionOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170548 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170548 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170548 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170548 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170548 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170548 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170548 = float3( 0,0,0 );
				float4 Out_VertexData15_g170548 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170548 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170548 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170548 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170548 = Data15_g170548.Dummy;
				Out_PositionOS15_g170548 = Data15_g170548.PositionOS;
				Out_PositionWS15_g170548 = Data15_g170548.PositionWS;
				Out_PositionWO15_g170548 = Data15_g170548.PositionWO;
				Out_PositionRawOS15_g170548 = Data15_g170548.PositionRawOS;
				Out_PositionAddOS15_g170548 = Data15_g170548.PositionAddOS;
				Out_PivotOS15_g170548 = Data15_g170548.PivotOS;
				Out_PivotWS15_g170548 = Data15_g170548.PivotWS;
				Out_PivotWO15_g170548 = Data15_g170548.PivotWO;
				Out_NormalOS15_g170548 = Data15_g170548.NormalOS;
				Out_NormalWS15_g170548 = Data15_g170548.NormalWS;
				Out_NormalRawOS15_g170548 = Data15_g170548.NormalRawOS;
				Out_NormalRawWS15_g170548 = Data15_g170548.NormalRawWS;
				Out_TangentOS15_g170548 = Data15_g170548.TangentOS;
				Out_ViewDirWS15_g170548 = Data15_g170548.ViewDirWS;
				Out_VertexData15_g170548 = Data15_g170548.VertexData;
				Out_MotionData15_g170548 = Data15_g170548.MotionData;
				Out_BoundsData15_g170548 = Data15_g170548.BoundsData;
				Out_RotationData15_g170548 = Data15_g170548.RotationData;
				}
				half4 Model_VertexData224_g170547 = Out_VertexData15_g170548;
				float4 break226_g170547 = Model_VertexData224_g170547;
				float4 break33_g170549 = _gradient_vert_mode;
				float temp_output_30_0_g170549 = ( break226_g170547.x * break33_g170549.x );
				float temp_output_29_0_g170549 = ( break226_g170547.y * break33_g170549.y );
				float temp_output_31_0_g170549 = ( break226_g170547.z * break33_g170549.z );
				float temp_output_28_0_g170549 = ( temp_output_30_0_g170549 + temp_output_29_0_g170549 + temp_output_31_0_g170549 + ( break226_g170547.w * break33_g170549.w ) );
				float temp_output_211_0_g170547 = temp_output_28_0_g170549;
				float clampResult17_g170554 = clamp( temp_output_211_0_g170547 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170555 = _GradientMeshRemap.x;
				float temp_output_10_0_g170555 = ( _GradientMeshRemap.y - temp_output_7_0_g170555 );
				float temp_output_6_0_g170556 = saturate( ( ( clampResult17_g170554 - temp_output_7_0_g170555 ) / ( temp_output_10_0_g170555 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170556 = ( temp_output_6_0_g170556 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170556 = temp_output_6_0_g170556;
				#endif
				half Gradient_VertMask82_g170547 = staticSwitch14_g170556;
				half Gradient_Mask200_g170547 = Gradient_VertMask82_g170547;
				float3 lerpResult75_g170547 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170547);
				float temp_output_162_11_g170547 = Out_MultiMask4_g170550;
				half Visual_MultiMask196_g170547 = temp_output_162_11_g170547;
				float lerpResult190_g170547 = lerp( 1.0 , Visual_MultiMask196_g170547 , _GradientMultiValue);
				half Gradient_MultiMask194_g170547 = lerpResult190_g170547;
				float3 lerpResult186_g170547 = lerp( Visual_Albedo127_g170547 , ( Visual_Albedo127_g170547 * lerpResult75_g170547 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170547 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170547 = lerpResult186_g170547;
				#else
				float3 staticSwitch171_g170547 = Visual_Albedo127_g170547;
				#endif
				half3 Final_Albedo160_g170547 = staticSwitch171_g170547;
				float3 In_Albedo3_g170551 = Final_Albedo160_g170547;
				float2 In_NormalTS3_g170551 = Out_NormalTS4_g170550;
				float3 In_NormalWS3_g170551 = Out_NormalWS4_g170550;
				float4 In_Shader3_g170551 = Out_Shader4_g170550;
				float4 In_Emissive3_g170551 = Out_Emissive4_g170550;
				float3 temp_output_3_0_g170552 = Final_Albedo160_g170547;
				float dotResult20_g170552 = dot( temp_output_3_0_g170552 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170547 = dotResult20_g170552;
				float In_Grayscale3_g170551 = Final_Grayscale164_g170547;
				float clampResult180_g170547 = clamp( saturate( ( Final_Grayscale164_g170547 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170547 = clampResult180_g170547;
				float In_Luminosity3_g170551 = Final_Luminosity181_g170547;
				float In_MultiMask3_g170551 = temp_output_162_11_g170547;
				float In_AlphaClip3_g170551 = Out_AlphaClip4_g170550;
				float In_AlphaFade3_g170551 = Out_AlphaFade4_g170550;
				float3 In_Translucency3_g170551 = Out_Translucency4_g170550;
				float In_Transmission3_g170551 = Out_Transmission4_g170550;
				float In_Thickness3_g170551 = Out_Thickness4_g170550;
				float In_Diffusion3_g170551 = Out_Diffusion4_g170550;
				{
				Data3_g170551.Dummy = In_Dummy3_g170551;
				Data3_g170551.Albedo = In_Albedo3_g170551;
				Data3_g170551.NormalTS = In_NormalTS3_g170551;
				Data3_g170551.NormalWS = In_NormalWS3_g170551;
				Data3_g170551.Shader = In_Shader3_g170551;
				Data3_g170551.Emissive= In_Emissive3_g170551;
				Data3_g170551.MultiMask = In_MultiMask3_g170551;
				Data3_g170551.Grayscale = In_Grayscale3_g170551;
				Data3_g170551.Luminosity = In_Luminosity3_g170551;
				Data3_g170551.AlphaClip = In_AlphaClip3_g170551;
				Data3_g170551.AlphaFade = In_AlphaFade3_g170551;
				Data3_g170551.Translucency = In_Translucency3_g170551;
				Data3_g170551.Transmission = In_Transmission3_g170551;
				Data3_g170551.Thickness = In_Thickness3_g170551;
				Data3_g170551.Diffusion = In_Diffusion3_g170551;
				}
				TVEVisualData Data4_g170559 = Data3_g170551;
				float Out_Dummy4_g170559 = 0;
				float3 Out_Albedo4_g170559 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170559 = float2( 0,0 );
				float3 Out_NormalWS4_g170559 = float3( 0,0,0 );
				float4 Out_Shader4_g170559 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170559 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170559 = 0;
				float Out_Grayscale4_g170559 = 0;
				float Out_Luminosity4_g170559 = 0;
				float Out_AlphaClip4_g170559 = 0;
				float Out_AlphaFade4_g170559 = 0;
				float3 Out_Translucency4_g170559 = float3( 0,0,0 );
				float Out_Transmission4_g170559 = 0;
				float Out_Thickness4_g170559 = 0;
				float Out_Diffusion4_g170559 = 0;
				{
				Out_Dummy4_g170559 = Data4_g170559.Dummy;
				Out_Albedo4_g170559 = Data4_g170559.Albedo;
				Out_NormalTS4_g170559 = Data4_g170559.NormalTS;
				Out_NormalWS4_g170559 = Data4_g170559.NormalWS;
				Out_Shader4_g170559 = Data4_g170559.Shader;
				Out_Emissive4_g170559= Data4_g170559.Emissive;
				Out_MultiMask4_g170559 = Data4_g170559.MultiMask;
				Out_Grayscale4_g170559 = Data4_g170559.Grayscale;
				Out_Luminosity4_g170559= Data4_g170559.Luminosity;
				Out_AlphaClip4_g170559 = Data4_g170559.AlphaClip;
				Out_AlphaFade4_g170559 = Data4_g170559.AlphaFade;
				Out_Translucency4_g170559 = Data4_g170559.Translucency;
				Out_Transmission4_g170559 = Data4_g170559.Transmission;
				Out_Thickness4_g170559 = Data4_g170559.Thickness;
				Out_Diffusion4_g170559 = Data4_g170559.Diffusion;
				}
				half3 Visual_Albedo127_g170557 = Out_Albedo4_g170559;
				TVEModelData Data15_g170560 = Data16_g170210;
				float Out_Dummy15_g170560 = 0;
				float3 Out_PositionOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170560 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170560 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170560 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170560 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170560 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170560 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170560 = float3( 0,0,0 );
				float4 Out_VertexData15_g170560 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170560 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170560 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170560 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170560 = Data15_g170560.Dummy;
				Out_PositionOS15_g170560 = Data15_g170560.PositionOS;
				Out_PositionWS15_g170560 = Data15_g170560.PositionWS;
				Out_PositionWO15_g170560 = Data15_g170560.PositionWO;
				Out_PositionRawOS15_g170560 = Data15_g170560.PositionRawOS;
				Out_PositionAddOS15_g170560 = Data15_g170560.PositionAddOS;
				Out_PivotOS15_g170560 = Data15_g170560.PivotOS;
				Out_PivotWS15_g170560 = Data15_g170560.PivotWS;
				Out_PivotWO15_g170560 = Data15_g170560.PivotWO;
				Out_NormalOS15_g170560 = Data15_g170560.NormalOS;
				Out_NormalWS15_g170560 = Data15_g170560.NormalWS;
				Out_NormalRawOS15_g170560 = Data15_g170560.NormalRawOS;
				Out_NormalRawWS15_g170560 = Data15_g170560.NormalRawWS;
				Out_TangentOS15_g170560 = Data15_g170560.TangentOS;
				Out_ViewDirWS15_g170560 = Data15_g170560.ViewDirWS;
				Out_VertexData15_g170560 = Data15_g170560.VertexData;
				Out_MotionData15_g170560 = Data15_g170560.MotionData;
				Out_BoundsData15_g170560 = Data15_g170560.BoundsData;
				Out_RotationData15_g170560 = Data15_g170560.RotationData;
				}
				half3 Model_PositionWO224_g170557 = Out_PositionWO15_g170560;
				half3 Model_PivotWO239_g170557 = Out_PivotWO15_g170560;
				float3 lerpResult242_g170557 = lerp( Model_PositionWO224_g170557 , Model_PivotWO239_g170557 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170562 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170557 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170564 = clamp( tex3DNode60_g170562.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170565 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170565 = ( _VariationNoiseRemap.y - temp_output_7_0_g170565 );
				float temp_output_238_0_g170557 = saturate( ( ( clampResult17_g170564 - temp_output_7_0_g170565 ) / ( temp_output_10_0_g170565 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170557 = temp_output_238_0_g170557;
				half Variaton_Mask200_g170557 = Variaton_NoiseMask82_g170557;
				float3 lerpResult75_g170557 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170557);
				float temp_output_162_11_g170557 = Out_MultiMask4_g170559;
				half Visual_MultiMask196_g170557 = temp_output_162_11_g170557;
				float lerpResult190_g170557 = lerp( 1.0 , Visual_MultiMask196_g170557 , _VariationMultiValue);
				half Variaton_MultiMask194_g170557 = lerpResult190_g170557;
				float3 lerpResult186_g170557 = lerp( Visual_Albedo127_g170557 , ( Visual_Albedo127_g170557 * lerpResult75_g170557 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170557 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170557 = lerpResult186_g170557;
				#else
				float3 staticSwitch171_g170557 = Visual_Albedo127_g170557;
				#endif
				half3 Final_Albedo160_g170557 = staticSwitch171_g170557;
				float3 In_Albedo3_g170561 = Final_Albedo160_g170557;
				float2 In_NormalTS3_g170561 = Out_NormalTS4_g170559;
				float3 In_NormalWS3_g170561 = Out_NormalWS4_g170559;
				float4 In_Shader3_g170561 = Out_Shader4_g170559;
				float4 In_Emissive3_g170561 = Out_Emissive4_g170559;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170557;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170557 = dotResult20_g170558;
				float In_Grayscale3_g170561 = Final_Grayscale164_g170557;
				float clampResult180_g170557 = clamp( saturate( ( Final_Grayscale164_g170557 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170557 = clampResult180_g170557;
				float In_Luminosity3_g170561 = Final_Luminosity181_g170557;
				float In_MultiMask3_g170561 = temp_output_162_11_g170557;
				float In_AlphaClip3_g170561 = Out_AlphaClip4_g170559;
				float In_AlphaFade3_g170561 = Out_AlphaFade4_g170559;
				float3 In_Translucency3_g170561 = Out_Translucency4_g170559;
				float In_Transmission3_g170561 = Out_Transmission4_g170559;
				float In_Thickness3_g170561 = Out_Thickness4_g170559;
				float In_Diffusion3_g170561 = Out_Diffusion4_g170559;
				{
				Data3_g170561.Dummy = In_Dummy3_g170561;
				Data3_g170561.Albedo = In_Albedo3_g170561;
				Data3_g170561.NormalTS = In_NormalTS3_g170561;
				Data3_g170561.NormalWS = In_NormalWS3_g170561;
				Data3_g170561.Shader = In_Shader3_g170561;
				Data3_g170561.Emissive= In_Emissive3_g170561;
				Data3_g170561.MultiMask = In_MultiMask3_g170561;
				Data3_g170561.Grayscale = In_Grayscale3_g170561;
				Data3_g170561.Luminosity = In_Luminosity3_g170561;
				Data3_g170561.AlphaClip = In_AlphaClip3_g170561;
				Data3_g170561.AlphaFade = In_AlphaFade3_g170561;
				Data3_g170561.Translucency = In_Translucency3_g170561;
				Data3_g170561.Transmission = In_Transmission3_g170561;
				Data3_g170561.Thickness = In_Thickness3_g170561;
				Data3_g170561.Diffusion = In_Diffusion3_g170561;
				}
				TVEVisualData Data4_g170572 = Data3_g170561;
				float Out_Dummy4_g170572 = 0;
				float3 Out_Albedo4_g170572 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170572 = float2( 0,0 );
				float3 Out_NormalWS4_g170572 = float3( 0,0,0 );
				float4 Out_Shader4_g170572 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170572 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170572 = 0;
				float Out_Grayscale4_g170572 = 0;
				float Out_Luminosity4_g170572 = 0;
				float Out_AlphaClip4_g170572 = 0;
				float Out_AlphaFade4_g170572 = 0;
				float3 Out_Translucency4_g170572 = float3( 0,0,0 );
				float Out_Transmission4_g170572 = 0;
				float Out_Thickness4_g170572 = 0;
				float Out_Diffusion4_g170572 = 0;
				{
				Out_Dummy4_g170572 = Data4_g170572.Dummy;
				Out_Albedo4_g170572 = Data4_g170572.Albedo;
				Out_NormalTS4_g170572 = Data4_g170572.NormalTS;
				Out_NormalWS4_g170572 = Data4_g170572.NormalWS;
				Out_Shader4_g170572 = Data4_g170572.Shader;
				Out_Emissive4_g170572= Data4_g170572.Emissive;
				Out_MultiMask4_g170572 = Data4_g170572.MultiMask;
				Out_Grayscale4_g170572 = Data4_g170572.Grayscale;
				Out_Luminosity4_g170572= Data4_g170572.Luminosity;
				Out_AlphaClip4_g170572 = Data4_g170572.AlphaClip;
				Out_AlphaFade4_g170572 = Data4_g170572.AlphaFade;
				Out_Translucency4_g170572 = Data4_g170572.Translucency;
				Out_Transmission4_g170572 = Data4_g170572.Transmission;
				Out_Thickness4_g170572 = Data4_g170572.Thickness;
				Out_Diffusion4_g170572 = Data4_g170572.Diffusion;
				}
				half3 Visual_Albedo139_g170567 = Out_Albedo4_g170572;
				float temp_output_200_12_g170567 = Out_Grayscale4_g170572;
				half Visual_Grayscale150_g170567 = temp_output_200_12_g170567;
				float3 temp_cast_37 = (Visual_Grayscale150_g170567).xxx;
				TVEGlobalData Data15_g170569 = Data204_g170212;
				float Out_Dummy15_g170569 = 0;
				float4 Out_CoatParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170569 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170569 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170569 = Data15_g170569.Dummy;
				Out_CoatParams15_g170569 = Data15_g170569.CoatParams;
				Out_PaintParams15_g170569 = Data15_g170569.PaintParams;
				Out_GlowParams15_g170569 = Data15_g170569.GlowParams;
				Out_AtmoParams15_g170569= Data15_g170569.AtmoParams;
				Out_FadeParams15_g170569= Data15_g170569.FadeParams;
				Out_FormParams15_g170569 = Data15_g170569.FormParams;
				Out_LandParams15_g170569 = Data15_g170569.LandParams;
				Out_WindParams15_g170569 = Data15_g170569.WindParams;
				Out_PushParams15_g170569 = Data15_g170569.PushParams;
				}
				half4 Global_PaintParams209_g170567 = Out_PaintParams15_g170569;
				float temp_output_6_0_g170571 = ( saturate( (Global_PaintParams209_g170567).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170571 = ( temp_output_6_0_g170571 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170571 = temp_output_6_0_g170571;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170567 = staticSwitch14_g170571;
				#else
				float staticSwitch283_g170567 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170567 = staticSwitch283_g170567;
				float3 lerpResult368_g170567 = lerp( Visual_Albedo139_g170567 , temp_cast_37 , ( Tinting_GlobalValue285_g170567 * _TintingGrayValue ));
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170567 = (Global_PaintParams209_g170567).xyz;
				#else
				float3 staticSwitch288_g170567 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170567 = staticSwitch288_g170567;
				float temp_output_200_11_g170567 = Out_MultiMask4_g170572;
				half Visual_MultiMask181_g170567 = temp_output_200_11_g170567;
				float lerpResult147_g170567 = lerp( 1.0 , Visual_MultiMask181_g170567 , _TintingMultiValue);
				half Tinting_MutiMask121_g170567 = lerpResult147_g170567;
				half Tinting_TexMask385_g170567 = 1.0;
				float temp_output_200_15_g170567 = Out_Luminosity4_g170572;
				half Visual_Luminosity257_g170567 = temp_output_200_15_g170567;
				float clampResult17_g170584 = clamp( Visual_Luminosity257_g170567 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170583 = _TintingLumaRemap.x;
				float temp_output_10_0_g170583 = ( _TintingLumaRemap.y - temp_output_7_0_g170583 );
				float lerpResult228_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170584 - temp_output_7_0_g170583 ) / ( temp_output_10_0_g170583 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170567 = lerpResult228_g170567;
				TVEModelData Data15_g170568 = Data16_g170210;
				float Out_Dummy15_g170568 = 0;
				float3 Out_PositionOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170568 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170568 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170568 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170568 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170568 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170568 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170568 = float3( 0,0,0 );
				float4 Out_VertexData15_g170568 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170568 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170568 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170568 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170568 = Data15_g170568.Dummy;
				Out_PositionOS15_g170568 = Data15_g170568.PositionOS;
				Out_PositionWS15_g170568 = Data15_g170568.PositionWS;
				Out_PositionWO15_g170568 = Data15_g170568.PositionWO;
				Out_PositionRawOS15_g170568 = Data15_g170568.PositionRawOS;
				Out_PositionAddOS15_g170568 = Data15_g170568.PositionAddOS;
				Out_PivotOS15_g170568 = Data15_g170568.PivotOS;
				Out_PivotWS15_g170568 = Data15_g170568.PivotWS;
				Out_PivotWO15_g170568 = Data15_g170568.PivotWO;
				Out_NormalOS15_g170568 = Data15_g170568.NormalOS;
				Out_NormalWS15_g170568 = Data15_g170568.NormalWS;
				Out_NormalRawOS15_g170568 = Data15_g170568.NormalRawOS;
				Out_NormalRawWS15_g170568 = Data15_g170568.NormalRawWS;
				Out_TangentOS15_g170568 = Data15_g170568.TangentOS;
				Out_ViewDirWS15_g170568 = Data15_g170568.ViewDirWS;
				Out_VertexData15_g170568 = Data15_g170568.VertexData;
				Out_MotionData15_g170568 = Data15_g170568.MotionData;
				Out_BoundsData15_g170568 = Data15_g170568.BoundsData;
				Out_RotationData15_g170568 = Data15_g170568.RotationData;
				}
				half4 Model_VertexMasks307_g170567 = Out_VertexData15_g170568;
				float4 break311_g170567 = Model_VertexMasks307_g170567;
				float4 break33_g170576 = _tinting_vert_mode;
				float temp_output_30_0_g170576 = ( break311_g170567.x * break33_g170576.x );
				float temp_output_29_0_g170576 = ( break311_g170567.y * break33_g170576.y );
				float temp_output_31_0_g170576 = ( break311_g170567.z * break33_g170576.z );
				float temp_output_28_0_g170576 = ( temp_output_30_0_g170576 + temp_output_29_0_g170576 + temp_output_31_0_g170576 + ( break311_g170567.w * break33_g170576.w ) );
				float clampResult17_g170582 = clamp( temp_output_28_0_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170581 = _TintingMeshRemap.x;
				float temp_output_10_0_g170581 = ( _TintingMeshRemap.y - temp_output_7_0_g170581 );
				float lerpResult370_g170567 = lerp( 1.0 , saturate( ( ( clampResult17_g170582 - temp_output_7_0_g170581 ) / ( temp_output_10_0_g170581 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170585 = lerpResult370_g170567;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170585 = ( temp_output_6_0_g170585 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170585 = temp_output_6_0_g170585;
				#endif
				float temp_output_333_0_g170567 = staticSwitch14_g170585;
				half Tinting_VertMask309_g170567 = temp_output_333_0_g170567;
				half Tinting_NoiseMask213_g170567 = 1.0;
				half Custom_Mask345_g170567 = 1.0;
				float temp_output_7_0_g170579 = _TintingBlendRemap.x;
				float temp_output_10_0_g170579 = ( _TintingBlendRemap.y - temp_output_7_0_g170579 );
				half Tinting_Mask242_g170567 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170567 * Tinting_TexMask385_g170567 * Tinting_LumaMask153_g170567 * Tinting_VertMask309_g170567 * Tinting_NoiseMask213_g170567 * Tinting_GlobalValue285_g170567 * Custom_Mask345_g170567 ) - temp_output_7_0_g170579 ) / ( temp_output_10_0_g170579 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170567 = lerp( Visual_Albedo139_g170567 , ( lerpResult368_g170567 * 4.594794 * Tinting_ColorGlobal290_g170567 * (_TintingColor).rgb ) , Tinting_Mask242_g170567);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170567 = lerpResult90_g170567;
				#else
				float3 staticSwitch286_g170567 = Visual_Albedo139_g170567;
				#endif
				half3 Final_Albedo97_g170567 = staticSwitch286_g170567;
				float3 In_Albedo3_g170570 = Final_Albedo97_g170567;
				float2 In_NormalTS3_g170570 = Out_NormalTS4_g170572;
				float3 In_NormalWS3_g170570 = Out_NormalWS4_g170572;
				float4 In_Shader3_g170570 = Out_Shader4_g170572;
				float4 In_Emissive3_g170570 = Out_Emissive4_g170572;
				float In_Grayscale3_g170570 = temp_output_200_12_g170567;
				float In_Luminosity3_g170570 = temp_output_200_15_g170567;
				float In_MultiMask3_g170570 = temp_output_200_11_g170567;
				float In_AlphaClip3_g170570 = Out_AlphaClip4_g170572;
				float In_AlphaFade3_g170570 = Out_AlphaFade4_g170572;
				float3 In_Translucency3_g170570 = Out_Translucency4_g170572;
				float In_Transmission3_g170570 = Out_Transmission4_g170572;
				float In_Thickness3_g170570 = Out_Thickness4_g170572;
				float In_Diffusion3_g170570 = Out_Diffusion4_g170572;
				{
				Data3_g170570.Dummy = In_Dummy3_g170570;
				Data3_g170570.Albedo = In_Albedo3_g170570;
				Data3_g170570.NormalTS = In_NormalTS3_g170570;
				Data3_g170570.NormalWS = In_NormalWS3_g170570;
				Data3_g170570.Shader = In_Shader3_g170570;
				Data3_g170570.Emissive= In_Emissive3_g170570;
				Data3_g170570.MultiMask = In_MultiMask3_g170570;
				Data3_g170570.Grayscale = In_Grayscale3_g170570;
				Data3_g170570.Luminosity = In_Luminosity3_g170570;
				Data3_g170570.AlphaClip = In_AlphaClip3_g170570;
				Data3_g170570.AlphaFade = In_AlphaFade3_g170570;
				Data3_g170570.Translucency = In_Translucency3_g170570;
				Data3_g170570.Transmission = In_Transmission3_g170570;
				Data3_g170570.Thickness = In_Thickness3_g170570;
				Data3_g170570.Diffusion = In_Diffusion3_g170570;
				}
				TVEVisualData Data4_g170593 = Data3_g170570;
				float Out_Dummy4_g170593 = 0;
				float3 Out_Albedo4_g170593 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170593 = float2( 0,0 );
				float3 Out_NormalWS4_g170593 = float3( 0,0,0 );
				float4 Out_Shader4_g170593 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170593 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170593 = 0;
				float Out_Grayscale4_g170593 = 0;
				float Out_Luminosity4_g170593 = 0;
				float Out_AlphaClip4_g170593 = 0;
				float Out_AlphaFade4_g170593 = 0;
				float3 Out_Translucency4_g170593 = float3( 0,0,0 );
				float Out_Transmission4_g170593 = 0;
				float Out_Thickness4_g170593 = 0;
				float Out_Diffusion4_g170593 = 0;
				{
				Out_Dummy4_g170593 = Data4_g170593.Dummy;
				Out_Albedo4_g170593 = Data4_g170593.Albedo;
				Out_NormalTS4_g170593 = Data4_g170593.NormalTS;
				Out_NormalWS4_g170593 = Data4_g170593.NormalWS;
				Out_Shader4_g170593 = Data4_g170593.Shader;
				Out_Emissive4_g170593= Data4_g170593.Emissive;
				Out_MultiMask4_g170593 = Data4_g170593.MultiMask;
				Out_Grayscale4_g170593 = Data4_g170593.Grayscale;
				Out_Luminosity4_g170593= Data4_g170593.Luminosity;
				Out_AlphaClip4_g170593 = Data4_g170593.AlphaClip;
				Out_AlphaFade4_g170593 = Data4_g170593.AlphaFade;
				Out_Translucency4_g170593 = Data4_g170593.Translucency;
				Out_Transmission4_g170593 = Data4_g170593.Transmission;
				Out_Thickness4_g170593 = Data4_g170593.Thickness;
				Out_Diffusion4_g170593 = Data4_g170593.Diffusion;
				}
				half3 Visual_Albedo292_g170591 = Out_Albedo4_g170593;
				float temp_output_280_12_g170591 = Out_Grayscale4_g170593;
				half Visual_Grayscale308_g170591 = temp_output_280_12_g170591;
				float3 temp_cast_39 = (Visual_Grayscale308_g170591).xxx;
				TVEGlobalData Data15_g170592 = Data204_g170212;
				float Out_Dummy15_g170592 = 0;
				float4 Out_CoatParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170592 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170592 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170592 = Data15_g170592.Dummy;
				Out_CoatParams15_g170592 = Data15_g170592.CoatParams;
				Out_PaintParams15_g170592 = Data15_g170592.PaintParams;
				Out_GlowParams15_g170592 = Data15_g170592.GlowParams;
				Out_AtmoParams15_g170592= Data15_g170592.AtmoParams;
				Out_FadeParams15_g170592= Data15_g170592.FadeParams;
				Out_FormParams15_g170592 = Data15_g170592.FormParams;
				Out_LandParams15_g170592 = Data15_g170592.LandParams;
				Out_WindParams15_g170592 = Data15_g170592.WindParams;
				Out_PushParams15_g170592 = Data15_g170592.PushParams;
				}
				half4 Global_AtmoParams314_g170591 = Out_AtmoParams15_g170592;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170591 = ( (Global_AtmoParams314_g170591).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170591 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170591 = staticSwitch351_g170591;
				float3 lerpResult485_g170591 = lerp( Visual_Albedo292_g170591 , temp_cast_39 , ( Dryness_GlobalMask352_g170591 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170613 = RGBToHSV( lerpResult485_g170591 );
				half3 hsvTorgb61_g170613 = HSVToRGB( half3(( hsvTorgb58_g170613.x + _DrynessShiftValue ),hsvTorgb58_g170613.y,hsvTorgb58_g170613.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170591 = hsvTorgb61_g170613;
				#else
				float3 staticSwitch499_g170591 = lerpResult485_g170591;
				#endif
				half Dryness_TexMask478_g170591 = 1.0;
				float temp_output_280_11_g170591 = Out_MultiMask4_g170593;
				half Visual_MultiMask310_g170591 = temp_output_280_11_g170591;
				float lerpResult283_g170591 = lerp( 1.0 , Visual_MultiMask310_g170591 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170591 = lerpResult283_g170591;
				float temp_output_280_15_g170591 = Out_Luminosity4_g170593;
				half Visual_Luminosity309_g170591 = temp_output_280_15_g170591;
				float clampResult17_g170608 = clamp( Visual_Luminosity309_g170591 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170607 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170607 = ( _DrynessLumaRemap.y - temp_output_7_0_g170607 );
				float lerpResult295_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170608 - temp_output_7_0_g170607 ) / ( temp_output_10_0_g170607 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170591 = lerpResult295_g170591;
				TVEModelData Data15_g170594 = Data16_g170210;
				float Out_Dummy15_g170594 = 0;
				float3 Out_PositionOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170594 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170594 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170594 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170594 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170594 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170594 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170594 = float3( 0,0,0 );
				float4 Out_VertexData15_g170594 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170594 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170594 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170594 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170594 = Data15_g170594.Dummy;
				Out_PositionOS15_g170594 = Data15_g170594.PositionOS;
				Out_PositionWS15_g170594 = Data15_g170594.PositionWS;
				Out_PositionWO15_g170594 = Data15_g170594.PositionWO;
				Out_PositionRawOS15_g170594 = Data15_g170594.PositionRawOS;
				Out_PositionAddOS15_g170594 = Data15_g170594.PositionAddOS;
				Out_PivotOS15_g170594 = Data15_g170594.PivotOS;
				Out_PivotWS15_g170594 = Data15_g170594.PivotWS;
				Out_PivotWO15_g170594 = Data15_g170594.PivotWO;
				Out_NormalOS15_g170594 = Data15_g170594.NormalOS;
				Out_NormalWS15_g170594 = Data15_g170594.NormalWS;
				Out_NormalRawOS15_g170594 = Data15_g170594.NormalRawOS;
				Out_NormalRawWS15_g170594 = Data15_g170594.NormalRawWS;
				Out_TangentOS15_g170594 = Data15_g170594.TangentOS;
				Out_ViewDirWS15_g170594 = Data15_g170594.ViewDirWS;
				Out_VertexData15_g170594 = Data15_g170594.VertexData;
				Out_MotionData15_g170594 = Data15_g170594.MotionData;
				Out_BoundsData15_g170594 = Data15_g170594.BoundsData;
				Out_RotationData15_g170594 = Data15_g170594.RotationData;
				}
				half4 Model_VertexMasks386_g170591 = Out_VertexData15_g170594;
				float4 break375_g170591 = Model_VertexMasks386_g170591;
				float4 break33_g170601 = _dryness_vert_mode;
				float temp_output_30_0_g170601 = ( break375_g170591.x * break33_g170601.x );
				float temp_output_29_0_g170601 = ( break375_g170591.y * break33_g170601.y );
				float temp_output_31_0_g170601 = ( break375_g170591.z * break33_g170601.z );
				float temp_output_28_0_g170601 = ( temp_output_30_0_g170601 + temp_output_29_0_g170601 + temp_output_31_0_g170601 + ( break375_g170591.w * break33_g170601.w ) );
				float clampResult17_g170602 = clamp( temp_output_28_0_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170603 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170603 = ( _DrynessMeshRemap.y - temp_output_7_0_g170603 );
				float lerpResult452_g170591 = lerp( 1.0 , saturate( ( ( clampResult17_g170602 - temp_output_7_0_g170603 ) / ( temp_output_10_0_g170603 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170609 = lerpResult452_g170591;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170609 = ( temp_output_6_0_g170609 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170609 = temp_output_6_0_g170609;
				#endif
				float temp_output_448_0_g170591 = staticSwitch14_g170609;
				half Dryness_VertMask378_g170591 = temp_output_448_0_g170591;
				half Dryness_MaskNoise291_g170591 = 1.0;
				half Custom_Mask411_g170591 = 1.0;
				float temp_output_7_0_g170606 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170606 = ( _DrynessBlendRemap.y - temp_output_7_0_g170606 );
				half Dryness_Mask329_g170591 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170591 * Dryness_MultiMask302_g170591 * Dryness_LumaMask301_g170591 * Dryness_VertMask378_g170591 * Dryness_MaskNoise291_g170591 * Dryness_GlobalMask352_g170591 * Custom_Mask411_g170591 ) - temp_output_7_0_g170606 ) / ( temp_output_10_0_g170606 + 0.0001 ) ) );
				float3 lerpResult336_g170591 = lerp( Visual_Albedo292_g170591 , ( staticSwitch499_g170591 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170591 = lerpResult336_g170591;
				#else
				float3 staticSwitch356_g170591 = Visual_Albedo292_g170591;
				#endif
				half3 Final_Albedo331_g170591 = staticSwitch356_g170591;
				float3 In_Albedo3_g170595 = Final_Albedo331_g170591;
				float2 In_NormalTS3_g170595 = Out_NormalTS4_g170593;
				float3 In_NormalWS3_g170595 = Out_NormalWS4_g170593;
				half4 Visual_Shader415_g170591 = Out_Shader4_g170593;
				float4 break438_g170591 = Visual_Shader415_g170591;
				float4 appendResult439_g170591 = (float4(break438_g170591.x , break438_g170591.y , break438_g170591.z , ( break438_g170591.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170591 = lerp( Visual_Shader415_g170591 , appendResult439_g170591 , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170591 = lerpResult427_g170591;
				#else
				float4 staticSwitch426_g170591 = Visual_Shader415_g170591;
				#endif
				half4 Final_Shader433_g170591 = staticSwitch426_g170591;
				float4 In_Shader3_g170595 = Final_Shader433_g170591;
				float4 In_Emissive3_g170595 = Out_Emissive4_g170593;
				float In_Grayscale3_g170595 = temp_output_280_12_g170591;
				float In_Luminosity3_g170595 = temp_output_280_15_g170591;
				float In_MultiMask3_g170595 = temp_output_280_11_g170591;
				float In_AlphaClip3_g170595 = Out_AlphaClip4_g170593;
				float In_AlphaFade3_g170595 = Out_AlphaFade4_g170593;
				float3 In_Translucency3_g170595 = Out_Translucency4_g170593;
				half Visual_Transmission416_g170591 = Out_Transmission4_g170593;
				float lerpResult421_g170591 = lerp( Visual_Transmission416_g170591 , ( Visual_Transmission416_g170591 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170591);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170591 = lerpResult421_g170591;
				#else
				float staticSwitch418_g170591 = Visual_Transmission416_g170591;
				#endif
				half Final_Transmission425_g170591 = staticSwitch418_g170591;
				float In_Transmission3_g170595 = Final_Transmission425_g170591;
				float In_Thickness3_g170595 = Out_Thickness4_g170593;
				float In_Diffusion3_g170595 = Out_Diffusion4_g170593;
				{
				Data3_g170595.Dummy = In_Dummy3_g170595;
				Data3_g170595.Albedo = In_Albedo3_g170595;
				Data3_g170595.NormalTS = In_NormalTS3_g170595;
				Data3_g170595.NormalWS = In_NormalWS3_g170595;
				Data3_g170595.Shader = In_Shader3_g170595;
				Data3_g170595.Emissive= In_Emissive3_g170595;
				Data3_g170595.MultiMask = In_MultiMask3_g170595;
				Data3_g170595.Grayscale = In_Grayscale3_g170595;
				Data3_g170595.Luminosity = In_Luminosity3_g170595;
				Data3_g170595.AlphaClip = In_AlphaClip3_g170595;
				Data3_g170595.AlphaFade = In_AlphaFade3_g170595;
				Data3_g170595.Translucency = In_Translucency3_g170595;
				Data3_g170595.Transmission = In_Transmission3_g170595;
				Data3_g170595.Thickness = In_Thickness3_g170595;
				Data3_g170595.Diffusion = In_Diffusion3_g170595;
				}
				TVEVisualData Data4_g170615 = Data3_g170595;
				float Out_Dummy4_g170615 = 0;
				float3 Out_Albedo4_g170615 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170615 = float2( 0,0 );
				float3 Out_NormalWS4_g170615 = float3( 0,0,0 );
				float4 Out_Shader4_g170615 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170615 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170615 = 0;
				float Out_Grayscale4_g170615 = 0;
				float Out_Luminosity4_g170615 = 0;
				float Out_AlphaClip4_g170615 = 0;
				float Out_AlphaFade4_g170615 = 0;
				float3 Out_Translucency4_g170615 = float3( 0,0,0 );
				float Out_Transmission4_g170615 = 0;
				float Out_Thickness4_g170615 = 0;
				float Out_Diffusion4_g170615 = 0;
				{
				Out_Dummy4_g170615 = Data4_g170615.Dummy;
				Out_Albedo4_g170615 = Data4_g170615.Albedo;
				Out_NormalTS4_g170615 = Data4_g170615.NormalTS;
				Out_NormalWS4_g170615 = Data4_g170615.NormalWS;
				Out_Shader4_g170615 = Data4_g170615.Shader;
				Out_Emissive4_g170615= Data4_g170615.Emissive;
				Out_MultiMask4_g170615 = Data4_g170615.MultiMask;
				Out_Grayscale4_g170615 = Data4_g170615.Grayscale;
				Out_Luminosity4_g170615= Data4_g170615.Luminosity;
				Out_AlphaClip4_g170615 = Data4_g170615.AlphaClip;
				Out_AlphaFade4_g170615 = Data4_g170615.AlphaFade;
				Out_Translucency4_g170615 = Data4_g170615.Translucency;
				Out_Transmission4_g170615 = Data4_g170615.Transmission;
				Out_Thickness4_g170615 = Data4_g170615.Thickness;
				Out_Diffusion4_g170615 = Data4_g170615.Diffusion;
				}
				half3 Visual_Albedo127_g170614 = Out_Albedo4_g170615;
				float4 vertexToFrag24_g170566 = packedInput.ase_texcoord11;
				half4 Interp_Data1055 = vertexToFrag24_g170566;
				float clampResult208_g170614 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170614 = ( Visual_Albedo127_g170614 + ( ( Visual_Albedo127_g170614 * Visual_Albedo127_g170614 * 200.0 * _motion_highlight_color ) * clampResult208_g170614 ) );
				#else
				float3 staticSwitch209_g170614 = Visual_Albedo127_g170614;
				#endif
				half3 Final_Albedo160_g170614 = staticSwitch209_g170614;
				float3 In_Albedo3_g170616 = Final_Albedo160_g170614;
				float2 In_NormalTS3_g170616 = Out_NormalTS4_g170615;
				float3 In_NormalWS3_g170616 = Out_NormalWS4_g170615;
				float4 In_Shader3_g170616 = Out_Shader4_g170615;
				float4 In_Emissive3_g170616 = Out_Emissive4_g170615;
				float In_Grayscale3_g170616 = Out_Grayscale4_g170615;
				float In_Luminosity3_g170616 = Out_Luminosity4_g170615;
				float In_MultiMask3_g170616 = Out_MultiMask4_g170615;
				float In_AlphaClip3_g170616 = Out_AlphaClip4_g170615;
				float In_AlphaFade3_g170616 = Out_AlphaFade4_g170615;
				float3 In_Translucency3_g170616 = Out_Translucency4_g170615;
				float In_Transmission3_g170616 = Out_Transmission4_g170615;
				float In_Thickness3_g170616 = Out_Thickness4_g170615;
				float In_Diffusion3_g170616 = Out_Diffusion4_g170615;
				{
				Data3_g170616.Dummy = In_Dummy3_g170616;
				Data3_g170616.Albedo = In_Albedo3_g170616;
				Data3_g170616.NormalTS = In_NormalTS3_g170616;
				Data3_g170616.NormalWS = In_NormalWS3_g170616;
				Data3_g170616.Shader = In_Shader3_g170616;
				Data3_g170616.Emissive= In_Emissive3_g170616;
				Data3_g170616.MultiMask = In_MultiMask3_g170616;
				Data3_g170616.Grayscale = In_Grayscale3_g170616;
				Data3_g170616.Luminosity = In_Luminosity3_g170616;
				Data3_g170616.AlphaClip = In_AlphaClip3_g170616;
				Data3_g170616.AlphaFade = In_AlphaFade3_g170616;
				Data3_g170616.Translucency = In_Translucency3_g170616;
				Data3_g170616.Transmission = In_Transmission3_g170616;
				Data3_g170616.Thickness = In_Thickness3_g170616;
				Data3_g170616.Diffusion = In_Diffusion3_g170616;
				}
				TVEVisualData Data4_g170618 = Data3_g170616;
				float Out_Dummy4_g170618 = 0;
				float3 Out_Albedo4_g170618 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170618 = float2( 0,0 );
				float3 Out_NormalWS4_g170618 = float3( 0,0,0 );
				float4 Out_Shader4_g170618 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170618 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170618 = 0;
				float Out_Grayscale4_g170618 = 0;
				float Out_Luminosity4_g170618 = 0;
				float Out_AlphaClip4_g170618 = 0;
				float Out_AlphaFade4_g170618 = 0;
				float3 Out_Translucency4_g170618 = float3( 0,0,0 );
				float Out_Transmission4_g170618 = 0;
				float Out_Thickness4_g170618 = 0;
				float Out_Diffusion4_g170618 = 0;
				{
				Out_Dummy4_g170618 = Data4_g170618.Dummy;
				Out_Albedo4_g170618 = Data4_g170618.Albedo;
				Out_NormalTS4_g170618 = Data4_g170618.NormalTS;
				Out_NormalWS4_g170618 = Data4_g170618.NormalWS;
				Out_Shader4_g170618 = Data4_g170618.Shader;
				Out_Emissive4_g170618= Data4_g170618.Emissive;
				Out_MultiMask4_g170618 = Data4_g170618.MultiMask;
				Out_Grayscale4_g170618 = Data4_g170618.Grayscale;
				Out_Luminosity4_g170618= Data4_g170618.Luminosity;
				Out_AlphaClip4_g170618 = Data4_g170618.AlphaClip;
				Out_AlphaFade4_g170618 = Data4_g170618.AlphaFade;
				Out_Translucency4_g170618 = Data4_g170618.Translucency;
				Out_Transmission4_g170618 = Data4_g170618.Transmission;
				Out_Thickness4_g170618 = Data4_g170618.Thickness;
				Out_Diffusion4_g170618 = Data4_g170618.Diffusion;
				}
				half3 Visual_Albedo127_g170617 = Out_Albedo4_g170618;
				float3 temp_output_622_0_g170617 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170621 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170622 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170622 = ( temp_output_6_0_g170622 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170622 = temp_output_6_0_g170622;
				#endif
				half4 Overlay_Coords639_g170617 = staticSwitch14_g170622;
				float4 temp_output_37_0_g170621 = Overlay_Coords639_g170617;
				half4 Coords238_g170621 = temp_output_37_0_g170621;
				TVEModelData Data15_g170623 = Data16_g170210;
				float Out_Dummy15_g170623 = 0;
				float3 Out_PositionOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170623 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170623 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170623 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170623 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170623 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170623 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170623 = float3( 0,0,0 );
				float4 Out_VertexData15_g170623 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170623 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170623 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170623 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170623 = Data15_g170623.Dummy;
				Out_PositionOS15_g170623 = Data15_g170623.PositionOS;
				Out_PositionWS15_g170623 = Data15_g170623.PositionWS;
				Out_PositionWO15_g170623 = Data15_g170623.PositionWO;
				Out_PositionRawOS15_g170623 = Data15_g170623.PositionRawOS;
				Out_PositionAddOS15_g170623 = Data15_g170623.PositionAddOS;
				Out_PivotOS15_g170623 = Data15_g170623.PivotOS;
				Out_PivotWS15_g170623 = Data15_g170623.PivotWS;
				Out_PivotWO15_g170623 = Data15_g170623.PivotWO;
				Out_NormalOS15_g170623 = Data15_g170623.NormalOS;
				Out_NormalWS15_g170623 = Data15_g170623.NormalWS;
				Out_NormalRawOS15_g170623 = Data15_g170623.NormalRawOS;
				Out_NormalRawWS15_g170623 = Data15_g170623.NormalRawWS;
				Out_TangentOS15_g170623 = Data15_g170623.TangentOS;
				Out_ViewDirWS15_g170623 = Data15_g170623.ViewDirWS;
				Out_VertexData15_g170623 = Data15_g170623.VertexData;
				Out_MotionData15_g170623 = Data15_g170623.MotionData;
				Out_BoundsData15_g170623 = Data15_g170623.BoundsData;
				Out_RotationData15_g170623 = Data15_g170623.RotationData;
				}
				half3 Model_PositionWO602_g170617 = Out_PositionWO15_g170623;
				float3 temp_output_279_0_g170621 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
				half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
				TEXTURE2D(Texture246_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170621 = sampler_Linear_Repeat;
				half4 Coords246_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
				half3 Model_NormalWS712_g170617 = Out_NormalWS15_g170623;
				float3 temp_output_280_0_g170621 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
				half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
				TEXTURE2D(Texture234_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170621 = sampler_Linear_Repeat;
				float4 Coords234_g170621 = temp_output_37_0_g170621;
				float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
				float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
				TEXTURE2D(Texture263_g170621) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170621 = sampler_Linear_Repeat;
				half4 Coords263_g170621 = temp_output_37_0_g170621;
				half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
				half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
				half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170617 = localSamplePlanar3D246_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170617 = localSampleStochastic2D234_g170621;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170617 = localSampleStochastic3D263_g170621;
				#else
				float4 staticSwitch676_g170617 = localSamplePlanar2D238_g170621;
				#endif
				half3 Overlay_Albedo526_g170617 = (staticSwitch676_g170617).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170617 = ( temp_output_622_0_g170617 * Overlay_Albedo526_g170617 );
				#else
				float3 staticSwitch578_g170617 = temp_output_622_0_g170617;
				#endif
				float3 temp_output_6_0_g170629 = staticSwitch578_g170617;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170629 = ( temp_output_6_0_g170629 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170629 = temp_output_6_0_g170629;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				TEXTURE2D(Texture246_g170626) = _OverlayGlitterTex;
				SamplerState Sampler246_g170626 = sampler_Linear_Repeat;
				float4 appendResult863_g170617 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170626 = appendResult863_g170617;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO602_g170617;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				half Overlay_GlitterTex854_g170617 = (localSamplePlanar3D246_g170626).x;
				half3 Model_PositionWS879_g170617 = Out_PositionWS15_g170623;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170617 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170617 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170617 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170617 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170617 = staticSwitch868_g170617;
				TEXTURE2D(Texture276_g170643) = _OverlayMaskTex;
				SamplerState Sampler276_g170643 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170644 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				half4 Local_MaskCoords888_g170617 = staticSwitch14_g170644;
				float4 temp_output_37_0_g170643 = Local_MaskCoords888_g170617;
				half4 Coords276_g170643 = temp_output_37_0_g170643;
				half2 TexCoord276_g170643 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170643 = SampleMain( Texture276_g170643 , Sampler276_g170643 , Coords276_g170643 , TexCoord276_g170643 );
				TEXTURE2D(Texture275_g170643) = _OverlayMaskTex;
				SamplerState Sampler275_g170643 = sampler_Linear_Repeat;
				half4 Coords275_g170643 = temp_output_37_0_g170643;
				half2 TexCoord275_g170643 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170643 = SampleExtra( Texture275_g170643 , Sampler275_g170643 , Coords275_g170643 , TexCoord275_g170643 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170617 = localSampleExtra275_g170643;
				#else
				float4 staticSwitch894_g170617 = localSampleMain276_g170643;
				#endif
				half4 Local_MaskTex887_g170617 = staticSwitch894_g170617;
				float clampResult17_g170645 = clamp( (Local_MaskTex887_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170646 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170646 = ( _OverlayMaskRemap.y - temp_output_7_0_g170646 );
				float lerpResult900_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170645 - temp_output_7_0_g170646 ) / ( temp_output_10_0_g170646 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170617 = lerpResult900_g170617;
				float3 temp_output_739_21_g170617 = Out_NormalWS4_g170618;
				half3 Visual_NormalWS749_g170617 = temp_output_739_21_g170617;
				float clampResult17_g170639 = clamp( saturate( (Visual_NormalWS749_g170617).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170638 = _OverlayProjRemap.x;
				float temp_output_10_0_g170638 = ( _OverlayProjRemap.y - temp_output_7_0_g170638 );
				float lerpResult842_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170639 - temp_output_7_0_g170638 ) / ( temp_output_10_0_g170638 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170617 = lerpResult842_g170617;
				float temp_output_739_15_g170617 = Out_Luminosity4_g170618;
				half Visual_Luminosity654_g170617 = temp_output_739_15_g170617;
				float clampResult17_g170641 = clamp( Visual_Luminosity654_g170617 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170640 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170640 = ( _OverlayLumaRemap.y - temp_output_7_0_g170640 );
				float lerpResult587_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170641 - temp_output_7_0_g170640 ) / ( temp_output_10_0_g170640 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170617 = lerpResult587_g170617;
				half4 Model_VertexMasks791_g170617 = Out_VertexData15_g170623;
				float4 break792_g170617 = Model_VertexMasks791_g170617;
				float4 break33_g170631 = _overlay_vert_mode;
				float temp_output_30_0_g170631 = ( break792_g170617.x * break33_g170631.x );
				float temp_output_29_0_g170631 = ( break792_g170617.y * break33_g170631.y );
				float temp_output_31_0_g170631 = ( break792_g170617.z * break33_g170631.z );
				float temp_output_28_0_g170631 = ( temp_output_30_0_g170631 + temp_output_29_0_g170631 + temp_output_31_0_g170631 + ( break792_g170617.w * break33_g170631.w ) );
				float clampResult17_g170632 = clamp( temp_output_28_0_g170631 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170635 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170635 = ( _OverlayMeshRemap.y - temp_output_7_0_g170635 );
				float lerpResult881_g170617 = lerp( 1.0 , saturate( ( ( clampResult17_g170632 - temp_output_7_0_g170635 ) / ( temp_output_10_0_g170635 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170642 = lerpResult881_g170617;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170642 = ( temp_output_6_0_g170642 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170642 = temp_output_6_0_g170642;
				#endif
				float temp_output_831_0_g170617 = staticSwitch14_g170642;
				half Overlay_VertMask801_g170617 = temp_output_831_0_g170617;
				half Overlay_MaskNoise427_g170617 = 1.0;
				TVEGlobalData Data15_g170619 = Data204_g170212;
				float Out_Dummy15_g170619 = 0;
				float4 Out_CoatParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170619 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170619 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170619 = Data15_g170619.Dummy;
				Out_CoatParams15_g170619 = Data15_g170619.CoatParams;
				Out_PaintParams15_g170619 = Data15_g170619.PaintParams;
				Out_GlowParams15_g170619 = Data15_g170619.GlowParams;
				Out_AtmoParams15_g170619= Data15_g170619.AtmoParams;
				Out_FadeParams15_g170619= Data15_g170619.FadeParams;
				Out_FormParams15_g170619 = Data15_g170619.FormParams;
				Out_LandParams15_g170619 = Data15_g170619.LandParams;
				Out_WindParams15_g170619 = Data15_g170619.WindParams;
				Out_PushParams15_g170619 = Data15_g170619.PushParams;
				}
				half4 Global_AtmoParams516_g170617 = Out_AtmoParams15_g170619;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170617 = ( (Global_AtmoParams516_g170617).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170617 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170617 = staticSwitch705_g170617;
				half Custom_Mask646_g170617 = 1.0;
				float temp_output_7_0_g170647 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170647 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170647 );
				half Overlay_Mask494_g170617 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170617 * Overlay_MaskProj457_g170617 * Overlay_MaskLuma438_g170617 * Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 * Custom_Mask646_g170617 ) - temp_output_7_0_g170647 ) / ( temp_output_10_0_g170647 + 0.0001 ) ) );
				float3 lerpResult467_g170617 = lerp( Visual_Albedo127_g170617 , ( staticSwitch14_g170629 + Overlay_GlitterColor865_g170617 ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170617 = lerpResult467_g170617;
				#else
				float3 staticSwitch577_g170617 = Visual_Albedo127_g170617;
				#endif
				half3 Final_Albedo493_g170617 = staticSwitch577_g170617;
				float3 In_Albedo3_g170620 = Final_Albedo493_g170617;
				half2 Visual_NormalTS535_g170617 = Out_NormalTS4_g170618;
				TEXTURE2D(Texture238_g170624) = _OverlayNormalTex;
				SamplerState Sampler238_g170624 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170624 = Overlay_Coords639_g170617;
				half4 Coords238_g170624 = temp_output_37_0_g170624;
				float3 temp_output_279_0_g170624 = Model_PositionWO602_g170617;
				half3 WorldPosition238_g170624 = temp_output_279_0_g170624;
				half4 localSamplePlanar2D238_g170624 = SamplePlanar2D( Texture238_g170624 , Sampler238_g170624 , Coords238_g170624 , WorldPosition238_g170624 );
				TEXTURE2D(Texture246_g170624) = _OverlayNormalTex;
				SamplerState Sampler246_g170624 = sampler_Linear_Repeat;
				half4 Coords246_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition246_g170624 = temp_output_279_0_g170624;
				float3 temp_output_280_0_g170624 = Model_NormalWS712_g170617;
				half3 WorldNormal246_g170624 = temp_output_280_0_g170624;
				half4 localSamplePlanar3D246_g170624 = SamplePlanar3D( Texture246_g170624 , Sampler246_g170624 , Coords246_g170624 , WorldPosition246_g170624 , WorldNormal246_g170624 );
				TEXTURE2D(Texture234_g170624) = _OverlayNormalTex;
				SamplerState Sampler234_g170624 = sampler_Linear_Repeat;
				float4 Coords234_g170624 = temp_output_37_0_g170624;
				float3 WorldPosition234_g170624 = temp_output_279_0_g170624;
				float4 localSampleStochastic2D234_g170624 = SampleStochastic2D( Texture234_g170624 , Sampler234_g170624 , Coords234_g170624 , WorldPosition234_g170624 );
				TEXTURE2D(Texture263_g170624) = _OverlayNormalTex;
				SamplerState Sampler263_g170624 = sampler_Linear_Repeat;
				half4 Coords263_g170624 = temp_output_37_0_g170624;
				half3 WorldPosition263_g170624 = temp_output_279_0_g170624;
				half3 WorldNormal263_g170624 = temp_output_280_0_g170624;
				half4 localSampleStochastic3D263_g170624 = SampleStochastic3D( Texture263_g170624 , Sampler263_g170624 , Coords263_g170624 , WorldPosition263_g170624 , WorldNormal263_g170624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170617 = localSamplePlanar3D246_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170617 = localSampleStochastic2D234_g170624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170617 = localSampleStochastic3D263_g170624;
				#else
				float4 staticSwitch686_g170617 = localSamplePlanar2D238_g170624;
				#endif
				half4 Normal_Packed45_g170628 = staticSwitch686_g170617;
				float2 appendResult58_g170628 = (float2(( (Normal_Packed45_g170628).x * (Normal_Packed45_g170628).w ) , (Normal_Packed45_g170628).y));
				half2 Normal_Default50_g170628 = appendResult58_g170628;
				half2 Normal_ASTC41_g170628 = (Normal_Packed45_g170628).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170628 = Normal_ASTC41_g170628;
				#else
				float2 staticSwitch38_g170628 = Normal_Default50_g170628;
				#endif
				half2 Normal_NO_DTX544_g170628 = (Normal_Packed45_g170628).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170628 = Normal_NO_DTX544_g170628;
				#else
				float2 staticSwitch37_g170628 = staticSwitch38_g170628;
				#endif
				half2 Normal_Planar45_g170627 = (staticSwitch37_g170628*2.0 + -1.0);
				float2 break71_g170627 = Normal_Planar45_g170627;
				float3 appendResult72_g170627 = (float3(break71_g170627.x , 0.0 , break71_g170627.y));
				half2 Overlay_Normal528_g170617 = (mul( ase_worldToTangent, appendResult72_g170627 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170617 = Overlay_Normal528_g170617;
				#else
				float2 staticSwitch579_g170617 = Visual_NormalTS535_g170617;
				#endif
				float2 lerpResult551_g170617 = lerp( Visual_NormalTS535_g170617 , ( staticSwitch579_g170617 * _OverlayNormalValue ) , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170617 = lerpResult551_g170617;
				#else
				float2 staticSwitch583_g170617 = Visual_NormalTS535_g170617;
				#endif
				half2 Final_NormalTS499_g170617 = staticSwitch583_g170617;
				float2 In_NormalTS3_g170620 = Final_NormalTS499_g170617;
				float3 In_NormalWS3_g170620 = temp_output_739_21_g170617;
				half4 Visual_Masks536_g170617 = Out_Shader4_g170618;
				float4 appendResult585_g170617 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170617 = lerp( Visual_Masks536_g170617 , appendResult585_g170617 , Overlay_Mask494_g170617);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170617 = lerpResult584_g170617;
				#else
				float4 staticSwitch586_g170617 = Visual_Masks536_g170617;
				#endif
				half4 Final_Masks482_g170617 = staticSwitch586_g170617;
				float4 In_Shader3_g170620 = Final_Masks482_g170617;
				float4 In_Emissive3_g170620 = Out_Emissive4_g170618;
				float temp_output_739_12_g170617 = Out_Grayscale4_g170618;
				float In_Grayscale3_g170620 = temp_output_739_12_g170617;
				float In_Luminosity3_g170620 = temp_output_739_15_g170617;
				float In_MultiMask3_g170620 = Out_MultiMask4_g170618;
				float In_AlphaClip3_g170620 = Out_AlphaClip4_g170618;
				float In_AlphaFade3_g170620 = Out_AlphaFade4_g170618;
				float3 In_Translucency3_g170620 = Out_Translucency4_g170618;
				half Visual_Transmission699_g170617 = Out_Transmission4_g170618;
				float lerpResult746_g170617 = lerp( Visual_Transmission699_g170617 , ( Visual_Transmission699_g170617 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170617 * Overlay_MaskNoise427_g170617 * Overlay_MaskGlobal429_g170617 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170617 = lerpResult746_g170617;
				#else
				float staticSwitch703_g170617 = Visual_Transmission699_g170617;
				#endif
				half Final_Transmission702_g170617 = staticSwitch703_g170617;
				float In_Transmission3_g170620 = Final_Transmission702_g170617;
				float In_Thickness3_g170620 = Out_Thickness4_g170618;
				float In_Diffusion3_g170620 = Out_Diffusion4_g170618;
				{
				Data3_g170620.Dummy = In_Dummy3_g170620;
				Data3_g170620.Albedo = In_Albedo3_g170620;
				Data3_g170620.NormalTS = In_NormalTS3_g170620;
				Data3_g170620.NormalWS = In_NormalWS3_g170620;
				Data3_g170620.Shader = In_Shader3_g170620;
				Data3_g170620.Emissive= In_Emissive3_g170620;
				Data3_g170620.MultiMask = In_MultiMask3_g170620;
				Data3_g170620.Grayscale = In_Grayscale3_g170620;
				Data3_g170620.Luminosity = In_Luminosity3_g170620;
				Data3_g170620.AlphaClip = In_AlphaClip3_g170620;
				Data3_g170620.AlphaFade = In_AlphaFade3_g170620;
				Data3_g170620.Translucency = In_Translucency3_g170620;
				Data3_g170620.Transmission = In_Transmission3_g170620;
				Data3_g170620.Thickness = In_Thickness3_g170620;
				Data3_g170620.Diffusion = In_Diffusion3_g170620;
				}
				TVEVisualData Data4_g170654 = Data3_g170620;
				float Out_Dummy4_g170654 = 0;
				float3 Out_Albedo4_g170654 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170654 = float2( 0,0 );
				float3 Out_NormalWS4_g170654 = float3( 0,0,0 );
				float4 Out_Shader4_g170654 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170654 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170654 = 0;
				float Out_Grayscale4_g170654 = 0;
				float Out_Luminosity4_g170654 = 0;
				float Out_AlphaClip4_g170654 = 0;
				float Out_AlphaFade4_g170654 = 0;
				float3 Out_Translucency4_g170654 = float3( 0,0,0 );
				float Out_Transmission4_g170654 = 0;
				float Out_Thickness4_g170654 = 0;
				float Out_Diffusion4_g170654 = 0;
				{
				Out_Dummy4_g170654 = Data4_g170654.Dummy;
				Out_Albedo4_g170654 = Data4_g170654.Albedo;
				Out_NormalTS4_g170654 = Data4_g170654.NormalTS;
				Out_NormalWS4_g170654 = Data4_g170654.NormalWS;
				Out_Shader4_g170654 = Data4_g170654.Shader;
				Out_Emissive4_g170654= Data4_g170654.Emissive;
				Out_MultiMask4_g170654 = Data4_g170654.MultiMask;
				Out_Grayscale4_g170654 = Data4_g170654.Grayscale;
				Out_Luminosity4_g170654= Data4_g170654.Luminosity;
				Out_AlphaClip4_g170654 = Data4_g170654.AlphaClip;
				Out_AlphaFade4_g170654 = Data4_g170654.AlphaFade;
				Out_Translucency4_g170654 = Data4_g170654.Translucency;
				Out_Transmission4_g170654 = Data4_g170654.Transmission;
				Out_Thickness4_g170654 = Data4_g170654.Thickness;
				Out_Diffusion4_g170654 = Data4_g170654.Diffusion;
				}
				half3 Visual_Albedo127_g170653 = Out_Albedo4_g170654;
				TVEGlobalData Data15_g170666 = Data204_g170212;
				float Out_Dummy15_g170666 = 0;
				float4 Out_CoatParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170666 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170666 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170666 = Data15_g170666.Dummy;
				Out_CoatParams15_g170666 = Data15_g170666.CoatParams;
				Out_PaintParams15_g170666 = Data15_g170666.PaintParams;
				Out_GlowParams15_g170666 = Data15_g170666.GlowParams;
				Out_AtmoParams15_g170666= Data15_g170666.AtmoParams;
				Out_FadeParams15_g170666= Data15_g170666.FadeParams;
				Out_FormParams15_g170666 = Data15_g170666.FormParams;
				Out_LandParams15_g170666 = Data15_g170666.LandParams;
				Out_WindParams15_g170666 = Data15_g170666.WindParams;
				Out_PushParams15_g170666 = Data15_g170666.PushParams;
				}
				half4 Global_AtmoParams516_g170653 = Out_AtmoParams15_g170666;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170653 = ( (Global_AtmoParams516_g170653).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170653 = 1.0;
				#endif
				half Global_Wetness429_g170653 = staticSwitch663_g170653;
				half Wetness_Value866_g170653 = ( _WetnessIntensityValue * Global_Wetness429_g170653 );
				half4 Visual_Masks536_g170653 = Out_Shader4_g170654;
				float temp_output_757_0_g170653 = (Visual_Masks536_g170653).z;
				half Water_HeightMask782_g170653 = temp_output_757_0_g170653;
				float clampResult17_g170664 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170653 ) - Water_HeightMask782_g170653 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170665 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170665 );
				TVEModelData Data15_g170656 = Data16_g170210;
				float Out_Dummy15_g170656 = 0;
				float3 Out_PositionOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170656 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170656 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170656 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170656 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170656 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170656 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170656 = float3( 0,0,0 );
				float4 Out_VertexData15_g170656 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170656 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170656 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170656 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170656 = Data15_g170656.Dummy;
				Out_PositionOS15_g170656 = Data15_g170656.PositionOS;
				Out_PositionWS15_g170656 = Data15_g170656.PositionWS;
				Out_PositionWO15_g170656 = Data15_g170656.PositionWO;
				Out_PositionRawOS15_g170656 = Data15_g170656.PositionRawOS;
				Out_PositionAddOS15_g170656 = Data15_g170656.PositionAddOS;
				Out_PivotOS15_g170656 = Data15_g170656.PivotOS;
				Out_PivotWS15_g170656 = Data15_g170656.PivotWS;
				Out_PivotWO15_g170656 = Data15_g170656.PivotWO;
				Out_NormalOS15_g170656 = Data15_g170656.NormalOS;
				Out_NormalWS15_g170656 = Data15_g170656.NormalWS;
				Out_NormalRawOS15_g170656 = Data15_g170656.NormalRawOS;
				Out_NormalRawWS15_g170656 = Data15_g170656.NormalRawWS;
				Out_TangentOS15_g170656 = Data15_g170656.TangentOS;
				Out_ViewDirWS15_g170656 = Data15_g170656.ViewDirWS;
				Out_VertexData15_g170656 = Data15_g170656.VertexData;
				Out_MotionData15_g170656 = Data15_g170656.MotionData;
				Out_BoundsData15_g170656 = Data15_g170656.BoundsData;
				Out_RotationData15_g170656 = Data15_g170656.RotationData;
				}
				half3 Model_NormalWS798_g170653 = Out_NormalWS15_g170656;
				float temp_output_786_0_g170653 = saturate( (Model_NormalWS798_g170653).y );
				half Wetness_ProjMask790_g170653 = temp_output_786_0_g170653;
				half Water_Mask760_g170653 = ( saturate( ( ( clampResult17_g170664 - temp_output_7_0_g170665 ) / ( temp_output_10_0_g170665 + 0.0001 ) ) ) * Wetness_ProjMask790_g170653 );
				float3 lerpResult918_g170653 = lerp( Visual_Albedo127_g170653 , ( Visual_Albedo127_g170653 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170653 = lerpResult918_g170653;
				#else
				float3 staticSwitch946_g170653 = Visual_Albedo127_g170653;
				#endif
				float3 lerpResult768_g170653 = lerp( staticSwitch946_g170653 , ( staticSwitch946_g170653 * staticSwitch946_g170653 ) , _WetnessContrastValue);
				float3 lerpResult651_g170653 = lerp( Visual_Albedo127_g170653 , lerpResult768_g170653 , Wetness_Value866_g170653);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170653 = lerpResult651_g170653;
				#else
				float3 staticSwitch577_g170653 = Visual_Albedo127_g170653;
				#endif
				half3 Final_Albedo493_g170653 = staticSwitch577_g170653;
				float3 In_Albedo3_g170655 = Final_Albedo493_g170653;
				half2 Visual_Normal535_g170653 = Out_NormalTS4_g170654;
				float lerpResult877_g170653 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170653 = ( Visual_Normal535_g170653 * lerpResult877_g170653 );
				#else
				float2 staticSwitch957_g170653 = Visual_Normal535_g170653;
				#endif
				TEXTURE2D(Texture238_g170658) = _WetnessDropsTex;
				SamplerState Sampler238_g170658 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170653 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170658 = appendResult924_g170653;
				half4 Coords238_g170658 = temp_output_37_0_g170658;
				half3 Model_PositionWO602_g170653 = Out_PositionWO15_g170656;
				float3 temp_output_279_0_g170658 = Model_PositionWO602_g170653;
				half3 WorldPosition238_g170658 = temp_output_279_0_g170658;
				half4 localSamplePlanar2D238_g170658 = SamplePlanar2D( Texture238_g170658 , Sampler238_g170658 , Coords238_g170658 , WorldPosition238_g170658 );
				float4 temp_output_676_0_g170653 = localSamplePlanar2D238_g170658;
				half2 Rain_DropsNormal919_g170653 = (temp_output_676_0_g170653).zw;
				float2 temp_output_903_0_g170653 = (Rain_DropsNormal919_g170653*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170653 = (temp_output_676_0_g170653).xy;
				float2 lerpResult904_g170653 = lerp( temp_output_903_0_g170653 , (Rain_RingsNormal713_g170653*2.0 + -1.0) , ( Water_Mask760_g170653 * Water_Mask760_g170653 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170653 = lerpResult904_g170653;
				#else
				float2 staticSwitch960_g170653 = temp_output_903_0_g170653;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170653 = ( (Global_AtmoParams516_g170653).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170653 = 1.0;
				#endif
				half Global_Rain955_g170653 = staticSwitch949_g170653;
				half3 Model_PositionWS823_g170653 = Out_PositionWS15_g170656;
				half2 Normal_Planar45_g170669 = ( staticSwitch960_g170653 * Global_Rain955_g170653 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170653 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170669 = Normal_Planar45_g170669;
				float3 appendResult72_g170669 = (float3(break71_g170669.x , 0.0 , break71_g170669.y));
				half2 Wetness_Normal526_g170653 = (mul( ase_worldToTangent, appendResult72_g170669 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170653 = ( staticSwitch957_g170653 + ( Wetness_ProjMask790_g170653 * Wetness_Normal526_g170653 ) );
				#else
				float2 staticSwitch583_g170653 = Visual_Normal535_g170653;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170653 = staticSwitch583_g170653;
				#else
				float2 staticSwitch774_g170653 = Visual_Normal535_g170653;
				#endif
				half2 Final_Normal499_g170653 = staticSwitch774_g170653;
				float2 In_NormalTS3_g170655 = Final_Normal499_g170653;
				float3 In_NormalWS3_g170655 = Out_NormalWS4_g170654;
				float4 break658_g170653 = Visual_Masks536_g170653;
				float temp_output_935_0_g170653 = ( Wetness_Value866_g170653 * _WetnessSmoothnessValue );
				float lerpResult941_g170653 = lerp( temp_output_935_0_g170653 , 2.0 , Water_Mask760_g170653);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170653 = lerpResult941_g170653;
				#else
				float staticSwitch959_g170653 = temp_output_935_0_g170653;
				#endif
				float4 appendResult661_g170653 = (float4(break658_g170653.x , break658_g170653.y , break658_g170653.z , saturate( ( break658_g170653.w + staticSwitch959_g170653 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170653 = appendResult661_g170653;
				#else
				float4 staticSwitch586_g170653 = Visual_Masks536_g170653;
				#endif
				half4 Final_Masks482_g170653 = staticSwitch586_g170653;
				float4 In_Shader3_g170655 = Final_Masks482_g170653;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170654;
				float In_Grayscale3_g170655 = Out_Grayscale4_g170654;
				float In_Luminosity3_g170655 = Out_Luminosity4_g170654;
				float In_MultiMask3_g170655 = Out_MultiMask4_g170654;
				float In_AlphaClip3_g170655 = Out_AlphaClip4_g170654;
				float In_AlphaFade3_g170655 = Out_AlphaFade4_g170654;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170654;
				float In_Transmission3_g170655 = Out_Transmission4_g170654;
				float In_Thickness3_g170655 = Out_Thickness4_g170654;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170654;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170672 = Data3_g170655;
				float Out_Dummy4_g170672 = 0;
				float3 Out_Albedo4_g170672 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170672 = float2( 0,0 );
				float3 Out_NormalWS4_g170672 = float3( 0,0,0 );
				float4 Out_Shader4_g170672 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170672 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170672 = 0;
				float Out_Grayscale4_g170672 = 0;
				float Out_Luminosity4_g170672 = 0;
				float Out_AlphaClip4_g170672 = 0;
				float Out_AlphaFade4_g170672 = 0;
				float3 Out_Translucency4_g170672 = float3( 0,0,0 );
				float Out_Transmission4_g170672 = 0;
				float Out_Thickness4_g170672 = 0;
				float Out_Diffusion4_g170672 = 0;
				{
				Out_Dummy4_g170672 = Data4_g170672.Dummy;
				Out_Albedo4_g170672 = Data4_g170672.Albedo;
				Out_NormalTS4_g170672 = Data4_g170672.NormalTS;
				Out_NormalWS4_g170672 = Data4_g170672.NormalWS;
				Out_Shader4_g170672 = Data4_g170672.Shader;
				Out_Emissive4_g170672= Data4_g170672.Emissive;
				Out_MultiMask4_g170672 = Data4_g170672.MultiMask;
				Out_Grayscale4_g170672 = Data4_g170672.Grayscale;
				Out_Luminosity4_g170672= Data4_g170672.Luminosity;
				Out_AlphaClip4_g170672 = Data4_g170672.AlphaClip;
				Out_AlphaFade4_g170672 = Data4_g170672.AlphaFade;
				Out_Translucency4_g170672 = Data4_g170672.Translucency;
				Out_Transmission4_g170672 = Data4_g170672.Transmission;
				Out_Thickness4_g170672 = Data4_g170672.Thickness;
				Out_Diffusion4_g170672 = Data4_g170672.Diffusion;
				}
				float3 In_Albedo3_g170673 = Out_Albedo4_g170672;
				float2 In_NormalTS3_g170673 = Out_NormalTS4_g170672;
				float3 In_NormalWS3_g170673 = Out_NormalWS4_g170672;
				float4 In_Shader3_g170673 = Out_Shader4_g170672;
				float4 In_Emissive3_g170673 = Out_Emissive4_g170672;
				float In_Grayscale3_g170673 = Out_Grayscale4_g170672;
				float In_Luminosity3_g170673 = Out_Luminosity4_g170672;
				float temp_output_571_11_g170671 = Out_MultiMask4_g170672;
				float In_MultiMask3_g170673 = temp_output_571_11_g170671;
				half Visual_AlphaClip667_g170671 = Out_AlphaClip4_g170672;
				half Input_True57_g170681 = Visual_AlphaClip667_g170671;
				half True36_g170681 = Input_True57_g170681;
				TVEGlobalData Data15_g170683 = Data204_g170212;
				float Out_Dummy15_g170683 = 0;
				float4 Out_CoatParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170683 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170683 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170683 = Data15_g170683.Dummy;
				Out_CoatParams15_g170683 = Data15_g170683.CoatParams;
				Out_PaintParams15_g170683 = Data15_g170683.PaintParams;
				Out_GlowParams15_g170683 = Data15_g170683.GlowParams;
				Out_AtmoParams15_g170683= Data15_g170683.AtmoParams;
				Out_FadeParams15_g170683= Data15_g170683.FadeParams;
				Out_FormParams15_g170683 = Data15_g170683.FormParams;
				Out_LandParams15_g170683 = Data15_g170683.LandParams;
				Out_WindParams15_g170683 = Data15_g170683.WindParams;
				Out_PushParams15_g170683 = Data15_g170683.PushParams;
				}
				half4 Global_FadeParams516_g170671 = Out_FadeParams15_g170683;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170671 = saturate( (Global_FadeParams516_g170671).w );
				#else
				float staticSwitch663_g170671 = 1.0;
				#endif
				half Local_GlobalMask429_g170671 = staticSwitch663_g170671;
				float lerpResult811_g170671 = lerp( 1.0 , Visual_AlphaClip667_g170671 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170671 = lerpResult811_g170671;
				TVEModelData Data15_g170674 = Data16_g170210;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170674 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170674 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170674 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionOS15_g170674 = Data15_g170674.PositionOS;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PositionRawOS15_g170674 = Data15_g170674.PositionRawOS;
				Out_PositionAddOS15_g170674 = Data15_g170674.PositionAddOS;
				Out_PivotOS15_g170674 = Data15_g170674.PivotOS;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalOS15_g170674 = Data15_g170674.NormalOS;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_NormalRawOS15_g170674 = Data15_g170674.NormalRawOS;
				Out_NormalRawWS15_g170674 = Data15_g170674.NormalRawWS;
				Out_TangentOS15_g170674 = Data15_g170674.TangentOS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_MotionData15_g170674 = Data15_g170674.MotionData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				Out_RotationData15_g170674 = Data15_g170674.RotationData;
				}
				half3 Model_PositionWO602_g170671 = Out_PositionWO15_g170674;
				float4 tex3DNode60_g170677 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170671 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170671 = lerp( 1.0 , tex3DNode60_g170677.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170671 = lerpResult673_g170671;
				half4 Model_VertexMasks752_g170671 = Out_VertexData15_g170674;
				float4 break755_g170671 = Model_VertexMasks752_g170671;
				float4 break33_g170675 = _cutout_vert_mode;
				float temp_output_30_0_g170675 = ( break755_g170671.x * break33_g170675.x );
				float temp_output_29_0_g170675 = ( break755_g170671.y * break33_g170675.y );
				float temp_output_31_0_g170675 = ( break755_g170671.z * break33_g170675.z );
				float temp_output_28_0_g170675 = ( temp_output_30_0_g170675 + temp_output_29_0_g170675 + temp_output_31_0_g170675 + ( break755_g170671.w * break33_g170675.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170675 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170679 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170679 = ( _CutoutMeshRemap.y - temp_output_7_0_g170679 );
				float lerpResult820_g170671 = lerp( 1.0 , saturate( ( ( clampResult17_g170676 - temp_output_7_0_g170679 ) / ( temp_output_10_0_g170679 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170680 = lerpResult820_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170680 = ( temp_output_6_0_g170680 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170680 = temp_output_6_0_g170680;
				#endif
				float temp_output_801_0_g170671 = staticSwitch14_g170680;
				half Local_VertMask766_g170671 = temp_output_801_0_g170671;
				half Visual_MultiMask671_g170671 = temp_output_571_11_g170671;
				float lerpResult683_g170671 = lerp( 1.0 , Visual_MultiMask671_g170671 , _CutoutMultiValue);
				half Local_MultiMask685_g170671 = lerpResult683_g170671;
				float lerpResult728_g170671 = lerp( Visual_AlphaClip667_g170671 , min( Visual_AlphaClip667_g170671 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170671 ) - ( Local_AlphaMask814_g170671 * Local_NoiseMask678_g170671 * Local_VertMask766_g170671 ) ) ) ) , Local_MultiMask685_g170671);
				half Local_AlphaClip784_g170671 = lerpResult728_g170671;
				half Input_False58_g170681 = Local_AlphaClip784_g170671;
				half False36_g170681 = Input_False58_g170681;
				half localShadowPassCheck36_g170681 = ShadowPassCheck36_g170681( True36_g170681 , False36_g170681 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170671 = Local_AlphaClip784_g170671;
				#else
				float staticSwitch791_g170671 = localShadowPassCheck36_g170681;
				#endif
				float temp_output_6_0_g170682 = staticSwitch791_g170671;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170682 = ( temp_output_6_0_g170682 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170682 = temp_output_6_0_g170682;
				#endif
				float temp_output_798_0_g170671 = staticSwitch14_g170682;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170671 = temp_output_798_0_g170671;
				#else
				float staticSwitch577_g170671 = Visual_AlphaClip667_g170671;
				#endif
				half Final_AlphaClip795_g170671 = staticSwitch577_g170671;
				float In_AlphaClip3_g170673 = Final_AlphaClip795_g170671;
				float In_AlphaFade3_g170673 = Out_AlphaFade4_g170672;
				float3 In_Translucency3_g170673 = Out_Translucency4_g170672;
				float In_Transmission3_g170673 = Out_Transmission4_g170672;
				float In_Thickness3_g170673 = Out_Thickness4_g170672;
				float In_Diffusion3_g170673 = Out_Diffusion4_g170672;
				{
				Data3_g170673.Dummy = In_Dummy3_g170673;
				Data3_g170673.Albedo = In_Albedo3_g170673;
				Data3_g170673.NormalTS = In_NormalTS3_g170673;
				Data3_g170673.NormalWS = In_NormalWS3_g170673;
				Data3_g170673.Shader = In_Shader3_g170673;
				Data3_g170673.Emissive= In_Emissive3_g170673;
				Data3_g170673.MultiMask = In_MultiMask3_g170673;
				Data3_g170673.Grayscale = In_Grayscale3_g170673;
				Data3_g170673.Luminosity = In_Luminosity3_g170673;
				Data3_g170673.AlphaClip = In_AlphaClip3_g170673;
				Data3_g170673.AlphaFade = In_AlphaFade3_g170673;
				Data3_g170673.Translucency = In_Translucency3_g170673;
				Data3_g170673.Transmission = In_Transmission3_g170673;
				Data3_g170673.Thickness = In_Thickness3_g170673;
				Data3_g170673.Diffusion = In_Diffusion3_g170673;
				}
				TVEVisualData Data4_g170687 = Data3_g170673;
				float Out_Dummy4_g170687 = 0;
				float3 Out_Albedo4_g170687 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170687 = float2( 0,0 );
				float3 Out_NormalWS4_g170687 = float3( 0,0,0 );
				float4 Out_Shader4_g170687 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170687 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170687 = 0;
				float Out_Grayscale4_g170687 = 0;
				float Out_Luminosity4_g170687 = 0;
				float Out_AlphaClip4_g170687 = 0;
				float Out_AlphaFade4_g170687 = 0;
				float3 Out_Translucency4_g170687 = float3( 0,0,0 );
				float Out_Transmission4_g170687 = 0;
				float Out_Thickness4_g170687 = 0;
				float Out_Diffusion4_g170687 = 0;
				{
				Out_Dummy4_g170687 = Data4_g170687.Dummy;
				Out_Albedo4_g170687 = Data4_g170687.Albedo;
				Out_NormalTS4_g170687 = Data4_g170687.NormalTS;
				Out_NormalWS4_g170687 = Data4_g170687.NormalWS;
				Out_Shader4_g170687 = Data4_g170687.Shader;
				Out_Emissive4_g170687= Data4_g170687.Emissive;
				Out_MultiMask4_g170687 = Data4_g170687.MultiMask;
				Out_Grayscale4_g170687 = Data4_g170687.Grayscale;
				Out_Luminosity4_g170687= Data4_g170687.Luminosity;
				Out_AlphaClip4_g170687 = Data4_g170687.AlphaClip;
				Out_AlphaFade4_g170687 = Data4_g170687.AlphaFade;
				Out_Translucency4_g170687 = Data4_g170687.Translucency;
				Out_Transmission4_g170687 = Data4_g170687.Transmission;
				Out_Thickness4_g170687 = Data4_g170687.Thickness;
				Out_Diffusion4_g170687 = Data4_g170687.Diffusion;
				}
				float3 In_Albedo3_g170688 = Out_Albedo4_g170687;
				float2 In_NormalTS3_g170688 = Out_NormalTS4_g170687;
				float3 In_NormalWS3_g170688 = Out_NormalWS4_g170687;
				float4 In_Shader3_g170688 = Out_Shader4_g170687;
				float4 In_Emissive3_g170688 = Out_Emissive4_g170687;
				float In_Grayscale3_g170688 = Out_Grayscale4_g170687;
				float In_Luminosity3_g170688 = Out_Luminosity4_g170687;
				float temp_output_821_11_g170684 = Out_MultiMask4_g170687;
				float In_MultiMask3_g170688 = temp_output_821_11_g170684;
				half Visual_AlphaClip754_g170684 = Out_AlphaClip4_g170687;
				half Input_True57_g170689 = Visual_AlphaClip754_g170684;
				half True36_g170689 = Input_True57_g170689;
				half Dither_Constant768_g170684 = _DitherConstantValue;
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float temp_output_756_0_g170684 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170684 = ( ( 1.0 - saturate( ( temp_output_756_0_g170684 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170686 = Data16_g170210;
				float Out_Dummy15_g170686 = 0;
				float3 Out_PositionOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170686 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170686 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170686 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170686 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170686 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170686 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170686 = float3( 0,0,0 );
				float4 Out_VertexData15_g170686 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170686 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170686 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170686 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170686 = Data15_g170686.Dummy;
				Out_PositionOS15_g170686 = Data15_g170686.PositionOS;
				Out_PositionWS15_g170686 = Data15_g170686.PositionWS;
				Out_PositionWO15_g170686 = Data15_g170686.PositionWO;
				Out_PositionRawOS15_g170686 = Data15_g170686.PositionRawOS;
				Out_PositionAddOS15_g170686 = Data15_g170686.PositionAddOS;
				Out_PivotOS15_g170686 = Data15_g170686.PivotOS;
				Out_PivotWS15_g170686 = Data15_g170686.PivotWS;
				Out_PivotWO15_g170686 = Data15_g170686.PivotWO;
				Out_NormalOS15_g170686 = Data15_g170686.NormalOS;
				Out_NormalWS15_g170686 = Data15_g170686.NormalWS;
				Out_NormalRawOS15_g170686 = Data15_g170686.NormalRawOS;
				Out_NormalRawWS15_g170686 = Data15_g170686.NormalRawWS;
				Out_TangentOS15_g170686 = Data15_g170686.TangentOS;
				Out_ViewDirWS15_g170686 = Data15_g170686.ViewDirWS;
				Out_VertexData15_g170686 = Data15_g170686.VertexData;
				Out_MotionData15_g170686 = Data15_g170686.MotionData;
				Out_BoundsData15_g170686 = Data15_g170686.BoundsData;
				Out_RotationData15_g170686 = Data15_g170686.RotationData;
				}
				half3 Model_PositionWS776_g170684 = Out_PositionWS15_g170686;
				float temp_output_7_0_g170693 = _DitherDistanceMinValue;
				float temp_output_10_0_g170693 = ( _DitherDistanceMaxValue - temp_output_7_0_g170693 );
				half Dither_Distance856_g170684 = ( saturate( ( ( distance( Model_PositionWS776_g170684 , _WorldSpaceCameraPos ) - temp_output_7_0_g170693 ) / ( temp_output_10_0_g170693 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170684 = Out_ViewDirWS15_g170686;
				float3 normalizeResult792_g170684 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170684 = dot( Model_ViewDirWS845_g170684 , normalizeResult792_g170684 );
				half Dither_Glancing784_g170684 = ( saturate( ( ( 1.0 - abs( dotResult778_g170684 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170684 = max( max( max( Dither_Constant768_g170684 , Dither_Proximity767_g170684 ) , Dither_Distance856_g170684 ) , Dither_Glancing784_g170684 );
				half3 Model_PositionWO602_g170684 = Out_PositionWO15_g170686;
				float4 tex3DNode60_g170691 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170684 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170684 = tex3DNode60_g170691.r;
				half Visual_MultiMask671_g170684 = temp_output_821_11_g170684;
				float lerpResult683_g170684 = lerp( 1.0 , Visual_MultiMask671_g170684 , _DitherMultiValue);
				half Local_MaskMulti685_g170684 = lerpResult683_g170684;
				float lerpResult728_g170684 = lerp( Visual_AlphaClip754_g170684 , min( Visual_AlphaClip754_g170684 , ( -0.001 - ( Dither_Value429_g170684 - Local_MaskNoise678_g170684 ) ) ) , Local_MaskMulti685_g170684);
				half Local_AlphaClip834_g170684 = lerpResult728_g170684;
				half Input_False58_g170689 = Local_AlphaClip834_g170684;
				half False36_g170689 = Input_False58_g170689;
				half localShadowPassCheck36_g170689 = ShadowPassCheck36_g170689( True36_g170689 , False36_g170689 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170684 = Local_AlphaClip834_g170684;
				#else
				float staticSwitch831_g170684 = localShadowPassCheck36_g170689;
				#endif
				float temp_output_6_0_g170690 = staticSwitch831_g170684;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170690 = ( temp_output_6_0_g170690 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170690 = temp_output_6_0_g170690;
				#endif
				float temp_output_840_0_g170684 = staticSwitch14_g170690;
				#ifdef TVE_DITHER
				float staticSwitch577_g170684 = temp_output_840_0_g170684;
				#else
				float staticSwitch577_g170684 = Visual_AlphaClip754_g170684;
				#endif
				half Final_AlphaClip493_g170684 = staticSwitch577_g170684;
				float In_AlphaClip3_g170688 = Final_AlphaClip493_g170684;
				float In_AlphaFade3_g170688 = Out_AlphaFade4_g170687;
				float3 In_Translucency3_g170688 = Out_Translucency4_g170687;
				float In_Transmission3_g170688 = Out_Transmission4_g170687;
				float In_Thickness3_g170688 = Out_Thickness4_g170687;
				float In_Diffusion3_g170688 = Out_Diffusion4_g170687;
				{
				Data3_g170688.Dummy = In_Dummy3_g170688;
				Data3_g170688.Albedo = In_Albedo3_g170688;
				Data3_g170688.NormalTS = In_NormalTS3_g170688;
				Data3_g170688.NormalWS = In_NormalWS3_g170688;
				Data3_g170688.Shader = In_Shader3_g170688;
				Data3_g170688.Emissive= In_Emissive3_g170688;
				Data3_g170688.MultiMask = In_MultiMask3_g170688;
				Data3_g170688.Grayscale = In_Grayscale3_g170688;
				Data3_g170688.Luminosity = In_Luminosity3_g170688;
				Data3_g170688.AlphaClip = In_AlphaClip3_g170688;
				Data3_g170688.AlphaFade = In_AlphaFade3_g170688;
				Data3_g170688.Translucency = In_Translucency3_g170688;
				Data3_g170688.Transmission = In_Transmission3_g170688;
				Data3_g170688.Thickness = In_Thickness3_g170688;
				Data3_g170688.Diffusion = In_Diffusion3_g170688;
				}
				TVEVisualData Data4_g170713 = Data3_g170688;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				}
				float3 temp_output_297_0_g170702 = Out_Albedo4_g170713;
				float3 In_Albedo3_g170714 = temp_output_297_0_g170702;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170702 = Out_Emissive4_g170713;
				TVEModelData Data15_g170703 = Data16_g170210;
				float Out_Dummy15_g170703 = 0;
				float3 Out_PositionOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170703 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170703 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170703 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170703 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170703 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170703 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170703 = float3( 0,0,0 );
				float4 Out_VertexData15_g170703 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170703 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170703 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170703 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170703 = Data15_g170703.Dummy;
				Out_PositionOS15_g170703 = Data15_g170703.PositionOS;
				Out_PositionWS15_g170703 = Data15_g170703.PositionWS;
				Out_PositionWO15_g170703 = Data15_g170703.PositionWO;
				Out_PositionRawOS15_g170703 = Data15_g170703.PositionRawOS;
				Out_PositionAddOS15_g170703 = Data15_g170703.PositionAddOS;
				Out_PivotOS15_g170703 = Data15_g170703.PivotOS;
				Out_PivotWS15_g170703 = Data15_g170703.PivotWS;
				Out_PivotWO15_g170703 = Data15_g170703.PivotWO;
				Out_NormalOS15_g170703 = Data15_g170703.NormalOS;
				Out_NormalWS15_g170703 = Data15_g170703.NormalWS;
				Out_NormalRawOS15_g170703 = Data15_g170703.NormalRawOS;
				Out_NormalRawWS15_g170703 = Data15_g170703.NormalRawWS;
				Out_TangentOS15_g170703 = Data15_g170703.TangentOS;
				Out_ViewDirWS15_g170703 = Data15_g170703.ViewDirWS;
				Out_VertexData15_g170703 = Data15_g170703.VertexData;
				Out_MotionData15_g170703 = Data15_g170703.MotionData;
				Out_BoundsData15_g170703 = Data15_g170703.BoundsData;
				Out_RotationData15_g170703 = Data15_g170703.RotationData;
				}
				half4 Model_VertexMasks216_g170702 = Out_VertexData15_g170703;
				float4 break251_g170702 = Model_VertexMasks216_g170702;
				float4 break33_g170707 = _emissive_vert_mode;
				float temp_output_30_0_g170707 = ( break251_g170702.x * break33_g170707.x );
				float temp_output_29_0_g170707 = ( break251_g170702.y * break33_g170707.y );
				float temp_output_31_0_g170707 = ( break251_g170702.z * break33_g170707.z );
				float temp_output_28_0_g170707 = ( temp_output_30_0_g170707 + temp_output_29_0_g170707 + temp_output_31_0_g170707 + ( break251_g170702.w * break33_g170707.w ) );
				float clampResult17_g170706 = clamp( temp_output_28_0_g170707 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170710 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170710 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170710 );
				float lerpResult303_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170706 - temp_output_7_0_g170710 ) / ( temp_output_10_0_g170710 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170716 = lerpResult303_g170702;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170716 = ( temp_output_6_0_g170716 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170716 = temp_output_6_0_g170716;
				#endif
				float temp_output_263_0_g170702 = staticSwitch14_g170716;
				half Emissive_MeshMask221_g170702 = temp_output_263_0_g170702;
				TEXTURE2D(Texture276_g170705) = _EmissiveMaskTex;
				SamplerState Sampler276_g170705 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170711 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170711 = ( temp_output_6_0_g170711 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170711 = temp_output_6_0_g170711;
				#endif
				half4 Emissive_Coords167_g170702 = staticSwitch14_g170711;
				float4 temp_output_37_0_g170705 = Emissive_Coords167_g170702;
				half4 Coords276_g170705 = temp_output_37_0_g170705;
				half2 TexCoord276_g170705 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170705 = SampleMain( Texture276_g170705 , Sampler276_g170705 , Coords276_g170705 , TexCoord276_g170705 );
				TEXTURE2D(Texture275_g170705) = _EmissiveMaskTex;
				SamplerState Sampler275_g170705 = sampler_Linear_Repeat;
				half4 Coords275_g170705 = temp_output_37_0_g170705;
				half2 TexCoord275_g170705 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170705 = SampleExtra( Texture275_g170705 , Sampler275_g170705 , Coords275_g170705 , TexCoord275_g170705 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170702 = localSampleExtra275_g170705;
				#else
				float4 staticSwitch176_g170702 = localSampleMain276_g170705;
				#endif
				half4 Emissive_MaskTex201_g170702 = staticSwitch176_g170702;
				float clampResult17_g170709 = clamp( (Emissive_MaskTex201_g170702).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170708 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170708 );
				float lerpResult302_g170702 = lerp( 1.0 , saturate( ( ( clampResult17_g170709 - temp_output_7_0_g170708 ) / ( temp_output_10_0_g170708 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170702 = lerpResult302_g170702;
				float temp_output_279_0_g170702 = ( Emissive_MeshMask221_g170702 * Emissive_Mask103_g170702 );
				float3 appendResult293_g170702 = (float3(temp_output_279_0_g170702 , temp_output_279_0_g170702 , temp_output_279_0_g170702));
				half3 Local_EmissiveColor278_g170702 = appendResult293_g170702;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170704 = Data204_g170212;
				float Out_Dummy15_g170704 = 0;
				float4 Out_CoatParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170704 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170704 = Data15_g170704.Dummy;
				Out_CoatParams15_g170704 = Data15_g170704.CoatParams;
				Out_PaintParams15_g170704 = Data15_g170704.PaintParams;
				Out_GlowParams15_g170704 = Data15_g170704.GlowParams;
				Out_AtmoParams15_g170704= Data15_g170704.AtmoParams;
				Out_FadeParams15_g170704= Data15_g170704.FadeParams;
				Out_FormParams15_g170704 = Data15_g170704.FormParams;
				Out_LandParams15_g170704 = Data15_g170704.LandParams;
				Out_WindParams15_g170704 = Data15_g170704.WindParams;
				Out_PushParams15_g170704 = Data15_g170704.PushParams;
				}
				half4 Global_GlowParams179_g170702 = Out_GlowParams15_g170704;
				float3 lerpResult299_g170702 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170702).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170702 = lerpResult299_g170702;
				#else
				float3 staticSwitch228_g170702 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170702 = staticSwitch228_g170702;
				half3 Local_EmissiveValue88_g170702 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170702 );
				half3 Emissive_Blend260_g170702 = ( ( (Visual_Emissive255_g170702).xyz * Local_EmissiveColor278_g170702 ) * Local_EmissiveValue88_g170702 );
				float3 temp_output_3_0_g170712 = Emissive_Blend260_g170702;
				float temp_output_15_0_g170712 = _emissive_power_value;
				float3 hdEmission22_g170712 = ASEGetEmissionHDRColor(temp_output_3_0_g170712,temp_output_15_0_g170712,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170702 = (float4(hdEmission22_g170712 , Emissive_Mask103_g170702));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170702 = appendResult295_g170702;
				#else
				float4 staticSwitch129_g170702 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170702 = staticSwitch129_g170702;
				float4 In_Emissive3_g170714 = Final_Emissive184_g170702;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_297_11_g170702 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_297_11_g170702;
				float In_AlphaClip3_g170714 = Out_AlphaClip4_g170713;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				}
				TVEVisualData Data4_g170734 = Data3_g170714;
				float Out_Dummy4_g170734 = 0;
				float3 Out_Albedo4_g170734 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170734 = float2( 0,0 );
				float3 Out_NormalWS4_g170734 = float3( 0,0,0 );
				float4 Out_Shader4_g170734 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170734 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170734 = 0;
				float Out_Grayscale4_g170734 = 0;
				float Out_Luminosity4_g170734 = 0;
				float Out_AlphaClip4_g170734 = 0;
				float Out_AlphaFade4_g170734 = 0;
				float3 Out_Translucency4_g170734 = float3( 0,0,0 );
				float Out_Transmission4_g170734 = 0;
				float Out_Thickness4_g170734 = 0;
				float Out_Diffusion4_g170734 = 0;
				{
				Out_Dummy4_g170734 = Data4_g170734.Dummy;
				Out_Albedo4_g170734 = Data4_g170734.Albedo;
				Out_NormalTS4_g170734 = Data4_g170734.NormalTS;
				Out_NormalWS4_g170734 = Data4_g170734.NormalWS;
				Out_Shader4_g170734 = Data4_g170734.Shader;
				Out_Emissive4_g170734= Data4_g170734.Emissive;
				Out_MultiMask4_g170734 = Data4_g170734.MultiMask;
				Out_Grayscale4_g170734 = Data4_g170734.Grayscale;
				Out_Luminosity4_g170734= Data4_g170734.Luminosity;
				Out_AlphaClip4_g170734 = Data4_g170734.AlphaClip;
				Out_AlphaFade4_g170734 = Data4_g170734.AlphaFade;
				Out_Translucency4_g170734 = Data4_g170734.Translucency;
				Out_Transmission4_g170734 = Data4_g170734.Transmission;
				Out_Thickness4_g170734 = Data4_g170734.Thickness;
				Out_Diffusion4_g170734 = Data4_g170734.Diffusion;
				}
				half3 Visual_Albedo199_g170733 = Out_Albedo4_g170734;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170733 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170733 );
				half Visual_Transmission138_g170733 = Out_Transmission4_g170734;
				half Subsurface_Value268_g170733 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170737 = Data204_g170212;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170737 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatParams15_g170737 = Data15_g170737.CoatParams;
				Out_PaintParams15_g170737 = Data15_g170737.PaintParams;
				Out_GlowParams15_g170737 = Data15_g170737.GlowParams;
				Out_AtmoParams15_g170737= Data15_g170737.AtmoParams;
				Out_FadeParams15_g170737= Data15_g170737.FadeParams;
				Out_FormParams15_g170737 = Data15_g170737.FormParams;
				Out_LandParams15_g170737 = Data15_g170737.LandParams;
				Out_WindParams15_g170737 = Data15_g170737.WindParams;
				Out_PushParams15_g170737 = Data15_g170737.PushParams;
				}
				half4 Global_GlowParams373_g170733 = Out_GlowParams15_g170737;
				float lerpResult403_g170733 = lerp( 1.0 , saturate( (Global_GlowParams373_g170733).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170733 = lerpResult403_g170733;
				#else
				float staticSwitch367_g170733 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170733 = staticSwitch367_g170733;
				float temp_output_301_11_g170733 = Out_MultiMask4_g170734;
				half Visual_MultiMask292_g170733 = temp_output_301_11_g170733;
				float lerpResult293_g170733 = lerp( 1.0 , Visual_MultiMask292_g170733 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170733 = lerpResult293_g170733;
				half Custom_Mask363_g170733 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170733 = ( Visual_Transmission138_g170733 * Subsurface_Value268_g170733 * Subsurface_GlobalMask369_g170733 * Subsurface_MultiMask296_g170733 * Custom_Mask363_g170733 );
				#else
				float staticSwitch345_g170733 = 0.0;
				#endif
				half Final_Transmission269_g170733 = staticSwitch345_g170733;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170733 = ( Subsurface_Color264_g170733 * Final_Transmission269_g170733 * 10.0 );
				#else
				float3 staticSwitch348_g170733 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170733 = staticSwitch348_g170733;
				TVEModelData Data15_g170736 = Data16_g170210;
				float Out_Dummy15_g170736 = 0;
				float3 Out_PositionOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170736 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170736 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170736 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170736 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170736 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170736 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170736 = float3( 0,0,0 );
				float4 Out_VertexData15_g170736 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170736 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170736 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170736 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170736 = Data15_g170736.Dummy;
				Out_PositionOS15_g170736 = Data15_g170736.PositionOS;
				Out_PositionWS15_g170736 = Data15_g170736.PositionWS;
				Out_PositionWO15_g170736 = Data15_g170736.PositionWO;
				Out_PositionRawOS15_g170736 = Data15_g170736.PositionRawOS;
				Out_PositionAddOS15_g170736 = Data15_g170736.PositionAddOS;
				Out_PivotOS15_g170736 = Data15_g170736.PivotOS;
				Out_PivotWS15_g170736 = Data15_g170736.PivotWS;
				Out_PivotWO15_g170736 = Data15_g170736.PivotWO;
				Out_NormalOS15_g170736 = Data15_g170736.NormalOS;
				Out_NormalWS15_g170736 = Data15_g170736.NormalWS;
				Out_NormalRawOS15_g170736 = Data15_g170736.NormalRawOS;
				Out_NormalRawWS15_g170736 = Data15_g170736.NormalRawWS;
				Out_TangentOS15_g170736 = Data15_g170736.TangentOS;
				Out_ViewDirWS15_g170736 = Data15_g170736.ViewDirWS;
				Out_VertexData15_g170736 = Data15_g170736.VertexData;
				Out_MotionData15_g170736 = Data15_g170736.MotionData;
				Out_BoundsData15_g170736 = Data15_g170736.BoundsData;
				Out_RotationData15_g170736 = Data15_g170736.RotationData;
				}
				half3 Model_ViewDirWS392_g170733 = Out_ViewDirWS15_g170736;
				float dotResult324_g170733 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170733 );
				float saferPower323_g170733 = abs( saturate( dotResult324_g170733 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170733 = 0.0;
				#else
				float staticSwitch330_g170733 = ( pow( saferPower323_g170733 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170733 = staticSwitch330_g170733;
				float3 temp_output_6_0_g170738 = ( Final_Translucency254_g170733 * Mask_Subsurface_View320_g170733 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170738 = ( temp_output_6_0_g170738 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170738 = temp_output_6_0_g170738;
				#endif
				half3 Subsurface_Approximation333_g170733 = staticSwitch14_g170738;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170733 = ( Visual_Albedo199_g170733 + Subsurface_Approximation333_g170733 );
				#else
				float3 staticSwitch353_g170733 = Visual_Albedo199_g170733;
				#endif
				half3 Final_Albedo312_g170733 = staticSwitch353_g170733;
				float3 In_Albedo3_g170735 = Final_Albedo312_g170733;
				float2 In_NormalTS3_g170735 = Out_NormalTS4_g170734;
				float3 In_NormalWS3_g170735 = Out_NormalWS4_g170734;
				float4 In_Shader3_g170735 = Out_Shader4_g170734;
				float4 In_Emissive3_g170735 = Out_Emissive4_g170734;
				float In_Grayscale3_g170735 = Out_Grayscale4_g170734;
				float In_Luminosity3_g170735 = Out_Luminosity4_g170734;
				float In_MultiMask3_g170735 = temp_output_301_11_g170733;
				float In_AlphaClip3_g170735 = Out_AlphaClip4_g170734;
				float In_AlphaFade3_g170735 = Out_AlphaFade4_g170734;
				float3 In_Translucency3_g170735 = Final_Translucency254_g170733;
				float In_Transmission3_g170735 = Final_Transmission269_g170733;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170733 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170733 = 1.0;
				#endif
				half Final_Thickness275_g170733 = staticSwitch351_g170733;
				float In_Thickness3_g170735 = Final_Thickness275_g170733;
				float Final_Diffusion340_g170733 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170735 = Final_Diffusion340_g170733;
				{
				Data3_g170735.Dummy = In_Dummy3_g170735;
				Data3_g170735.Albedo = In_Albedo3_g170735;
				Data3_g170735.NormalTS = In_NormalTS3_g170735;
				Data3_g170735.NormalWS = In_NormalWS3_g170735;
				Data3_g170735.Shader = In_Shader3_g170735;
				Data3_g170735.Emissive= In_Emissive3_g170735;
				Data3_g170735.MultiMask = In_MultiMask3_g170735;
				Data3_g170735.Grayscale = In_Grayscale3_g170735;
				Data3_g170735.Luminosity = In_Luminosity3_g170735;
				Data3_g170735.AlphaClip = In_AlphaClip3_g170735;
				Data3_g170735.AlphaFade = In_AlphaFade3_g170735;
				Data3_g170735.Translucency = In_Translucency3_g170735;
				Data3_g170735.Transmission = In_Transmission3_g170735;
				Data3_g170735.Thickness = In_Thickness3_g170735;
				Data3_g170735.Diffusion = In_Diffusion3_g170735;
				}
				TVEVisualData Data4_g170750 = Data3_g170735;
				float Out_Dummy4_g170750 = 0;
				float3 Out_Albedo4_g170750 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170750 = float2( 0,0 );
				float3 Out_NormalWS4_g170750 = float3( 0,0,0 );
				float4 Out_Shader4_g170750 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170750 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170750 = 0;
				float Out_Grayscale4_g170750 = 0;
				float Out_Luminosity4_g170750 = 0;
				float Out_AlphaClip4_g170750 = 0;
				float Out_AlphaFade4_g170750 = 0;
				float3 Out_Translucency4_g170750 = float3( 0,0,0 );
				float Out_Transmission4_g170750 = 0;
				float Out_Thickness4_g170750 = 0;
				float Out_Diffusion4_g170750 = 0;
				{
				Out_Dummy4_g170750 = Data4_g170750.Dummy;
				Out_Albedo4_g170750 = Data4_g170750.Albedo;
				Out_NormalTS4_g170750 = Data4_g170750.NormalTS;
				Out_NormalWS4_g170750 = Data4_g170750.NormalWS;
				Out_Shader4_g170750 = Data4_g170750.Shader;
				Out_Emissive4_g170750= Data4_g170750.Emissive;
				Out_MultiMask4_g170750 = Data4_g170750.MultiMask;
				Out_Grayscale4_g170750 = Data4_g170750.Grayscale;
				Out_Luminosity4_g170750= Data4_g170750.Luminosity;
				Out_AlphaClip4_g170750 = Data4_g170750.AlphaClip;
				Out_AlphaFade4_g170750 = Data4_g170750.AlphaFade;
				Out_Translucency4_g170750 = Data4_g170750.Translucency;
				Out_Transmission4_g170750 = Data4_g170750.Transmission;
				Out_Thickness4_g170750 = Data4_g170750.Thickness;
				Out_Diffusion4_g170750 = Data4_g170750.Diffusion;
				}
				float temp_output_3_0_g170751 = Out_AlphaClip4_g170750;
				float Alpha19_g170751 = temp_output_3_0_g170751;
				float temp_output_15_0_g170751 = 0.0;
				float Treshold19_g170751 = temp_output_15_0_g170751;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#else
				clip(Alpha19_g170751 - Treshold19_g170751);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170751 * Out_AlphaFade4_g170750 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold =  _AlphaCutoff;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {

            Name "FullScreenDebug"
            Tags 
			{ 
				"LightMode" = "FullScreenDebug" 
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal =                          input.normalOS;
				output.ObjectSpaceTangent =                         input.tangentOS.xyz;
				output.ObjectSpacePosition =                        input.positionOS;

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;1021;-11392,-256;Inherit;False;Block Model;45;;170196;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,193,0,189,0,300,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;1022;-11072,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1023;-10624,-256;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1024;-11072,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1025;-10368,-256;Inherit;False;Block Global;54;;170212;212e17d4006dc88449d56ce0340cb5ff;20,315,1,311,1,388,1,317,1,321,1,319,1,376,0,323,1,337,1,282,1,371,1,349,1,385,1,287,1,285,1,276,1,283,1,308,1,348,1,289,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;1026;-9600,-256;Inherit;False;1024;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1027;-5376,-256;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1028;-10048,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1029;-9344,-256;Inherit;False;Block Pivots Sub;-1;;170369;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1030;-5120,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1031;-5120,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1032;-5120,-256;Inherit;False;Block Main;103;;170372;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;1033;-8960,-128;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1034;-8960,-256;Inherit;False;Block Perspective;468;;170390;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1035;-4736,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1036;-4736,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1037;-4736,-256;Inherit;False;Block Layer;129;;170394;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1038;-8576,-256;Inherit;False;Block Size Fade;473;;170428;467c36a7402d0274b9ad844bbc95de33;0;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1039;-4352,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1040;-4352,-256;Inherit;False;Block Detail;176;;170434;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1041;-8192,-256;Inherit;False;Block Motion;482;;170467;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;1042;-3968,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1043;-3968,-256;Inherit;False;Block Occlusion;221;;170537;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;1044;-7744,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1045;-3584,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1046;-3584,-256;Inherit;False;Block Gradient;233;;170547;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1047;-6272,-256;Inherit;False;1044;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1048;-3200,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1049;-3200,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1050;-3200,-256;Inherit;False;Block Variation;246;;170557;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;1051;-6016,-256;Inherit;False;Block Interp;-1;;170566;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1052;-2816,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1053;-2816,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1054;-2816,-256;Inherit;False;Block Tinting;259;;170567;9f39e156ea8d89e4997ea2a1e194137e;7,352,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;1055;-5696,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;1056;-2432,-256;Inherit;False;Block Dryness;288;;170591;f05795de23f951c45bb73c8b4321e4b7;7,398,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;1057;-2432,-128;Inherit;False;1055;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1058;-2048,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1059;-2048,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1060;-2048,-256;Inherit;False;Block Highlight;0;;170614;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1061;-1664,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1062;-1664,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1063;-1664,-256;Inherit;False;Block Overlay;320;;170617;8ae9c8285a7817844a51243251284d21;9,821,1,819,1,813,1,910,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1064;-1280,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1065;-1280,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1066;-1280,-256;Inherit;False;Block Wetness;366;;170653;52c5a1f52507fc44e926833b126e7855;5,850,1,857,1,945,1,930,1,851,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1067;-896,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1068;-896,-256;Inherit;False;Block Cutout;389;;170671;866b4a5fe67e7f34085520e1bb5be2b7;5,775,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1069;-512,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1070;-512,-256;Inherit;False;Block Dithering;407;;170684;c7e02d28445e979479d493926695e6f3;5,843,1,859,1,844,1,827,1,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1071;-512,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1072;-7808,-256;Inherit;False;Block Transform;-1;;170695;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1073;-128,-256;Inherit;False;Block Emissive;425;;170702;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;1074;-128,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1075;-128,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1076;-7424,-256;Inherit;False;Block Normal;544;;170717;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1638,0,1700,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1077;256,-256;Inherit;False;Block Subsurface;449;;170733;d738d295ada6b1f409db6776b5efe789;3,315,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;1078;-7040,-256;Inherit;False;Block Pivots Add;-1;;170740;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;1079;576,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1080;-6720,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;726;1280,-256;Inherit;False;1079;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;725;1280,-192;Inherit;False;1080;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;10;1280,-512;Half;False;Property;_render_cull;_render_cull;563;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;20;1472,-512;Half;False;Property;_render_src;_render_src;564;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;7;1664,-512;Half;False;Property;_render_dst;_render_dst;565;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;17;1856,-512;Half;False;Property;_render_zw;_render_zw;566;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;639;2560,-512;Inherit;False;Base Compile;-1;;170743;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;641;2048,-512;Half;False;Property;_render_coverage;_render_coverage;567;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;764;1280,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;568;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1001;1504,-640;Half;False;Property;_IsStandardShader;_IsStandardShader;569;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;991;1536,-256;Inherit;False;Block Render;2;;170744;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1010;2080,-256;Float;False;True;-1;2;TVEShaderGUICore;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit;28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;34;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;True;True;True;True;0;True;_LightLayersMaskBuffer4;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;38;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;4;638504301875363638;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Depth Offset;0;0;  Conserative;1;0;GPU Instancing;1;0;LOD CrossFade;1;638504301950519876;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504301968634547;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1011;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1012;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1013;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1014;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1015;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1016;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1017;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1018;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1019;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1020;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;1022;0;1021;314
WireConnection;1024;0;1021;128
WireConnection;1025;206;1023;0
WireConnection;1028;0;1025;151
WireConnection;1029;146;1026;0
WireConnection;1032;225;1027;0
WireConnection;1034;146;1029;128
WireConnection;1037;585;1032;106
WireConnection;1037;633;1030;0
WireConnection;1037;974;1031;0
WireConnection;1038;146;1034;128
WireConnection;1038;186;1033;0
WireConnection;1040;585;1037;552
WireConnection;1040;633;1035;0
WireConnection;1040;971;1036;0
WireConnection;1041;146;1038;128
WireConnection;1043;144;1040;552
WireConnection;1043;204;1039;0
WireConnection;1044;0;1041;1903
WireConnection;1046;144;1043;116
WireConnection;1046;222;1042;0
WireConnection;1050;144;1046;116
WireConnection;1050;222;1045;0
WireConnection;1051;22;1047;0
WireConnection;1054;198;1050;116
WireConnection;1054;223;1049;0
WireConnection;1054;207;1048;0
WireConnection;1055;0;1051;0
WireConnection;1056;279;1054;204
WireConnection;1056;297;1053;0
WireConnection;1056;281;1052;0
WireConnection;1060;144;1056;346
WireConnection;1060;212;1057;0
WireConnection;1063;572;1060;116
WireConnection;1063;596;1058;0
WireConnection;1063;600;1059;0
WireConnection;1066;572;1063;566
WireConnection;1066;596;1062;0
WireConnection;1066;600;1061;0
WireConnection;1068;572;1066;566
WireConnection;1068;596;1065;0
WireConnection;1068;600;1064;0
WireConnection;1070;572;1068;566
WireConnection;1070;596;1067;0
WireConnection;1072;146;1041;128
WireConnection;1073;146;1070;566
WireConnection;1073;148;1071;0
WireConnection;1073;178;1069;0
WireConnection;1076;146;1072;128
WireConnection;1077;146;1073;183
WireConnection;1077;385;1075;0
WireConnection;1077;371;1074;0
WireConnection;1078;146;1076;128
WireConnection;1079;0;1077;183
WireConnection;1080;0;1078;128
WireConnection;991;17;726;0
WireConnection;991;19;725;0
WireConnection;1010;0;991;21
WireConnection;1010;1;991;22
WireConnection;1010;5;991;77
WireConnection;1010;6;991;34
WireConnection;1010;7;991;27
WireConnection;1010;8;991;26
WireConnection;1010;9;991;28
WireConnection;1010;11;991;30
WireConnection;1010;12;991;32
WireConnection;1010;27;991;33
ASEEND*/
//CHKSM=E30A2FE27F8705DF132F17A8C1A955C6B85328B8
