// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit"
{
	Properties
	{
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_SpecColor("Specular Color", Color) = (1,1,1,1)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2020
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Wind Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalWindLayerValue("Global Wind Layer", Float) = 0
		[StyledEnum(Push Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPushLayerValue("Global Push Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 20
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[Space(10)]_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Globals / Elements", Float) = 1
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 20
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)]_SubsurfaceAproxInfo("# Subsurface Aprox Info", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Wave Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Wave Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion 01 Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion 01 Pivots", Range( 0 , 1)) = 0.5
		_MotionBasePhaseValue("Motion 01 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion 01 Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion 01 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion 02 Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion 02 Pivots", Range( 0 , 1)) = 0
		_MotionSmallPhaseValue("Motion 02 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion 02 Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion 02 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion 03 Intensity", Range( 0 , 8)) = 0
		_MotionTinyTillingValue("Motion 03 Tilling", Range( 0 , 40)) = 20
		_MotionTinySpeedValue("Motion 03 Speed", Range( 0 , 40)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion 03 Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion 03 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionNoiseValue("Motion Wind Noise", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionSpeedValue("Motion Wind Speed", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_mask_mode("_motion_push_mask_mode", Float) = 0
		[HideInInspector]_motion_push_vert_mode("_motion_push_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_push_proc_mode("_motion_push_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_push_layer_value("_global_push_layer_value", Float) = 0
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 1
		[HideInInspector]_render_dst("_render_dst", Float) = 0
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSimpleShader("_IsSimpleShader", Float) = 1

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend [_render_src] [_render_dst]
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck33_g170461( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g170462( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170447 = (TVEModelData)0;
				float In_Dummy16_g170447 = 0.0;
				TVEModelData Data16_g170424 = (TVEModelData)0;
				half Dummy1575_g170422 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170424 = Dummy1575_g170422;
				TVEModelData Data16_g170402 = (TVEModelData)0;
				float In_Dummy16_g170402 = 0.0;
				TVEModelData Data16_g170082 = (TVEModelData)0;
				half Dummy181_g170066 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170082 = Dummy181_g170066;
				TVEModelData Data16_g170030 = (TVEModelData)0;
				half Dummy181_g170027 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170030 = Dummy181_g170027;
				TVEModelData Data16_g169992 = (TVEModelData)0;
				half Dummy181_g169989 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g169992 = Dummy181_g169989;
				TVEModelData Data16_g169969 = (TVEModelData)0;
				float In_Dummy16_g169969 = 0.0;
				TVEModelData Data16_g169263 = (TVEModelData)0;
				half Dummy207_g169248 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g169263 = Dummy207_g169248;
				half3 PositionOS131_g169248 = v.vertex.xyz;
				float3 In_PositionOS16_g169263 = PositionOS131_g169248;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g169248 = ase_worldPos;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169263 = PositionWS122_g169248;
				float4x4 break19_g169250 = unity_ObjectToWorld;
				float3 appendResult20_g169250 = (float3(break19_g169250[ 0 ][ 3 ] , break19_g169250[ 1 ][ 3 ] , break19_g169250[ 2 ][ 3 ]));
				half3 ObjectData20_g169252 = appendResult20_g169250;
				half3 WorldData19_g169252 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169252 = WorldData19_g169252;
				#else
				float3 staticSwitch14_g169252 = ObjectData20_g169252;
				#endif
				float3 temp_output_124_0_g169250 = staticSwitch14_g169252;
				float3 temp_output_239_7_g169248 = temp_output_124_0_g169250;
				float4x4 break19_g169254 = unity_ObjectToWorld;
				float3 appendResult20_g169254 = (float3(break19_g169254[ 0 ][ 3 ] , break19_g169254[ 1 ][ 3 ] , break19_g169254[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g169258 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g169248 = PositionOS131_g169248;
				float3 appendResult234_g169248 = (float3(break233_g169248.x , 0.0 , break233_g169248.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g169248 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g169248 = appendResult60_g169258;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g169248 = appendResult234_g169248;
				#else
				float3 staticSwitch229_g169248 = _Vector0;
				#endif
				half3 PivotOS149_g169248 = staticSwitch229_g169248;
				float3 temp_output_122_0_g169254 = PivotOS149_g169248;
				float3 PivotsOnly105_g169254 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g169254 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g169256 = ( appendResult20_g169254 + PivotsOnly105_g169254 );
				half3 WorldData19_g169256 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169256 = WorldData19_g169256;
				#else
				float3 staticSwitch14_g169256 = ObjectData20_g169256;
				#endif
				float3 temp_output_124_0_g169254 = staticSwitch14_g169256;
				float3 temp_output_237_7_g169248 = temp_output_124_0_g169254;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#else
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#endif
				float3 vertexToFrag76_g169248 = staticSwitch236_g169248;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169263 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169263 = PositionOS131_g169248;
				float3 In_PositionAddOS16_g169263 = float3( 0,0,0 );
				float3 In_PivotOS16_g169263 = PivotOS149_g169248;
				float3 In_PivotWS16_g169263 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169263 = PivotWO133_g169248;
				half3 NormalOS134_g169248 = v.normal;
				float3 In_NormalOS16_g169263 = NormalOS134_g169248;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169263 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169263 = NormalOS134_g169248;
				float3 objToWorldDir298_g169248 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g169248 = objToWorldDir298_g169248;
				float3 In_NormalRawWS16_g169263 = Normal_RawWS136_g169248;
				half4 TangentlOS153_g169248 = v.tangent;
				float4 In_TangentOS16_g169263 = TangentlOS153_g169248;
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169263 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = v.ase_color;
				float4 In_VertexData16_g169263 = VertexMasks171_g169248;
				float4 break33_g169261 = _object_phase_mode;
				float temp_output_30_0_g169261 = ( v.ase_color.r * break33_g169261.x );
				float temp_output_29_0_g169261 = ( v.ase_color.g * break33_g169261.y );
				float temp_output_31_0_g169261 = ( v.ase_color.b * break33_g169261.z );
				float temp_output_28_0_g169261 = ( temp_output_30_0_g169261 + temp_output_29_0_g169261 + temp_output_31_0_g169261 + ( v.ase_color.a * break33_g169261.w ) );
				float3 break243_g169248 = PivotWO133_g169248;
				float4 appendResult177_g169248 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g169261 + ( break243_g169248.x + break243_g169248.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g169248 = appendResult177_g169248;
				float4 In_MotionData16_g169263 = MotionMasks176_g169248;
				half Object_HeightValue267_g169248 = _ObjectHeightValue;
				half Object_RadiusValue268_g169248 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g169248 = saturate( ( (PositionOS131_g169248).y / Object_HeightValue267_g169248 ) );
				half Bounds_SphereMask282_g169248 = saturate( ( length( PositionOS131_g169248 ) / max( Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 ) ) );
				float4 appendResult253_g169248 = (float4(Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 , Bounds_HeightMask274_g169248 , Bounds_SphereMask282_g169248));
				half4 BoundsData254_g169248 = appendResult253_g169248;
				float4 In_BoundsData16_g169263 = BoundsData254_g169248;
				float4 In_RotationData16_g169263 = float4( 0,0,0,0 );
				{
				Data16_g169263.Dummy = In_Dummy16_g169263;
				Data16_g169263.PositionOS = In_PositionOS16_g169263;
				Data16_g169263.PositionWS = In_PositionWS16_g169263;
				Data16_g169263.PositionWO = In_PositionWO16_g169263;
				Data16_g169263.PositionRawOS = In_PositionRawOS16_g169263;
				Data16_g169263.PositionAddOS = In_PositionAddOS16_g169263;
				Data16_g169263.PivotOS = In_PivotOS16_g169263;
				Data16_g169263.PivotWS = In_PivotWS16_g169263;
				Data16_g169263.PivotWO = In_PivotWO16_g169263;
				Data16_g169263.NormalOS = In_NormalOS16_g169263;
				Data16_g169263.NormalWS = In_NormalWS16_g169263;
				Data16_g169263.NormalRawOS = In_NormalRawOS16_g169263;
				Data16_g169263.NormalRawWS = In_NormalRawWS16_g169263;
				Data16_g169263.TangentOS = In_TangentOS16_g169263;
				Data16_g169263.ViewDirWS = In_ViewDirWS16_g169263;
				Data16_g169263.VertexData = In_VertexData16_g169263;
				Data16_g169263.MotionData = In_MotionData16_g169263;
				Data16_g169263.BoundsData = In_BoundsData16_g169263;
				Data16_g169263.RotationData = In_RotationData16_g169263;
				}
				TVEModelData Data15_g169970 = Data16_g169263;
				float Out_Dummy15_g169970 = 0;
				float3 Out_PositionOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169970 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169970 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169970 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169970 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169970 = float3( 0,0,0 );
				float4 Out_VertexData15_g169970 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169970 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169970 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169970 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169970 = Data15_g169970.Dummy;
				Out_PositionOS15_g169970 = Data15_g169970.PositionOS;
				Out_PositionWS15_g169970 = Data15_g169970.PositionWS;
				Out_PositionWO15_g169970 = Data15_g169970.PositionWO;
				Out_PositionRawOS15_g169970 = Data15_g169970.PositionRawOS;
				Out_PositionAddOS15_g169970 = Data15_g169970.PositionAddOS;
				Out_PivotOS15_g169970 = Data15_g169970.PivotOS;
				Out_PivotWS15_g169970 = Data15_g169970.PivotWS;
				Out_PivotWO15_g169970 = Data15_g169970.PivotWO;
				Out_NormalOS15_g169970 = Data15_g169970.NormalOS;
				Out_NormalWS15_g169970 = Data15_g169970.NormalWS;
				Out_NormalRawOS15_g169970 = Data15_g169970.NormalRawOS;
				Out_NormalRawWS15_g169970 = Data15_g169970.NormalRawWS;
				Out_TangentOS15_g169970 = Data15_g169970.TangentOS;
				Out_ViewDirWS15_g169970 = Data15_g169970.ViewDirWS;
				Out_VertexData15_g169970 = Data15_g169970.VertexData;
				Out_MotionData15_g169970 = Data15_g169970.MotionData;
				Out_BoundsData15_g169970 = Data15_g169970.BoundsData;
				Out_RotationData15_g169970 = Data15_g169970.RotationData;
				}
				float3 temp_output_218_24_g169968 = Out_PivotOS15_g169970;
				float3 In_PositionOS16_g169969 = ( Out_PositionOS15_g169970 - temp_output_218_24_g169968 );
				float3 In_PositionWS16_g169969 = Out_PositionWS15_g169970;
				float3 In_PositionWO16_g169969 = Out_PositionWO15_g169970;
				float3 In_PositionRawOS16_g169969 = Out_PositionRawOS15_g169970;
				float3 In_PositionAddOS16_g169969 = Out_PositionAddOS15_g169970;
				float3 In_PivotOS16_g169969 = temp_output_218_24_g169968;
				float3 In_PivotWS16_g169969 = Out_PivotWS15_g169970;
				float3 In_PivotWO16_g169969 = Out_PivotWO15_g169970;
				float3 In_NormalOS16_g169969 = Out_NormalOS15_g169970;
				float3 In_NormalWS16_g169969 = Out_NormalWS15_g169970;
				float3 In_NormalRawOS16_g169969 = Out_NormalRawOS15_g169970;
				float3 In_NormalRawWS16_g169969 = Out_NormalRawWS15_g169970;
				float4 In_TangentOS16_g169969 = Out_TangentOS15_g169970;
				float3 In_ViewDirWS16_g169969 = Out_ViewDirWS15_g169970;
				float4 In_VertexData16_g169969 = Out_VertexData15_g169970;
				float4 In_MotionData16_g169969 = Out_MotionData15_g169970;
				float4 In_BoundsData16_g169969 = Out_BoundsData15_g169970;
				float4 In_RotationData16_g169969 = Out_RotationData15_g169970;
				{
				Data16_g169969.Dummy = In_Dummy16_g169969;
				Data16_g169969.PositionOS = In_PositionOS16_g169969;
				Data16_g169969.PositionWS = In_PositionWS16_g169969;
				Data16_g169969.PositionWO = In_PositionWO16_g169969;
				Data16_g169969.PositionRawOS = In_PositionRawOS16_g169969;
				Data16_g169969.PositionAddOS = In_PositionAddOS16_g169969;
				Data16_g169969.PivotOS = In_PivotOS16_g169969;
				Data16_g169969.PivotWS = In_PivotWS16_g169969;
				Data16_g169969.PivotWO = In_PivotWO16_g169969;
				Data16_g169969.NormalOS = In_NormalOS16_g169969;
				Data16_g169969.NormalWS = In_NormalWS16_g169969;
				Data16_g169969.NormalRawOS = In_NormalRawOS16_g169969;
				Data16_g169969.NormalRawWS = In_NormalRawWS16_g169969;
				Data16_g169969.TangentOS = In_TangentOS16_g169969;
				Data16_g169969.ViewDirWS = In_ViewDirWS16_g169969;
				Data16_g169969.VertexData = In_VertexData16_g169969;
				Data16_g169969.MotionData = In_MotionData16_g169969;
				Data16_g169969.BoundsData = In_BoundsData16_g169969;
				Data16_g169969.RotationData = In_RotationData16_g169969;
				}
				TVEModelData Data15_g169990 = Data16_g169969;
				float Out_Dummy15_g169990 = 0;
				float3 Out_PositionOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169990 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169990 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169990 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169990 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169990 = float3( 0,0,0 );
				float4 Out_VertexData15_g169990 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169990 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169990 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169990 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169990 = Data15_g169990.Dummy;
				Out_PositionOS15_g169990 = Data15_g169990.PositionOS;
				Out_PositionWS15_g169990 = Data15_g169990.PositionWS;
				Out_PositionWO15_g169990 = Data15_g169990.PositionWO;
				Out_PositionRawOS15_g169990 = Data15_g169990.PositionRawOS;
				Out_PositionAddOS15_g169990 = Data15_g169990.PositionAddOS;
				Out_PivotOS15_g169990 = Data15_g169990.PivotOS;
				Out_PivotWS15_g169990 = Data15_g169990.PivotWS;
				Out_PivotWO15_g169990 = Data15_g169990.PivotWO;
				Out_NormalOS15_g169990 = Data15_g169990.NormalOS;
				Out_NormalWS15_g169990 = Data15_g169990.NormalWS;
				Out_NormalRawOS15_g169990 = Data15_g169990.NormalRawOS;
				Out_NormalRawWS15_g169990 = Data15_g169990.NormalRawWS;
				Out_TangentOS15_g169990 = Data15_g169990.TangentOS;
				Out_ViewDirWS15_g169990 = Data15_g169990.ViewDirWS;
				Out_VertexData15_g169990 = Data15_g169990.VertexData;
				Out_MotionData15_g169990 = Data15_g169990.MotionData;
				Out_BoundsData15_g169990 = Data15_g169990.BoundsData;
				Out_RotationData15_g169990 = Data15_g169990.RotationData;
				}
				half3 Model_PositionOS147_g169989 = Out_PositionOS15_g169990;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g169991 = unity_CameraToWorld;
				float3 appendResult118_g169991 = (float3(break117_g169991[ 0 ][ 2 ] , break117_g169991[ 1 ][ 2 ] , break117_g169991[ 2 ][ 2 ]));
				float3 lerpResult209_g169989 = lerp( ase_worldViewDir , -appendResult118_g169991 , unity_OrthoParams.w);
				float3 break201_g169989 = cross( lerpResult209_g169989 , half3(0,1,0) );
				float3 appendResult196_g169989 = (float3(-break201_g169989.z , 0.0 , break201_g169989.x));
				float dotResult189_g169989 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g169989 = abs( dotResult189_g169989 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g169989 = ( Model_PositionOS147_g169989 + ( mul( unity_WorldToObject, float4( appendResult196_g169989 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g169989 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g169989).y ) ) );
				#else
				float3 staticSwitch211_g169989 = Model_PositionOS147_g169989;
				#endif
				half3 Final_Position178_g169989 = staticSwitch211_g169989;
				float3 In_PositionOS16_g169992 = Final_Position178_g169989;
				float3 In_PositionWS16_g169992 = Out_PositionWS15_g169990;
				float3 In_PositionWO16_g169992 = Out_PositionWO15_g169990;
				float3 In_PositionRawOS16_g169992 = Out_PositionRawOS15_g169990;
				float3 In_PositionAddOS16_g169992 = Out_PositionAddOS15_g169990;
				float3 In_PivotOS16_g169992 = Out_PivotOS15_g169990;
				float3 In_PivotWS16_g169992 = Out_PivotWS15_g169990;
				float3 In_PivotWO16_g169992 = Out_PivotWO15_g169990;
				float3 In_NormalOS16_g169992 = Out_NormalOS15_g169990;
				float3 In_NormalWS16_g169992 = Out_NormalWS15_g169990;
				float3 In_NormalRawOS16_g169992 = Out_NormalRawOS15_g169990;
				float3 In_NormalRawWS16_g169992 = Out_NormalRawWS15_g169990;
				float4 In_TangentOS16_g169992 = Out_TangentOS15_g169990;
				float3 In_ViewDirWS16_g169992 = Out_ViewDirWS15_g169990;
				float4 In_VertexData16_g169992 = Out_VertexData15_g169990;
				float4 In_MotionData16_g169992 = Out_MotionData15_g169990;
				float4 In_BoundsData16_g169992 = Out_BoundsData15_g169990;
				float4 In_RotationData16_g169992 = Out_RotationData15_g169990;
				{
				Data16_g169992.Dummy = In_Dummy16_g169992;
				Data16_g169992.PositionOS = In_PositionOS16_g169992;
				Data16_g169992.PositionWS = In_PositionWS16_g169992;
				Data16_g169992.PositionWO = In_PositionWO16_g169992;
				Data16_g169992.PositionRawOS = In_PositionRawOS16_g169992;
				Data16_g169992.PositionAddOS = In_PositionAddOS16_g169992;
				Data16_g169992.PivotOS = In_PivotOS16_g169992;
				Data16_g169992.PivotWS = In_PivotWS16_g169992;
				Data16_g169992.PivotWO = In_PivotWO16_g169992;
				Data16_g169992.NormalOS = In_NormalOS16_g169992;
				Data16_g169992.NormalWS = In_NormalWS16_g169992;
				Data16_g169992.NormalRawOS = In_NormalRawOS16_g169992;
				Data16_g169992.NormalRawWS = In_NormalRawWS16_g169992;
				Data16_g169992.TangentOS = In_TangentOS16_g169992;
				Data16_g169992.ViewDirWS = In_ViewDirWS16_g169992;
				Data16_g169992.VertexData = In_VertexData16_g169992;
				Data16_g169992.MotionData = In_MotionData16_g169992;
				Data16_g169992.BoundsData = In_BoundsData16_g169992;
				Data16_g169992.RotationData = In_RotationData16_g169992;
				}
				TVEModelData Data15_g170029 = Data16_g169992;
				float Out_Dummy15_g170029 = 0;
				float3 Out_PositionOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170029 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170029 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170029 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170029 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170029 = float3( 0,0,0 );
				float4 Out_VertexData15_g170029 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170029 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170029 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170029 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170029 = Data15_g170029.Dummy;
				Out_PositionOS15_g170029 = Data15_g170029.PositionOS;
				Out_PositionWS15_g170029 = Data15_g170029.PositionWS;
				Out_PositionWO15_g170029 = Data15_g170029.PositionWO;
				Out_PositionRawOS15_g170029 = Data15_g170029.PositionRawOS;
				Out_PositionAddOS15_g170029 = Data15_g170029.PositionAddOS;
				Out_PivotOS15_g170029 = Data15_g170029.PivotOS;
				Out_PivotWS15_g170029 = Data15_g170029.PivotWS;
				Out_PivotWO15_g170029 = Data15_g170029.PivotWO;
				Out_NormalOS15_g170029 = Data15_g170029.NormalOS;
				Out_NormalWS15_g170029 = Data15_g170029.NormalWS;
				Out_NormalRawOS15_g170029 = Data15_g170029.NormalRawOS;
				Out_NormalRawWS15_g170029 = Data15_g170029.NormalRawWS;
				Out_TangentOS15_g170029 = Data15_g170029.TangentOS;
				Out_ViewDirWS15_g170029 = Data15_g170029.ViewDirWS;
				Out_VertexData15_g170029 = Data15_g170029.VertexData;
				Out_MotionData15_g170029 = Data15_g170029.MotionData;
				Out_BoundsData15_g170029 = Data15_g170029.BoundsData;
				Out_RotationData15_g170029 = Data15_g170029.RotationData;
				}
				half3 Model_PositionOS147_g170027 = Out_PositionOS15_g170029;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170027 = Out_PivotWO15_g170029;
				half3 Model_PivotWO162_g170027 = temp_output_210_19_g170027;
				float temp_output_7_0_g170028 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170028 = ( _SizeFadeDistMinValue - temp_output_7_0_g170028 );
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170031 = Data204_g169264;
				float Out_Dummy15_g170031 = 0;
				float4 Out_CoatParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170031 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170031 = Data15_g170031.Dummy;
				Out_CoatParams15_g170031 = Data15_g170031.CoatParams;
				Out_PaintParams15_g170031 = Data15_g170031.PaintParams;
				Out_GlowParams15_g170031 = Data15_g170031.GlowParams;
				Out_AtmoParams15_g170031= Data15_g170031.AtmoParams;
				Out_FadeParams15_g170031= Data15_g170031.FadeParams;
				Out_FormParams15_g170031 = Data15_g170031.FormParams;
				Out_LandParams15_g170031 = Data15_g170031.LandParams;
				Out_WindParams15_g170031 = Data15_g170031.WindParams;
				Out_PushParams15_g170031 = Data15_g170031.PushParams;
				}
				half4 Input_FormParams188_g170027 = Out_FormParams15_g170031;
				float lerpResult213_g170027 = lerp( 1.0 , (Input_FormParams188_g170027).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170027 = lerpResult213_g170027;
				#else
				float staticSwitch194_g170027 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170027 = staticSwitch194_g170027;
				float temp_output_189_0_g170027 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170027 ) - temp_output_7_0_g170028 ) / ( temp_output_10_0_g170028 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170027 );
				float3 appendResult200_g170027 = (float3(temp_output_189_0_g170027 , temp_output_189_0_g170027 , temp_output_189_0_g170027));
				float3 appendResult201_g170027 = (float3(1.0 , temp_output_189_0_g170027 , 1.0));
				float3 lerpResult202_g170027 = lerp( appendResult200_g170027 , appendResult201_g170027 , _SizeFadeScaleMode);
				float3 lerpResult184_g170027 = lerp( temp_cast_5 , lerpResult202_g170027 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170027 = ( lerpResult184_g170027 * Model_PositionOS147_g170027 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170027 = temp_output_167_0_g170027;
				#else
				float3 staticSwitch199_g170027 = Model_PositionOS147_g170027;
				#endif
				half3 Final_Position178_g170027 = staticSwitch199_g170027;
				float3 In_PositionOS16_g170030 = Final_Position178_g170027;
				float3 In_PositionWS16_g170030 = Out_PositionWS15_g170029;
				float3 In_PositionWO16_g170030 = Out_PositionWO15_g170029;
				float3 In_PositionRawOS16_g170030 = Out_PositionRawOS15_g170029;
				float3 In_PositionAddOS16_g170030 = Out_PositionAddOS15_g170029;
				float3 temp_output_210_24_g170027 = Out_PivotOS15_g170029;
				float3 In_PivotOS16_g170030 = temp_output_210_24_g170027;
				float3 In_PivotWS16_g170030 = Out_PivotWS15_g170029;
				float3 In_PivotWO16_g170030 = temp_output_210_19_g170027;
				float3 In_NormalOS16_g170030 = Out_NormalOS15_g170029;
				float3 In_NormalWS16_g170030 = Out_NormalWS15_g170029;
				float3 In_NormalRawOS16_g170030 = Out_NormalRawOS15_g170029;
				float3 In_NormalRawWS16_g170030 = Out_NormalRawWS15_g170029;
				float4 In_TangentOS16_g170030 = Out_TangentOS15_g170029;
				float3 In_ViewDirWS16_g170030 = Out_ViewDirWS15_g170029;
				float4 In_VertexData16_g170030 = Out_VertexData15_g170029;
				float4 In_MotionData16_g170030 = Out_MotionData15_g170029;
				float4 In_BoundsData16_g170030 = Out_BoundsData15_g170029;
				float4 In_RotationData16_g170030 = Out_RotationData15_g170029;
				{
				Data16_g170030.Dummy = In_Dummy16_g170030;
				Data16_g170030.PositionOS = In_PositionOS16_g170030;
				Data16_g170030.PositionWS = In_PositionWS16_g170030;
				Data16_g170030.PositionWO = In_PositionWO16_g170030;
				Data16_g170030.PositionRawOS = In_PositionRawOS16_g170030;
				Data16_g170030.PositionAddOS = In_PositionAddOS16_g170030;
				Data16_g170030.PivotOS = In_PivotOS16_g170030;
				Data16_g170030.PivotWS = In_PivotWS16_g170030;
				Data16_g170030.PivotWO = In_PivotWO16_g170030;
				Data16_g170030.NormalOS = In_NormalOS16_g170030;
				Data16_g170030.NormalWS = In_NormalWS16_g170030;
				Data16_g170030.NormalRawOS = In_NormalRawOS16_g170030;
				Data16_g170030.NormalRawWS = In_NormalRawWS16_g170030;
				Data16_g170030.TangentOS = In_TangentOS16_g170030;
				Data16_g170030.ViewDirWS = In_ViewDirWS16_g170030;
				Data16_g170030.VertexData = In_VertexData16_g170030;
				Data16_g170030.MotionData = In_MotionData16_g170030;
				Data16_g170030.BoundsData = In_BoundsData16_g170030;
				Data16_g170030.RotationData = In_RotationData16_g170030;
				}
				TVEModelData Data15_g170078 = Data16_g170030;
				float Out_Dummy15_g170078 = 0;
				float3 Out_PositionOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170078 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170078 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170078 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170078 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170078 = float3( 0,0,0 );
				float4 Out_VertexData15_g170078 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170078 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170078 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170078 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170078 = Data15_g170078.Dummy;
				Out_PositionOS15_g170078 = Data15_g170078.PositionOS;
				Out_PositionWS15_g170078 = Data15_g170078.PositionWS;
				Out_PositionWO15_g170078 = Data15_g170078.PositionWO;
				Out_PositionRawOS15_g170078 = Data15_g170078.PositionRawOS;
				Out_PositionAddOS15_g170078 = Data15_g170078.PositionAddOS;
				Out_PivotOS15_g170078 = Data15_g170078.PivotOS;
				Out_PivotWS15_g170078 = Data15_g170078.PivotWS;
				Out_PivotWO15_g170078 = Data15_g170078.PivotWO;
				Out_NormalOS15_g170078 = Data15_g170078.NormalOS;
				Out_NormalWS15_g170078 = Data15_g170078.NormalWS;
				Out_NormalRawOS15_g170078 = Data15_g170078.NormalRawOS;
				Out_NormalRawWS15_g170078 = Data15_g170078.NormalRawWS;
				Out_TangentOS15_g170078 = Data15_g170078.TangentOS;
				Out_ViewDirWS15_g170078 = Data15_g170078.ViewDirWS;
				Out_VertexData15_g170078 = Data15_g170078.VertexData;
				Out_MotionData15_g170078 = Data15_g170078.MotionData;
				Out_BoundsData15_g170078 = Data15_g170078.BoundsData;
				Out_RotationData15_g170078 = Data15_g170078.RotationData;
				}
				float3 temp_output_1567_0_g170066 = Out_PositionOS15_g170078;
				float3 In_PositionOS16_g170082 = temp_output_1567_0_g170066;
				float3 temp_output_1567_16_g170066 = Out_PositionWS15_g170078;
				float3 In_PositionWS16_g170082 = temp_output_1567_16_g170066;
				float3 temp_output_1567_17_g170066 = Out_PositionWO15_g170078;
				float3 In_PositionWO16_g170082 = temp_output_1567_17_g170066;
				float3 In_PositionRawOS16_g170082 = Out_PositionRawOS15_g170078;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170066 = Out_VertexData15_g170078;
				half4 Model_VertexMasks518_g170066 = temp_output_1567_29_g170066;
				float4 break1689_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170080 = _motion_small_vert_mode;
				float temp_output_30_0_g170080 = ( break1689_g170066.x * break33_g170080.x );
				float temp_output_29_0_g170080 = ( break1689_g170066.y * break33_g170080.y );
				float temp_output_31_0_g170080 = ( break1689_g170066.z * break33_g170080.z );
				float temp_output_28_0_g170080 = ( temp_output_30_0_g170080 + temp_output_29_0_g170080 + temp_output_31_0_g170080 + ( break1689_g170066.w * break33_g170080.w ) );
				float temp_output_1727_0_g170066 = temp_output_28_0_g170080;
				float4 temp_output_1567_30_g170066 = Out_BoundsData15_g170078;
				half4 Model_BoundsData1322_g170066 = temp_output_1567_30_g170066;
				float4 break33_g170083 = _motion_small_proc_mode;
				float temp_output_30_0_g170083 = ( (Model_BoundsData1322_g170066).z * break33_g170083.x );
				float temp_output_29_0_g170083 = ( (Model_BoundsData1322_g170066).w * break33_g170083.y );
				float temp_output_1734_0_g170066 = ( temp_output_30_0_g170083 + temp_output_29_0_g170083 );
				float lerpResult1906_g170066 = lerp( temp_output_1727_0_g170066 , temp_output_1734_0_g170066 , _motion_small_mask_mode);
				float enc1805_g170066 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170066 = DecodeFloatToVector2( enc1805_g170066 );
				float2 break1804_g170066 = localDecodeFloatToVector21805_g170066;
				half Small_Mask_Legacy1806_g170066 = break1804_g170066.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170066 = Small_Mask_Legacy1806_g170066;
				#else
				float staticSwitch1800_g170066 = lerpResult1906_g170066;
				#endif
				float clampResult17_g170085 = clamp( staticSwitch1800_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170086 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170086 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170086 );
				float temp_output_6_0_g170087 = saturate( ( ( clampResult17_g170085 - temp_output_7_0_g170086 ) / ( temp_output_10_0_g170086 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170087 = ( temp_output_6_0_g170087 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170087 = temp_output_6_0_g170087;
				#endif
				half Small_Mask640_g170066 = staticSwitch14_g170087;
				half3 Model_PositionOS147_g170066 = temp_output_1567_0_g170066;
				float3 normalizeResult1832_g170066 = normalize( Model_PositionOS147_g170066 );
				float4 lerpResult627_g170120 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170120 = (lerpResult627_g170120).xy;
				half3 Model_PositionWO162_g170066 = temp_output_1567_17_g170066;
				float3 temp_output_1567_19_g170066 = Out_PivotWO15_g170078;
				half3 Model_PivotWO402_g170066 = temp_output_1567_19_g170066;
				float3 lerpResult829_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170066 = Out_MotionData15_g170078;
				half4 Model_MotionMasks489_g170066 = temp_output_1567_27_g170066;
				half3 Base_Position1394_g170066 = ( lerpResult829_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170120 = Base_Position1394_g170066;
				half Flow_Tillling1397_g170066 = _MotionTillingValue;
				half Input_MotionTilling321_g170120 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170120 = ( -(Input_PositionWO419_g170120).xz * Input_MotionTilling321_g170120 * 0.005 );
				float2 temp_output_3_0_g170133 = Noise_Coord515_g170120;
				float2 temp_output_606_0_g170120 = (Global_WindDirection593_g170120*2.0 + -1.0);
				float2 temp_output_21_0_g170133 = temp_output_606_0_g170120;
				float lerpResult128_g170121 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170066 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170120 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170120 = ( lerpResult128_g170121 * Input_MotionSpeed62_g170120 );
				half Noise_Speed516_g170120 = ( temp_output_505_0_g170120 * 0.02 );
				float temp_output_15_0_g170133 = Noise_Speed516_g170120;
				float temp_output_23_0_g170133 = frac( temp_output_15_0_g170133 );
				float4 lerpResult39_g170133 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * temp_output_23_0_g170133 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * frac( ( temp_output_15_0_g170133 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170133 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170120 = lerpResult39_g170133;
				half Flow_Noise1843_g170066 = _MotionNoiseValue;
				half Input_MotionNoise552_g170120 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170120 = lerp( Global_WindDirection593_g170120 , (Noise_Params535_g170120).rg , Input_MotionNoise552_g170120);
				half Global_WindIntensity576_g170120 = (lerpResult627_g170120).z;
				half Flow_Value1855_g170066 = _MotionIntensityValue;
				half Input_MotionValue629_g170120 = Flow_Value1855_g170066;
				float2 lerpResult574_g170120 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170120 , ( Global_WindIntensity576_g170120 * Input_MotionValue629_g170120 ));
				float3 appendResult566_g170120 = (float3(lerpResult574_g170120 , (Noise_Params535_g170120).b));
				float temp_output_136_0_g170122 = _global_wind_layer_value;
				float temp_output_19_0_g170124 = TVE_WindLayers[(int)temp_output_136_0_g170122];
				half3 Input_Position180_g170125 = Input_PositionWO419_g170120;
				float2 temp_output_75_0_g170125 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_82_0_g170125 = temp_output_136_0_g170122;
				float2 temp_output_119_0_g170125 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_7_0_g170130 = 1.0;
				float temp_output_10_0_g170130 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170130 );
				float4 lerpResult131_g170125 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170125,temp_output_82_0_g170125), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170125,temp_output_82_0_g170125), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170125 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170130 ) / temp_output_10_0_g170130 ) ));
				float4 temp_output_17_0_g170124 = lerpResult131_g170125;
				float4 temp_output_3_0_g170124 = TVE_WindParams;
				float4 ifLocalVar18_g170124 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170124 >= 0.5 )
				ifLocalVar18_g170124 = temp_output_17_0_g170124;
				else
				ifLocalVar18_g170124 = temp_output_3_0_g170124;
				float4 lerpResult22_g170124 = lerp( temp_output_3_0_g170124 , temp_output_17_0_g170124 , temp_output_19_0_g170124);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170124 = lerpResult22_g170124;
				#else
				float4 staticSwitch24_g170124 = ifLocalVar18_g170124;
				#endif
				float4 temp_output_610_0_g170120 = staticSwitch24_g170124;
				float3 lerpResult623_g170120 = lerp( appendResult566_g170120 , (temp_output_610_0_g170120).rgb , (temp_output_610_0_g170120).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170120 = lerpResult623_g170120;
				#else
				float3 staticSwitch612_g170120 = appendResult566_g170120;
				#endif
				float3 temp_output_1902_567_g170066 = staticSwitch612_g170120;
				float2 temp_output_1403_0_g170066 = (temp_output_1902_567_g170066).xy;
				float temp_output_136_0_g170067 = _global_push_layer_value;
				float temp_output_19_0_g170068 = TVE_PushLayers[(int)temp_output_136_0_g170067];
				float3 lerpResult1547_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170066 = ( lerpResult1547_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170069 = Bend_Position1549_g170066;
				float2 temp_output_75_0_g170069 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_82_0_g170069 = temp_output_136_0_g170067;
				float2 temp_output_119_0_g170069 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_7_0_g170074 = 1.0;
				float temp_output_10_0_g170074 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170074 );
				float4 lerpResult131_g170069 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170069,temp_output_82_0_g170069), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170069,temp_output_82_0_g170069), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170069 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170074 ) / temp_output_10_0_g170074 ) ));
				float4 temp_output_17_0_g170068 = lerpResult131_g170069;
				float4 temp_output_3_0_g170068 = TVE_PushParams;
				float4 ifLocalVar18_g170068 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170068 >= 0.5 )
				ifLocalVar18_g170068 = temp_output_17_0_g170068;
				else
				ifLocalVar18_g170068 = temp_output_3_0_g170068;
				float4 lerpResult22_g170068 = lerp( temp_output_3_0_g170068 , temp_output_17_0_g170068 , temp_output_19_0_g170068);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170068 = lerpResult22_g170068;
				#else
				float4 staticSwitch24_g170068 = ifLocalVar18_g170068;
				#endif
				half4 Global_BendParams214_g170066 = staticSwitch24_g170068;
				half Bend_Intensity1501_g170066 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170066 = saturate( ( (Global_BendParams214_g170066).a * Bend_Intensity1501_g170066 ) );
				#else
				float staticSwitch1527_g170066 = 0.0;
				#endif
				half Bend_Influence1504_g170066 = staticSwitch1527_g170066;
				float2 lerpResult1507_g170066 = lerp( temp_output_1403_0_g170066 , (Global_BendParams214_g170066).rg , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170066 = lerpResult1507_g170066;
				#else
				float2 staticSwitch1506_g170066 = temp_output_1403_0_g170066;
				#endif
				float2 break83_g170076 = (staticSwitch1506_g170066*2.0 + -1.0);
				float3 appendResult79_g170076 = (float3(break83_g170076.x , 0.0 , break83_g170076.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170076 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170105 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170105 = (lerpResult627_g170105).xy;
				float3 lerpResult1411_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170066 = ( lerpResult1411_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170105 = Small_Position1421_g170066;
				half Input_MotionTilling321_g170105 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170105 = ( -(Input_PositionWO419_g170105).xz * Input_MotionTilling321_g170105 * 0.005 );
				float2 temp_output_3_0_g170118 = Noise_Coord515_g170105;
				float2 temp_output_606_0_g170105 = (Global_WindDirection593_g170105*2.0 + -1.0);
				float2 temp_output_21_0_g170118 = temp_output_606_0_g170105;
				float lerpResult128_g170106 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170105 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170105 = ( lerpResult128_g170106 * Input_MotionSpeed62_g170105 );
				half Noise_Speed516_g170105 = ( temp_output_505_0_g170105 * 0.02 );
				float temp_output_15_0_g170118 = Noise_Speed516_g170105;
				float temp_output_23_0_g170118 = frac( temp_output_15_0_g170118 );
				float4 lerpResult39_g170118 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * temp_output_23_0_g170118 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * frac( ( temp_output_15_0_g170118 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170118 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170105 = lerpResult39_g170118;
				half Input_MotionNoise552_g170105 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170105 = lerp( Global_WindDirection593_g170105 , (Noise_Params535_g170105).rg , Input_MotionNoise552_g170105);
				half Global_WindIntensity576_g170105 = (lerpResult627_g170105).z;
				half Input_MotionValue629_g170105 = Flow_Value1855_g170066;
				float2 lerpResult574_g170105 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170105 , ( Global_WindIntensity576_g170105 * Input_MotionValue629_g170105 ));
				float3 appendResult566_g170105 = (float3(lerpResult574_g170105 , (Noise_Params535_g170105).b));
				float temp_output_136_0_g170107 = _global_wind_layer_value;
				float temp_output_19_0_g170109 = TVE_WindLayers[(int)temp_output_136_0_g170107];
				half3 Input_Position180_g170110 = Input_PositionWO419_g170105;
				float2 temp_output_75_0_g170110 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_82_0_g170110 = temp_output_136_0_g170107;
				float2 temp_output_119_0_g170110 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_7_0_g170115 = 1.0;
				float temp_output_10_0_g170115 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170115 );
				float4 lerpResult131_g170110 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170110,temp_output_82_0_g170110), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170110,temp_output_82_0_g170110), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170110 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170115 ) / temp_output_10_0_g170115 ) ));
				float4 temp_output_17_0_g170109 = lerpResult131_g170110;
				float4 temp_output_3_0_g170109 = TVE_WindParams;
				float4 ifLocalVar18_g170109 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170109 >= 0.5 )
				ifLocalVar18_g170109 = temp_output_17_0_g170109;
				else
				ifLocalVar18_g170109 = temp_output_3_0_g170109;
				float4 lerpResult22_g170109 = lerp( temp_output_3_0_g170109 , temp_output_17_0_g170109 , temp_output_19_0_g170109);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170109 = lerpResult22_g170109;
				#else
				float4 staticSwitch24_g170109 = ifLocalVar18_g170109;
				#endif
				float4 temp_output_610_0_g170105 = staticSwitch24_g170109;
				float3 lerpResult623_g170105 = lerp( appendResult566_g170105 , (temp_output_610_0_g170105).rgb , (temp_output_610_0_g170105).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170105 = lerpResult623_g170105;
				#else
				float3 staticSwitch612_g170105 = appendResult566_g170105;
				#endif
				float3 temp_output_1901_567_g170066 = staticSwitch612_g170105;
				float2 break83_g170077 = ((temp_output_1901_567_g170066).xy*2.0 + -1.0);
				float3 appendResult79_g170077 = (float3(break83_g170077.x , 0.0 , break83_g170077.y));
				half2 Small_Direction1489_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170077 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170066 = Small_Direction1489_g170066;
				#else
				float2 staticSwitch1485_g170066 = Base_Direction893_g170066;
				#endif
				half2 Wind_Direction1486_g170066 = staticSwitch1485_g170066;
				float2 break1828_g170066 = -Wind_Direction1486_g170066;
				float3 appendResult1830_g170066 = (float3(break1828_g170066.x , 0.0 , break1828_g170066.y));
				float dotResult1831_g170066 = dot( normalizeResult1832_g170066 , appendResult1830_g170066 );
				float lerpResult1826_g170066 = lerp( 1.0 , (dotResult1831_g170066*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170066 = lerpResult1826_g170066;
				float2 break1433_g170066 = Small_Direction1489_g170066;
				float3 appendResult1434_g170066 = (float3(break1433_g170066.x , length( Small_Direction1489_g170066 ) , break1433_g170066.y));
				half Small_Noise1427_g170066 = abs( (temp_output_1901_567_g170066).z );
				float3 appendResult1786_g170066 = (float3(Small_Noise1427_g170066 , (Small_Noise1427_g170066*0.4 + -0.2) , Small_Noise1427_g170066));
				half3 Small_Squash789_g170066 = ( _MotionSmallIntensityValue * Small_Mask640_g170066 * Motion_FrontMask1142_g170066 * appendResult1434_g170066 * appendResult1786_g170066 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170066 = Small_Squash789_g170066;
				#else
				float3 staticSwitch495_g170066 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170081 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170081 = ( break1710_g170066.x * break33_g170081.x );
				float temp_output_29_0_g170081 = ( break1710_g170066.y * break33_g170081.y );
				float temp_output_31_0_g170081 = ( break1710_g170066.z * break33_g170081.z );
				float temp_output_28_0_g170081 = ( temp_output_30_0_g170081 + temp_output_29_0_g170081 + temp_output_31_0_g170081 + ( break1710_g170066.w * break33_g170081.w ) );
				float temp_output_1729_0_g170066 = temp_output_28_0_g170081;
				float4 break33_g170084 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170084 = ( (Model_BoundsData1322_g170066).z * break33_g170084.x );
				float temp_output_29_0_g170084 = ( (Model_BoundsData1322_g170066).w * break33_g170084.y );
				float temp_output_1735_0_g170066 = ( temp_output_30_0_g170084 + temp_output_29_0_g170084 );
				float lerpResult1908_g170066 = lerp( temp_output_1729_0_g170066 , temp_output_1735_0_g170066 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170066 = break1804_g170066.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170066 = Tiny_Mask_Legacy1807_g170066;
				#else
				float staticSwitch1810_g170066 = lerpResult1908_g170066;
				#endif
				float clampResult17_g170088 = clamp( staticSwitch1810_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170089 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170089 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170089 );
				float temp_output_6_0_g170090 = saturate( ( ( clampResult17_g170088 - temp_output_7_0_g170089 ) / ( temp_output_10_0_g170089 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170090 = ( temp_output_6_0_g170090 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170090 = temp_output_6_0_g170090;
				#endif
				half Tiny_Mask218_g170066 = staticSwitch14_g170090;
				half3 Input_Position500_g170091 = Model_PositionWO162_g170066;
				half Input_MotionTilling321_g170091 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170091 = 0.0;
				float lerpResult128_g170093 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170091 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170091 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170091).xz * Input_MotionTilling321_g170091 * 0.03 ) + Input_MotionPhase330_g170091 + ( lerpResult128_g170093 * Input_MotionSpeed62_g170091 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170091 = (float3(tex2DNode460_g170091.r , tex2DNode460_g170091.g , tex2DNode460_g170091.b));
				half3 Flutter_Texture489_g170091 = (appendResult462_g170091*2.0 + -1.0);
				half3 Tiny_Direction859_g170066 = Flutter_Texture489_g170091;
				half Base_Noise1159_g170066 = abs( (temp_output_1902_567_g170066).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170066 = Small_Noise1427_g170066;
				#else
				float staticSwitch1453_g170066 = Base_Noise1159_g170066;
				#endif
				half Wind_Noise1475_g170066 = staticSwitch1453_g170066;
				half3 Model_PositionWS1819_g170066 = temp_output_1567_16_g170066;
				half Motion_FadeMask1820_g170066 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170066 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170066 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170066 * Tiny_Direction859_g170066 * length( Wind_Direction1486_g170066 ) * Wind_Noise1475_g170066 * Motion_FrontMask1142_g170066 * Motion_FadeMask1820_g170066 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170066 = Tiny_Flutter1451_g170066;
				#else
				float3 staticSwitch414_g170066 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170066 = ( staticSwitch495_g170066 + staticSwitch414_g170066 );
				float3 In_PositionAddOS16_g170082 = Final_PositionADD1569_g170066;
				float3 temp_output_1567_24_g170066 = Out_PivotOS15_g170078;
				float3 In_PivotOS16_g170082 = temp_output_1567_24_g170066;
				float3 In_PivotWS16_g170082 = Out_PivotWS15_g170078;
				float3 In_PivotWO16_g170082 = temp_output_1567_19_g170066;
				float3 temp_output_1567_20_g170066 = Out_NormalOS15_g170078;
				float3 In_NormalOS16_g170082 = temp_output_1567_20_g170066;
				float3 In_NormalWS16_g170082 = Out_NormalWS15_g170078;
				float3 In_NormalRawOS16_g170082 = Out_NormalRawOS15_g170078;
				float3 In_NormalRawWS16_g170082 = Out_NormalRawWS15_g170078;
				float4 In_TangentOS16_g170082 = Out_TangentOS15_g170078;
				float3 In_ViewDirWS16_g170082 = Out_ViewDirWS15_g170078;
				float4 In_VertexData16_g170082 = temp_output_1567_29_g170066;
				float4 In_MotionData16_g170082 = temp_output_1567_27_g170066;
				float4 In_BoundsData16_g170082 = temp_output_1567_30_g170066;
				half Base_Intensity1883_g170066 = _MotionBaseIntensityValue;
				float4 break748_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170098 = _motion_base_vert_mode;
				float temp_output_30_0_g170098 = ( break748_g170066.x * break33_g170098.x );
				float temp_output_29_0_g170098 = ( break748_g170066.y * break33_g170098.y );
				float temp_output_31_0_g170098 = ( break748_g170066.z * break33_g170098.z );
				float temp_output_28_0_g170098 = ( temp_output_30_0_g170098 + temp_output_29_0_g170098 + temp_output_31_0_g170098 + ( break748_g170066.w * break33_g170098.w ) );
				float temp_output_1731_0_g170066 = temp_output_28_0_g170098;
				float4 break33_g170099 = _motion_base_proc_mode;
				float temp_output_30_0_g170099 = ( (Model_BoundsData1322_g170066).z * break33_g170099.x );
				float temp_output_29_0_g170099 = ( (Model_BoundsData1322_g170066).w * break33_g170099.y );
				float temp_output_1733_0_g170066 = ( temp_output_30_0_g170099 + temp_output_29_0_g170099 );
				float lerpResult1904_g170066 = lerp( temp_output_1731_0_g170066 , temp_output_1733_0_g170066 , _motion_base_mask_mode);
				float clampResult17_g170095 = clamp( lerpResult1904_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170096 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170096 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170096 );
				float temp_output_6_0_g170097 = saturate( ( ( clampResult17_g170095 - temp_output_7_0_g170096 ) / ( temp_output_10_0_g170096 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170097 = ( temp_output_6_0_g170097 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170097 = temp_output_6_0_g170097;
				#endif
				half Base_Mask217_g170066 = staticSwitch14_g170097;
				float lerpResult1768_g170066 = lerp( (Base_Noise1159_g170066*2.0 + -1.0) , Base_Noise1159_g170066 , length( Base_Direction893_g170066 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170066 = ( Base_Intensity1883_g170066 * Base_Mask217_g170066 * lerpResult1768_g170066 );
				#else
				float staticSwitch1573_g170066 = 0.0;
				#endif
				float4 break1864_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170103 = _motion_push_vert_mode;
				float temp_output_30_0_g170103 = ( break1864_g170066.x * break33_g170103.x );
				float temp_output_29_0_g170103 = ( break1864_g170066.y * break33_g170103.y );
				float temp_output_31_0_g170103 = ( break1864_g170066.z * break33_g170103.z );
				float temp_output_28_0_g170103 = ( temp_output_30_0_g170103 + temp_output_29_0_g170103 + temp_output_31_0_g170103 + ( break1864_g170066.w * break33_g170103.w ) );
				float temp_output_1867_0_g170066 = temp_output_28_0_g170103;
				float4 break33_g170104 = _motion_push_proc_mode;
				float temp_output_30_0_g170104 = ( (Model_BoundsData1322_g170066).z * break33_g170104.x );
				float temp_output_29_0_g170104 = ( (Model_BoundsData1322_g170066).w * break33_g170104.y );
				float temp_output_1868_0_g170066 = ( temp_output_30_0_g170104 + temp_output_29_0_g170104 );
				float lerpResult1910_g170066 = lerp( temp_output_1867_0_g170066 , temp_output_1868_0_g170066 , _motion_push_mask_mode);
				float clampResult17_g170101 = clamp( lerpResult1910_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170102 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170102 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170102 );
				float temp_output_6_0_g170135 = saturate( ( ( clampResult17_g170101 - temp_output_7_0_g170102 ) / ( temp_output_10_0_g170102 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170135 = ( temp_output_6_0_g170135 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170135 = temp_output_6_0_g170135;
				#endif
				half Push_Mask1877_g170066 = staticSwitch14_g170135;
				float lerpResult1496_g170066 = lerp( staticSwitch1573_g170066 , ( Bend_Intensity1501_g170066 * Push_Mask1877_g170066 ) , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170066 = lerpResult1496_g170066;
				#else
				float staticSwitch1517_g170066 = staticSwitch1573_g170066;
				#endif
				half2 Base_Bending1440_g170066 = ( staticSwitch1517_g170066 * Base_Direction893_g170066 );
				half2 Final_VertexBend1570_g170066 = Base_Bending1440_g170066;
				float4 In_RotationData16_g170082 = float4( Final_VertexBend1570_g170066, 0.0 , 0.0 );
				{
				Data16_g170082.Dummy = In_Dummy16_g170082;
				Data16_g170082.PositionOS = In_PositionOS16_g170082;
				Data16_g170082.PositionWS = In_PositionWS16_g170082;
				Data16_g170082.PositionWO = In_PositionWO16_g170082;
				Data16_g170082.PositionRawOS = In_PositionRawOS16_g170082;
				Data16_g170082.PositionAddOS = In_PositionAddOS16_g170082;
				Data16_g170082.PivotOS = In_PivotOS16_g170082;
				Data16_g170082.PivotWS = In_PivotWS16_g170082;
				Data16_g170082.PivotWO = In_PivotWO16_g170082;
				Data16_g170082.NormalOS = In_NormalOS16_g170082;
				Data16_g170082.NormalWS = In_NormalWS16_g170082;
				Data16_g170082.NormalRawOS = In_NormalRawOS16_g170082;
				Data16_g170082.NormalRawWS = In_NormalRawWS16_g170082;
				Data16_g170082.TangentOS = In_TangentOS16_g170082;
				Data16_g170082.ViewDirWS = In_ViewDirWS16_g170082;
				Data16_g170082.VertexData = In_VertexData16_g170082;
				Data16_g170082.MotionData = In_MotionData16_g170082;
				Data16_g170082.BoundsData = In_BoundsData16_g170082;
				Data16_g170082.RotationData = In_RotationData16_g170082;
				}
				TVEModelData Data15_g170401 = Data16_g170082;
				float Out_Dummy15_g170401 = 0;
				float3 Out_PositionOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170401 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170401 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170401 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170401 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170401 = float3( 0,0,0 );
				float4 Out_VertexData15_g170401 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170401 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170401 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170401 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170401 = Data15_g170401.Dummy;
				Out_PositionOS15_g170401 = Data15_g170401.PositionOS;
				Out_PositionWS15_g170401 = Data15_g170401.PositionWS;
				Out_PositionWO15_g170401 = Data15_g170401.PositionWO;
				Out_PositionRawOS15_g170401 = Data15_g170401.PositionRawOS;
				Out_PositionAddOS15_g170401 = Data15_g170401.PositionAddOS;
				Out_PivotOS15_g170401 = Data15_g170401.PivotOS;
				Out_PivotWS15_g170401 = Data15_g170401.PivotWS;
				Out_PivotWO15_g170401 = Data15_g170401.PivotWO;
				Out_NormalOS15_g170401 = Data15_g170401.NormalOS;
				Out_NormalWS15_g170401 = Data15_g170401.NormalWS;
				Out_NormalRawOS15_g170401 = Data15_g170401.NormalRawOS;
				Out_NormalRawWS15_g170401 = Data15_g170401.NormalRawWS;
				Out_TangentOS15_g170401 = Data15_g170401.TangentOS;
				Out_ViewDirWS15_g170401 = Data15_g170401.ViewDirWS;
				Out_VertexData15_g170401 = Data15_g170401.VertexData;
				Out_MotionData15_g170401 = Data15_g170401.MotionData;
				Out_BoundsData15_g170401 = Data15_g170401.BoundsData;
				Out_RotationData15_g170401 = Data15_g170401.RotationData;
				}
				half3 Model_PositionOS147_g170400 = Out_PositionOS15_g170401;
				half3 Input_False58_g170406 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170403 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170404 = VertexPos40_g170403;
				float3 appendResult74_g170404 = (float3(VertexPos40_g170404.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170404 = appendResult74_g170404;
				float3 break84_g170404 = VertexPos40_g170404;
				float3 appendResult81_g170404 = (float3(0.0 , break84_g170404.y , break84_g170404.z));
				half3 VertexPosOtherAxis82_g170404 = appendResult81_g170404;
				float4 temp_output_1567_33_g170400 = Out_RotationData15_g170401;
				half4 Model_VertexBend1569_g170400 = temp_output_1567_33_g170400;
				half2 Angle44_g170403 = (Model_VertexBend1569_g170400).xy;
				half Angle44_g170404 = (Angle44_g170403).y;
				half3 VertexPos40_g170405 = ( VertexPosRotationAxis50_g170404 + ( VertexPosOtherAxis82_g170404 * cos( Angle44_g170404 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170404 ) * sin( Angle44_g170404 ) ) );
				float3 appendResult74_g170405 = (float3(0.0 , 0.0 , VertexPos40_g170405.z));
				half3 VertexPosRotationAxis50_g170405 = appendResult74_g170405;
				float3 break84_g170405 = VertexPos40_g170405;
				float3 appendResult81_g170405 = (float3(break84_g170405.x , break84_g170405.y , 0.0));
				half3 VertexPosOtherAxis82_g170405 = appendResult81_g170405;
				half Angle44_g170405 = -(Angle44_g170403).x;
				half3 Input_True57_g170406 = ( VertexPosRotationAxis50_g170405 + ( VertexPosOtherAxis82_g170405 * cos( Angle44_g170405 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170405 ) * sin( Angle44_g170405 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch65_g170406 = Input_False58_g170406;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch67_g170406 = staticSwitch65_g170406;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch69_g170406 = staticSwitch67_g170406;
				#endif
				float3 temp_output_1567_31_g170400 = Out_PositionAddOS15_g170401;
				half3 Model_PositionADD1568_g170400 = temp_output_1567_31_g170400;
				half3 Final_PositionOS178_g170400 = ( staticSwitch69_g170406 + Model_PositionADD1568_g170400 );
				float3 In_PositionOS16_g170402 = Final_PositionOS178_g170400;
				float3 In_PositionWS16_g170402 = Out_PositionWS15_g170401;
				float3 In_PositionWO16_g170402 = Out_PositionWO15_g170401;
				float3 In_PositionRawOS16_g170402 = Out_PositionRawOS15_g170401;
				float3 In_PositionAddOS16_g170402 = temp_output_1567_31_g170400;
				float3 In_PivotOS16_g170402 = Out_PivotOS15_g170401;
				float3 In_PivotWS16_g170402 = Out_PivotWS15_g170401;
				float3 In_PivotWO16_g170402 = Out_PivotWO15_g170401;
				float3 In_NormalOS16_g170402 = Out_NormalOS15_g170401;
				float3 In_NormalWS16_g170402 = Out_NormalWS15_g170401;
				float3 In_NormalRawOS16_g170402 = Out_NormalRawOS15_g170401;
				float3 In_NormalRawWS16_g170402 = Out_NormalRawWS15_g170401;
				float4 In_TangentOS16_g170402 = Out_TangentOS15_g170401;
				float3 In_ViewDirWS16_g170402 = Out_ViewDirWS15_g170401;
				float4 In_VertexData16_g170402 = Out_VertexData15_g170401;
				float4 In_MotionData16_g170402 = Out_MotionData15_g170401;
				float4 In_BoundsData16_g170402 = Out_BoundsData15_g170401;
				float4 In_RotationData16_g170402 = temp_output_1567_33_g170400;
				{
				Data16_g170402.Dummy = In_Dummy16_g170402;
				Data16_g170402.PositionOS = In_PositionOS16_g170402;
				Data16_g170402.PositionWS = In_PositionWS16_g170402;
				Data16_g170402.PositionWO = In_PositionWO16_g170402;
				Data16_g170402.PositionRawOS = In_PositionRawOS16_g170402;
				Data16_g170402.PositionAddOS = In_PositionAddOS16_g170402;
				Data16_g170402.PivotOS = In_PivotOS16_g170402;
				Data16_g170402.PivotWS = In_PivotWS16_g170402;
				Data16_g170402.PivotWO = In_PivotWO16_g170402;
				Data16_g170402.NormalOS = In_NormalOS16_g170402;
				Data16_g170402.NormalWS = In_NormalWS16_g170402;
				Data16_g170402.NormalRawOS = In_NormalRawOS16_g170402;
				Data16_g170402.NormalRawWS = In_NormalRawWS16_g170402;
				Data16_g170402.TangentOS = In_TangentOS16_g170402;
				Data16_g170402.ViewDirWS = In_ViewDirWS16_g170402;
				Data16_g170402.VertexData = In_VertexData16_g170402;
				Data16_g170402.MotionData = In_MotionData16_g170402;
				Data16_g170402.BoundsData = In_BoundsData16_g170402;
				Data16_g170402.RotationData = In_RotationData16_g170402;
				}
				TVEModelData Data15_g170423 = Data16_g170402;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				}
				float3 In_PositionOS16_g170424 = Out_PositionOS15_g170423;
				float3 In_PositionWS16_g170424 = Out_PositionWS15_g170423;
				float3 temp_output_1567_17_g170422 = Out_PositionWO15_g170423;
				float3 In_PositionWO16_g170424 = temp_output_1567_17_g170422;
				float3 temp_output_1567_26_g170422 = Out_PositionRawOS15_g170423;
				float3 In_PositionRawOS16_g170424 = temp_output_1567_26_g170422;
				float3 In_PositionAddOS16_g170424 = Out_PositionAddOS15_g170423;
				float3 In_PivotOS16_g170424 = Out_PivotOS15_g170423;
				float3 In_PivotWS16_g170424 = Out_PivotWS15_g170423;
				float3 In_PivotWO16_g170424 = Out_PivotWO15_g170423;
				half3 Model_NormalOS1568_g170422 = Out_NormalOS15_g170423;
				float3 lerpResult1589_g170422 = lerp( Model_NormalOS1568_g170422 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170422 = temp_output_1567_26_g170422;
				float3 normalizeResult1594_g170422 = ASESafeNormalize( ( Model_PositionRAW1592_g170422 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170422 = lerp( lerpResult1589_g170422 , normalizeResult1594_g170422 , _NormalSphereValue);
				half3 Input_False58_g170437 = lerpResult1585_g170422;
				half3 VertexPos40_g170426 = lerpResult1585_g170422;
				half3 VertexPos40_g170427 = VertexPos40_g170426;
				float3 appendResult74_g170427 = (float3(VertexPos40_g170427.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170427 = appendResult74_g170427;
				float3 break84_g170427 = VertexPos40_g170427;
				float3 appendResult81_g170427 = (float3(0.0 , break84_g170427.y , break84_g170427.z));
				half3 VertexPosOtherAxis82_g170427 = appendResult81_g170427;
				float4 temp_output_1567_33_g170422 = Out_RotationData15_g170423;
				half4 Model_RotationData1583_g170422 = temp_output_1567_33_g170422;
				half2 Angle44_g170426 = Model_RotationData1583_g170422.xy;
				half Angle44_g170427 = (Angle44_g170426).y;
				half3 VertexPos40_g170428 = ( VertexPosRotationAxis50_g170427 + ( VertexPosOtherAxis82_g170427 * cos( Angle44_g170427 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170427 ) * sin( Angle44_g170427 ) ) );
				float3 appendResult74_g170428 = (float3(0.0 , 0.0 , VertexPos40_g170428.z));
				half3 VertexPosRotationAxis50_g170428 = appendResult74_g170428;
				float3 break84_g170428 = VertexPos40_g170428;
				float3 appendResult81_g170428 = (float3(break84_g170428.x , break84_g170428.y , 0.0));
				half3 VertexPosOtherAxis82_g170428 = appendResult81_g170428;
				half Angle44_g170428 = -(Angle44_g170426).x;
				float3 lerpResult1591_g170422 = lerp( lerpResult1585_g170422 , ( VertexPosRotationAxis50_g170428 + ( VertexPosOtherAxis82_g170428 * cos( Angle44_g170428 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170428 ) * sin( Angle44_g170428 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170437 = lerpResult1591_g170422;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch65_g170437 = Input_False58_g170437;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch67_g170437 = staticSwitch65_g170437;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch69_g170437 = staticSwitch67_g170437;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170422 = staticSwitch69_g170437;
				#else
				float3 staticSwitch1595_g170422 = lerpResult1585_g170422;
				#endif
				float4 temp_output_1567_29_g170422 = Out_VertexData15_g170423;
				half4 Model_VertexData1608_g170422 = temp_output_1567_29_g170422;
				float4 break1683_g170422 = Model_VertexData1608_g170422;
				float4 break33_g170430 = _normal_vert_mode;
				float temp_output_30_0_g170430 = ( break1683_g170422.x * break33_g170430.x );
				float temp_output_29_0_g170430 = ( break1683_g170422.y * break33_g170430.y );
				float temp_output_31_0_g170430 = ( break1683_g170422.z * break33_g170430.z );
				float temp_output_28_0_g170430 = ( temp_output_30_0_g170430 + temp_output_29_0_g170430 + temp_output_31_0_g170430 + ( break1683_g170422.w * break33_g170430.w ) );
				float clampResult17_g170432 = clamp( temp_output_28_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170431 = _NormalMeshRemap.x;
				float temp_output_10_0_g170431 = ( _NormalMeshRemap.y - temp_output_7_0_g170431 );
				float lerpResult1695_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170432 - temp_output_7_0_g170431 ) / ( temp_output_10_0_g170431 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170433 = lerpResult1695_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				float temp_output_1690_0_g170422 = staticSwitch14_g170433;
				half Normal_MeskMask1691_g170422 = temp_output_1690_0_g170422;
				half Normal_Proj_Mask1647_g170422 = 1.0;
				float temp_output_1699_0_g170422 = ( Normal_MeskMask1691_g170422 * Normal_Proj_Mask1647_g170422 );
				float3 lerpResult1670_g170422 = lerp( Model_NormalOS1568_g170422 , staticSwitch1595_g170422 , temp_output_1699_0_g170422);
				half3 Final_NormalOS178_g170422 = lerpResult1670_g170422;
				float3 In_NormalOS16_g170424 = Final_NormalOS178_g170422;
				float3 temp_output_1567_21_g170422 = Out_NormalWS15_g170423;
				float3 In_NormalWS16_g170424 = temp_output_1567_21_g170422;
				float3 In_NormalRawOS16_g170424 = Out_NormalRawOS15_g170423;
				float3 In_NormalRawWS16_g170424 = Out_NormalRawWS15_g170423;
				float4 In_TangentOS16_g170424 = Out_TangentOS15_g170423;
				float3 In_ViewDirWS16_g170424 = Out_ViewDirWS15_g170423;
				float4 In_VertexData16_g170424 = temp_output_1567_29_g170422;
				float4 In_MotionData16_g170424 = Out_MotionData15_g170423;
				float4 In_BoundsData16_g170424 = Out_BoundsData15_g170423;
				float4 In_RotationData16_g170424 = temp_output_1567_33_g170422;
				{
				Data16_g170424.Dummy = In_Dummy16_g170424;
				Data16_g170424.PositionOS = In_PositionOS16_g170424;
				Data16_g170424.PositionWS = In_PositionWS16_g170424;
				Data16_g170424.PositionWO = In_PositionWO16_g170424;
				Data16_g170424.PositionRawOS = In_PositionRawOS16_g170424;
				Data16_g170424.PositionAddOS = In_PositionAddOS16_g170424;
				Data16_g170424.PivotOS = In_PivotOS16_g170424;
				Data16_g170424.PivotWS = In_PivotWS16_g170424;
				Data16_g170424.PivotWO = In_PivotWO16_g170424;
				Data16_g170424.NormalOS = In_NormalOS16_g170424;
				Data16_g170424.NormalWS = In_NormalWS16_g170424;
				Data16_g170424.NormalRawOS = In_NormalRawOS16_g170424;
				Data16_g170424.NormalRawWS = In_NormalRawWS16_g170424;
				Data16_g170424.TangentOS = In_TangentOS16_g170424;
				Data16_g170424.ViewDirWS = In_ViewDirWS16_g170424;
				Data16_g170424.VertexData = In_VertexData16_g170424;
				Data16_g170424.MotionData = In_MotionData16_g170424;
				Data16_g170424.BoundsData = In_BoundsData16_g170424;
				Data16_g170424.RotationData = In_RotationData16_g170424;
				}
				TVEModelData Data15_g170446 = Data16_g170424;
				float Out_Dummy15_g170446 = 0;
				float3 Out_PositionOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170446 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170446 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170446 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170446 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170446 = float3( 0,0,0 );
				float4 Out_VertexData15_g170446 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170446 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170446 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170446 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170446 = Data15_g170446.Dummy;
				Out_PositionOS15_g170446 = Data15_g170446.PositionOS;
				Out_PositionWS15_g170446 = Data15_g170446.PositionWS;
				Out_PositionWO15_g170446 = Data15_g170446.PositionWO;
				Out_PositionRawOS15_g170446 = Data15_g170446.PositionRawOS;
				Out_PositionAddOS15_g170446 = Data15_g170446.PositionAddOS;
				Out_PivotOS15_g170446 = Data15_g170446.PivotOS;
				Out_PivotWS15_g170446 = Data15_g170446.PivotWS;
				Out_PivotWO15_g170446 = Data15_g170446.PivotWO;
				Out_NormalOS15_g170446 = Data15_g170446.NormalOS;
				Out_NormalWS15_g170446 = Data15_g170446.NormalWS;
				Out_NormalRawOS15_g170446 = Data15_g170446.NormalRawOS;
				Out_NormalRawWS15_g170446 = Data15_g170446.NormalRawWS;
				Out_TangentOS15_g170446 = Data15_g170446.TangentOS;
				Out_ViewDirWS15_g170446 = Data15_g170446.ViewDirWS;
				Out_VertexData15_g170446 = Data15_g170446.VertexData;
				Out_MotionData15_g170446 = Data15_g170446.MotionData;
				Out_BoundsData15_g170446 = Data15_g170446.BoundsData;
				Out_RotationData15_g170446 = Data15_g170446.RotationData;
				}
				float3 temp_output_217_24_g170445 = Out_PivotOS15_g170446;
				float3 In_PositionOS16_g170447 = ( Out_PositionOS15_g170446 + temp_output_217_24_g170445 );
				float3 In_PositionWS16_g170447 = Out_PositionWS15_g170446;
				float3 In_PositionWO16_g170447 = Out_PositionWO15_g170446;
				float3 In_PositionRawOS16_g170447 = Out_PositionRawOS15_g170446;
				float3 In_PositionAddOS16_g170447 = Out_PositionAddOS15_g170446;
				float3 In_PivotOS16_g170447 = temp_output_217_24_g170445;
				float3 In_PivotWS16_g170447 = Out_PivotWS15_g170446;
				float3 In_PivotWO16_g170447 = Out_PivotWO15_g170446;
				float3 In_NormalOS16_g170447 = Out_NormalOS15_g170446;
				float3 In_NormalWS16_g170447 = Out_NormalWS15_g170446;
				float3 In_NormalRawOS16_g170447 = Out_NormalRawOS15_g170446;
				float3 In_NormalRawWS16_g170447 = Out_NormalRawWS15_g170446;
				float4 In_TangentOS16_g170447 = Out_TangentOS15_g170446;
				float3 In_ViewDirWS16_g170447 = Out_ViewDirWS15_g170446;
				float4 In_VertexData16_g170447 = Out_VertexData15_g170446;
				float4 In_MotionData16_g170447 = Out_MotionData15_g170446;
				float4 In_BoundsData16_g170447 = Out_BoundsData15_g170446;
				float4 In_RotationData16_g170447 = Out_RotationData15_g170446;
				{
				Data16_g170447.Dummy = In_Dummy16_g170447;
				Data16_g170447.PositionOS = In_PositionOS16_g170447;
				Data16_g170447.PositionWS = In_PositionWS16_g170447;
				Data16_g170447.PositionWO = In_PositionWO16_g170447;
				Data16_g170447.PositionRawOS = In_PositionRawOS16_g170447;
				Data16_g170447.PositionAddOS = In_PositionAddOS16_g170447;
				Data16_g170447.PivotOS = In_PivotOS16_g170447;
				Data16_g170447.PivotWS = In_PivotWS16_g170447;
				Data16_g170447.PivotWO = In_PivotWO16_g170447;
				Data16_g170447.NormalOS = In_NormalOS16_g170447;
				Data16_g170447.NormalWS = In_NormalWS16_g170447;
				Data16_g170447.NormalRawOS = In_NormalRawOS16_g170447;
				Data16_g170447.NormalRawWS = In_NormalRawWS16_g170447;
				Data16_g170447.TangentOS = In_TangentOS16_g170447;
				Data16_g170447.ViewDirWS = In_ViewDirWS16_g170447;
				Data16_g170447.VertexData = In_VertexData16_g170447;
				Data16_g170447.MotionData = In_MotionData16_g170447;
				Data16_g170447.BoundsData = In_BoundsData16_g170447;
				Data16_g170447.RotationData = In_RotationData16_g170447;
				}
				TVEModelData Data15_g170452 = Data16_g170447;
				float Out_Dummy15_g170452 = 0;
				float3 Out_PositionOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170452 = float3( 0,0,0 );
				float4 Out_VertexData15_g170452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_PositionOS15_g170452 = Data15_g170452.PositionOS;
				Out_PositionWS15_g170452 = Data15_g170452.PositionWS;
				Out_PositionWO15_g170452 = Data15_g170452.PositionWO;
				Out_PositionRawOS15_g170452 = Data15_g170452.PositionRawOS;
				Out_PositionAddOS15_g170452 = Data15_g170452.PositionAddOS;
				Out_PivotOS15_g170452 = Data15_g170452.PivotOS;
				Out_PivotWS15_g170452 = Data15_g170452.PivotWS;
				Out_PivotWO15_g170452 = Data15_g170452.PivotWO;
				Out_NormalOS15_g170452 = Data15_g170452.NormalOS;
				Out_NormalWS15_g170452 = Data15_g170452.NormalWS;
				Out_NormalRawOS15_g170452 = Data15_g170452.NormalRawOS;
				Out_NormalRawWS15_g170452 = Data15_g170452.NormalRawWS;
				Out_TangentOS15_g170452 = Data15_g170452.TangentOS;
				Out_ViewDirWS15_g170452 = Data15_g170452.ViewDirWS;
				Out_VertexData15_g170452 = Data15_g170452.VertexData;
				Out_MotionData15_g170452 = Data15_g170452.MotionData;
				Out_BoundsData15_g170452 = Data15_g170452.BoundsData;
				Out_RotationData15_g170452 = Data15_g170452.RotationData;
				}
				float3 temp_output_31_0_g170449 = Out_PositionOS15_g170452;
				
				o.ase_texcoord11.xyz = vertexToFrag73_g169248;
				o.ase_texcoord12.xyz = vertexToFrag76_g169248;
				float temp_output_6_0_g170100 = ( _MotionHighlightValue * length( Wind_Direction1486_g170066 ) * Motion_FadeMask1820_g170066 * ( Base_Mask217_g170066 * Base_Mask217_g170066 ) * ( Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170100 = ( temp_output_6_0_g170100 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170100 = temp_output_6_0_g170100;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170100;
				float4 appendResult23_g170165 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170165 = appendResult23_g170165;
				o.ase_texcoord13 = vertexToFrag24_g170165;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170449 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170452;
				v.tangent = Out_TangentOS15_g170452;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g170455 = ( 0.0 );
				float localCompData3_g170440 = ( 0.0 );
				TVEVisualData Data3_g170440 = (TVEVisualData)0;
				half Dummy145_g170438 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170440 = Dummy145_g170438;
				float localBreakData4_g170439 = ( 0.0 );
				float localCompData3_g170419 = ( 0.0 );
				TVEVisualData Data3_g170419 = (TVEVisualData)0;
				half Dummy145_g170407 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170419 = Dummy145_g170407;
				float localBreakData4_g170418 = ( 0.0 );
				float localCompData3_g170393 = ( 0.0 );
				TVEVisualData Data3_g170393 = (TVEVisualData)0;
				half Dummy594_g170389 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170393 = Dummy594_g170389;
				float localBreakData4_g170392 = ( 0.0 );
				float localCompData3_g170378 = ( 0.0 );
				TVEVisualData Data3_g170378 = (TVEVisualData)0;
				half Dummy594_g170376 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170378 = Dummy594_g170376;
				float localBreakData4_g170377 = ( 0.0 );
				float localCompData3_g170360 = ( 0.0 );
				TVEVisualData Data3_g170360 = (TVEVisualData)0;
				half Dummy594_g170358 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170360 = Dummy594_g170358;
				float localBreakData4_g170359 = ( 0.0 );
				float localCompData3_g170325 = ( 0.0 );
				TVEVisualData Data3_g170325 = (TVEVisualData)0;
				half Dummy594_g170322 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170325 = Dummy594_g170322;
				float localBreakData4_g170323 = ( 0.0 );
				float localCompData3_g170321 = ( 0.0 );
				TVEVisualData Data3_g170321 = (TVEVisualData)0;
				float In_Dummy3_g170321 = 0.0;
				float localBreakData4_g170320 = ( 0.0 );
				float localCompData3_g170194 = ( 0.0 );
				TVEVisualData Data3_g170194 = (TVEVisualData)0;
				half Dummy205_g170190 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170194 = Dummy205_g170190;
				float localBreakData4_g170192 = ( 0.0 );
				float localCompData3_g170169 = ( 0.0 );
				TVEVisualData Data3_g170169 = (TVEVisualData)0;
				half Dummy205_g170166 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170169 = Dummy205_g170166;
				float localBreakData4_g170171 = ( 0.0 );
				float localCompData3_g170160 = ( 0.0 );
				TVEVisualData Data3_g170160 = (TVEVisualData)0;
				half Dummy220_g170156 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170160 = Dummy220_g170156;
				float localBreakData4_g170158 = ( 0.0 );
				float localCompData3_g170150 = ( 0.0 );
				TVEVisualData Data3_g170150 = (TVEVisualData)0;
				half Dummy220_g170146 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170150 = Dummy220_g170146;
				float localBreakData4_g170149 = ( 0.0 );
				float localCompData3_g170138 = ( 0.0 );
				TVEVisualData Data3_g170138 = (TVEVisualData)0;
				half Dummy202_g170136 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170138 = Dummy202_g170136;
				float localBreakData4_g170137 = ( 0.0 );
				float localCompData3_g170050 = ( 0.0 );
				TVEVisualData Data3_g170050 = (TVEVisualData)0;
				half4 Dummy944_g170033 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170050 = Dummy944_g170033.x;
				float localBreakData4_g170049 = ( 0.0 );
				float localCompData3_g170004 = ( 0.0 );
				TVEVisualData Data3_g170004 = (TVEVisualData)0;
				half4 Dummy946_g169993 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170004 = Dummy946_g169993.x;
				float localBreakData4_g170007 = ( 0.0 );
				float localCompData3_g169981 = ( 0.0 );
				TVEVisualData Data3_g169981 = (TVEVisualData)0;
				half4 Dummy130_g169971 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g169981 = Dummy130_g169971.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169982) = _MainAlbedoTex;
				SamplerState Sampler276_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g169971 = _main_coord_value;
				float4 temp_output_37_0_g169982 = Local_Coords180_g169971;
				half4 Coords276_g169982 = temp_output_37_0_g169982;
				half2 TexCoord276_g169982 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169982 = SampleMain( Texture276_g169982 , Sampler276_g169982 , Coords276_g169982 , TexCoord276_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169982) = _MainAlbedoTex;
				SamplerState Sampler275_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169982 = temp_output_37_0_g169982;
				half2 TexCoord275_g169982 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169982 = SampleExtra( Texture275_g169982 , Sampler275_g169982 , Coords275_g169982 , TexCoord275_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169982) = _MainAlbedoTex;
				SamplerState Sampler238_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169982 = temp_output_37_0_g169982;
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 vertexToFrag73_g169248 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 vertexToFrag76_g169248 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = IN.ase_color;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169972 = Data16_g169262;
				float Out_Dummy15_g169972 = 0;
				float3 Out_PositionOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169972 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169972 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169972 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169972 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169972 = float3( 0,0,0 );
				float4 Out_VertexData15_g169972 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169972 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169972 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169972 = Data15_g169972.Dummy;
				Out_PositionOS15_g169972 = Data15_g169972.PositionOS;
				Out_PositionWS15_g169972 = Data15_g169972.PositionWS;
				Out_PositionWO15_g169972 = Data15_g169972.PositionWO;
				Out_PositionRawOS15_g169972 = Data15_g169972.PositionRawOS;
				Out_PositionAddOS15_g169972 = Data15_g169972.PositionAddOS;
				Out_PivotOS15_g169972 = Data15_g169972.PivotOS;
				Out_PivotWS15_g169972 = Data15_g169972.PivotWS;
				Out_PivotWO15_g169972 = Data15_g169972.PivotWO;
				Out_NormalOS15_g169972 = Data15_g169972.NormalOS;
				Out_NormalWS15_g169972 = Data15_g169972.NormalWS;
				Out_NormalRawOS15_g169972 = Data15_g169972.NormalRawOS;
				Out_NormalRawWS15_g169972 = Data15_g169972.NormalRawWS;
				Out_TangentOS15_g169972 = Data15_g169972.TangentOS;
				Out_ViewDirWS15_g169972 = Data15_g169972.ViewDirWS;
				Out_VertexData15_g169972 = Data15_g169972.VertexData;
				Out_MotionData15_g169972 = Data15_g169972.MotionData;
				Out_BoundsData15_g169972 = Data15_g169972.BoundsData;
				Out_RotationData15_g169972 = Data15_g169972.RotationData;
				}
				half3 Model_PositionWO222_g169971 = Out_PositionWO15_g169972;
				float3 temp_output_279_0_g169982 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169982 = temp_output_279_0_g169982;
				half4 localSamplePlanar2D238_g169982 = SamplePlanar2D( Texture238_g169982 , Sampler238_g169982 , Coords238_g169982 , WorldPosition238_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169982) = _MainAlbedoTex;
				SamplerState Sampler246_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition246_g169982 = temp_output_279_0_g169982;
				half3 Model_NormalWS226_g169971 = Out_NormalWS15_g169972;
				float3 temp_output_280_0_g169982 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169982 = temp_output_280_0_g169982;
				half4 localSamplePlanar3D246_g169982 = SamplePlanar3D( Texture246_g169982 , Sampler246_g169982 , Coords246_g169982 , WorldPosition246_g169982 , WorldNormal246_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169982) = _MainAlbedoTex;
				SamplerState Sampler234_g169982 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169982 = temp_output_37_0_g169982;
				float3 WorldPosition234_g169982 = temp_output_279_0_g169982;
				float4 localSampleStochastic2D234_g169982 = SampleStochastic2D( Texture234_g169982 , Sampler234_g169982 , Coords234_g169982 , WorldPosition234_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169982) = _MainAlbedoTex;
				SamplerState Sampler263_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition263_g169982 = temp_output_279_0_g169982;
				half3 WorldNormal263_g169982 = temp_output_280_0_g169982;
				half4 localSampleStochastic3D263_g169982 = SampleStochastic3D( Texture263_g169982 , Sampler263_g169982 , Coords263_g169982 , WorldPosition263_g169982 , WorldNormal263_g169982 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g169971 = localSampleExtra275_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g169971 = localSamplePlanar2D238_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g169971 = localSamplePlanar3D246_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g169971 = localSampleStochastic2D234_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g169971 = localSampleStochastic3D263_g169982;
				#else
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#endif
				half4 Local_AlbedoTex185_g169971 = staticSwitch184_g169971;
				float3 lerpResult53_g169971 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g169971).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g169971 = lerpResult53_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169984) = _MainShaderTex;
				SamplerState Sampler276_g169984 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169984 = Local_Coords180_g169971;
				half4 Coords276_g169984 = temp_output_37_0_g169984;
				half2 TexCoord276_g169984 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169984 = SampleMain( Texture276_g169984 , Sampler276_g169984 , Coords276_g169984 , TexCoord276_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169984) = _MainShaderTex;
				SamplerState Sampler275_g169984 = sampler_Linear_Repeat;
				half4 Coords275_g169984 = temp_output_37_0_g169984;
				half2 TexCoord275_g169984 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169984 = SampleExtra( Texture275_g169984 , Sampler275_g169984 , Coords275_g169984 , TexCoord275_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169984) = _MainShaderTex;
				SamplerState Sampler238_g169984 = sampler_Linear_Repeat;
				half4 Coords238_g169984 = temp_output_37_0_g169984;
				float3 temp_output_279_0_g169984 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169984 = temp_output_279_0_g169984;
				half4 localSamplePlanar2D238_g169984 = SamplePlanar2D( Texture238_g169984 , Sampler238_g169984 , Coords238_g169984 , WorldPosition238_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169984) = _MainShaderTex;
				SamplerState Sampler246_g169984 = sampler_Linear_Repeat;
				half4 Coords246_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition246_g169984 = temp_output_279_0_g169984;
				float3 temp_output_280_0_g169984 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169984 = temp_output_280_0_g169984;
				half4 localSamplePlanar3D246_g169984 = SamplePlanar3D( Texture246_g169984 , Sampler246_g169984 , Coords246_g169984 , WorldPosition246_g169984 , WorldNormal246_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169984) = _MainShaderTex;
				SamplerState Sampler234_g169984 = sampler_Linear_Repeat;
				float4 Coords234_g169984 = temp_output_37_0_g169984;
				float3 WorldPosition234_g169984 = temp_output_279_0_g169984;
				float4 localSampleStochastic2D234_g169984 = SampleStochastic2D( Texture234_g169984 , Sampler234_g169984 , Coords234_g169984 , WorldPosition234_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169984) = _MainShaderTex;
				SamplerState Sampler263_g169984 = sampler_Linear_Repeat;
				half4 Coords263_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition263_g169984 = temp_output_279_0_g169984;
				half3 WorldNormal263_g169984 = temp_output_280_0_g169984;
				half4 localSampleStochastic3D263_g169984 = SampleStochastic3D( Texture263_g169984 , Sampler263_g169984 , Coords263_g169984 , WorldPosition263_g169984 , WorldNormal263_g169984 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g169971 = localSampleExtra275_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g169971 = localSamplePlanar2D238_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g169971 = localSamplePlanar3D246_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g169971 = localSampleStochastic2D234_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g169971 = localSampleStochastic3D263_g169984;
				#else
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#endif
				half4 Local_MasksTex199_g169971 = staticSwitch198_g169971;
				float lerpResult23_g169971 = lerp( 1.0 , (Local_MasksTex199_g169971).y , _MainOcclusionValue);
				float4 appendResult73_g169971 = (float4(( (Local_MasksTex199_g169971).x * _MainMetallicValue ) , lerpResult23_g169971 , (Local_MasksTex199_g169971).z , ( (Local_MasksTex199_g169971).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g169971 = appendResult73_g169971;
				float clampResult17_g169977 = clamp( (Local_Masks109_g169971).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g169978 = _MainMultiRemap.x;
				float temp_output_10_0_g169978 = ( _MainMultiRemap.y - temp_output_7_0_g169978 );
				half Local_MultiMask78_g169971 = saturate( ( ( clampResult17_g169977 - temp_output_7_0_g169978 ) / ( temp_output_10_0_g169978 + 0.0001 ) ) );
				float lerpResult58_g169971 = lerp( 1.0 , Local_MultiMask78_g169971 , _MainColorMode);
				float4 lerpResult62_g169971 = lerp( _MainColorTwo , _MainColor , lerpResult58_g169971);
				half3 Local_ColorRGB93_g169971 = (lerpResult62_g169971).rgb;
				half3 Local_Albedo139_g169971 = ( Local_AlbedoRGB107_g169971 * Local_ColorRGB93_g169971 );
				float3 In_Albedo3_g169981 = Local_Albedo139_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169983) = _MainNormalTex;
				SamplerState Sampler276_g169983 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169983 = Local_Coords180_g169971;
				half4 Coords276_g169983 = temp_output_37_0_g169983;
				half2 TexCoord276_g169983 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169983 = SampleMain( Texture276_g169983 , Sampler276_g169983 , Coords276_g169983 , TexCoord276_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169983) = _MainNormalTex;
				SamplerState Sampler275_g169983 = sampler_Linear_Repeat;
				half4 Coords275_g169983 = temp_output_37_0_g169983;
				half2 TexCoord275_g169983 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169983 = SampleExtra( Texture275_g169983 , Sampler275_g169983 , Coords275_g169983 , TexCoord275_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169983) = _MainNormalTex;
				SamplerState Sampler238_g169983 = sampler_Linear_Repeat;
				half4 Coords238_g169983 = temp_output_37_0_g169983;
				float3 temp_output_279_0_g169983 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169983 = temp_output_279_0_g169983;
				half4 localSamplePlanar2D238_g169983 = SamplePlanar2D( Texture238_g169983 , Sampler238_g169983 , Coords238_g169983 , WorldPosition238_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169983) = _MainNormalTex;
				SamplerState Sampler246_g169983 = sampler_Linear_Repeat;
				half4 Coords246_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition246_g169983 = temp_output_279_0_g169983;
				float3 temp_output_280_0_g169983 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169983 = temp_output_280_0_g169983;
				half4 localSamplePlanar3D246_g169983 = SamplePlanar3D( Texture246_g169983 , Sampler246_g169983 , Coords246_g169983 , WorldPosition246_g169983 , WorldNormal246_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169983) = _MainNormalTex;
				SamplerState Sampler234_g169983 = sampler_Linear_Repeat;
				float4 Coords234_g169983 = temp_output_37_0_g169983;
				float3 WorldPosition234_g169983 = temp_output_279_0_g169983;
				float4 localSampleStochastic2D234_g169983 = SampleStochastic2D( Texture234_g169983 , Sampler234_g169983 , Coords234_g169983 , WorldPosition234_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169983) = _MainNormalTex;
				SamplerState Sampler263_g169983 = sampler_Linear_Repeat;
				half4 Coords263_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition263_g169983 = temp_output_279_0_g169983;
				half3 WorldNormal263_g169983 = temp_output_280_0_g169983;
				half4 localSampleStochastic3D263_g169983 = SampleStochastic3D( Texture263_g169983 , Sampler263_g169983 , Coords263_g169983 , WorldPosition263_g169983 , WorldNormal263_g169983 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g169971 = localSampleExtra275_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g169971 = localSamplePlanar2D238_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g169971 = localSamplePlanar3D246_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g169971 = localSampleStochastic2D234_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g169971 = localSampleStochastic3D263_g169983;
				#else
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#endif
				half4 Local_NormaTex191_g169971 = staticSwitch193_g169971;
				half4 Normal_Packed45_g169973 = Local_NormaTex191_g169971;
				float2 appendResult58_g169973 = (float2(( (Normal_Packed45_g169973).x * (Normal_Packed45_g169973).w ) , (Normal_Packed45_g169973).y));
				half2 Normal_Default50_g169973 = appendResult58_g169973;
				half2 Normal_ASTC41_g169973 = (Normal_Packed45_g169973).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169973 = Normal_ASTC41_g169973;
				#else
				float2 staticSwitch38_g169973 = Normal_Default50_g169973;
				#endif
				half2 Normal_NO_DTX544_g169973 = (Normal_Packed45_g169973).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169973 = Normal_NO_DTX544_g169973;
				#else
				float2 staticSwitch37_g169973 = staticSwitch38_g169973;
				#endif
				float2 temp_output_26_0_g169971 = ( (staticSwitch37_g169973*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g169974 = temp_output_26_0_g169971;
				float2 break71_g169974 = Normal_Planar45_g169974;
				float3 appendResult72_g169974 = (float3(break71_g169974.x , 0.0 , break71_g169974.y));
				float2 temp_output_205_0_g169971 = (mul( ase_worldToTangent, appendResult72_g169974 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#else
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#endif
				half2 Local_NormalTS108_g169971 = staticSwitch204_g169971;
				float2 In_NormalTS3_g169981 = Local_NormalTS108_g169971;
				float3 appendResult68_g169975 = (float3(Local_NormalTS108_g169971 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g169975 = appendResult68_g169975;
				float3 worldNormal74_g169975 = normalize( float3(dot(tanToWorld0,tanNormal74_g169975), dot(tanToWorld1,tanNormal74_g169975), dot(tanToWorld2,tanNormal74_g169975)) );
				half3 Local_NormalWS250_g169971 = worldNormal74_g169975;
				float3 In_NormalWS3_g169981 = Local_NormalWS250_g169971;
				float4 In_Shader3_g169981 = Local_Masks109_g169971;
				float4 In_Emissive3_g169981 = half4(1,1,1,1);
				float3 temp_output_3_0_g169976 = Local_Albedo139_g169971;
				float dotResult20_g169976 = dot( temp_output_3_0_g169976 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g169971 = dotResult20_g169976;
				float In_Grayscale3_g169981 = Local_Grayscale110_g169971;
				float clampResult144_g169971 = clamp( saturate( ( Local_Grayscale110_g169971 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g169971 = clampResult144_g169971;
				float In_Luminosity3_g169981 = Local_Luminosity145_g169971;
				float In_MultiMask3_g169981 = Local_MultiMask78_g169971;
				float temp_output_187_0_g169971 = (Local_AlbedoTex185_g169971).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g169971 = ( temp_output_187_0_g169971 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g169971 = temp_output_187_0_g169971;
				#endif
				half Local_AlphaClip111_g169971 = staticSwitch236_g169971;
				float In_AlphaClip3_g169981 = Local_AlphaClip111_g169971;
				half Local_AlphaFade246_g169971 = (lerpResult62_g169971).a;
				float In_AlphaFade3_g169981 = Local_AlphaFade246_g169971;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g169981 = temp_cast_4;
				float In_Transmission3_g169981 = 1.0;
				float In_Thickness3_g169981 = 0.0;
				float In_Diffusion3_g169981 = 0.0;
				{
				Data3_g169981.Dummy = In_Dummy3_g169981;
				Data3_g169981.Albedo = In_Albedo3_g169981;
				Data3_g169981.NormalTS = In_NormalTS3_g169981;
				Data3_g169981.NormalWS = In_NormalWS3_g169981;
				Data3_g169981.Shader = In_Shader3_g169981;
				Data3_g169981.Emissive= In_Emissive3_g169981;
				Data3_g169981.MultiMask = In_MultiMask3_g169981;
				Data3_g169981.Grayscale = In_Grayscale3_g169981;
				Data3_g169981.Luminosity = In_Luminosity3_g169981;
				Data3_g169981.AlphaClip = In_AlphaClip3_g169981;
				Data3_g169981.AlphaFade = In_AlphaFade3_g169981;
				Data3_g169981.Translucency = In_Translucency3_g169981;
				Data3_g169981.Transmission = In_Transmission3_g169981;
				Data3_g169981.Thickness = In_Thickness3_g169981;
				Data3_g169981.Diffusion = In_Diffusion3_g169981;
				}
				TVEVisualData Data4_g170007 = Data3_g169981;
				float Out_Dummy4_g170007 = 0;
				float3 Out_Albedo4_g170007 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170007 = float2( 0,0 );
				float3 Out_NormalWS4_g170007 = float3( 0,0,0 );
				float4 Out_Shader4_g170007 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170007 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170007 = 0;
				float Out_Grayscale4_g170007 = 0;
				float Out_Luminosity4_g170007 = 0;
				float Out_AlphaClip4_g170007 = 0;
				float Out_AlphaFade4_g170007 = 0;
				float3 Out_Translucency4_g170007 = float3( 0,0,0 );
				float Out_Transmission4_g170007 = 0;
				float Out_Thickness4_g170007 = 0;
				float Out_Diffusion4_g170007 = 0;
				{
				Out_Dummy4_g170007 = Data4_g170007.Dummy;
				Out_Albedo4_g170007 = Data4_g170007.Albedo;
				Out_NormalTS4_g170007 = Data4_g170007.NormalTS;
				Out_NormalWS4_g170007 = Data4_g170007.NormalWS;
				Out_Shader4_g170007 = Data4_g170007.Shader;
				Out_Emissive4_g170007= Data4_g170007.Emissive;
				Out_MultiMask4_g170007 = Data4_g170007.MultiMask;
				Out_Grayscale4_g170007 = Data4_g170007.Grayscale;
				Out_Luminosity4_g170007= Data4_g170007.Luminosity;
				Out_AlphaClip4_g170007 = Data4_g170007.AlphaClip;
				Out_AlphaFade4_g170007 = Data4_g170007.AlphaFade;
				Out_Translucency4_g170007 = Data4_g170007.Translucency;
				Out_Transmission4_g170007 = Data4_g170007.Transmission;
				Out_Thickness4_g170007 = Data4_g170007.Thickness;
				Out_Diffusion4_g170007 = Data4_g170007.Diffusion;
				}
				half3 Visual_Albedo527_g169993 = Out_Albedo4_g170007;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169994) = _SecondAlbedoTex;
				SamplerState Sampler276_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g169993 = _second_coord_value;
				float4 temp_output_37_0_g169994 = Local_LayerCoords790_g169993;
				half4 Coords276_g169994 = temp_output_37_0_g169994;
				half2 TexCoord276_g169994 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169994 = SampleMain( Texture276_g169994 , Sampler276_g169994 , Coords276_g169994 , TexCoord276_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169994) = _SecondAlbedoTex;
				SamplerState Sampler275_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169994 = temp_output_37_0_g169994;
				half2 TexCoord275_g169994 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169994 = SampleExtra( Texture275_g169994 , Sampler275_g169994 , Coords275_g169994 , TexCoord275_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169994) = _SecondAlbedoTex;
				SamplerState Sampler238_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169994 = temp_output_37_0_g169994;
				TVEModelData Data15_g170005 = Data16_g169262;
				float Out_Dummy15_g170005 = 0;
				float3 Out_PositionOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170005 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170005 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170005 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170005 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170005 = float3( 0,0,0 );
				float4 Out_VertexData15_g170005 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170005 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170005 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170005 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170005 = Data15_g170005.Dummy;
				Out_PositionOS15_g170005 = Data15_g170005.PositionOS;
				Out_PositionWS15_g170005 = Data15_g170005.PositionWS;
				Out_PositionWO15_g170005 = Data15_g170005.PositionWO;
				Out_PositionRawOS15_g170005 = Data15_g170005.PositionRawOS;
				Out_PositionAddOS15_g170005 = Data15_g170005.PositionAddOS;
				Out_PivotOS15_g170005 = Data15_g170005.PivotOS;
				Out_PivotWS15_g170005 = Data15_g170005.PivotWS;
				Out_PivotWO15_g170005 = Data15_g170005.PivotWO;
				Out_NormalOS15_g170005 = Data15_g170005.NormalOS;
				Out_NormalWS15_g170005 = Data15_g170005.NormalWS;
				Out_NormalRawOS15_g170005 = Data15_g170005.NormalRawOS;
				Out_NormalRawWS15_g170005 = Data15_g170005.NormalRawWS;
				Out_TangentOS15_g170005 = Data15_g170005.TangentOS;
				Out_ViewDirWS15_g170005 = Data15_g170005.ViewDirWS;
				Out_VertexData15_g170005 = Data15_g170005.VertexData;
				Out_MotionData15_g170005 = Data15_g170005.MotionData;
				Out_BoundsData15_g170005 = Data15_g170005.BoundsData;
				Out_RotationData15_g170005 = Data15_g170005.RotationData;
				}
				half3 Model_PositionWO636_g169993 = Out_PositionWO15_g170005;
				float3 temp_output_279_0_g169994 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169994 = temp_output_279_0_g169994;
				half4 localSamplePlanar2D238_g169994 = SamplePlanar2D( Texture238_g169994 , Sampler238_g169994 , Coords238_g169994 , WorldPosition238_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169994) = _SecondAlbedoTex;
				SamplerState Sampler246_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition246_g169994 = temp_output_279_0_g169994;
				half3 Model_NormalWS869_g169993 = Out_NormalWS15_g170005;
				float3 temp_output_280_0_g169994 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169994 = temp_output_280_0_g169994;
				half4 localSamplePlanar3D246_g169994 = SamplePlanar3D( Texture246_g169994 , Sampler246_g169994 , Coords246_g169994 , WorldPosition246_g169994 , WorldNormal246_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169994) = _SecondAlbedoTex;
				SamplerState Sampler234_g169994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169994 = temp_output_37_0_g169994;
				float3 WorldPosition234_g169994 = temp_output_279_0_g169994;
				float4 localSampleStochastic2D234_g169994 = SampleStochastic2D( Texture234_g169994 , Sampler234_g169994 , Coords234_g169994 , WorldPosition234_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169994) = _SecondAlbedoTex;
				SamplerState Sampler263_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition263_g169994 = temp_output_279_0_g169994;
				half3 WorldNormal263_g169994 = temp_output_280_0_g169994;
				half4 localSampleStochastic3D263_g169994 = SampleStochastic3D( Texture263_g169994 , Sampler263_g169994 , Coords263_g169994 , WorldPosition263_g169994 , WorldNormal263_g169994 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g169993 = localSampleExtra275_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g169993 = localSamplePlanar2D238_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g169993 = localSamplePlanar3D246_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g169993 = localSampleStochastic2D234_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g169993 = localSampleStochastic3D263_g169994;
				#else
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#endif
				half4 Local_AlbedoTex777_g169993 = staticSwitch693_g169993;
				float3 lerpResult716_g169993 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g169993).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g169993 = lerpResult716_g169993;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169996) = _SecondShaderTex;
				SamplerState Sampler276_g169996 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169996 = Local_LayerCoords790_g169993;
				half4 Coords276_g169996 = temp_output_37_0_g169996;
				half2 TexCoord276_g169996 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169996 = SampleMain( Texture276_g169996 , Sampler276_g169996 , Coords276_g169996 , TexCoord276_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169996) = _SecondShaderTex;
				SamplerState Sampler275_g169996 = sampler_Linear_Repeat;
				half4 Coords275_g169996 = temp_output_37_0_g169996;
				half2 TexCoord275_g169996 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169996 = SampleExtra( Texture275_g169996 , Sampler275_g169996 , Coords275_g169996 , TexCoord275_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169996) = _SecondShaderTex;
				SamplerState Sampler238_g169996 = sampler_Linear_Repeat;
				half4 Coords238_g169996 = temp_output_37_0_g169996;
				float3 temp_output_279_0_g169996 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169996 = temp_output_279_0_g169996;
				half4 localSamplePlanar2D238_g169996 = SamplePlanar2D( Texture238_g169996 , Sampler238_g169996 , Coords238_g169996 , WorldPosition238_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169996) = _SecondShaderTex;
				SamplerState Sampler246_g169996 = sampler_Linear_Repeat;
				half4 Coords246_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition246_g169996 = temp_output_279_0_g169996;
				float3 temp_output_280_0_g169996 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169996 = temp_output_280_0_g169996;
				half4 localSamplePlanar3D246_g169996 = SamplePlanar3D( Texture246_g169996 , Sampler246_g169996 , Coords246_g169996 , WorldPosition246_g169996 , WorldNormal246_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169996) = _SecondShaderTex;
				SamplerState Sampler234_g169996 = sampler_Linear_Repeat;
				float4 Coords234_g169996 = temp_output_37_0_g169996;
				float3 WorldPosition234_g169996 = temp_output_279_0_g169996;
				float4 localSampleStochastic2D234_g169996 = SampleStochastic2D( Texture234_g169996 , Sampler234_g169996 , Coords234_g169996 , WorldPosition234_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169996) = _SecondShaderTex;
				SamplerState Sampler263_g169996 = sampler_Linear_Repeat;
				half4 Coords263_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition263_g169996 = temp_output_279_0_g169996;
				half3 WorldNormal263_g169996 = temp_output_280_0_g169996;
				half4 localSampleStochastic3D263_g169996 = SampleStochastic3D( Texture263_g169996 , Sampler263_g169996 , Coords263_g169996 , WorldPosition263_g169996 , WorldNormal263_g169996 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g169993 = localSampleExtra275_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g169993 = localSamplePlanar2D238_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g169993 = localSamplePlanar3D246_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g169993 = localSampleStochastic2D234_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g169993 = localSampleStochastic3D263_g169996;
				#else
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#endif
				half4 Local_ShaderTex775_g169993 = staticSwitch722_g169993;
				float lerpResult739_g169993 = lerp( 1.0 , (Local_ShaderTex775_g169993).y , _SecondOcclusionValue);
				float4 appendResult749_g169993 = (float4(( (Local_ShaderTex775_g169993).x * _SecondMetallicValue ) , lerpResult739_g169993 , (Local_ShaderTex775_g169993).z , ( (Local_ShaderTex775_g169993).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g169993 = appendResult749_g169993;
				float clampResult17_g170000 = clamp( (Local_Masks750_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170001 = _SecondMultiRemap.x;
				float temp_output_10_0_g170001 = ( _SecondMultiRemap.y - temp_output_7_0_g170001 );
				float temp_output_765_0_g169993 = saturate( ( ( clampResult17_g170000 - temp_output_7_0_g170001 ) / ( temp_output_10_0_g170001 + 0.0001 ) ) );
				half Local_MultiMask767_g169993 = temp_output_765_0_g169993;
				float lerpResult705_g169993 = lerp( 1.0 , Local_MultiMask767_g169993 , _SecondColorMode);
				float4 lerpResult706_g169993 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g169993);
				half3 Local_ColorRGB774_g169993 = (lerpResult706_g169993).rgb;
				half3 Local_Albedo768_g169993 = ( Local_AlbedoRGB771_g169993 * Local_ColorRGB774_g169993 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170020 = 2.0;
				#else
				float staticSwitch1_g170020 = 4.594794;
				#endif
				float3 lerpResult985_g169993 = lerp( Local_Albedo768_g169993 , ( Visual_Albedo527_g169993 * Local_Albedo768_g169993 * staticSwitch1_g170020 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169997) = _SecondMaskTex;
				SamplerState Sampler276_g169997 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g169993 = _second_mask_coord_value;
				float4 temp_output_37_0_g169997 = Local_BlendCoords813_g169993;
				half4 Coords276_g169997 = temp_output_37_0_g169997;
				half2 TexCoord276_g169997 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169997 = SampleMain( Texture276_g169997 , Sampler276_g169997 , Coords276_g169997 , TexCoord276_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169997) = _SecondMaskTex;
				SamplerState Sampler275_g169997 = sampler_Linear_Repeat;
				half4 Coords275_g169997 = temp_output_37_0_g169997;
				half2 TexCoord275_g169997 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169997 = SampleExtra( Texture275_g169997 , Sampler275_g169997 , Coords275_g169997 , TexCoord275_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169997) = _SecondMaskTex;
				SamplerState Sampler238_g169997 = sampler_Linear_Repeat;
				half4 Coords238_g169997 = temp_output_37_0_g169997;
				float3 temp_output_279_0_g169997 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169997 = temp_output_279_0_g169997;
				half4 localSamplePlanar2D238_g169997 = SamplePlanar2D( Texture238_g169997 , Sampler238_g169997 , Coords238_g169997 , WorldPosition238_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169997) = _SecondMaskTex;
				SamplerState Sampler246_g169997 = sampler_Linear_Repeat;
				half4 Coords246_g169997 = temp_output_37_0_g169997;
				half3 WorldPosition246_g169997 = temp_output_279_0_g169997;
				float3 temp_output_280_0_g169997 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169997 = temp_output_280_0_g169997;
				half4 localSamplePlanar3D246_g169997 = SamplePlanar3D( Texture246_g169997 , Sampler246_g169997 , Coords246_g169997 , WorldPosition246_g169997 , WorldNormal246_g169997 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g169993 = localSampleExtra275_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g169993 = localSamplePlanar2D238_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g169993 = localSamplePlanar3D246_g169997;
				#else
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#endif
				half4 Local_MaskTex861_g169993 = staticSwitch817_g169993;
				float clampResult17_g170011 = clamp( (Local_MaskTex861_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170010 = _SecondMaskRemap.x;
				float temp_output_10_0_g170010 = ( _SecondMaskRemap.y - temp_output_7_0_g170010 );
				float lerpResult1015_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170011 - temp_output_7_0_g170010 ) / ( temp_output_10_0_g170010 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g169993 = lerpResult1015_g169993;
				half3 Visual_NormalWS951_g169993 = Out_NormalWS4_g170007;
				float clampResult17_g170012 = clamp( saturate( (Visual_NormalWS951_g169993).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170013 = _SecondProjRemap.x;
				float temp_output_10_0_g170013 = ( _SecondProjRemap.y - temp_output_7_0_g170013 );
				float lerpResult996_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170012 - temp_output_7_0_g170013 ) / ( temp_output_10_0_g170013 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g169993 = lerpResult996_g169993;
				half4 Model_VertexMasks964_g169993 = Out_VertexData15_g170005;
				float4 break965_g169993 = Model_VertexMasks964_g169993;
				float4 break33_g170014 = _second_vert_mode;
				float temp_output_30_0_g170014 = ( break965_g169993.x * break33_g170014.x );
				float temp_output_29_0_g170014 = ( break965_g169993.y * break33_g170014.y );
				float temp_output_31_0_g170014 = ( break965_g169993.z * break33_g170014.z );
				float temp_output_28_0_g170014 = ( temp_output_30_0_g170014 + temp_output_29_0_g170014 + temp_output_31_0_g170014 + ( break965_g169993.w * break33_g170014.w ) );
				float clampResult17_g170008 = clamp( temp_output_28_0_g170014 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170009 = _SecondMeshRemap.x;
				float temp_output_10_0_g170009 = ( _SecondMeshRemap.y - temp_output_7_0_g170009 );
				float lerpResult1017_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170008 - temp_output_7_0_g170009 ) / ( temp_output_10_0_g170009 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170022 = lerpResult1017_g169993;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170022 = ( temp_output_6_0_g170022 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170022 = temp_output_6_0_g170022;
				#endif
				float temp_output_987_0_g169993 = staticSwitch14_g170022;
				half Blend_VertMask918_g169993 = temp_output_987_0_g169993;
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170006 = Data204_g169264;
				float Out_Dummy15_g170006 = 0;
				float4 Out_CoatParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170006 = Data15_g170006.Dummy;
				Out_CoatParams15_g170006 = Data15_g170006.CoatParams;
				Out_PaintParams15_g170006 = Data15_g170006.PaintParams;
				Out_GlowParams15_g170006 = Data15_g170006.GlowParams;
				Out_AtmoParams15_g170006= Data15_g170006.AtmoParams;
				Out_FadeParams15_g170006= Data15_g170006.FadeParams;
				Out_FormParams15_g170006 = Data15_g170006.FormParams;
				Out_LandParams15_g170006 = Data15_g170006.LandParams;
				Out_WindParams15_g170006 = Data15_g170006.WindParams;
				Out_PushParams15_g170006 = Data15_g170006.PushParams;
				}
				half4 Global_CoatParams975_g169993 = Out_CoatParams15_g170006;
				float lerpResult1013_g169993 = lerp( 1.0 , (Global_CoatParams975_g169993).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g169993 = lerpResult1013_g169993;
				#else
				float staticSwitch971_g169993 = 1.0;
				#endif
				half Blend_GlobalMask972_g169993 = staticSwitch971_g169993;
				float temp_output_432_0_g169993 = ( _SecondIntensityValue * Blend_TexMask429_g169993 * Blend_ProjMask434_g169993 * Blend_VertMask918_g169993 * Blend_GlobalMask972_g169993 );
				float clampResult17_g170016 = clamp( temp_output_432_0_g169993 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170015 = _SecondBlendRemap.x;
				float temp_output_10_0_g170015 = ( _SecondBlendRemap.y - temp_output_7_0_g170015 );
				half Blend_Mask412_g169993 = ( saturate( ( ( clampResult17_g170016 - temp_output_7_0_g170015 ) / ( temp_output_10_0_g170015 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g169993 = lerp( Visual_Albedo527_g169993 , lerpResult985_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g169993 = lerpResult403_g169993;
				#else
				float3 staticSwitch415_g169993 = Visual_Albedo527_g169993;
				#endif
				half3 Final_Albedo601_g169993 = staticSwitch415_g169993;
				float3 In_Albedo3_g170004 = Final_Albedo601_g169993;
				half2 Visual_NormalTS529_g169993 = Out_NormalTS4_g170007;
				float2 lerpResult40_g170018 = lerp( float2( 0,0 ) , Visual_NormalTS529_g169993 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169995) = _SecondNormalTex;
				SamplerState Sampler276_g169995 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169995 = Local_LayerCoords790_g169993;
				half4 Coords276_g169995 = temp_output_37_0_g169995;
				half2 TexCoord276_g169995 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169995 = SampleMain( Texture276_g169995 , Sampler276_g169995 , Coords276_g169995 , TexCoord276_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169995) = _SecondNormalTex;
				SamplerState Sampler275_g169995 = sampler_Linear_Repeat;
				half4 Coords275_g169995 = temp_output_37_0_g169995;
				half2 TexCoord275_g169995 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169995 = SampleExtra( Texture275_g169995 , Sampler275_g169995 , Coords275_g169995 , TexCoord275_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169995) = _SecondNormalTex;
				SamplerState Sampler238_g169995 = sampler_Linear_Repeat;
				half4 Coords238_g169995 = temp_output_37_0_g169995;
				float3 temp_output_279_0_g169995 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169995 = temp_output_279_0_g169995;
				half4 localSamplePlanar2D238_g169995 = SamplePlanar2D( Texture238_g169995 , Sampler238_g169995 , Coords238_g169995 , WorldPosition238_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169995) = _SecondNormalTex;
				SamplerState Sampler246_g169995 = sampler_Linear_Repeat;
				half4 Coords246_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition246_g169995 = temp_output_279_0_g169995;
				float3 temp_output_280_0_g169995 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169995 = temp_output_280_0_g169995;
				half4 localSamplePlanar3D246_g169995 = SamplePlanar3D( Texture246_g169995 , Sampler246_g169995 , Coords246_g169995 , WorldPosition246_g169995 , WorldNormal246_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169995) = _SecondNormalTex;
				SamplerState Sampler234_g169995 = sampler_Linear_Repeat;
				float4 Coords234_g169995 = temp_output_37_0_g169995;
				float3 WorldPosition234_g169995 = temp_output_279_0_g169995;
				float4 localSampleStochastic2D234_g169995 = SampleStochastic2D( Texture234_g169995 , Sampler234_g169995 , Coords234_g169995 , WorldPosition234_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169995) = _SecondNormalTex;
				SamplerState Sampler263_g169995 = sampler_Linear_Repeat;
				half4 Coords263_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition263_g169995 = temp_output_279_0_g169995;
				half3 WorldNormal263_g169995 = temp_output_280_0_g169995;
				half4 localSampleStochastic3D263_g169995 = SampleStochastic3D( Texture263_g169995 , Sampler263_g169995 , Coords263_g169995 , WorldPosition263_g169995 , WorldNormal263_g169995 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g169993 = localSampleExtra275_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g169993 = localSamplePlanar2D238_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g169993 = localSamplePlanar3D246_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g169993 = localSampleStochastic2D234_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g169993 = localSampleStochastic3D263_g169995;
				#else
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#endif
				half4 Local_NormalTex776_g169993 = staticSwitch698_g169993;
				half4 Normal_Packed45_g169998 = Local_NormalTex776_g169993;
				float2 appendResult58_g169998 = (float2(( (Normal_Packed45_g169998).x * (Normal_Packed45_g169998).w ) , (Normal_Packed45_g169998).y));
				half2 Normal_Default50_g169998 = appendResult58_g169998;
				half2 Normal_ASTC41_g169998 = (Normal_Packed45_g169998).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169998 = Normal_ASTC41_g169998;
				#else
				float2 staticSwitch38_g169998 = Normal_Default50_g169998;
				#endif
				half2 Normal_NO_DTX544_g169998 = (Normal_Packed45_g169998).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169998 = Normal_NO_DTX544_g169998;
				#else
				float2 staticSwitch37_g169998 = staticSwitch38_g169998;
				#endif
				float2 temp_output_724_0_g169993 = ( (staticSwitch37_g169998*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g169999 = temp_output_724_0_g169993;
				float2 break71_g169999 = Normal_Planar45_g169999;
				float3 appendResult72_g169999 = (float3(break71_g169999.x , 0.0 , break71_g169999.y));
				float2 temp_output_858_0_g169993 = (mul( ase_worldToTangent, appendResult72_g169999 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#else
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#endif
				half2 Local_NormalTS729_g169993 = staticSwitch727_g169993;
				float2 temp_output_36_0_g170018 = ( lerpResult40_g170018 + Local_NormalTS729_g169993 );
				float2 lerpResult405_g169993 = lerp( Visual_NormalTS529_g169993 , temp_output_36_0_g170018 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g169993 = lerpResult405_g169993;
				#else
				float2 staticSwitch418_g169993 = Visual_NormalTS529_g169993;
				#endif
				half2 Final_NormalTS612_g169993 = staticSwitch418_g169993;
				float2 In_NormalTS3_g170004 = Final_NormalTS612_g169993;
				float3 appendResult68_g170019 = (float3(Final_NormalTS612_g169993 , 1.0));
				float3 tanNormal74_g170019 = appendResult68_g170019;
				float3 worldNormal74_g170019 = normalize( float3(dot(tanToWorld0,tanNormal74_g170019), dot(tanToWorld1,tanNormal74_g170019), dot(tanToWorld2,tanNormal74_g170019)) );
				half3 Final_NormalWS950_g169993 = worldNormal74_g170019;
				float3 In_NormalWS3_g170004 = Final_NormalWS950_g169993;
				half4 Visual_Shader531_g169993 = Out_Shader4_g170007;
				float4 lerpResult994_g169993 = lerp( Local_Masks750_g169993 , ( Visual_Shader531_g169993 * Local_Masks750_g169993 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g169993 = lerp( Visual_Shader531_g169993 , lerpResult994_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g169993 = lerpResult440_g169993;
				#else
				float4 staticSwitch451_g169993 = Visual_Shader531_g169993;
				#endif
				half4 Final_Masks613_g169993 = staticSwitch451_g169993;
				float4 In_Shader3_g170004 = Final_Masks613_g169993;
				float4 In_Emissive3_g170004 = Out_Emissive4_g170007;
				float3 temp_output_3_0_g170021 = Final_Albedo601_g169993;
				float dotResult20_g170021 = dot( temp_output_3_0_g170021 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g169993 = dotResult20_g170021;
				float In_Grayscale3_g170004 = Final_Grayscale615_g169993;
				float clampResult651_g169993 = clamp( saturate( ( Final_Grayscale615_g169993 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g169993 = clampResult651_g169993;
				float In_Luminosity3_g170004 = Final_Luminosity652_g169993;
				half Visual_MultiMask547_g169993 = Out_MultiMask4_g170007;
				float lerpResult477_g169993 = lerp( Visual_MultiMask547_g169993 , Local_MultiMask767_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch482_g169993 = lerpResult477_g169993;
				#else
				float staticSwitch482_g169993 = Visual_MultiMask547_g169993;
				#endif
				half Final_MultiMask572_g169993 = staticSwitch482_g169993;
				float In_MultiMask3_g170004 = Final_MultiMask572_g169993;
				half Visual_AlphaClip559_g169993 = Out_AlphaClip4_g170007;
				float temp_output_718_0_g169993 = (Local_AlbedoTex777_g169993).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g169993 = ( temp_output_718_0_g169993 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g169993 = temp_output_718_0_g169993;
				#endif
				half Local_AlphaClip772_g169993 = staticSwitch932_g169993;
				float lerpResult448_g169993 = lerp( Visual_AlphaClip559_g169993 , Local_AlphaClip772_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch564_g169993 = lerpResult448_g169993;
				#else
				float staticSwitch564_g169993 = Visual_AlphaClip559_g169993;
				#endif
				half Final_AlphaClip602_g169993 = staticSwitch564_g169993;
				float In_AlphaClip3_g170004 = Final_AlphaClip602_g169993;
				half Visual_AlphaFade588_g169993 = Out_AlphaFade4_g170007;
				half Local_AlphaFade773_g169993 = (lerpResult706_g169993).a;
				float lerpResult604_g169993 = lerp( Visual_AlphaFade588_g169993 , Local_AlphaFade773_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch608_g169993 = lerpResult604_g169993;
				#else
				float staticSwitch608_g169993 = Visual_AlphaFade588_g169993;
				#endif
				half Final_AlphaFade611_g169993 = staticSwitch608_g169993;
				float In_AlphaFade3_g170004 = Final_AlphaFade611_g169993;
				float3 In_Translucency3_g170004 = Out_Translucency4_g170007;
				float In_Transmission3_g170004 = Out_Transmission4_g170007;
				float In_Thickness3_g170004 = Out_Thickness4_g170007;
				float In_Diffusion3_g170004 = Out_Diffusion4_g170007;
				{
				Data3_g170004.Dummy = In_Dummy3_g170004;
				Data3_g170004.Albedo = In_Albedo3_g170004;
				Data3_g170004.NormalTS = In_NormalTS3_g170004;
				Data3_g170004.NormalWS = In_NormalWS3_g170004;
				Data3_g170004.Shader = In_Shader3_g170004;
				Data3_g170004.Emissive= In_Emissive3_g170004;
				Data3_g170004.MultiMask = In_MultiMask3_g170004;
				Data3_g170004.Grayscale = In_Grayscale3_g170004;
				Data3_g170004.Luminosity = In_Luminosity3_g170004;
				Data3_g170004.AlphaClip = In_AlphaClip3_g170004;
				Data3_g170004.AlphaFade = In_AlphaFade3_g170004;
				Data3_g170004.Translucency = In_Translucency3_g170004;
				Data3_g170004.Transmission = In_Transmission3_g170004;
				Data3_g170004.Thickness = In_Thickness3_g170004;
				Data3_g170004.Diffusion = In_Diffusion3_g170004;
				}
				TVEVisualData Data4_g170049 = Data3_g170004;
				float Out_Dummy4_g170049 = 0;
				float3 Out_Albedo4_g170049 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170049 = float2( 0,0 );
				float3 Out_NormalWS4_g170049 = float3( 0,0,0 );
				float4 Out_Shader4_g170049 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170049 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170049 = 0;
				float Out_Grayscale4_g170049 = 0;
				float Out_Luminosity4_g170049 = 0;
				float Out_AlphaClip4_g170049 = 0;
				float Out_AlphaFade4_g170049 = 0;
				float3 Out_Translucency4_g170049 = float3( 0,0,0 );
				float Out_Transmission4_g170049 = 0;
				float Out_Thickness4_g170049 = 0;
				float Out_Diffusion4_g170049 = 0;
				{
				Out_Dummy4_g170049 = Data4_g170049.Dummy;
				Out_Albedo4_g170049 = Data4_g170049.Albedo;
				Out_NormalTS4_g170049 = Data4_g170049.NormalTS;
				Out_NormalWS4_g170049 = Data4_g170049.NormalWS;
				Out_Shader4_g170049 = Data4_g170049.Shader;
				Out_Emissive4_g170049= Data4_g170049.Emissive;
				Out_MultiMask4_g170049 = Data4_g170049.MultiMask;
				Out_Grayscale4_g170049 = Data4_g170049.Grayscale;
				Out_Luminosity4_g170049= Data4_g170049.Luminosity;
				Out_AlphaClip4_g170049 = Data4_g170049.AlphaClip;
				Out_AlphaFade4_g170049 = Data4_g170049.AlphaFade;
				Out_Translucency4_g170049 = Data4_g170049.Translucency;
				Out_Transmission4_g170049 = Data4_g170049.Transmission;
				Out_Thickness4_g170049 = Data4_g170049.Thickness;
				Out_Diffusion4_g170049 = Data4_g170049.Diffusion;
				}
				half3 Visual_Albedo527_g170033 = Out_Albedo4_g170049;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170033 = _third_coord_value;
				float4 temp_output_37_0_g170034 = Local_LayerCoords790_g170033;
				half4 Coords276_g170034 = temp_output_37_0_g170034;
				half2 TexCoord276_g170034 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170034 = SampleMain( Texture276_g170034 , Sampler276_g170034 , Coords276_g170034 , TexCoord276_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170034 = temp_output_37_0_g170034;
				half2 TexCoord275_g170034 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170034 = SampleExtra( Texture275_g170034 , Sampler275_g170034 , Coords275_g170034 , TexCoord275_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170034 = temp_output_37_0_g170034;
				TVEModelData Data15_g170061 = Data16_g169262;
				float Out_Dummy15_g170061 = 0;
				float3 Out_PositionOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170061 = float3( 0,0,0 );
				float4 Out_VertexData15_g170061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170061 = Data15_g170061.Dummy;
				Out_PositionOS15_g170061 = Data15_g170061.PositionOS;
				Out_PositionWS15_g170061 = Data15_g170061.PositionWS;
				Out_PositionWO15_g170061 = Data15_g170061.PositionWO;
				Out_PositionRawOS15_g170061 = Data15_g170061.PositionRawOS;
				Out_PositionAddOS15_g170061 = Data15_g170061.PositionAddOS;
				Out_PivotOS15_g170061 = Data15_g170061.PivotOS;
				Out_PivotWS15_g170061 = Data15_g170061.PivotWS;
				Out_PivotWO15_g170061 = Data15_g170061.PivotWO;
				Out_NormalOS15_g170061 = Data15_g170061.NormalOS;
				Out_NormalWS15_g170061 = Data15_g170061.NormalWS;
				Out_NormalRawOS15_g170061 = Data15_g170061.NormalRawOS;
				Out_NormalRawWS15_g170061 = Data15_g170061.NormalRawWS;
				Out_TangentOS15_g170061 = Data15_g170061.TangentOS;
				Out_ViewDirWS15_g170061 = Data15_g170061.ViewDirWS;
				Out_VertexData15_g170061 = Data15_g170061.VertexData;
				Out_MotionData15_g170061 = Data15_g170061.MotionData;
				Out_BoundsData15_g170061 = Data15_g170061.BoundsData;
				Out_RotationData15_g170061 = Data15_g170061.RotationData;
				}
				half3 Model_PositionWO636_g170033 = Out_PositionWO15_g170061;
				float3 temp_output_279_0_g170034 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170034 = temp_output_279_0_g170034;
				half4 localSamplePlanar2D238_g170034 = SamplePlanar2D( Texture238_g170034 , Sampler238_g170034 , Coords238_g170034 , WorldPosition238_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition246_g170034 = temp_output_279_0_g170034;
				half3 Model_NormalWS869_g170033 = Out_NormalWS15_g170061;
				float3 temp_output_280_0_g170034 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170034 = temp_output_280_0_g170034;
				half4 localSamplePlanar3D246_g170034 = SamplePlanar3D( Texture246_g170034 , Sampler246_g170034 , Coords246_g170034 , WorldPosition246_g170034 , WorldNormal246_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170034 = temp_output_37_0_g170034;
				float3 WorldPosition234_g170034 = temp_output_279_0_g170034;
				float4 localSampleStochastic2D234_g170034 = SampleStochastic2D( Texture234_g170034 , Sampler234_g170034 , Coords234_g170034 , WorldPosition234_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition263_g170034 = temp_output_279_0_g170034;
				half3 WorldNormal263_g170034 = temp_output_280_0_g170034;
				half4 localSampleStochastic3D263_g170034 = SampleStochastic3D( Texture263_g170034 , Sampler263_g170034 , Coords263_g170034 , WorldPosition263_g170034 , WorldNormal263_g170034 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170033 = localSampleExtra275_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170033 = localSamplePlanar2D238_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170033 = localSamplePlanar3D246_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170033 = localSampleStochastic2D234_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170033 = localSampleStochastic3D263_g170034;
				#else
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#endif
				half4 Local_AlbedoTex777_g170033 = staticSwitch693_g170033;
				float3 lerpResult716_g170033 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170033).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170033 = lerpResult716_g170033;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170036) = _ThirdShaderTex;
				SamplerState Sampler276_g170036 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170036 = Local_LayerCoords790_g170033;
				half4 Coords276_g170036 = temp_output_37_0_g170036;
				half2 TexCoord276_g170036 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170036 = SampleMain( Texture276_g170036 , Sampler276_g170036 , Coords276_g170036 , TexCoord276_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170036) = _ThirdShaderTex;
				SamplerState Sampler275_g170036 = sampler_Linear_Repeat;
				half4 Coords275_g170036 = temp_output_37_0_g170036;
				half2 TexCoord275_g170036 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170036 = SampleExtra( Texture275_g170036 , Sampler275_g170036 , Coords275_g170036 , TexCoord275_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170036) = _ThirdShaderTex;
				SamplerState Sampler238_g170036 = sampler_Linear_Repeat;
				half4 Coords238_g170036 = temp_output_37_0_g170036;
				float3 temp_output_279_0_g170036 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170036 = temp_output_279_0_g170036;
				half4 localSamplePlanar2D238_g170036 = SamplePlanar2D( Texture238_g170036 , Sampler238_g170036 , Coords238_g170036 , WorldPosition238_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170036) = _ThirdShaderTex;
				SamplerState Sampler246_g170036 = sampler_Linear_Repeat;
				half4 Coords246_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition246_g170036 = temp_output_279_0_g170036;
				float3 temp_output_280_0_g170036 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170036 = temp_output_280_0_g170036;
				half4 localSamplePlanar3D246_g170036 = SamplePlanar3D( Texture246_g170036 , Sampler246_g170036 , Coords246_g170036 , WorldPosition246_g170036 , WorldNormal246_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170036) = _ThirdShaderTex;
				SamplerState Sampler234_g170036 = sampler_Linear_Repeat;
				float4 Coords234_g170036 = temp_output_37_0_g170036;
				float3 WorldPosition234_g170036 = temp_output_279_0_g170036;
				float4 localSampleStochastic2D234_g170036 = SampleStochastic2D( Texture234_g170036 , Sampler234_g170036 , Coords234_g170036 , WorldPosition234_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170036) = _ThirdShaderTex;
				SamplerState Sampler263_g170036 = sampler_Linear_Repeat;
				half4 Coords263_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition263_g170036 = temp_output_279_0_g170036;
				half3 WorldNormal263_g170036 = temp_output_280_0_g170036;
				half4 localSampleStochastic3D263_g170036 = SampleStochastic3D( Texture263_g170036 , Sampler263_g170036 , Coords263_g170036 , WorldPosition263_g170036 , WorldNormal263_g170036 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170033 = localSampleExtra275_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170033 = localSamplePlanar2D238_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170033 = localSamplePlanar3D246_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170033 = localSampleStochastic2D234_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170033 = localSampleStochastic3D263_g170036;
				#else
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#endif
				half4 Local_ShaderTex775_g170033 = staticSwitch722_g170033;
				float lerpResult739_g170033 = lerp( 1.0 , (Local_ShaderTex775_g170033).y , _ThirdOcclusionValue);
				float4 appendResult749_g170033 = (float4(( (Local_ShaderTex775_g170033).x * _ThirdMetallicValue ) , lerpResult739_g170033 , (Local_ShaderTex775_g170033).z , ( (Local_ShaderTex775_g170033).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170033 = appendResult749_g170033;
				float clampResult17_g170039 = clamp( (Local_Masks750_g170033).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170040 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170040 = ( _ThirdMultiRemap.y - temp_output_7_0_g170040 );
				float temp_output_765_0_g170033 = saturate( ( ( clampResult17_g170039 - temp_output_7_0_g170040 ) / ( temp_output_10_0_g170040 + 0.0001 ) ) );
				half Local_MultiMask767_g170033 = temp_output_765_0_g170033;
				float lerpResult705_g170033 = lerp( 1.0 , Local_MultiMask767_g170033 , _ThirdColorMode);
				float4 lerpResult706_g170033 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170033);
				half3 Local_ColorRGB774_g170033 = (lerpResult706_g170033).rgb;
				half3 Local_Albedo768_g170033 = ( Local_AlbedoRGB771_g170033 * Local_ColorRGB774_g170033 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170057 = 2.0;
				#else
				float staticSwitch1_g170057 = 4.594794;
				#endif
				float3 lerpResult985_g170033 = lerp( Local_Albedo768_g170033 , ( Visual_Albedo527_g170033 * Local_Albedo768_g170033 * staticSwitch1_g170057 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170060) = _ThirdMaskTex;
				SamplerState Sampler276_g170060 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170033 = _third_mask_coord_value;
				float4 temp_output_37_0_g170060 = Local_MaskCoords813_g170033;
				half4 Coords276_g170060 = temp_output_37_0_g170060;
				half2 TexCoord276_g170060 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170060 = SampleMain( Texture276_g170060 , Sampler276_g170060 , Coords276_g170060 , TexCoord276_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170060) = _ThirdMaskTex;
				SamplerState Sampler275_g170060 = sampler_Linear_Repeat;
				half4 Coords275_g170060 = temp_output_37_0_g170060;
				half2 TexCoord275_g170060 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170060 = SampleExtra( Texture275_g170060 , Sampler275_g170060 , Coords275_g170060 , TexCoord275_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170060) = _ThirdMaskTex;
				SamplerState Sampler238_g170060 = sampler_Linear_Repeat;
				half4 Coords238_g170060 = temp_output_37_0_g170060;
				float3 temp_output_279_0_g170060 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170060 = temp_output_279_0_g170060;
				half4 localSamplePlanar2D238_g170060 = SamplePlanar2D( Texture238_g170060 , Sampler238_g170060 , Coords238_g170060 , WorldPosition238_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170060) = _ThirdMaskTex;
				SamplerState Sampler246_g170060 = sampler_Linear_Repeat;
				half4 Coords246_g170060 = temp_output_37_0_g170060;
				half3 WorldPosition246_g170060 = temp_output_279_0_g170060;
				float3 temp_output_280_0_g170060 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170060 = temp_output_280_0_g170060;
				half4 localSamplePlanar3D246_g170060 = SamplePlanar3D( Texture246_g170060 , Sampler246_g170060 , Coords246_g170060 , WorldPosition246_g170060 , WorldNormal246_g170060 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170033 = localSampleExtra275_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170033 = localSamplePlanar2D238_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170033 = localSamplePlanar3D246_g170060;
				#else
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#endif
				half4 Local_MaskTex861_g170033 = staticSwitch817_g170033;
				float clampResult17_g170044 = clamp( (Local_MaskTex861_g170033).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170045 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170045 = ( _ThirdMaskRemap.y - temp_output_7_0_g170045 );
				float lerpResult1028_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170044 - temp_output_7_0_g170045 ) / ( temp_output_10_0_g170045 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170033 = lerpResult1028_g170033;
				half4 Model_VertexMasks960_g170033 = Out_VertexData15_g170061;
				float4 break961_g170033 = Model_VertexMasks960_g170033;
				float4 break33_g170048 = _third_vert_mode;
				float temp_output_30_0_g170048 = ( break961_g170033.x * break33_g170048.x );
				float temp_output_29_0_g170048 = ( break961_g170033.y * break33_g170048.y );
				float temp_output_31_0_g170048 = ( break961_g170033.z * break33_g170048.z );
				float temp_output_28_0_g170048 = ( temp_output_30_0_g170048 + temp_output_29_0_g170048 + temp_output_31_0_g170048 + ( break961_g170033.w * break33_g170048.w ) );
				float clampResult17_g170042 = clamp( temp_output_28_0_g170048 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170043 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170043 = ( _ThirdMeshRemap.y - temp_output_7_0_g170043 );
				float lerpResult1026_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170042 - temp_output_7_0_g170043 ) / ( temp_output_10_0_g170043 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170059 = lerpResult1026_g170033;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170059 = ( temp_output_6_0_g170059 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170059 = temp_output_6_0_g170059;
				#endif
				float temp_output_992_0_g170033 = staticSwitch14_g170059;
				half Blend_VertMask913_g170033 = temp_output_992_0_g170033;
				half3 Visual_NormalWS953_g170033 = Out_NormalWS4_g170049;
				float clampResult17_g170046 = clamp( saturate( (Visual_NormalWS953_g170033).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170047 = _ThirdProjRemap.x;
				float temp_output_10_0_g170047 = ( _ThirdProjRemap.y - temp_output_7_0_g170047 );
				float lerpResult1004_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170046 - temp_output_7_0_g170047 ) / ( temp_output_10_0_g170047 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170033 = lerpResult1004_g170033;
				TVEGlobalData Data15_g170051 = Data204_g169264;
				float Out_Dummy15_g170051 = 0;
				float4 Out_CoatParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170051 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170051 = Data15_g170051.Dummy;
				Out_CoatParams15_g170051 = Data15_g170051.CoatParams;
				Out_PaintParams15_g170051 = Data15_g170051.PaintParams;
				Out_GlowParams15_g170051 = Data15_g170051.GlowParams;
				Out_AtmoParams15_g170051= Data15_g170051.AtmoParams;
				Out_FadeParams15_g170051= Data15_g170051.FadeParams;
				Out_FormParams15_g170051 = Data15_g170051.FormParams;
				Out_LandParams15_g170051 = Data15_g170051.LandParams;
				Out_WindParams15_g170051 = Data15_g170051.WindParams;
				Out_PushParams15_g170051 = Data15_g170051.PushParams;
				}
				half4 Global_CoatParams972_g170033 = Out_CoatParams15_g170051;
				float lerpResult1023_g170033 = lerp( 1.0 , (Global_CoatParams972_g170033).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170033 = lerpResult1023_g170033;
				#else
				float staticSwitch965_g170033 = 1.0;
				#endif
				half Blend_GlobalMask968_g170033 = staticSwitch965_g170033;
				float temp_output_432_0_g170033 = ( _ThirdIntensityValue * Detail_TexMask429_g170033 * Blend_VertMask913_g170033 * Blend_ProjMask912_g170033 * Blend_GlobalMask968_g170033 );
				float clampResult17_g170053 = clamp( temp_output_432_0_g170033 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170052 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170052 = ( _ThirdBlendRemap.y - temp_output_7_0_g170052 );
				half Detail_Mask412_g170033 = ( saturate( ( ( clampResult17_g170053 - temp_output_7_0_g170052 ) / ( temp_output_10_0_g170052 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170033 = lerp( Visual_Albedo527_g170033 , lerpResult985_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170033 = lerpResult989_g170033;
				#else
				float3 staticSwitch415_g170033 = Visual_Albedo527_g170033;
				#endif
				half3 Final_Albedo601_g170033 = staticSwitch415_g170033;
				float3 In_Albedo3_g170050 = Final_Albedo601_g170033;
				half2 Visual_NormalTS529_g170033 = Out_NormalTS4_g170049;
				float2 lerpResult40_g170055 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170033 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170035) = _ThirdNormalTex;
				SamplerState Sampler276_g170035 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170035 = Local_LayerCoords790_g170033;
				half4 Coords276_g170035 = temp_output_37_0_g170035;
				half2 TexCoord276_g170035 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170035 = SampleMain( Texture276_g170035 , Sampler276_g170035 , Coords276_g170035 , TexCoord276_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170035) = _ThirdNormalTex;
				SamplerState Sampler275_g170035 = sampler_Linear_Repeat;
				half4 Coords275_g170035 = temp_output_37_0_g170035;
				half2 TexCoord275_g170035 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170035 = SampleExtra( Texture275_g170035 , Sampler275_g170035 , Coords275_g170035 , TexCoord275_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170035) = _ThirdNormalTex;
				SamplerState Sampler238_g170035 = sampler_Linear_Repeat;
				half4 Coords238_g170035 = temp_output_37_0_g170035;
				float3 temp_output_279_0_g170035 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170035 = temp_output_279_0_g170035;
				half4 localSamplePlanar2D238_g170035 = SamplePlanar2D( Texture238_g170035 , Sampler238_g170035 , Coords238_g170035 , WorldPosition238_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170035) = _ThirdNormalTex;
				SamplerState Sampler246_g170035 = sampler_Linear_Repeat;
				half4 Coords246_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition246_g170035 = temp_output_279_0_g170035;
				float3 temp_output_280_0_g170035 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170035 = temp_output_280_0_g170035;
				half4 localSamplePlanar3D246_g170035 = SamplePlanar3D( Texture246_g170035 , Sampler246_g170035 , Coords246_g170035 , WorldPosition246_g170035 , WorldNormal246_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170035) = _ThirdNormalTex;
				SamplerState Sampler234_g170035 = sampler_Linear_Repeat;
				float4 Coords234_g170035 = temp_output_37_0_g170035;
				float3 WorldPosition234_g170035 = temp_output_279_0_g170035;
				float4 localSampleStochastic2D234_g170035 = SampleStochastic2D( Texture234_g170035 , Sampler234_g170035 , Coords234_g170035 , WorldPosition234_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170035) = _ThirdNormalTex;
				SamplerState Sampler263_g170035 = sampler_Linear_Repeat;
				half4 Coords263_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition263_g170035 = temp_output_279_0_g170035;
				half3 WorldNormal263_g170035 = temp_output_280_0_g170035;
				half4 localSampleStochastic3D263_g170035 = SampleStochastic3D( Texture263_g170035 , Sampler263_g170035 , Coords263_g170035 , WorldPosition263_g170035 , WorldNormal263_g170035 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170033 = localSampleExtra275_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170033 = localSamplePlanar2D238_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170033 = localSamplePlanar3D246_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170033 = localSampleStochastic2D234_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170033 = localSampleStochastic3D263_g170035;
				#else
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#endif
				half4 Local_NormalTex776_g170033 = staticSwitch698_g170033;
				half4 Normal_Packed45_g170037 = Local_NormalTex776_g170033;
				float2 appendResult58_g170037 = (float2(( (Normal_Packed45_g170037).x * (Normal_Packed45_g170037).w ) , (Normal_Packed45_g170037).y));
				half2 Normal_Default50_g170037 = appendResult58_g170037;
				half2 Normal_ASTC41_g170037 = (Normal_Packed45_g170037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170037 = Normal_ASTC41_g170037;
				#else
				float2 staticSwitch38_g170037 = Normal_Default50_g170037;
				#endif
				half2 Normal_NO_DTX544_g170037 = (Normal_Packed45_g170037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170037 = Normal_NO_DTX544_g170037;
				#else
				float2 staticSwitch37_g170037 = staticSwitch38_g170037;
				#endif
				float2 temp_output_724_0_g170033 = ( (staticSwitch37_g170037*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170038 = temp_output_724_0_g170033;
				float2 break71_g170038 = Normal_Planar45_g170038;
				float3 appendResult72_g170038 = (float3(break71_g170038.x , 0.0 , break71_g170038.y));
				float2 temp_output_858_0_g170033 = (mul( ase_worldToTangent, appendResult72_g170038 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#else
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#endif
				half2 Local_NormalTS729_g170033 = staticSwitch727_g170033;
				float2 temp_output_36_0_g170055 = ( lerpResult40_g170055 + Local_NormalTS729_g170033 );
				float2 lerpResult405_g170033 = lerp( Visual_NormalTS529_g170033 , temp_output_36_0_g170055 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170033 = lerpResult405_g170033;
				#else
				float2 staticSwitch418_g170033 = Visual_NormalTS529_g170033;
				#endif
				half2 Final_NormalTS612_g170033 = staticSwitch418_g170033;
				float2 In_NormalTS3_g170050 = Final_NormalTS612_g170033;
				float3 appendResult68_g170056 = (float3(Final_NormalTS612_g170033 , 1.0));
				float3 tanNormal74_g170056 = appendResult68_g170056;
				float3 worldNormal74_g170056 = normalize( float3(dot(tanToWorld0,tanNormal74_g170056), dot(tanToWorld1,tanNormal74_g170056), dot(tanToWorld2,tanNormal74_g170056)) );
				half3 Final_NormalWS956_g170033 = worldNormal74_g170056;
				float3 In_NormalWS3_g170050 = Final_NormalWS956_g170033;
				half4 Visual_Shader531_g170033 = Out_Shader4_g170049;
				float4 lerpResult1000_g170033 = lerp( Local_Masks750_g170033 , ( Visual_Shader531_g170033 * Local_Masks750_g170033 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170033 = lerp( Visual_Shader531_g170033 , lerpResult1000_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170033 = lerpResult998_g170033;
				#else
				float4 staticSwitch451_g170033 = Visual_Shader531_g170033;
				#endif
				half4 Final_Masks613_g170033 = staticSwitch451_g170033;
				float4 In_Shader3_g170050 = Final_Masks613_g170033;
				float4 In_Emissive3_g170050 = Out_Emissive4_g170049;
				float3 temp_output_3_0_g170058 = Final_Albedo601_g170033;
				float dotResult20_g170058 = dot( temp_output_3_0_g170058 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170033 = dotResult20_g170058;
				float In_Grayscale3_g170050 = Final_Grayscale615_g170033;
				float clampResult651_g170033 = clamp( saturate( ( Final_Grayscale615_g170033 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170033 = clampResult651_g170033;
				float In_Luminosity3_g170050 = Final_Luminosity652_g170033;
				half Visual_MultiMask547_g170033 = Out_MultiMask4_g170049;
				float lerpResult477_g170033 = lerp( Visual_MultiMask547_g170033 , Local_MultiMask767_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch482_g170033 = lerpResult477_g170033;
				#else
				float staticSwitch482_g170033 = Visual_MultiMask547_g170033;
				#endif
				half Final_MultiMask572_g170033 = staticSwitch482_g170033;
				float In_MultiMask3_g170050 = Final_MultiMask572_g170033;
				half Visual_AlphaClip559_g170033 = Out_AlphaClip4_g170049;
				float temp_output_718_0_g170033 = (Local_AlbedoTex777_g170033).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170033 = ( temp_output_718_0_g170033 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170033 = temp_output_718_0_g170033;
				#endif
				half Local_AlphaClip772_g170033 = staticSwitch924_g170033;
				float lerpResult448_g170033 = lerp( Visual_AlphaClip559_g170033 , Local_AlphaClip772_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch564_g170033 = lerpResult448_g170033;
				#else
				float staticSwitch564_g170033 = Visual_AlphaClip559_g170033;
				#endif
				half Final_AlphaClip602_g170033 = staticSwitch564_g170033;
				float In_AlphaClip3_g170050 = Final_AlphaClip602_g170033;
				half Visual_AlphaFade588_g170033 = Out_AlphaFade4_g170049;
				half Local_AlphaFade773_g170033 = (lerpResult706_g170033).a;
				float lerpResult604_g170033 = lerp( Visual_AlphaFade588_g170033 , Local_AlphaFade773_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch608_g170033 = lerpResult604_g170033;
				#else
				float staticSwitch608_g170033 = Visual_AlphaFade588_g170033;
				#endif
				half Final_AlphaFade611_g170033 = staticSwitch608_g170033;
				float In_AlphaFade3_g170050 = Final_AlphaFade611_g170033;
				float3 In_Translucency3_g170050 = Out_Translucency4_g170049;
				float In_Transmission3_g170050 = Out_Transmission4_g170049;
				float In_Thickness3_g170050 = Out_Thickness4_g170049;
				float In_Diffusion3_g170050 = Out_Diffusion4_g170049;
				{
				Data3_g170050.Dummy = In_Dummy3_g170050;
				Data3_g170050.Albedo = In_Albedo3_g170050;
				Data3_g170050.NormalTS = In_NormalTS3_g170050;
				Data3_g170050.NormalWS = In_NormalWS3_g170050;
				Data3_g170050.Shader = In_Shader3_g170050;
				Data3_g170050.Emissive= In_Emissive3_g170050;
				Data3_g170050.MultiMask = In_MultiMask3_g170050;
				Data3_g170050.Grayscale = In_Grayscale3_g170050;
				Data3_g170050.Luminosity = In_Luminosity3_g170050;
				Data3_g170050.AlphaClip = In_AlphaClip3_g170050;
				Data3_g170050.AlphaFade = In_AlphaFade3_g170050;
				Data3_g170050.Translucency = In_Translucency3_g170050;
				Data3_g170050.Transmission = In_Transmission3_g170050;
				Data3_g170050.Thickness = In_Thickness3_g170050;
				Data3_g170050.Diffusion = In_Diffusion3_g170050;
				}
				TVEVisualData Data4_g170137 = Data3_g170050;
				float Out_Dummy4_g170137 = 0;
				float3 Out_Albedo4_g170137 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170137 = float2( 0,0 );
				float3 Out_NormalWS4_g170137 = float3( 0,0,0 );
				float4 Out_Shader4_g170137 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170137 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170137 = 0;
				float Out_Grayscale4_g170137 = 0;
				float Out_Luminosity4_g170137 = 0;
				float Out_AlphaClip4_g170137 = 0;
				float Out_AlphaFade4_g170137 = 0;
				float3 Out_Translucency4_g170137 = float3( 0,0,0 );
				float Out_Transmission4_g170137 = 0;
				float Out_Thickness4_g170137 = 0;
				float Out_Diffusion4_g170137 = 0;
				{
				Out_Dummy4_g170137 = Data4_g170137.Dummy;
				Out_Albedo4_g170137 = Data4_g170137.Albedo;
				Out_NormalTS4_g170137 = Data4_g170137.NormalTS;
				Out_NormalWS4_g170137 = Data4_g170137.NormalWS;
				Out_Shader4_g170137 = Data4_g170137.Shader;
				Out_Emissive4_g170137= Data4_g170137.Emissive;
				Out_MultiMask4_g170137 = Data4_g170137.MultiMask;
				Out_Grayscale4_g170137 = Data4_g170137.Grayscale;
				Out_Luminosity4_g170137= Data4_g170137.Luminosity;
				Out_AlphaClip4_g170137 = Data4_g170137.AlphaClip;
				Out_AlphaFade4_g170137 = Data4_g170137.AlphaFade;
				Out_Translucency4_g170137 = Data4_g170137.Translucency;
				Out_Transmission4_g170137 = Data4_g170137.Transmission;
				Out_Thickness4_g170137 = Data4_g170137.Thickness;
				Out_Diffusion4_g170137 = Data4_g170137.Diffusion;
				}
				half3 Visual_Albedo127_g170136 = Out_Albedo4_g170137;
				TVEModelData Data15_g170139 = Data16_g169262;
				float Out_Dummy15_g170139 = 0;
				float3 Out_PositionOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170139 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170139 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170139 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170139 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170139 = float3( 0,0,0 );
				float4 Out_VertexData15_g170139 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170139 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170139 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170139 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170139 = Data15_g170139.Dummy;
				Out_PositionOS15_g170139 = Data15_g170139.PositionOS;
				Out_PositionWS15_g170139 = Data15_g170139.PositionWS;
				Out_PositionWO15_g170139 = Data15_g170139.PositionWO;
				Out_PositionRawOS15_g170139 = Data15_g170139.PositionRawOS;
				Out_PositionAddOS15_g170139 = Data15_g170139.PositionAddOS;
				Out_PivotOS15_g170139 = Data15_g170139.PivotOS;
				Out_PivotWS15_g170139 = Data15_g170139.PivotWS;
				Out_PivotWO15_g170139 = Data15_g170139.PivotWO;
				Out_NormalOS15_g170139 = Data15_g170139.NormalOS;
				Out_NormalWS15_g170139 = Data15_g170139.NormalWS;
				Out_NormalRawOS15_g170139 = Data15_g170139.NormalRawOS;
				Out_NormalRawWS15_g170139 = Data15_g170139.NormalRawWS;
				Out_TangentOS15_g170139 = Data15_g170139.TangentOS;
				Out_ViewDirWS15_g170139 = Data15_g170139.ViewDirWS;
				Out_VertexData15_g170139 = Data15_g170139.VertexData;
				Out_MotionData15_g170139 = Data15_g170139.MotionData;
				Out_BoundsData15_g170139 = Data15_g170139.BoundsData;
				Out_RotationData15_g170139 = Data15_g170139.RotationData;
				}
				half4 Model_VertexData206_g170136 = Out_VertexData15_g170139;
				float4 break208_g170136 = Model_VertexData206_g170136;
				float4 break33_g170144 = _occlusion_vert_mode;
				float temp_output_30_0_g170144 = ( break208_g170136.x * break33_g170144.x );
				float temp_output_29_0_g170144 = ( break208_g170136.y * break33_g170144.y );
				float temp_output_31_0_g170144 = ( break208_g170136.z * break33_g170144.z );
				float temp_output_28_0_g170144 = ( temp_output_30_0_g170144 + temp_output_29_0_g170144 + temp_output_31_0_g170144 + ( break208_g170136.w * break33_g170144.w ) );
				float temp_output_194_0_g170136 = temp_output_28_0_g170144;
				float clampResult17_g170142 = clamp( temp_output_194_0_g170136 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170141 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170141 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170141 );
				float temp_output_6_0_g170143 = saturate( ( ( clampResult17_g170142 - temp_output_7_0_g170141 ) / ( temp_output_10_0_g170141 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170143 = ( temp_output_6_0_g170143 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170143 = temp_output_6_0_g170143;
				#endif
				half Occlusion_Mask82_g170136 = staticSwitch14_g170143;
				float3 lerpResult75_g170136 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170136);
				float3 lerpResult186_g170136 = lerp( Visual_Albedo127_g170136 , ( Visual_Albedo127_g170136 * lerpResult75_g170136 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170136 = lerpResult186_g170136;
				#else
				float3 staticSwitch171_g170136 = Visual_Albedo127_g170136;
				#endif
				half3 Final_Albedo160_g170136 = staticSwitch171_g170136;
				float3 In_Albedo3_g170138 = Final_Albedo160_g170136;
				float2 In_NormalTS3_g170138 = Out_NormalTS4_g170137;
				float3 In_NormalWS3_g170138 = Out_NormalWS4_g170137;
				float4 In_Shader3_g170138 = Out_Shader4_g170137;
				float4 In_Emissive3_g170138 = Out_Emissive4_g170137;
				float3 temp_output_3_0_g170140 = Final_Albedo160_g170136;
				float dotResult20_g170140 = dot( temp_output_3_0_g170140 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170136 = dotResult20_g170140;
				float In_Grayscale3_g170138 = Final_Grayscale164_g170136;
				float clampResult180_g170136 = clamp( saturate( ( Final_Grayscale164_g170136 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170136 = clampResult180_g170136;
				float In_Luminosity3_g170138 = Final_Shading181_g170136;
				float In_MultiMask3_g170138 = Out_MultiMask4_g170137;
				float In_AlphaClip3_g170138 = Out_AlphaClip4_g170137;
				float In_AlphaFade3_g170138 = Out_AlphaFade4_g170137;
				float3 In_Translucency3_g170138 = Out_Translucency4_g170137;
				float In_Transmission3_g170138 = Out_Transmission4_g170137;
				float In_Thickness3_g170138 = Out_Thickness4_g170137;
				float In_Diffusion3_g170138 = Out_Diffusion4_g170137;
				{
				Data3_g170138.Dummy = In_Dummy3_g170138;
				Data3_g170138.Albedo = In_Albedo3_g170138;
				Data3_g170138.NormalTS = In_NormalTS3_g170138;
				Data3_g170138.NormalWS = In_NormalWS3_g170138;
				Data3_g170138.Shader = In_Shader3_g170138;
				Data3_g170138.Emissive= In_Emissive3_g170138;
				Data3_g170138.MultiMask = In_MultiMask3_g170138;
				Data3_g170138.Grayscale = In_Grayscale3_g170138;
				Data3_g170138.Luminosity = In_Luminosity3_g170138;
				Data3_g170138.AlphaClip = In_AlphaClip3_g170138;
				Data3_g170138.AlphaFade = In_AlphaFade3_g170138;
				Data3_g170138.Translucency = In_Translucency3_g170138;
				Data3_g170138.Transmission = In_Transmission3_g170138;
				Data3_g170138.Thickness = In_Thickness3_g170138;
				Data3_g170138.Diffusion = In_Diffusion3_g170138;
				}
				TVEVisualData Data4_g170149 = Data3_g170138;
				float Out_Dummy4_g170149 = 0;
				float3 Out_Albedo4_g170149 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170149 = float2( 0,0 );
				float3 Out_NormalWS4_g170149 = float3( 0,0,0 );
				float4 Out_Shader4_g170149 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170149 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170149 = 0;
				float Out_Grayscale4_g170149 = 0;
				float Out_Luminosity4_g170149 = 0;
				float Out_AlphaClip4_g170149 = 0;
				float Out_AlphaFade4_g170149 = 0;
				float3 Out_Translucency4_g170149 = float3( 0,0,0 );
				float Out_Transmission4_g170149 = 0;
				float Out_Thickness4_g170149 = 0;
				float Out_Diffusion4_g170149 = 0;
				{
				Out_Dummy4_g170149 = Data4_g170149.Dummy;
				Out_Albedo4_g170149 = Data4_g170149.Albedo;
				Out_NormalTS4_g170149 = Data4_g170149.NormalTS;
				Out_NormalWS4_g170149 = Data4_g170149.NormalWS;
				Out_Shader4_g170149 = Data4_g170149.Shader;
				Out_Emissive4_g170149= Data4_g170149.Emissive;
				Out_MultiMask4_g170149 = Data4_g170149.MultiMask;
				Out_Grayscale4_g170149 = Data4_g170149.Grayscale;
				Out_Luminosity4_g170149= Data4_g170149.Luminosity;
				Out_AlphaClip4_g170149 = Data4_g170149.AlphaClip;
				Out_AlphaFade4_g170149 = Data4_g170149.AlphaFade;
				Out_Translucency4_g170149 = Data4_g170149.Translucency;
				Out_Transmission4_g170149 = Data4_g170149.Transmission;
				Out_Thickness4_g170149 = Data4_g170149.Thickness;
				Out_Diffusion4_g170149 = Data4_g170149.Diffusion;
				}
				half3 Visual_Albedo127_g170146 = Out_Albedo4_g170149;
				TVEModelData Data15_g170147 = Data16_g169262;
				float Out_Dummy15_g170147 = 0;
				float3 Out_PositionOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170147 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170147 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170147 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170147 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170147 = float3( 0,0,0 );
				float4 Out_VertexData15_g170147 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170147 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170147 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170147 = Data15_g170147.Dummy;
				Out_PositionOS15_g170147 = Data15_g170147.PositionOS;
				Out_PositionWS15_g170147 = Data15_g170147.PositionWS;
				Out_PositionWO15_g170147 = Data15_g170147.PositionWO;
				Out_PositionRawOS15_g170147 = Data15_g170147.PositionRawOS;
				Out_PositionAddOS15_g170147 = Data15_g170147.PositionAddOS;
				Out_PivotOS15_g170147 = Data15_g170147.PivotOS;
				Out_PivotWS15_g170147 = Data15_g170147.PivotWS;
				Out_PivotWO15_g170147 = Data15_g170147.PivotWO;
				Out_NormalOS15_g170147 = Data15_g170147.NormalOS;
				Out_NormalWS15_g170147 = Data15_g170147.NormalWS;
				Out_NormalRawOS15_g170147 = Data15_g170147.NormalRawOS;
				Out_NormalRawWS15_g170147 = Data15_g170147.NormalRawWS;
				Out_TangentOS15_g170147 = Data15_g170147.TangentOS;
				Out_ViewDirWS15_g170147 = Data15_g170147.ViewDirWS;
				Out_VertexData15_g170147 = Data15_g170147.VertexData;
				Out_MotionData15_g170147 = Data15_g170147.MotionData;
				Out_BoundsData15_g170147 = Data15_g170147.BoundsData;
				Out_RotationData15_g170147 = Data15_g170147.RotationData;
				}
				half4 Model_VertexData224_g170146 = Out_VertexData15_g170147;
				float4 break226_g170146 = Model_VertexData224_g170146;
				float4 break33_g170148 = _gradient_vert_mode;
				float temp_output_30_0_g170148 = ( break226_g170146.x * break33_g170148.x );
				float temp_output_29_0_g170148 = ( break226_g170146.y * break33_g170148.y );
				float temp_output_31_0_g170148 = ( break226_g170146.z * break33_g170148.z );
				float temp_output_28_0_g170148 = ( temp_output_30_0_g170148 + temp_output_29_0_g170148 + temp_output_31_0_g170148 + ( break226_g170146.w * break33_g170148.w ) );
				float temp_output_211_0_g170146 = temp_output_28_0_g170148;
				float clampResult17_g170153 = clamp( temp_output_211_0_g170146 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170154 = _GradientMeshRemap.x;
				float temp_output_10_0_g170154 = ( _GradientMeshRemap.y - temp_output_7_0_g170154 );
				float temp_output_6_0_g170155 = saturate( ( ( clampResult17_g170153 - temp_output_7_0_g170154 ) / ( temp_output_10_0_g170154 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170155 = ( temp_output_6_0_g170155 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170155 = temp_output_6_0_g170155;
				#endif
				half Gradient_VertMask82_g170146 = staticSwitch14_g170155;
				half Gradient_Mask200_g170146 = Gradient_VertMask82_g170146;
				float3 lerpResult75_g170146 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170146);
				float temp_output_162_11_g170146 = Out_MultiMask4_g170149;
				half Visual_MultiMask196_g170146 = temp_output_162_11_g170146;
				float lerpResult190_g170146 = lerp( 1.0 , Visual_MultiMask196_g170146 , _GradientMultiValue);
				half Gradient_MultiMask194_g170146 = lerpResult190_g170146;
				float3 lerpResult186_g170146 = lerp( Visual_Albedo127_g170146 , ( Visual_Albedo127_g170146 * lerpResult75_g170146 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170146 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170146 = lerpResult186_g170146;
				#else
				float3 staticSwitch171_g170146 = Visual_Albedo127_g170146;
				#endif
				half3 Final_Albedo160_g170146 = staticSwitch171_g170146;
				float3 In_Albedo3_g170150 = Final_Albedo160_g170146;
				float2 In_NormalTS3_g170150 = Out_NormalTS4_g170149;
				float3 In_NormalWS3_g170150 = Out_NormalWS4_g170149;
				float4 In_Shader3_g170150 = Out_Shader4_g170149;
				float4 In_Emissive3_g170150 = Out_Emissive4_g170149;
				float3 temp_output_3_0_g170151 = Final_Albedo160_g170146;
				float dotResult20_g170151 = dot( temp_output_3_0_g170151 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170146 = dotResult20_g170151;
				float In_Grayscale3_g170150 = Final_Grayscale164_g170146;
				float clampResult180_g170146 = clamp( saturate( ( Final_Grayscale164_g170146 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170146 = clampResult180_g170146;
				float In_Luminosity3_g170150 = Final_Luminosity181_g170146;
				float In_MultiMask3_g170150 = temp_output_162_11_g170146;
				float In_AlphaClip3_g170150 = Out_AlphaClip4_g170149;
				float In_AlphaFade3_g170150 = Out_AlphaFade4_g170149;
				float3 In_Translucency3_g170150 = Out_Translucency4_g170149;
				float In_Transmission3_g170150 = Out_Transmission4_g170149;
				float In_Thickness3_g170150 = Out_Thickness4_g170149;
				float In_Diffusion3_g170150 = Out_Diffusion4_g170149;
				{
				Data3_g170150.Dummy = In_Dummy3_g170150;
				Data3_g170150.Albedo = In_Albedo3_g170150;
				Data3_g170150.NormalTS = In_NormalTS3_g170150;
				Data3_g170150.NormalWS = In_NormalWS3_g170150;
				Data3_g170150.Shader = In_Shader3_g170150;
				Data3_g170150.Emissive= In_Emissive3_g170150;
				Data3_g170150.MultiMask = In_MultiMask3_g170150;
				Data3_g170150.Grayscale = In_Grayscale3_g170150;
				Data3_g170150.Luminosity = In_Luminosity3_g170150;
				Data3_g170150.AlphaClip = In_AlphaClip3_g170150;
				Data3_g170150.AlphaFade = In_AlphaFade3_g170150;
				Data3_g170150.Translucency = In_Translucency3_g170150;
				Data3_g170150.Transmission = In_Transmission3_g170150;
				Data3_g170150.Thickness = In_Thickness3_g170150;
				Data3_g170150.Diffusion = In_Diffusion3_g170150;
				}
				TVEVisualData Data4_g170158 = Data3_g170150;
				float Out_Dummy4_g170158 = 0;
				float3 Out_Albedo4_g170158 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170158 = float2( 0,0 );
				float3 Out_NormalWS4_g170158 = float3( 0,0,0 );
				float4 Out_Shader4_g170158 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170158 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170158 = 0;
				float Out_Grayscale4_g170158 = 0;
				float Out_Luminosity4_g170158 = 0;
				float Out_AlphaClip4_g170158 = 0;
				float Out_AlphaFade4_g170158 = 0;
				float3 Out_Translucency4_g170158 = float3( 0,0,0 );
				float Out_Transmission4_g170158 = 0;
				float Out_Thickness4_g170158 = 0;
				float Out_Diffusion4_g170158 = 0;
				{
				Out_Dummy4_g170158 = Data4_g170158.Dummy;
				Out_Albedo4_g170158 = Data4_g170158.Albedo;
				Out_NormalTS4_g170158 = Data4_g170158.NormalTS;
				Out_NormalWS4_g170158 = Data4_g170158.NormalWS;
				Out_Shader4_g170158 = Data4_g170158.Shader;
				Out_Emissive4_g170158= Data4_g170158.Emissive;
				Out_MultiMask4_g170158 = Data4_g170158.MultiMask;
				Out_Grayscale4_g170158 = Data4_g170158.Grayscale;
				Out_Luminosity4_g170158= Data4_g170158.Luminosity;
				Out_AlphaClip4_g170158 = Data4_g170158.AlphaClip;
				Out_AlphaFade4_g170158 = Data4_g170158.AlphaFade;
				Out_Translucency4_g170158 = Data4_g170158.Translucency;
				Out_Transmission4_g170158 = Data4_g170158.Transmission;
				Out_Thickness4_g170158 = Data4_g170158.Thickness;
				Out_Diffusion4_g170158 = Data4_g170158.Diffusion;
				}
				half3 Visual_Albedo127_g170156 = Out_Albedo4_g170158;
				TVEModelData Data15_g170159 = Data16_g169262;
				float Out_Dummy15_g170159 = 0;
				float3 Out_PositionOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170159 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170159 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170159 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170159 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170159 = float3( 0,0,0 );
				float4 Out_VertexData15_g170159 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170159 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170159 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170159 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170159 = Data15_g170159.Dummy;
				Out_PositionOS15_g170159 = Data15_g170159.PositionOS;
				Out_PositionWS15_g170159 = Data15_g170159.PositionWS;
				Out_PositionWO15_g170159 = Data15_g170159.PositionWO;
				Out_PositionRawOS15_g170159 = Data15_g170159.PositionRawOS;
				Out_PositionAddOS15_g170159 = Data15_g170159.PositionAddOS;
				Out_PivotOS15_g170159 = Data15_g170159.PivotOS;
				Out_PivotWS15_g170159 = Data15_g170159.PivotWS;
				Out_PivotWO15_g170159 = Data15_g170159.PivotWO;
				Out_NormalOS15_g170159 = Data15_g170159.NormalOS;
				Out_NormalWS15_g170159 = Data15_g170159.NormalWS;
				Out_NormalRawOS15_g170159 = Data15_g170159.NormalRawOS;
				Out_NormalRawWS15_g170159 = Data15_g170159.NormalRawWS;
				Out_TangentOS15_g170159 = Data15_g170159.TangentOS;
				Out_ViewDirWS15_g170159 = Data15_g170159.ViewDirWS;
				Out_VertexData15_g170159 = Data15_g170159.VertexData;
				Out_MotionData15_g170159 = Data15_g170159.MotionData;
				Out_BoundsData15_g170159 = Data15_g170159.BoundsData;
				Out_RotationData15_g170159 = Data15_g170159.RotationData;
				}
				half3 Model_PositionWO224_g170156 = Out_PositionWO15_g170159;
				half3 Model_PivotWO239_g170156 = Out_PivotWO15_g170159;
				float3 lerpResult242_g170156 = lerp( Model_PositionWO224_g170156 , Model_PivotWO239_g170156 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170161 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170156 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170163 = clamp( tex3DNode60_g170161.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170164 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170164 = ( _VariationNoiseRemap.y - temp_output_7_0_g170164 );
				float temp_output_238_0_g170156 = saturate( ( ( clampResult17_g170163 - temp_output_7_0_g170164 ) / ( temp_output_10_0_g170164 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170156 = temp_output_238_0_g170156;
				half Variaton_Mask200_g170156 = Variaton_NoiseMask82_g170156;
				float3 lerpResult75_g170156 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170156);
				float temp_output_162_11_g170156 = Out_MultiMask4_g170158;
				half Visual_MultiMask196_g170156 = temp_output_162_11_g170156;
				float lerpResult190_g170156 = lerp( 1.0 , Visual_MultiMask196_g170156 , _VariationMultiValue);
				half Variaton_MultiMask194_g170156 = lerpResult190_g170156;
				float3 lerpResult186_g170156 = lerp( Visual_Albedo127_g170156 , ( Visual_Albedo127_g170156 * lerpResult75_g170156 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170156 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170156 = lerpResult186_g170156;
				#else
				float3 staticSwitch171_g170156 = Visual_Albedo127_g170156;
				#endif
				half3 Final_Albedo160_g170156 = staticSwitch171_g170156;
				float3 In_Albedo3_g170160 = Final_Albedo160_g170156;
				float2 In_NormalTS3_g170160 = Out_NormalTS4_g170158;
				float3 In_NormalWS3_g170160 = Out_NormalWS4_g170158;
				float4 In_Shader3_g170160 = Out_Shader4_g170158;
				float4 In_Emissive3_g170160 = Out_Emissive4_g170158;
				float3 temp_output_3_0_g170157 = Final_Albedo160_g170156;
				float dotResult20_g170157 = dot( temp_output_3_0_g170157 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170156 = dotResult20_g170157;
				float In_Grayscale3_g170160 = Final_Grayscale164_g170156;
				float clampResult180_g170156 = clamp( saturate( ( Final_Grayscale164_g170156 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170156 = clampResult180_g170156;
				float In_Luminosity3_g170160 = Final_Luminosity181_g170156;
				float In_MultiMask3_g170160 = temp_output_162_11_g170156;
				float In_AlphaClip3_g170160 = Out_AlphaClip4_g170158;
				float In_AlphaFade3_g170160 = Out_AlphaFade4_g170158;
				float3 In_Translucency3_g170160 = Out_Translucency4_g170158;
				float In_Transmission3_g170160 = Out_Transmission4_g170158;
				float In_Thickness3_g170160 = Out_Thickness4_g170158;
				float In_Diffusion3_g170160 = Out_Diffusion4_g170158;
				{
				Data3_g170160.Dummy = In_Dummy3_g170160;
				Data3_g170160.Albedo = In_Albedo3_g170160;
				Data3_g170160.NormalTS = In_NormalTS3_g170160;
				Data3_g170160.NormalWS = In_NormalWS3_g170160;
				Data3_g170160.Shader = In_Shader3_g170160;
				Data3_g170160.Emissive= In_Emissive3_g170160;
				Data3_g170160.MultiMask = In_MultiMask3_g170160;
				Data3_g170160.Grayscale = In_Grayscale3_g170160;
				Data3_g170160.Luminosity = In_Luminosity3_g170160;
				Data3_g170160.AlphaClip = In_AlphaClip3_g170160;
				Data3_g170160.AlphaFade = In_AlphaFade3_g170160;
				Data3_g170160.Translucency = In_Translucency3_g170160;
				Data3_g170160.Transmission = In_Transmission3_g170160;
				Data3_g170160.Thickness = In_Thickness3_g170160;
				Data3_g170160.Diffusion = In_Diffusion3_g170160;
				}
				TVEVisualData Data4_g170171 = Data3_g170160;
				float Out_Dummy4_g170171 = 0;
				float3 Out_Albedo4_g170171 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170171 = float2( 0,0 );
				float3 Out_NormalWS4_g170171 = float3( 0,0,0 );
				float4 Out_Shader4_g170171 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170171 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170171 = 0;
				float Out_Grayscale4_g170171 = 0;
				float Out_Luminosity4_g170171 = 0;
				float Out_AlphaClip4_g170171 = 0;
				float Out_AlphaFade4_g170171 = 0;
				float3 Out_Translucency4_g170171 = float3( 0,0,0 );
				float Out_Transmission4_g170171 = 0;
				float Out_Thickness4_g170171 = 0;
				float Out_Diffusion4_g170171 = 0;
				{
				Out_Dummy4_g170171 = Data4_g170171.Dummy;
				Out_Albedo4_g170171 = Data4_g170171.Albedo;
				Out_NormalTS4_g170171 = Data4_g170171.NormalTS;
				Out_NormalWS4_g170171 = Data4_g170171.NormalWS;
				Out_Shader4_g170171 = Data4_g170171.Shader;
				Out_Emissive4_g170171= Data4_g170171.Emissive;
				Out_MultiMask4_g170171 = Data4_g170171.MultiMask;
				Out_Grayscale4_g170171 = Data4_g170171.Grayscale;
				Out_Luminosity4_g170171= Data4_g170171.Luminosity;
				Out_AlphaClip4_g170171 = Data4_g170171.AlphaClip;
				Out_AlphaFade4_g170171 = Data4_g170171.AlphaFade;
				Out_Translucency4_g170171 = Data4_g170171.Translucency;
				Out_Transmission4_g170171 = Data4_g170171.Transmission;
				Out_Thickness4_g170171 = Data4_g170171.Thickness;
				Out_Diffusion4_g170171 = Data4_g170171.Diffusion;
				}
				half3 Visual_Albedo139_g170166 = Out_Albedo4_g170171;
				float temp_output_200_12_g170166 = Out_Grayscale4_g170171;
				half Visual_Grayscale150_g170166 = temp_output_200_12_g170166;
				float3 temp_cast_37 = (Visual_Grayscale150_g170166).xxx;
				TVEGlobalData Data15_g170168 = Data204_g169264;
				float Out_Dummy15_g170168 = 0;
				float4 Out_CoatParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170168 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170168 = Data15_g170168.Dummy;
				Out_CoatParams15_g170168 = Data15_g170168.CoatParams;
				Out_PaintParams15_g170168 = Data15_g170168.PaintParams;
				Out_GlowParams15_g170168 = Data15_g170168.GlowParams;
				Out_AtmoParams15_g170168= Data15_g170168.AtmoParams;
				Out_FadeParams15_g170168= Data15_g170168.FadeParams;
				Out_FormParams15_g170168 = Data15_g170168.FormParams;
				Out_LandParams15_g170168 = Data15_g170168.LandParams;
				Out_WindParams15_g170168 = Data15_g170168.WindParams;
				Out_PushParams15_g170168 = Data15_g170168.PushParams;
				}
				half4 Global_PaintParams209_g170166 = Out_PaintParams15_g170168;
				float temp_output_6_0_g170170 = ( saturate( (Global_PaintParams209_g170166).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170170 = ( temp_output_6_0_g170170 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170170 = temp_output_6_0_g170170;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170166 = staticSwitch14_g170170;
				#else
				float staticSwitch283_g170166 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170166 = staticSwitch283_g170166;
				float3 lerpResult368_g170166 = lerp( Visual_Albedo139_g170166 , temp_cast_37 , ( Tinting_GlobalValue285_g170166 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170189 = 2.0;
				#else
				float staticSwitch1_g170189 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170166 = (Global_PaintParams209_g170166).xyz;
				#else
				float3 staticSwitch288_g170166 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170166 = staticSwitch288_g170166;
				float temp_output_200_11_g170166 = Out_MultiMask4_g170171;
				half Visual_MultiMask181_g170166 = temp_output_200_11_g170166;
				float lerpResult147_g170166 = lerp( 1.0 , Visual_MultiMask181_g170166 , _TintingMultiValue);
				half Tinting_MutiMask121_g170166 = lerpResult147_g170166;
				half Tinting_TexMask385_g170166 = 1.0;
				float temp_output_200_15_g170166 = Out_Luminosity4_g170171;
				half Visual_Luminosity257_g170166 = temp_output_200_15_g170166;
				float clampResult17_g170183 = clamp( Visual_Luminosity257_g170166 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170182 = _TintingLumaRemap.x;
				float temp_output_10_0_g170182 = ( _TintingLumaRemap.y - temp_output_7_0_g170182 );
				float lerpResult228_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170183 - temp_output_7_0_g170182 ) / ( temp_output_10_0_g170182 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170166 = lerpResult228_g170166;
				TVEModelData Data15_g170167 = Data16_g169262;
				float Out_Dummy15_g170167 = 0;
				float3 Out_PositionOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170167 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170167 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170167 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170167 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170167 = float3( 0,0,0 );
				float4 Out_VertexData15_g170167 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170167 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170167 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170167 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170167 = Data15_g170167.Dummy;
				Out_PositionOS15_g170167 = Data15_g170167.PositionOS;
				Out_PositionWS15_g170167 = Data15_g170167.PositionWS;
				Out_PositionWO15_g170167 = Data15_g170167.PositionWO;
				Out_PositionRawOS15_g170167 = Data15_g170167.PositionRawOS;
				Out_PositionAddOS15_g170167 = Data15_g170167.PositionAddOS;
				Out_PivotOS15_g170167 = Data15_g170167.PivotOS;
				Out_PivotWS15_g170167 = Data15_g170167.PivotWS;
				Out_PivotWO15_g170167 = Data15_g170167.PivotWO;
				Out_NormalOS15_g170167 = Data15_g170167.NormalOS;
				Out_NormalWS15_g170167 = Data15_g170167.NormalWS;
				Out_NormalRawOS15_g170167 = Data15_g170167.NormalRawOS;
				Out_NormalRawWS15_g170167 = Data15_g170167.NormalRawWS;
				Out_TangentOS15_g170167 = Data15_g170167.TangentOS;
				Out_ViewDirWS15_g170167 = Data15_g170167.ViewDirWS;
				Out_VertexData15_g170167 = Data15_g170167.VertexData;
				Out_MotionData15_g170167 = Data15_g170167.MotionData;
				Out_BoundsData15_g170167 = Data15_g170167.BoundsData;
				Out_RotationData15_g170167 = Data15_g170167.RotationData;
				}
				half4 Model_VertexMasks307_g170166 = Out_VertexData15_g170167;
				float4 break311_g170166 = Model_VertexMasks307_g170166;
				float4 break33_g170175 = _tinting_vert_mode;
				float temp_output_30_0_g170175 = ( break311_g170166.x * break33_g170175.x );
				float temp_output_29_0_g170175 = ( break311_g170166.y * break33_g170175.y );
				float temp_output_31_0_g170175 = ( break311_g170166.z * break33_g170175.z );
				float temp_output_28_0_g170175 = ( temp_output_30_0_g170175 + temp_output_29_0_g170175 + temp_output_31_0_g170175 + ( break311_g170166.w * break33_g170175.w ) );
				float clampResult17_g170181 = clamp( temp_output_28_0_g170175 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170180 = _TintingMeshRemap.x;
				float temp_output_10_0_g170180 = ( _TintingMeshRemap.y - temp_output_7_0_g170180 );
				float lerpResult370_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170181 - temp_output_7_0_g170180 ) / ( temp_output_10_0_g170180 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170184 = lerpResult370_g170166;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170184 = ( temp_output_6_0_g170184 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170184 = temp_output_6_0_g170184;
				#endif
				float temp_output_333_0_g170166 = staticSwitch14_g170184;
				half Tinting_VertMask309_g170166 = temp_output_333_0_g170166;
				half Tinting_NoiseMask213_g170166 = 1.0;
				half Custom_Mask345_g170166 = 1.0;
				float temp_output_7_0_g170178 = _TintingBlendRemap.x;
				float temp_output_10_0_g170178 = ( _TintingBlendRemap.y - temp_output_7_0_g170178 );
				half Tinting_Mask242_g170166 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170166 * Tinting_TexMask385_g170166 * Tinting_LumaMask153_g170166 * Tinting_VertMask309_g170166 * Tinting_NoiseMask213_g170166 * Tinting_GlobalValue285_g170166 * Custom_Mask345_g170166 ) - temp_output_7_0_g170178 ) / ( temp_output_10_0_g170178 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170166 = lerp( Visual_Albedo139_g170166 , ( lerpResult368_g170166 * staticSwitch1_g170189 * Tinting_ColorGlobal290_g170166 * (_TintingColor).rgb ) , Tinting_Mask242_g170166);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170166 = lerpResult90_g170166;
				#else
				float3 staticSwitch286_g170166 = Visual_Albedo139_g170166;
				#endif
				half3 Final_Albedo97_g170166 = staticSwitch286_g170166;
				float3 In_Albedo3_g170169 = Final_Albedo97_g170166;
				float2 In_NormalTS3_g170169 = Out_NormalTS4_g170171;
				float3 In_NormalWS3_g170169 = Out_NormalWS4_g170171;
				float4 In_Shader3_g170169 = Out_Shader4_g170171;
				float4 In_Emissive3_g170169 = Out_Emissive4_g170171;
				float In_Grayscale3_g170169 = temp_output_200_12_g170166;
				float In_Luminosity3_g170169 = temp_output_200_15_g170166;
				float In_MultiMask3_g170169 = temp_output_200_11_g170166;
				float In_AlphaClip3_g170169 = Out_AlphaClip4_g170171;
				float In_AlphaFade3_g170169 = Out_AlphaFade4_g170171;
				float3 In_Translucency3_g170169 = Out_Translucency4_g170171;
				float In_Transmission3_g170169 = Out_Transmission4_g170171;
				float In_Thickness3_g170169 = Out_Thickness4_g170171;
				float In_Diffusion3_g170169 = Out_Diffusion4_g170171;
				{
				Data3_g170169.Dummy = In_Dummy3_g170169;
				Data3_g170169.Albedo = In_Albedo3_g170169;
				Data3_g170169.NormalTS = In_NormalTS3_g170169;
				Data3_g170169.NormalWS = In_NormalWS3_g170169;
				Data3_g170169.Shader = In_Shader3_g170169;
				Data3_g170169.Emissive= In_Emissive3_g170169;
				Data3_g170169.MultiMask = In_MultiMask3_g170169;
				Data3_g170169.Grayscale = In_Grayscale3_g170169;
				Data3_g170169.Luminosity = In_Luminosity3_g170169;
				Data3_g170169.AlphaClip = In_AlphaClip3_g170169;
				Data3_g170169.AlphaFade = In_AlphaFade3_g170169;
				Data3_g170169.Translucency = In_Translucency3_g170169;
				Data3_g170169.Transmission = In_Transmission3_g170169;
				Data3_g170169.Thickness = In_Thickness3_g170169;
				Data3_g170169.Diffusion = In_Diffusion3_g170169;
				}
				TVEVisualData Data4_g170192 = Data3_g170169;
				float Out_Dummy4_g170192 = 0;
				float3 Out_Albedo4_g170192 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170192 = float2( 0,0 );
				float3 Out_NormalWS4_g170192 = float3( 0,0,0 );
				float4 Out_Shader4_g170192 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170192 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170192 = 0;
				float Out_Grayscale4_g170192 = 0;
				float Out_Luminosity4_g170192 = 0;
				float Out_AlphaClip4_g170192 = 0;
				float Out_AlphaFade4_g170192 = 0;
				float3 Out_Translucency4_g170192 = float3( 0,0,0 );
				float Out_Transmission4_g170192 = 0;
				float Out_Thickness4_g170192 = 0;
				float Out_Diffusion4_g170192 = 0;
				{
				Out_Dummy4_g170192 = Data4_g170192.Dummy;
				Out_Albedo4_g170192 = Data4_g170192.Albedo;
				Out_NormalTS4_g170192 = Data4_g170192.NormalTS;
				Out_NormalWS4_g170192 = Data4_g170192.NormalWS;
				Out_Shader4_g170192 = Data4_g170192.Shader;
				Out_Emissive4_g170192= Data4_g170192.Emissive;
				Out_MultiMask4_g170192 = Data4_g170192.MultiMask;
				Out_Grayscale4_g170192 = Data4_g170192.Grayscale;
				Out_Luminosity4_g170192= Data4_g170192.Luminosity;
				Out_AlphaClip4_g170192 = Data4_g170192.AlphaClip;
				Out_AlphaFade4_g170192 = Data4_g170192.AlphaFade;
				Out_Translucency4_g170192 = Data4_g170192.Translucency;
				Out_Transmission4_g170192 = Data4_g170192.Transmission;
				Out_Thickness4_g170192 = Data4_g170192.Thickness;
				Out_Diffusion4_g170192 = Data4_g170192.Diffusion;
				}
				half3 Visual_Albedo292_g170190 = Out_Albedo4_g170192;
				float temp_output_280_12_g170190 = Out_Grayscale4_g170192;
				half Visual_Grayscale308_g170190 = temp_output_280_12_g170190;
				float3 temp_cast_39 = (Visual_Grayscale308_g170190).xxx;
				TVEGlobalData Data15_g170191 = Data204_g169264;
				float Out_Dummy15_g170191 = 0;
				float4 Out_CoatParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170191 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170191 = Data15_g170191.Dummy;
				Out_CoatParams15_g170191 = Data15_g170191.CoatParams;
				Out_PaintParams15_g170191 = Data15_g170191.PaintParams;
				Out_GlowParams15_g170191 = Data15_g170191.GlowParams;
				Out_AtmoParams15_g170191= Data15_g170191.AtmoParams;
				Out_FadeParams15_g170191= Data15_g170191.FadeParams;
				Out_FormParams15_g170191 = Data15_g170191.FormParams;
				Out_LandParams15_g170191 = Data15_g170191.LandParams;
				Out_WindParams15_g170191 = Data15_g170191.WindParams;
				Out_PushParams15_g170191 = Data15_g170191.PushParams;
				}
				half4 Global_AtmoParams314_g170190 = Out_AtmoParams15_g170191;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170190 = ( (Global_AtmoParams314_g170190).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170190 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170190 = staticSwitch351_g170190;
				float3 lerpResult485_g170190 = lerp( Visual_Albedo292_g170190 , temp_cast_39 , ( Dryness_GlobalMask352_g170190 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170212 = RGBToHSV( lerpResult485_g170190 );
				half3 hsvTorgb61_g170212 = HSVToRGB( half3(( hsvTorgb58_g170212.x + _DrynessShiftValue ),hsvTorgb58_g170212.y,hsvTorgb58_g170212.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170190 = hsvTorgb61_g170212;
				#else
				float3 staticSwitch499_g170190 = lerpResult485_g170190;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170211 = 2.0;
				#else
				float staticSwitch1_g170211 = 4.594794;
				#endif
				half Dryness_TexMask478_g170190 = 1.0;
				float temp_output_280_11_g170190 = Out_MultiMask4_g170192;
				half Visual_MultiMask310_g170190 = temp_output_280_11_g170190;
				float lerpResult283_g170190 = lerp( 1.0 , Visual_MultiMask310_g170190 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170190 = lerpResult283_g170190;
				float temp_output_280_15_g170190 = Out_Luminosity4_g170192;
				half Visual_Luminosity309_g170190 = temp_output_280_15_g170190;
				float clampResult17_g170207 = clamp( Visual_Luminosity309_g170190 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170206 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170206 = ( _DrynessLumaRemap.y - temp_output_7_0_g170206 );
				float lerpResult295_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170207 - temp_output_7_0_g170206 ) / ( temp_output_10_0_g170206 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170190 = lerpResult295_g170190;
				TVEModelData Data15_g170193 = Data16_g169262;
				float Out_Dummy15_g170193 = 0;
				float3 Out_PositionOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170193 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170193 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170193 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170193 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170193 = float3( 0,0,0 );
				float4 Out_VertexData15_g170193 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170193 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170193 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170193 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170193 = Data15_g170193.Dummy;
				Out_PositionOS15_g170193 = Data15_g170193.PositionOS;
				Out_PositionWS15_g170193 = Data15_g170193.PositionWS;
				Out_PositionWO15_g170193 = Data15_g170193.PositionWO;
				Out_PositionRawOS15_g170193 = Data15_g170193.PositionRawOS;
				Out_PositionAddOS15_g170193 = Data15_g170193.PositionAddOS;
				Out_PivotOS15_g170193 = Data15_g170193.PivotOS;
				Out_PivotWS15_g170193 = Data15_g170193.PivotWS;
				Out_PivotWO15_g170193 = Data15_g170193.PivotWO;
				Out_NormalOS15_g170193 = Data15_g170193.NormalOS;
				Out_NormalWS15_g170193 = Data15_g170193.NormalWS;
				Out_NormalRawOS15_g170193 = Data15_g170193.NormalRawOS;
				Out_NormalRawWS15_g170193 = Data15_g170193.NormalRawWS;
				Out_TangentOS15_g170193 = Data15_g170193.TangentOS;
				Out_ViewDirWS15_g170193 = Data15_g170193.ViewDirWS;
				Out_VertexData15_g170193 = Data15_g170193.VertexData;
				Out_MotionData15_g170193 = Data15_g170193.MotionData;
				Out_BoundsData15_g170193 = Data15_g170193.BoundsData;
				Out_RotationData15_g170193 = Data15_g170193.RotationData;
				}
				half4 Model_VertexMasks386_g170190 = Out_VertexData15_g170193;
				float4 break375_g170190 = Model_VertexMasks386_g170190;
				float4 break33_g170200 = _dryness_vert_mode;
				float temp_output_30_0_g170200 = ( break375_g170190.x * break33_g170200.x );
				float temp_output_29_0_g170200 = ( break375_g170190.y * break33_g170200.y );
				float temp_output_31_0_g170200 = ( break375_g170190.z * break33_g170200.z );
				float temp_output_28_0_g170200 = ( temp_output_30_0_g170200 + temp_output_29_0_g170200 + temp_output_31_0_g170200 + ( break375_g170190.w * break33_g170200.w ) );
				float clampResult17_g170201 = clamp( temp_output_28_0_g170200 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170202 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170202 = ( _DrynessMeshRemap.y - temp_output_7_0_g170202 );
				float lerpResult452_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170201 - temp_output_7_0_g170202 ) / ( temp_output_10_0_g170202 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170208 = lerpResult452_g170190;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170208 = ( temp_output_6_0_g170208 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170208 = temp_output_6_0_g170208;
				#endif
				float temp_output_448_0_g170190 = staticSwitch14_g170208;
				half Dryness_VertMask378_g170190 = temp_output_448_0_g170190;
				half Dryness_MaskNoise291_g170190 = 1.0;
				half Custom_Mask411_g170190 = 1.0;
				float temp_output_7_0_g170205 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170205 = ( _DrynessBlendRemap.y - temp_output_7_0_g170205 );
				half Dryness_Mask329_g170190 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170190 * Dryness_MultiMask302_g170190 * Dryness_LumaMask301_g170190 * Dryness_VertMask378_g170190 * Dryness_MaskNoise291_g170190 * Dryness_GlobalMask352_g170190 * Custom_Mask411_g170190 ) - temp_output_7_0_g170205 ) / ( temp_output_10_0_g170205 + 0.0001 ) ) );
				float3 lerpResult336_g170190 = lerp( Visual_Albedo292_g170190 , ( staticSwitch499_g170190 * staticSwitch1_g170211 * (_DrynessColor).rgb ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170190 = lerpResult336_g170190;
				#else
				float3 staticSwitch356_g170190 = Visual_Albedo292_g170190;
				#endif
				half3 Final_Albedo331_g170190 = staticSwitch356_g170190;
				float3 In_Albedo3_g170194 = Final_Albedo331_g170190;
				float2 In_NormalTS3_g170194 = Out_NormalTS4_g170192;
				float3 In_NormalWS3_g170194 = Out_NormalWS4_g170192;
				half4 Visual_Shader415_g170190 = Out_Shader4_g170192;
				float4 break438_g170190 = Visual_Shader415_g170190;
				float4 appendResult439_g170190 = (float4(break438_g170190.x , break438_g170190.y , break438_g170190.z , ( break438_g170190.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170190 = lerp( Visual_Shader415_g170190 , appendResult439_g170190 , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170190 = lerpResult427_g170190;
				#else
				float4 staticSwitch426_g170190 = Visual_Shader415_g170190;
				#endif
				half4 Final_Shader433_g170190 = staticSwitch426_g170190;
				float4 In_Shader3_g170194 = Final_Shader433_g170190;
				float4 In_Emissive3_g170194 = Out_Emissive4_g170192;
				float In_Grayscale3_g170194 = temp_output_280_12_g170190;
				float In_Luminosity3_g170194 = temp_output_280_15_g170190;
				float In_MultiMask3_g170194 = temp_output_280_11_g170190;
				float In_AlphaClip3_g170194 = Out_AlphaClip4_g170192;
				float In_AlphaFade3_g170194 = Out_AlphaFade4_g170192;
				float3 In_Translucency3_g170194 = Out_Translucency4_g170192;
				half Visual_Transmission416_g170190 = Out_Transmission4_g170192;
				float lerpResult421_g170190 = lerp( Visual_Transmission416_g170190 , ( Visual_Transmission416_g170190 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170190 = lerpResult421_g170190;
				#else
				float staticSwitch418_g170190 = Visual_Transmission416_g170190;
				#endif
				half Final_Transmission425_g170190 = staticSwitch418_g170190;
				float In_Transmission3_g170194 = Final_Transmission425_g170190;
				float In_Thickness3_g170194 = Out_Thickness4_g170192;
				float In_Diffusion3_g170194 = Out_Diffusion4_g170192;
				{
				Data3_g170194.Dummy = In_Dummy3_g170194;
				Data3_g170194.Albedo = In_Albedo3_g170194;
				Data3_g170194.NormalTS = In_NormalTS3_g170194;
				Data3_g170194.NormalWS = In_NormalWS3_g170194;
				Data3_g170194.Shader = In_Shader3_g170194;
				Data3_g170194.Emissive= In_Emissive3_g170194;
				Data3_g170194.MultiMask = In_MultiMask3_g170194;
				Data3_g170194.Grayscale = In_Grayscale3_g170194;
				Data3_g170194.Luminosity = In_Luminosity3_g170194;
				Data3_g170194.AlphaClip = In_AlphaClip3_g170194;
				Data3_g170194.AlphaFade = In_AlphaFade3_g170194;
				Data3_g170194.Translucency = In_Translucency3_g170194;
				Data3_g170194.Transmission = In_Transmission3_g170194;
				Data3_g170194.Thickness = In_Thickness3_g170194;
				Data3_g170194.Diffusion = In_Diffusion3_g170194;
				}
				TVEVisualData Data4_g170320 = Data3_g170194;
				float Out_Dummy4_g170320 = 0;
				float3 Out_Albedo4_g170320 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170320 = float2( 0,0 );
				float3 Out_NormalWS4_g170320 = float3( 0,0,0 );
				float4 Out_Shader4_g170320 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170320 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170320 = 0;
				float Out_Grayscale4_g170320 = 0;
				float Out_Luminosity4_g170320 = 0;
				float Out_AlphaClip4_g170320 = 0;
				float Out_AlphaFade4_g170320 = 0;
				float3 Out_Translucency4_g170320 = float3( 0,0,0 );
				float Out_Transmission4_g170320 = 0;
				float Out_Thickness4_g170320 = 0;
				float Out_Diffusion4_g170320 = 0;
				{
				Out_Dummy4_g170320 = Data4_g170320.Dummy;
				Out_Albedo4_g170320 = Data4_g170320.Albedo;
				Out_NormalTS4_g170320 = Data4_g170320.NormalTS;
				Out_NormalWS4_g170320 = Data4_g170320.NormalWS;
				Out_Shader4_g170320 = Data4_g170320.Shader;
				Out_Emissive4_g170320= Data4_g170320.Emissive;
				Out_MultiMask4_g170320 = Data4_g170320.MultiMask;
				Out_Grayscale4_g170320 = Data4_g170320.Grayscale;
				Out_Luminosity4_g170320= Data4_g170320.Luminosity;
				Out_AlphaClip4_g170320 = Data4_g170320.AlphaClip;
				Out_AlphaFade4_g170320 = Data4_g170320.AlphaFade;
				Out_Translucency4_g170320 = Data4_g170320.Translucency;
				Out_Transmission4_g170320 = Data4_g170320.Transmission;
				Out_Thickness4_g170320 = Data4_g170320.Thickness;
				Out_Diffusion4_g170320 = Data4_g170320.Diffusion;
				}
				half3 Visual_Albedo127_g170319 = Out_Albedo4_g170320;
				float4 vertexToFrag24_g170165 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170165;
				float clampResult208_g170319 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170319 = ( Visual_Albedo127_g170319 + ( ( Visual_Albedo127_g170319 * Visual_Albedo127_g170319 * 200.0 * _motion_highlight_color ) * clampResult208_g170319 ) );
				#else
				float3 staticSwitch209_g170319 = Visual_Albedo127_g170319;
				#endif
				half3 Final_Albedo160_g170319 = staticSwitch209_g170319;
				float3 In_Albedo3_g170321 = Final_Albedo160_g170319;
				float2 In_NormalTS3_g170321 = Out_NormalTS4_g170320;
				float3 In_NormalWS3_g170321 = Out_NormalWS4_g170320;
				float4 In_Shader3_g170321 = Out_Shader4_g170320;
				float4 In_Emissive3_g170321 = Out_Emissive4_g170320;
				float In_Grayscale3_g170321 = Out_Grayscale4_g170320;
				float In_Luminosity3_g170321 = Out_Luminosity4_g170320;
				float In_MultiMask3_g170321 = Out_MultiMask4_g170320;
				float In_AlphaClip3_g170321 = Out_AlphaClip4_g170320;
				float In_AlphaFade3_g170321 = Out_AlphaFade4_g170320;
				float3 In_Translucency3_g170321 = Out_Translucency4_g170320;
				float In_Transmission3_g170321 = Out_Transmission4_g170320;
				float In_Thickness3_g170321 = Out_Thickness4_g170320;
				float In_Diffusion3_g170321 = Out_Diffusion4_g170320;
				{
				Data3_g170321.Dummy = In_Dummy3_g170321;
				Data3_g170321.Albedo = In_Albedo3_g170321;
				Data3_g170321.NormalTS = In_NormalTS3_g170321;
				Data3_g170321.NormalWS = In_NormalWS3_g170321;
				Data3_g170321.Shader = In_Shader3_g170321;
				Data3_g170321.Emissive= In_Emissive3_g170321;
				Data3_g170321.MultiMask = In_MultiMask3_g170321;
				Data3_g170321.Grayscale = In_Grayscale3_g170321;
				Data3_g170321.Luminosity = In_Luminosity3_g170321;
				Data3_g170321.AlphaClip = In_AlphaClip3_g170321;
				Data3_g170321.AlphaFade = In_AlphaFade3_g170321;
				Data3_g170321.Translucency = In_Translucency3_g170321;
				Data3_g170321.Transmission = In_Transmission3_g170321;
				Data3_g170321.Thickness = In_Thickness3_g170321;
				Data3_g170321.Diffusion = In_Diffusion3_g170321;
				}
				TVEVisualData Data4_g170323 = Data3_g170321;
				float Out_Dummy4_g170323 = 0;
				float3 Out_Albedo4_g170323 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170323 = float2( 0,0 );
				float3 Out_NormalWS4_g170323 = float3( 0,0,0 );
				float4 Out_Shader4_g170323 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170323 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170323 = 0;
				float Out_Grayscale4_g170323 = 0;
				float Out_Luminosity4_g170323 = 0;
				float Out_AlphaClip4_g170323 = 0;
				float Out_AlphaFade4_g170323 = 0;
				float3 Out_Translucency4_g170323 = float3( 0,0,0 );
				float Out_Transmission4_g170323 = 0;
				float Out_Thickness4_g170323 = 0;
				float Out_Diffusion4_g170323 = 0;
				{
				Out_Dummy4_g170323 = Data4_g170323.Dummy;
				Out_Albedo4_g170323 = Data4_g170323.Albedo;
				Out_NormalTS4_g170323 = Data4_g170323.NormalTS;
				Out_NormalWS4_g170323 = Data4_g170323.NormalWS;
				Out_Shader4_g170323 = Data4_g170323.Shader;
				Out_Emissive4_g170323= Data4_g170323.Emissive;
				Out_MultiMask4_g170323 = Data4_g170323.MultiMask;
				Out_Grayscale4_g170323 = Data4_g170323.Grayscale;
				Out_Luminosity4_g170323= Data4_g170323.Luminosity;
				Out_AlphaClip4_g170323 = Data4_g170323.AlphaClip;
				Out_AlphaFade4_g170323 = Data4_g170323.AlphaFade;
				Out_Translucency4_g170323 = Data4_g170323.Translucency;
				Out_Transmission4_g170323 = Data4_g170323.Transmission;
				Out_Thickness4_g170323 = Data4_g170323.Thickness;
				Out_Diffusion4_g170323 = Data4_g170323.Diffusion;
				}
				half3 Visual_Albedo127_g170322 = Out_Albedo4_g170323;
				float3 temp_output_622_0_g170322 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170326 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170327 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170327 = ( temp_output_6_0_g170327 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170327 = temp_output_6_0_g170327;
				#endif
				half4 Overlay_Coords639_g170322 = staticSwitch14_g170327;
				float4 temp_output_37_0_g170326 = Overlay_Coords639_g170322;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				TVEModelData Data15_g170328 = Data16_g169262;
				float Out_Dummy15_g170328 = 0;
				float3 Out_PositionOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170328 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170328 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170328 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170328 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170328 = float3( 0,0,0 );
				float4 Out_VertexData15_g170328 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170328 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170328 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170328 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170328 = Data15_g170328.Dummy;
				Out_PositionOS15_g170328 = Data15_g170328.PositionOS;
				Out_PositionWS15_g170328 = Data15_g170328.PositionWS;
				Out_PositionWO15_g170328 = Data15_g170328.PositionWO;
				Out_PositionRawOS15_g170328 = Data15_g170328.PositionRawOS;
				Out_PositionAddOS15_g170328 = Data15_g170328.PositionAddOS;
				Out_PivotOS15_g170328 = Data15_g170328.PivotOS;
				Out_PivotWS15_g170328 = Data15_g170328.PivotWS;
				Out_PivotWO15_g170328 = Data15_g170328.PivotWO;
				Out_NormalOS15_g170328 = Data15_g170328.NormalOS;
				Out_NormalWS15_g170328 = Data15_g170328.NormalWS;
				Out_NormalRawOS15_g170328 = Data15_g170328.NormalRawOS;
				Out_NormalRawWS15_g170328 = Data15_g170328.NormalRawWS;
				Out_TangentOS15_g170328 = Data15_g170328.TangentOS;
				Out_ViewDirWS15_g170328 = Data15_g170328.ViewDirWS;
				Out_VertexData15_g170328 = Data15_g170328.VertexData;
				Out_MotionData15_g170328 = Data15_g170328.MotionData;
				Out_BoundsData15_g170328 = Data15_g170328.BoundsData;
				Out_RotationData15_g170328 = Data15_g170328.RotationData;
				}
				half3 Model_PositionWO602_g170322 = Out_PositionWO15_g170328;
				float3 temp_output_279_0_g170326 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170326 = sampler_Linear_Repeat;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				half3 Model_NormalWS712_g170322 = Out_NormalWS15_g170328;
				float3 temp_output_280_0_g170326 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170326 = sampler_Linear_Repeat;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170326 = sampler_Linear_Repeat;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170322 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170322 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170322 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#endif
				half3 Overlay_Albedo526_g170322 = (staticSwitch676_g170322).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170322 = ( temp_output_622_0_g170322 * Overlay_Albedo526_g170322 );
				#else
				float3 staticSwitch578_g170322 = temp_output_622_0_g170322;
				#endif
				float3 temp_output_6_0_g170334 = staticSwitch578_g170322;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170334 = ( temp_output_6_0_g170334 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170334 = temp_output_6_0_g170334;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170331) = _OverlayGlitterTex;
				SamplerState Sampler246_g170331 = sampler_Linear_Repeat;
				float4 appendResult863_g170322 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170331 = appendResult863_g170322;
				half4 Coords246_g170331 = temp_output_37_0_g170331;
				float3 temp_output_279_0_g170331 = Model_PositionWO602_g170322;
				half3 WorldPosition246_g170331 = temp_output_279_0_g170331;
				float3 temp_output_280_0_g170331 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170331 = temp_output_280_0_g170331;
				half4 localSamplePlanar3D246_g170331 = SamplePlanar3D( Texture246_g170331 , Sampler246_g170331 , Coords246_g170331 , WorldPosition246_g170331 , WorldNormal246_g170331 );
				half Overlay_GlitterTex854_g170322 = (localSamplePlanar3D246_g170331).x;
				half3 Model_PositionWS879_g170322 = Out_PositionWS15_g170328;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170322 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170322 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170322 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170322 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170322 = staticSwitch868_g170322;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170348) = _OverlayMaskTex;
				SamplerState Sampler276_g170348 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170349 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170349 = ( temp_output_6_0_g170349 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170349 = temp_output_6_0_g170349;
				#endif
				half4 Local_MaskCoords888_g170322 = staticSwitch14_g170349;
				float4 temp_output_37_0_g170348 = Local_MaskCoords888_g170322;
				half4 Coords276_g170348 = temp_output_37_0_g170348;
				half2 TexCoord276_g170348 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170348 = SampleMain( Texture276_g170348 , Sampler276_g170348 , Coords276_g170348 , TexCoord276_g170348 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170348) = _OverlayMaskTex;
				SamplerState Sampler275_g170348 = sampler_Linear_Repeat;
				half4 Coords275_g170348 = temp_output_37_0_g170348;
				half2 TexCoord275_g170348 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170348 = SampleExtra( Texture275_g170348 , Sampler275_g170348 , Coords275_g170348 , TexCoord275_g170348 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170322 = localSampleExtra275_g170348;
				#else
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#endif
				half4 Local_MaskTex887_g170322 = staticSwitch894_g170322;
				float clampResult17_g170350 = clamp( (Local_MaskTex887_g170322).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170351 = ( _OverlayMaskRemap.y - temp_output_7_0_g170351 );
				float lerpResult900_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170322 = lerpResult900_g170322;
				float3 temp_output_739_21_g170322 = Out_NormalWS4_g170323;
				half3 Visual_NormalWS749_g170322 = temp_output_739_21_g170322;
				float clampResult17_g170344 = clamp( saturate( (Visual_NormalWS749_g170322).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170343 = _OverlayProjRemap.x;
				float temp_output_10_0_g170343 = ( _OverlayProjRemap.y - temp_output_7_0_g170343 );
				float lerpResult842_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170344 - temp_output_7_0_g170343 ) / ( temp_output_10_0_g170343 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170322 = lerpResult842_g170322;
				float temp_output_739_15_g170322 = Out_Luminosity4_g170323;
				half Visual_Luminosity654_g170322 = temp_output_739_15_g170322;
				float clampResult17_g170346 = clamp( Visual_Luminosity654_g170322 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170345 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170345 = ( _OverlayLumaRemap.y - temp_output_7_0_g170345 );
				float lerpResult587_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170345 ) / ( temp_output_10_0_g170345 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170322 = lerpResult587_g170322;
				half4 Model_VertexMasks791_g170322 = Out_VertexData15_g170328;
				float4 break792_g170322 = Model_VertexMasks791_g170322;
				float4 break33_g170336 = _overlay_vert_mode;
				float temp_output_30_0_g170336 = ( break792_g170322.x * break33_g170336.x );
				float temp_output_29_0_g170336 = ( break792_g170322.y * break33_g170336.y );
				float temp_output_31_0_g170336 = ( break792_g170322.z * break33_g170336.z );
				float temp_output_28_0_g170336 = ( temp_output_30_0_g170336 + temp_output_29_0_g170336 + temp_output_31_0_g170336 + ( break792_g170322.w * break33_g170336.w ) );
				float clampResult17_g170337 = clamp( temp_output_28_0_g170336 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170340 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170340 = ( _OverlayMeshRemap.y - temp_output_7_0_g170340 );
				float lerpResult881_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170337 - temp_output_7_0_g170340 ) / ( temp_output_10_0_g170340 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170347 = lerpResult881_g170322;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170347 = ( temp_output_6_0_g170347 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170347 = temp_output_6_0_g170347;
				#endif
				float temp_output_831_0_g170322 = staticSwitch14_g170347;
				half Overlay_VertMask801_g170322 = temp_output_831_0_g170322;
				half Overlay_MaskNoise427_g170322 = 1.0;
				TVEGlobalData Data15_g170324 = Data204_g169264;
				float Out_Dummy15_g170324 = 0;
				float4 Out_CoatParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170324 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170324 = Data15_g170324.Dummy;
				Out_CoatParams15_g170324 = Data15_g170324.CoatParams;
				Out_PaintParams15_g170324 = Data15_g170324.PaintParams;
				Out_GlowParams15_g170324 = Data15_g170324.GlowParams;
				Out_AtmoParams15_g170324= Data15_g170324.AtmoParams;
				Out_FadeParams15_g170324= Data15_g170324.FadeParams;
				Out_FormParams15_g170324 = Data15_g170324.FormParams;
				Out_LandParams15_g170324 = Data15_g170324.LandParams;
				Out_WindParams15_g170324 = Data15_g170324.WindParams;
				Out_PushParams15_g170324 = Data15_g170324.PushParams;
				}
				half4 Global_AtmoParams516_g170322 = Out_AtmoParams15_g170324;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170322 = ( (Global_AtmoParams516_g170322).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170322 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170322 = staticSwitch705_g170322;
				half Custom_Mask646_g170322 = 1.0;
				float temp_output_7_0_g170352 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170352 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170352 );
				half Overlay_Mask494_g170322 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170322 * Overlay_MaskProj457_g170322 * Overlay_MaskLuma438_g170322 * Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 * Custom_Mask646_g170322 ) - temp_output_7_0_g170352 ) / ( temp_output_10_0_g170352 + 0.0001 ) ) );
				float3 lerpResult467_g170322 = lerp( Visual_Albedo127_g170322 , ( staticSwitch14_g170334 + Overlay_GlitterColor865_g170322 ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170322 = lerpResult467_g170322;
				#else
				float3 staticSwitch577_g170322 = Visual_Albedo127_g170322;
				#endif
				half3 Final_Albedo493_g170322 = staticSwitch577_g170322;
				float3 In_Albedo3_g170325 = Final_Albedo493_g170322;
				half2 Visual_NormalTS535_g170322 = Out_NormalTS4_g170323;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170329) = _OverlayNormalTex;
				SamplerState Sampler238_g170329 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170329 = Overlay_Coords639_g170322;
				half4 Coords238_g170329 = temp_output_37_0_g170329;
				float3 temp_output_279_0_g170329 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170329 = temp_output_279_0_g170329;
				half4 localSamplePlanar2D238_g170329 = SamplePlanar2D( Texture238_g170329 , Sampler238_g170329 , Coords238_g170329 , WorldPosition238_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170329) = _OverlayNormalTex;
				SamplerState Sampler246_g170329 = sampler_Linear_Repeat;
				half4 Coords246_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition246_g170329 = temp_output_279_0_g170329;
				float3 temp_output_280_0_g170329 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170329 = temp_output_280_0_g170329;
				half4 localSamplePlanar3D246_g170329 = SamplePlanar3D( Texture246_g170329 , Sampler246_g170329 , Coords246_g170329 , WorldPosition246_g170329 , WorldNormal246_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170329) = _OverlayNormalTex;
				SamplerState Sampler234_g170329 = sampler_Linear_Repeat;
				float4 Coords234_g170329 = temp_output_37_0_g170329;
				float3 WorldPosition234_g170329 = temp_output_279_0_g170329;
				float4 localSampleStochastic2D234_g170329 = SampleStochastic2D( Texture234_g170329 , Sampler234_g170329 , Coords234_g170329 , WorldPosition234_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170329) = _OverlayNormalTex;
				SamplerState Sampler263_g170329 = sampler_Linear_Repeat;
				half4 Coords263_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition263_g170329 = temp_output_279_0_g170329;
				half3 WorldNormal263_g170329 = temp_output_280_0_g170329;
				half4 localSampleStochastic3D263_g170329 = SampleStochastic3D( Texture263_g170329 , Sampler263_g170329 , Coords263_g170329 , WorldPosition263_g170329 , WorldNormal263_g170329 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170322 = localSamplePlanar3D246_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170322 = localSampleStochastic2D234_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170322 = localSampleStochastic3D263_g170329;
				#else
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#endif
				half4 Normal_Packed45_g170333 = staticSwitch686_g170322;
				float2 appendResult58_g170333 = (float2(( (Normal_Packed45_g170333).x * (Normal_Packed45_g170333).w ) , (Normal_Packed45_g170333).y));
				half2 Normal_Default50_g170333 = appendResult58_g170333;
				half2 Normal_ASTC41_g170333 = (Normal_Packed45_g170333).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170333 = Normal_ASTC41_g170333;
				#else
				float2 staticSwitch38_g170333 = Normal_Default50_g170333;
				#endif
				half2 Normal_NO_DTX544_g170333 = (Normal_Packed45_g170333).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170333 = Normal_NO_DTX544_g170333;
				#else
				float2 staticSwitch37_g170333 = staticSwitch38_g170333;
				#endif
				half2 Normal_Planar45_g170332 = (staticSwitch37_g170333*2.0 + -1.0);
				float2 break71_g170332 = Normal_Planar45_g170332;
				float3 appendResult72_g170332 = (float3(break71_g170332.x , 0.0 , break71_g170332.y));
				half2 Overlay_Normal528_g170322 = (mul( ase_worldToTangent, appendResult72_g170332 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170322 = Overlay_Normal528_g170322;
				#else
				float2 staticSwitch579_g170322 = Visual_NormalTS535_g170322;
				#endif
				float2 lerpResult551_g170322 = lerp( Visual_NormalTS535_g170322 , ( staticSwitch579_g170322 * _OverlayNormalValue ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170322 = lerpResult551_g170322;
				#else
				float2 staticSwitch583_g170322 = Visual_NormalTS535_g170322;
				#endif
				half2 Final_NormalTS499_g170322 = staticSwitch583_g170322;
				float2 In_NormalTS3_g170325 = Final_NormalTS499_g170322;
				float3 In_NormalWS3_g170325 = temp_output_739_21_g170322;
				half4 Visual_Masks536_g170322 = Out_Shader4_g170323;
				float4 appendResult585_g170322 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170322 = lerp( Visual_Masks536_g170322 , appendResult585_g170322 , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170322 = lerpResult584_g170322;
				#else
				float4 staticSwitch586_g170322 = Visual_Masks536_g170322;
				#endif
				half4 Final_Masks482_g170322 = staticSwitch586_g170322;
				float4 In_Shader3_g170325 = Final_Masks482_g170322;
				float4 In_Emissive3_g170325 = Out_Emissive4_g170323;
				float temp_output_739_12_g170322 = Out_Grayscale4_g170323;
				float In_Grayscale3_g170325 = temp_output_739_12_g170322;
				float In_Luminosity3_g170325 = temp_output_739_15_g170322;
				float In_MultiMask3_g170325 = Out_MultiMask4_g170323;
				float In_AlphaClip3_g170325 = Out_AlphaClip4_g170323;
				float In_AlphaFade3_g170325 = Out_AlphaFade4_g170323;
				float3 In_Translucency3_g170325 = Out_Translucency4_g170323;
				half Visual_Transmission699_g170322 = Out_Transmission4_g170323;
				float lerpResult746_g170322 = lerp( Visual_Transmission699_g170322 , ( Visual_Transmission699_g170322 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170322 = lerpResult746_g170322;
				#else
				float staticSwitch703_g170322 = Visual_Transmission699_g170322;
				#endif
				half Final_Transmission702_g170322 = staticSwitch703_g170322;
				float In_Transmission3_g170325 = Final_Transmission702_g170322;
				float In_Thickness3_g170325 = Out_Thickness4_g170323;
				float In_Diffusion3_g170325 = Out_Diffusion4_g170323;
				{
				Data3_g170325.Dummy = In_Dummy3_g170325;
				Data3_g170325.Albedo = In_Albedo3_g170325;
				Data3_g170325.NormalTS = In_NormalTS3_g170325;
				Data3_g170325.NormalWS = In_NormalWS3_g170325;
				Data3_g170325.Shader = In_Shader3_g170325;
				Data3_g170325.Emissive= In_Emissive3_g170325;
				Data3_g170325.MultiMask = In_MultiMask3_g170325;
				Data3_g170325.Grayscale = In_Grayscale3_g170325;
				Data3_g170325.Luminosity = In_Luminosity3_g170325;
				Data3_g170325.AlphaClip = In_AlphaClip3_g170325;
				Data3_g170325.AlphaFade = In_AlphaFade3_g170325;
				Data3_g170325.Translucency = In_Translucency3_g170325;
				Data3_g170325.Transmission = In_Transmission3_g170325;
				Data3_g170325.Thickness = In_Thickness3_g170325;
				Data3_g170325.Diffusion = In_Diffusion3_g170325;
				}
				TVEVisualData Data4_g170359 = Data3_g170325;
				float Out_Dummy4_g170359 = 0;
				float3 Out_Albedo4_g170359 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170359 = float2( 0,0 );
				float3 Out_NormalWS4_g170359 = float3( 0,0,0 );
				float4 Out_Shader4_g170359 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170359 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170359 = 0;
				float Out_Grayscale4_g170359 = 0;
				float Out_Luminosity4_g170359 = 0;
				float Out_AlphaClip4_g170359 = 0;
				float Out_AlphaFade4_g170359 = 0;
				float3 Out_Translucency4_g170359 = float3( 0,0,0 );
				float Out_Transmission4_g170359 = 0;
				float Out_Thickness4_g170359 = 0;
				float Out_Diffusion4_g170359 = 0;
				{
				Out_Dummy4_g170359 = Data4_g170359.Dummy;
				Out_Albedo4_g170359 = Data4_g170359.Albedo;
				Out_NormalTS4_g170359 = Data4_g170359.NormalTS;
				Out_NormalWS4_g170359 = Data4_g170359.NormalWS;
				Out_Shader4_g170359 = Data4_g170359.Shader;
				Out_Emissive4_g170359= Data4_g170359.Emissive;
				Out_MultiMask4_g170359 = Data4_g170359.MultiMask;
				Out_Grayscale4_g170359 = Data4_g170359.Grayscale;
				Out_Luminosity4_g170359= Data4_g170359.Luminosity;
				Out_AlphaClip4_g170359 = Data4_g170359.AlphaClip;
				Out_AlphaFade4_g170359 = Data4_g170359.AlphaFade;
				Out_Translucency4_g170359 = Data4_g170359.Translucency;
				Out_Transmission4_g170359 = Data4_g170359.Transmission;
				Out_Thickness4_g170359 = Data4_g170359.Thickness;
				Out_Diffusion4_g170359 = Data4_g170359.Diffusion;
				}
				half3 Visual_Albedo127_g170358 = Out_Albedo4_g170359;
				TVEGlobalData Data15_g170371 = Data204_g169264;
				float Out_Dummy15_g170371 = 0;
				float4 Out_CoatParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_CoatParams15_g170371 = Data15_g170371.CoatParams;
				Out_PaintParams15_g170371 = Data15_g170371.PaintParams;
				Out_GlowParams15_g170371 = Data15_g170371.GlowParams;
				Out_AtmoParams15_g170371= Data15_g170371.AtmoParams;
				Out_FadeParams15_g170371= Data15_g170371.FadeParams;
				Out_FormParams15_g170371 = Data15_g170371.FormParams;
				Out_LandParams15_g170371 = Data15_g170371.LandParams;
				Out_WindParams15_g170371 = Data15_g170371.WindParams;
				Out_PushParams15_g170371 = Data15_g170371.PushParams;
				}
				half4 Global_AtmoParams516_g170358 = Out_AtmoParams15_g170371;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170358 = ( (Global_AtmoParams516_g170358).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170358 = 1.0;
				#endif
				half Global_Wetness429_g170358 = staticSwitch663_g170358;
				half Wetness_Value866_g170358 = ( _WetnessIntensityValue * Global_Wetness429_g170358 );
				half4 Visual_Masks536_g170358 = Out_Shader4_g170359;
				float temp_output_757_0_g170358 = (Visual_Masks536_g170358).z;
				half Water_HeightMask782_g170358 = temp_output_757_0_g170358;
				float clampResult17_g170369 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170358 ) - Water_HeightMask782_g170358 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170370 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170370 );
				TVEModelData Data15_g170361 = Data16_g169262;
				float Out_Dummy15_g170361 = 0;
				float3 Out_PositionOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170361 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170361 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170361 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170361 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170361 = float3( 0,0,0 );
				float4 Out_VertexData15_g170361 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170361 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170361 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170361 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170361 = Data15_g170361.Dummy;
				Out_PositionOS15_g170361 = Data15_g170361.PositionOS;
				Out_PositionWS15_g170361 = Data15_g170361.PositionWS;
				Out_PositionWO15_g170361 = Data15_g170361.PositionWO;
				Out_PositionRawOS15_g170361 = Data15_g170361.PositionRawOS;
				Out_PositionAddOS15_g170361 = Data15_g170361.PositionAddOS;
				Out_PivotOS15_g170361 = Data15_g170361.PivotOS;
				Out_PivotWS15_g170361 = Data15_g170361.PivotWS;
				Out_PivotWO15_g170361 = Data15_g170361.PivotWO;
				Out_NormalOS15_g170361 = Data15_g170361.NormalOS;
				Out_NormalWS15_g170361 = Data15_g170361.NormalWS;
				Out_NormalRawOS15_g170361 = Data15_g170361.NormalRawOS;
				Out_NormalRawWS15_g170361 = Data15_g170361.NormalRawWS;
				Out_TangentOS15_g170361 = Data15_g170361.TangentOS;
				Out_ViewDirWS15_g170361 = Data15_g170361.ViewDirWS;
				Out_VertexData15_g170361 = Data15_g170361.VertexData;
				Out_MotionData15_g170361 = Data15_g170361.MotionData;
				Out_BoundsData15_g170361 = Data15_g170361.BoundsData;
				Out_RotationData15_g170361 = Data15_g170361.RotationData;
				}
				half3 Model_NormalWS798_g170358 = Out_NormalWS15_g170361;
				float temp_output_786_0_g170358 = saturate( (Model_NormalWS798_g170358).y );
				half Wetness_ProjMask790_g170358 = temp_output_786_0_g170358;
				half Water_Mask760_g170358 = ( saturate( ( ( clampResult17_g170369 - temp_output_7_0_g170370 ) / ( temp_output_10_0_g170370 + 0.0001 ) ) ) * Wetness_ProjMask790_g170358 );
				float3 lerpResult918_g170358 = lerp( Visual_Albedo127_g170358 , ( Visual_Albedo127_g170358 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170358 = lerpResult918_g170358;
				#else
				float3 staticSwitch946_g170358 = Visual_Albedo127_g170358;
				#endif
				float3 lerpResult768_g170358 = lerp( staticSwitch946_g170358 , ( staticSwitch946_g170358 * staticSwitch946_g170358 ) , _WetnessContrastValue);
				float3 lerpResult651_g170358 = lerp( Visual_Albedo127_g170358 , lerpResult768_g170358 , Wetness_Value866_g170358);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170358 = lerpResult651_g170358;
				#else
				float3 staticSwitch577_g170358 = Visual_Albedo127_g170358;
				#endif
				half3 Final_Albedo493_g170358 = staticSwitch577_g170358;
				float3 In_Albedo3_g170360 = Final_Albedo493_g170358;
				half2 Visual_Normal535_g170358 = Out_NormalTS4_g170359;
				float lerpResult877_g170358 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170358 = ( Visual_Normal535_g170358 * lerpResult877_g170358 );
				#else
				float2 staticSwitch957_g170358 = Visual_Normal535_g170358;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170363) = _WetnessDropsTex;
				SamplerState Sampler238_g170363 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170358 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170363 = appendResult924_g170358;
				half4 Coords238_g170363 = temp_output_37_0_g170363;
				half3 Model_PositionWO602_g170358 = Out_PositionWO15_g170361;
				float3 temp_output_279_0_g170363 = Model_PositionWO602_g170358;
				half3 WorldPosition238_g170363 = temp_output_279_0_g170363;
				half4 localSamplePlanar2D238_g170363 = SamplePlanar2D( Texture238_g170363 , Sampler238_g170363 , Coords238_g170363 , WorldPosition238_g170363 );
				float4 temp_output_676_0_g170358 = localSamplePlanar2D238_g170363;
				half2 Rain_DropsNormal919_g170358 = (temp_output_676_0_g170358).zw;
				float2 temp_output_903_0_g170358 = (Rain_DropsNormal919_g170358*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170358 = (temp_output_676_0_g170358).xy;
				float2 lerpResult904_g170358 = lerp( temp_output_903_0_g170358 , (Rain_RingsNormal713_g170358*2.0 + -1.0) , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170358 = lerpResult904_g170358;
				#else
				float2 staticSwitch960_g170358 = temp_output_903_0_g170358;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170358 = ( (Global_AtmoParams516_g170358).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170358 = 1.0;
				#endif
				half Global_Rain955_g170358 = staticSwitch949_g170358;
				half3 Model_PositionWS823_g170358 = Out_PositionWS15_g170361;
				half2 Normal_Planar45_g170374 = ( staticSwitch960_g170358 * Global_Rain955_g170358 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170358 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				half2 Wetness_Normal526_g170358 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170358 = ( staticSwitch957_g170358 + ( Wetness_ProjMask790_g170358 * Wetness_Normal526_g170358 ) );
				#else
				float2 staticSwitch583_g170358 = Visual_Normal535_g170358;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170358 = staticSwitch583_g170358;
				#else
				float2 staticSwitch774_g170358 = Visual_Normal535_g170358;
				#endif
				half2 Final_Normal499_g170358 = staticSwitch774_g170358;
				float2 In_NormalTS3_g170360 = Final_Normal499_g170358;
				float3 In_NormalWS3_g170360 = Out_NormalWS4_g170359;
				float4 break658_g170358 = Visual_Masks536_g170358;
				float temp_output_935_0_g170358 = ( Wetness_Value866_g170358 * _WetnessSmoothnessValue );
				float lerpResult941_g170358 = lerp( temp_output_935_0_g170358 , 2.0 , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170358 = lerpResult941_g170358;
				#else
				float staticSwitch959_g170358 = temp_output_935_0_g170358;
				#endif
				float4 appendResult661_g170358 = (float4(break658_g170358.x , break658_g170358.y , break658_g170358.z , saturate( ( break658_g170358.w + staticSwitch959_g170358 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170358 = appendResult661_g170358;
				#else
				float4 staticSwitch586_g170358 = Visual_Masks536_g170358;
				#endif
				half4 Final_Masks482_g170358 = staticSwitch586_g170358;
				float4 In_Shader3_g170360 = Final_Masks482_g170358;
				float4 In_Emissive3_g170360 = Out_Emissive4_g170359;
				float In_Grayscale3_g170360 = Out_Grayscale4_g170359;
				float In_Luminosity3_g170360 = Out_Luminosity4_g170359;
				float In_MultiMask3_g170360 = Out_MultiMask4_g170359;
				float In_AlphaClip3_g170360 = Out_AlphaClip4_g170359;
				float In_AlphaFade3_g170360 = Out_AlphaFade4_g170359;
				float3 In_Translucency3_g170360 = Out_Translucency4_g170359;
				float In_Transmission3_g170360 = Out_Transmission4_g170359;
				float In_Thickness3_g170360 = Out_Thickness4_g170359;
				float In_Diffusion3_g170360 = Out_Diffusion4_g170359;
				{
				Data3_g170360.Dummy = In_Dummy3_g170360;
				Data3_g170360.Albedo = In_Albedo3_g170360;
				Data3_g170360.NormalTS = In_NormalTS3_g170360;
				Data3_g170360.NormalWS = In_NormalWS3_g170360;
				Data3_g170360.Shader = In_Shader3_g170360;
				Data3_g170360.Emissive= In_Emissive3_g170360;
				Data3_g170360.MultiMask = In_MultiMask3_g170360;
				Data3_g170360.Grayscale = In_Grayscale3_g170360;
				Data3_g170360.Luminosity = In_Luminosity3_g170360;
				Data3_g170360.AlphaClip = In_AlphaClip3_g170360;
				Data3_g170360.AlphaFade = In_AlphaFade3_g170360;
				Data3_g170360.Translucency = In_Translucency3_g170360;
				Data3_g170360.Transmission = In_Transmission3_g170360;
				Data3_g170360.Thickness = In_Thickness3_g170360;
				Data3_g170360.Diffusion = In_Diffusion3_g170360;
				}
				TVEVisualData Data4_g170377 = Data3_g170360;
				float Out_Dummy4_g170377 = 0;
				float3 Out_Albedo4_g170377 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170377 = float2( 0,0 );
				float3 Out_NormalWS4_g170377 = float3( 0,0,0 );
				float4 Out_Shader4_g170377 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170377 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170377 = 0;
				float Out_Grayscale4_g170377 = 0;
				float Out_Luminosity4_g170377 = 0;
				float Out_AlphaClip4_g170377 = 0;
				float Out_AlphaFade4_g170377 = 0;
				float3 Out_Translucency4_g170377 = float3( 0,0,0 );
				float Out_Transmission4_g170377 = 0;
				float Out_Thickness4_g170377 = 0;
				float Out_Diffusion4_g170377 = 0;
				{
				Out_Dummy4_g170377 = Data4_g170377.Dummy;
				Out_Albedo4_g170377 = Data4_g170377.Albedo;
				Out_NormalTS4_g170377 = Data4_g170377.NormalTS;
				Out_NormalWS4_g170377 = Data4_g170377.NormalWS;
				Out_Shader4_g170377 = Data4_g170377.Shader;
				Out_Emissive4_g170377= Data4_g170377.Emissive;
				Out_MultiMask4_g170377 = Data4_g170377.MultiMask;
				Out_Grayscale4_g170377 = Data4_g170377.Grayscale;
				Out_Luminosity4_g170377= Data4_g170377.Luminosity;
				Out_AlphaClip4_g170377 = Data4_g170377.AlphaClip;
				Out_AlphaFade4_g170377 = Data4_g170377.AlphaFade;
				Out_Translucency4_g170377 = Data4_g170377.Translucency;
				Out_Transmission4_g170377 = Data4_g170377.Transmission;
				Out_Thickness4_g170377 = Data4_g170377.Thickness;
				Out_Diffusion4_g170377 = Data4_g170377.Diffusion;
				}
				float3 In_Albedo3_g170378 = Out_Albedo4_g170377;
				float2 In_NormalTS3_g170378 = Out_NormalTS4_g170377;
				float3 In_NormalWS3_g170378 = Out_NormalWS4_g170377;
				float4 In_Shader3_g170378 = Out_Shader4_g170377;
				float4 In_Emissive3_g170378 = Out_Emissive4_g170377;
				float In_Grayscale3_g170378 = Out_Grayscale4_g170377;
				float In_Luminosity3_g170378 = Out_Luminosity4_g170377;
				float temp_output_571_11_g170376 = Out_MultiMask4_g170377;
				float In_MultiMask3_g170378 = temp_output_571_11_g170376;
				half Visual_AlphaClip667_g170376 = Out_AlphaClip4_g170377;
				TVEGlobalData Data15_g170388 = Data204_g169264;
				float Out_Dummy15_g170388 = 0;
				float4 Out_CoatParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170388 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170388 = Data15_g170388.Dummy;
				Out_CoatParams15_g170388 = Data15_g170388.CoatParams;
				Out_PaintParams15_g170388 = Data15_g170388.PaintParams;
				Out_GlowParams15_g170388 = Data15_g170388.GlowParams;
				Out_AtmoParams15_g170388= Data15_g170388.AtmoParams;
				Out_FadeParams15_g170388= Data15_g170388.FadeParams;
				Out_FormParams15_g170388 = Data15_g170388.FormParams;
				Out_LandParams15_g170388 = Data15_g170388.LandParams;
				Out_WindParams15_g170388 = Data15_g170388.WindParams;
				Out_PushParams15_g170388 = Data15_g170388.PushParams;
				}
				half4 Global_FadeParams516_g170376 = Out_FadeParams15_g170388;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170376 = saturate( (Global_FadeParams516_g170376).w );
				#else
				float staticSwitch663_g170376 = 1.0;
				#endif
				half Local_GlobalMask429_g170376 = staticSwitch663_g170376;
				float lerpResult811_g170376 = lerp( 1.0 , Visual_AlphaClip667_g170376 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170376 = lerpResult811_g170376;
				TVEModelData Data15_g170379 = Data16_g169262;
				float Out_Dummy15_g170379 = 0;
				float3 Out_PositionOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170379 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170379 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170379 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170379 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170379 = float3( 0,0,0 );
				float4 Out_VertexData15_g170379 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170379 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170379 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170379 = Data15_g170379.Dummy;
				Out_PositionOS15_g170379 = Data15_g170379.PositionOS;
				Out_PositionWS15_g170379 = Data15_g170379.PositionWS;
				Out_PositionWO15_g170379 = Data15_g170379.PositionWO;
				Out_PositionRawOS15_g170379 = Data15_g170379.PositionRawOS;
				Out_PositionAddOS15_g170379 = Data15_g170379.PositionAddOS;
				Out_PivotOS15_g170379 = Data15_g170379.PivotOS;
				Out_PivotWS15_g170379 = Data15_g170379.PivotWS;
				Out_PivotWO15_g170379 = Data15_g170379.PivotWO;
				Out_NormalOS15_g170379 = Data15_g170379.NormalOS;
				Out_NormalWS15_g170379 = Data15_g170379.NormalWS;
				Out_NormalRawOS15_g170379 = Data15_g170379.NormalRawOS;
				Out_NormalRawWS15_g170379 = Data15_g170379.NormalRawWS;
				Out_TangentOS15_g170379 = Data15_g170379.TangentOS;
				Out_ViewDirWS15_g170379 = Data15_g170379.ViewDirWS;
				Out_VertexData15_g170379 = Data15_g170379.VertexData;
				Out_MotionData15_g170379 = Data15_g170379.MotionData;
				Out_BoundsData15_g170379 = Data15_g170379.BoundsData;
				Out_RotationData15_g170379 = Data15_g170379.RotationData;
				}
				half3 Model_PositionWO602_g170376 = Out_PositionWO15_g170379;
				float4 tex3DNode60_g170382 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170376 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170376 = lerp( 1.0 , tex3DNode60_g170382.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170376 = lerpResult673_g170376;
				half4 Model_VertexMasks752_g170376 = Out_VertexData15_g170379;
				float4 break755_g170376 = Model_VertexMasks752_g170376;
				float4 break33_g170380 = _cutout_vert_mode;
				float temp_output_30_0_g170380 = ( break755_g170376.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break755_g170376.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break755_g170376.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break755_g170376.w * break33_g170380.w ) );
				float clampResult17_g170381 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170384 = ( _CutoutMeshRemap.y - temp_output_7_0_g170384 );
				float lerpResult820_g170376 = lerp( 1.0 , saturate( ( ( clampResult17_g170381 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170385 = lerpResult820_g170376;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170385 = ( temp_output_6_0_g170385 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170385 = temp_output_6_0_g170385;
				#endif
				float temp_output_801_0_g170376 = staticSwitch14_g170385;
				half Local_VertMask766_g170376 = temp_output_801_0_g170376;
				half Visual_MultiMask671_g170376 = temp_output_571_11_g170376;
				float lerpResult683_g170376 = lerp( 1.0 , Visual_MultiMask671_g170376 , _CutoutMultiValue);
				half Local_MultiMask685_g170376 = lerpResult683_g170376;
				float lerpResult728_g170376 = lerp( Visual_AlphaClip667_g170376 , min( Visual_AlphaClip667_g170376 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170376 ) - ( Local_AlphaMask814_g170376 * Local_NoiseMask678_g170376 * Local_VertMask766_g170376 ) ) ) ) , Local_MultiMask685_g170376);
				half Local_AlphaClip784_g170376 = lerpResult728_g170376;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170376 = Local_AlphaClip784_g170376;
				#else
				float staticSwitch577_g170376 = Visual_AlphaClip667_g170376;
				#endif
				half Final_AlphaClip795_g170376 = staticSwitch577_g170376;
				float In_AlphaClip3_g170378 = Final_AlphaClip795_g170376;
				float In_AlphaFade3_g170378 = Out_AlphaFade4_g170377;
				float3 In_Translucency3_g170378 = Out_Translucency4_g170377;
				float In_Transmission3_g170378 = Out_Transmission4_g170377;
				float In_Thickness3_g170378 = Out_Thickness4_g170377;
				float In_Diffusion3_g170378 = Out_Diffusion4_g170377;
				{
				Data3_g170378.Dummy = In_Dummy3_g170378;
				Data3_g170378.Albedo = In_Albedo3_g170378;
				Data3_g170378.NormalTS = In_NormalTS3_g170378;
				Data3_g170378.NormalWS = In_NormalWS3_g170378;
				Data3_g170378.Shader = In_Shader3_g170378;
				Data3_g170378.Emissive= In_Emissive3_g170378;
				Data3_g170378.MultiMask = In_MultiMask3_g170378;
				Data3_g170378.Grayscale = In_Grayscale3_g170378;
				Data3_g170378.Luminosity = In_Luminosity3_g170378;
				Data3_g170378.AlphaClip = In_AlphaClip3_g170378;
				Data3_g170378.AlphaFade = In_AlphaFade3_g170378;
				Data3_g170378.Translucency = In_Translucency3_g170378;
				Data3_g170378.Transmission = In_Transmission3_g170378;
				Data3_g170378.Thickness = In_Thickness3_g170378;
				Data3_g170378.Diffusion = In_Diffusion3_g170378;
				}
				TVEVisualData Data4_g170392 = Data3_g170378;
				float Out_Dummy4_g170392 = 0;
				float3 Out_Albedo4_g170392 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170392 = float2( 0,0 );
				float3 Out_NormalWS4_g170392 = float3( 0,0,0 );
				float4 Out_Shader4_g170392 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170392 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170392 = 0;
				float Out_Grayscale4_g170392 = 0;
				float Out_Luminosity4_g170392 = 0;
				float Out_AlphaClip4_g170392 = 0;
				float Out_AlphaFade4_g170392 = 0;
				float3 Out_Translucency4_g170392 = float3( 0,0,0 );
				float Out_Transmission4_g170392 = 0;
				float Out_Thickness4_g170392 = 0;
				float Out_Diffusion4_g170392 = 0;
				{
				Out_Dummy4_g170392 = Data4_g170392.Dummy;
				Out_Albedo4_g170392 = Data4_g170392.Albedo;
				Out_NormalTS4_g170392 = Data4_g170392.NormalTS;
				Out_NormalWS4_g170392 = Data4_g170392.NormalWS;
				Out_Shader4_g170392 = Data4_g170392.Shader;
				Out_Emissive4_g170392= Data4_g170392.Emissive;
				Out_MultiMask4_g170392 = Data4_g170392.MultiMask;
				Out_Grayscale4_g170392 = Data4_g170392.Grayscale;
				Out_Luminosity4_g170392= Data4_g170392.Luminosity;
				Out_AlphaClip4_g170392 = Data4_g170392.AlphaClip;
				Out_AlphaFade4_g170392 = Data4_g170392.AlphaFade;
				Out_Translucency4_g170392 = Data4_g170392.Translucency;
				Out_Transmission4_g170392 = Data4_g170392.Transmission;
				Out_Thickness4_g170392 = Data4_g170392.Thickness;
				Out_Diffusion4_g170392 = Data4_g170392.Diffusion;
				}
				float3 In_Albedo3_g170393 = Out_Albedo4_g170392;
				float2 In_NormalTS3_g170393 = Out_NormalTS4_g170392;
				float3 In_NormalWS3_g170393 = Out_NormalWS4_g170392;
				float4 In_Shader3_g170393 = Out_Shader4_g170392;
				float4 In_Emissive3_g170393 = Out_Emissive4_g170392;
				float In_Grayscale3_g170393 = Out_Grayscale4_g170392;
				float In_Luminosity3_g170393 = Out_Luminosity4_g170392;
				float temp_output_821_11_g170389 = Out_MultiMask4_g170392;
				float In_MultiMask3_g170393 = temp_output_821_11_g170389;
				half Visual_AlphaClip754_g170389 = Out_AlphaClip4_g170392;
				half Dither_Constant768_g170389 = _DitherConstantValue;
				float temp_output_756_0_g170389 = distance( worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170389 = ( ( 1.0 - saturate( ( temp_output_756_0_g170389 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170391 = Data16_g169262;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionWS776_g170389 = Out_PositionWS15_g170391;
				float temp_output_7_0_g170398 = _DitherDistanceMinValue;
				float temp_output_10_0_g170398 = ( _DitherDistanceMaxValue - temp_output_7_0_g170398 );
				half Dither_Distance856_g170389 = ( saturate( ( ( distance( Model_PositionWS776_g170389 , _WorldSpaceCameraPos ) - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170389 = Out_ViewDirWS15_g170391;
				float3 normalizeResult792_g170389 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170389 = dot( Model_ViewDirWS845_g170389 , normalizeResult792_g170389 );
				half Dither_Glancing784_g170389 = ( saturate( ( ( 1.0 - abs( dotResult778_g170389 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170389 = max( max( max( Dither_Constant768_g170389 , Dither_Proximity767_g170389 ) , Dither_Distance856_g170389 ) , Dither_Glancing784_g170389 );
				half3 Model_PositionWO602_g170389 = Out_PositionWO15_g170391;
				float4 tex3DNode60_g170396 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170389 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170389 = tex3DNode60_g170396.r;
				half Visual_MultiMask671_g170389 = temp_output_821_11_g170389;
				float lerpResult683_g170389 = lerp( 1.0 , Visual_MultiMask671_g170389 , _DitherMultiValue);
				half Local_MaskMulti685_g170389 = lerpResult683_g170389;
				float lerpResult728_g170389 = lerp( Visual_AlphaClip754_g170389 , min( Visual_AlphaClip754_g170389 , ( -0.001 - ( Dither_Value429_g170389 - Local_MaskNoise678_g170389 ) ) ) , Local_MaskMulti685_g170389);
				half Local_AlphaClip834_g170389 = lerpResult728_g170389;
				#ifdef TVE_DITHER
				float staticSwitch577_g170389 = Local_AlphaClip834_g170389;
				#else
				float staticSwitch577_g170389 = Visual_AlphaClip754_g170389;
				#endif
				half Final_AlphaClip493_g170389 = staticSwitch577_g170389;
				float In_AlphaClip3_g170393 = Final_AlphaClip493_g170389;
				float In_AlphaFade3_g170393 = Out_AlphaFade4_g170392;
				float3 In_Translucency3_g170393 = Out_Translucency4_g170392;
				float In_Transmission3_g170393 = Out_Transmission4_g170392;
				float In_Thickness3_g170393 = Out_Thickness4_g170392;
				float In_Diffusion3_g170393 = Out_Diffusion4_g170392;
				{
				Data3_g170393.Dummy = In_Dummy3_g170393;
				Data3_g170393.Albedo = In_Albedo3_g170393;
				Data3_g170393.NormalTS = In_NormalTS3_g170393;
				Data3_g170393.NormalWS = In_NormalWS3_g170393;
				Data3_g170393.Shader = In_Shader3_g170393;
				Data3_g170393.Emissive= In_Emissive3_g170393;
				Data3_g170393.MultiMask = In_MultiMask3_g170393;
				Data3_g170393.Grayscale = In_Grayscale3_g170393;
				Data3_g170393.Luminosity = In_Luminosity3_g170393;
				Data3_g170393.AlphaClip = In_AlphaClip3_g170393;
				Data3_g170393.AlphaFade = In_AlphaFade3_g170393;
				Data3_g170393.Translucency = In_Translucency3_g170393;
				Data3_g170393.Transmission = In_Transmission3_g170393;
				Data3_g170393.Thickness = In_Thickness3_g170393;
				Data3_g170393.Diffusion = In_Diffusion3_g170393;
				}
				TVEVisualData Data4_g170418 = Data3_g170393;
				float Out_Dummy4_g170418 = 0;
				float3 Out_Albedo4_g170418 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170418 = float2( 0,0 );
				float3 Out_NormalWS4_g170418 = float3( 0,0,0 );
				float4 Out_Shader4_g170418 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170418 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170418 = 0;
				float Out_Grayscale4_g170418 = 0;
				float Out_Luminosity4_g170418 = 0;
				float Out_AlphaClip4_g170418 = 0;
				float Out_AlphaFade4_g170418 = 0;
				float3 Out_Translucency4_g170418 = float3( 0,0,0 );
				float Out_Transmission4_g170418 = 0;
				float Out_Thickness4_g170418 = 0;
				float Out_Diffusion4_g170418 = 0;
				{
				Out_Dummy4_g170418 = Data4_g170418.Dummy;
				Out_Albedo4_g170418 = Data4_g170418.Albedo;
				Out_NormalTS4_g170418 = Data4_g170418.NormalTS;
				Out_NormalWS4_g170418 = Data4_g170418.NormalWS;
				Out_Shader4_g170418 = Data4_g170418.Shader;
				Out_Emissive4_g170418= Data4_g170418.Emissive;
				Out_MultiMask4_g170418 = Data4_g170418.MultiMask;
				Out_Grayscale4_g170418 = Data4_g170418.Grayscale;
				Out_Luminosity4_g170418= Data4_g170418.Luminosity;
				Out_AlphaClip4_g170418 = Data4_g170418.AlphaClip;
				Out_AlphaFade4_g170418 = Data4_g170418.AlphaFade;
				Out_Translucency4_g170418 = Data4_g170418.Translucency;
				Out_Transmission4_g170418 = Data4_g170418.Transmission;
				Out_Thickness4_g170418 = Data4_g170418.Thickness;
				Out_Diffusion4_g170418 = Data4_g170418.Diffusion;
				}
				float3 temp_output_297_0_g170407 = Out_Albedo4_g170418;
				float3 In_Albedo3_g170419 = temp_output_297_0_g170407;
				float2 In_NormalTS3_g170419 = Out_NormalTS4_g170418;
				float3 In_NormalWS3_g170419 = Out_NormalWS4_g170418;
				float4 In_Shader3_g170419 = Out_Shader4_g170418;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170407 = Out_Emissive4_g170418;
				TVEModelData Data15_g170408 = Data16_g169262;
				float Out_Dummy15_g170408 = 0;
				float3 Out_PositionOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170408 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170408 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170408 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170408 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170408 = float3( 0,0,0 );
				float4 Out_VertexData15_g170408 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170408 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170408 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170408 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170408 = Data15_g170408.Dummy;
				Out_PositionOS15_g170408 = Data15_g170408.PositionOS;
				Out_PositionWS15_g170408 = Data15_g170408.PositionWS;
				Out_PositionWO15_g170408 = Data15_g170408.PositionWO;
				Out_PositionRawOS15_g170408 = Data15_g170408.PositionRawOS;
				Out_PositionAddOS15_g170408 = Data15_g170408.PositionAddOS;
				Out_PivotOS15_g170408 = Data15_g170408.PivotOS;
				Out_PivotWS15_g170408 = Data15_g170408.PivotWS;
				Out_PivotWO15_g170408 = Data15_g170408.PivotWO;
				Out_NormalOS15_g170408 = Data15_g170408.NormalOS;
				Out_NormalWS15_g170408 = Data15_g170408.NormalWS;
				Out_NormalRawOS15_g170408 = Data15_g170408.NormalRawOS;
				Out_NormalRawWS15_g170408 = Data15_g170408.NormalRawWS;
				Out_TangentOS15_g170408 = Data15_g170408.TangentOS;
				Out_ViewDirWS15_g170408 = Data15_g170408.ViewDirWS;
				Out_VertexData15_g170408 = Data15_g170408.VertexData;
				Out_MotionData15_g170408 = Data15_g170408.MotionData;
				Out_BoundsData15_g170408 = Data15_g170408.BoundsData;
				Out_RotationData15_g170408 = Data15_g170408.RotationData;
				}
				half4 Model_VertexMasks216_g170407 = Out_VertexData15_g170408;
				float4 break251_g170407 = Model_VertexMasks216_g170407;
				float4 break33_g170412 = _emissive_vert_mode;
				float temp_output_30_0_g170412 = ( break251_g170407.x * break33_g170412.x );
				float temp_output_29_0_g170412 = ( break251_g170407.y * break33_g170412.y );
				float temp_output_31_0_g170412 = ( break251_g170407.z * break33_g170412.z );
				float temp_output_28_0_g170412 = ( temp_output_30_0_g170412 + temp_output_29_0_g170412 + temp_output_31_0_g170412 + ( break251_g170407.w * break33_g170412.w ) );
				float clampResult17_g170411 = clamp( temp_output_28_0_g170412 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170415 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170415 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170415 );
				float lerpResult303_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170415 ) / ( temp_output_10_0_g170415 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170421 = lerpResult303_g170407;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_263_0_g170407 = staticSwitch14_g170421;
				half Emissive_MeshMask221_g170407 = temp_output_263_0_g170407;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170410) = _EmissiveMaskTex;
				SamplerState Sampler276_g170410 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170416 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170416 = ( temp_output_6_0_g170416 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170416 = temp_output_6_0_g170416;
				#endif
				half4 Emissive_Coords167_g170407 = staticSwitch14_g170416;
				float4 temp_output_37_0_g170410 = Emissive_Coords167_g170407;
				half4 Coords276_g170410 = temp_output_37_0_g170410;
				half2 TexCoord276_g170410 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170410 = SampleMain( Texture276_g170410 , Sampler276_g170410 , Coords276_g170410 , TexCoord276_g170410 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170410) = _EmissiveMaskTex;
				SamplerState Sampler275_g170410 = sampler_Linear_Repeat;
				half4 Coords275_g170410 = temp_output_37_0_g170410;
				half2 TexCoord275_g170410 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170410 = SampleExtra( Texture275_g170410 , Sampler275_g170410 , Coords275_g170410 , TexCoord275_g170410 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170407 = localSampleExtra275_g170410;
				#else
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#endif
				half4 Emissive_MaskTex201_g170407 = staticSwitch176_g170407;
				float clampResult17_g170414 = clamp( (Emissive_MaskTex201_g170407).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170413 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170413 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170413 );
				float lerpResult302_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170414 - temp_output_7_0_g170413 ) / ( temp_output_10_0_g170413 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170407 = lerpResult302_g170407;
				float temp_output_279_0_g170407 = ( Emissive_MeshMask221_g170407 * Emissive_Mask103_g170407 );
				float3 appendResult293_g170407 = (float3(temp_output_279_0_g170407 , temp_output_279_0_g170407 , temp_output_279_0_g170407));
				half3 Local_EmissiveColor278_g170407 = appendResult293_g170407;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170409 = Data204_g169264;
				float Out_Dummy15_g170409 = 0;
				float4 Out_CoatParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170409 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170409 = Data15_g170409.Dummy;
				Out_CoatParams15_g170409 = Data15_g170409.CoatParams;
				Out_PaintParams15_g170409 = Data15_g170409.PaintParams;
				Out_GlowParams15_g170409 = Data15_g170409.GlowParams;
				Out_AtmoParams15_g170409= Data15_g170409.AtmoParams;
				Out_FadeParams15_g170409= Data15_g170409.FadeParams;
				Out_FormParams15_g170409 = Data15_g170409.FormParams;
				Out_LandParams15_g170409 = Data15_g170409.LandParams;
				Out_WindParams15_g170409 = Data15_g170409.WindParams;
				Out_PushParams15_g170409 = Data15_g170409.PushParams;
				}
				half4 Global_GlowParams179_g170407 = Out_GlowParams15_g170409;
				float3 lerpResult299_g170407 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170407).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170407 = lerpResult299_g170407;
				#else
				float3 staticSwitch228_g170407 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170407 = staticSwitch228_g170407;
				half3 Local_EmissiveValue88_g170407 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170407 );
				half3 Emissive_Blend260_g170407 = ( ( (Visual_Emissive255_g170407).xyz * Local_EmissiveColor278_g170407 ) * Local_EmissiveValue88_g170407 );
				float3 temp_output_3_0_g170417 = Emissive_Blend260_g170407;
				float temp_output_15_0_g170417 = _emissive_power_value;
				float3 temp_output_23_0_g170417 = ( temp_output_3_0_g170417 * temp_output_15_0_g170417 );
				float4 appendResult295_g170407 = (float4(temp_output_23_0_g170417 , Emissive_Mask103_g170407));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170407 = appendResult295_g170407;
				#else
				float4 staticSwitch129_g170407 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170407 = staticSwitch129_g170407;
				float4 In_Emissive3_g170419 = Final_Emissive184_g170407;
				float In_Grayscale3_g170419 = Out_Grayscale4_g170418;
				float In_Luminosity3_g170419 = Out_Luminosity4_g170418;
				float temp_output_297_11_g170407 = Out_MultiMask4_g170418;
				float In_MultiMask3_g170419 = temp_output_297_11_g170407;
				float In_AlphaClip3_g170419 = Out_AlphaClip4_g170418;
				float In_AlphaFade3_g170419 = Out_AlphaFade4_g170418;
				float3 In_Translucency3_g170419 = Out_Translucency4_g170418;
				float In_Transmission3_g170419 = Out_Transmission4_g170418;
				float In_Thickness3_g170419 = Out_Thickness4_g170418;
				float In_Diffusion3_g170419 = Out_Diffusion4_g170418;
				{
				Data3_g170419.Dummy = In_Dummy3_g170419;
				Data3_g170419.Albedo = In_Albedo3_g170419;
				Data3_g170419.NormalTS = In_NormalTS3_g170419;
				Data3_g170419.NormalWS = In_NormalWS3_g170419;
				Data3_g170419.Shader = In_Shader3_g170419;
				Data3_g170419.Emissive= In_Emissive3_g170419;
				Data3_g170419.MultiMask = In_MultiMask3_g170419;
				Data3_g170419.Grayscale = In_Grayscale3_g170419;
				Data3_g170419.Luminosity = In_Luminosity3_g170419;
				Data3_g170419.AlphaClip = In_AlphaClip3_g170419;
				Data3_g170419.AlphaFade = In_AlphaFade3_g170419;
				Data3_g170419.Translucency = In_Translucency3_g170419;
				Data3_g170419.Transmission = In_Transmission3_g170419;
				Data3_g170419.Thickness = In_Thickness3_g170419;
				Data3_g170419.Diffusion = In_Diffusion3_g170419;
				}
				TVEVisualData Data4_g170439 = Data3_g170419;
				float Out_Dummy4_g170439 = 0;
				float3 Out_Albedo4_g170439 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170439 = float2( 0,0 );
				float3 Out_NormalWS4_g170439 = float3( 0,0,0 );
				float4 Out_Shader4_g170439 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170439 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170439 = 0;
				float Out_Grayscale4_g170439 = 0;
				float Out_Luminosity4_g170439 = 0;
				float Out_AlphaClip4_g170439 = 0;
				float Out_AlphaFade4_g170439 = 0;
				float3 Out_Translucency4_g170439 = float3( 0,0,0 );
				float Out_Transmission4_g170439 = 0;
				float Out_Thickness4_g170439 = 0;
				float Out_Diffusion4_g170439 = 0;
				{
				Out_Dummy4_g170439 = Data4_g170439.Dummy;
				Out_Albedo4_g170439 = Data4_g170439.Albedo;
				Out_NormalTS4_g170439 = Data4_g170439.NormalTS;
				Out_NormalWS4_g170439 = Data4_g170439.NormalWS;
				Out_Shader4_g170439 = Data4_g170439.Shader;
				Out_Emissive4_g170439= Data4_g170439.Emissive;
				Out_MultiMask4_g170439 = Data4_g170439.MultiMask;
				Out_Grayscale4_g170439 = Data4_g170439.Grayscale;
				Out_Luminosity4_g170439= Data4_g170439.Luminosity;
				Out_AlphaClip4_g170439 = Data4_g170439.AlphaClip;
				Out_AlphaFade4_g170439 = Data4_g170439.AlphaFade;
				Out_Translucency4_g170439 = Data4_g170439.Translucency;
				Out_Transmission4_g170439 = Data4_g170439.Transmission;
				Out_Thickness4_g170439 = Data4_g170439.Thickness;
				Out_Diffusion4_g170439 = Data4_g170439.Diffusion;
				}
				half3 Visual_Albedo199_g170438 = Out_Albedo4_g170439;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170438 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170438 );
				half Visual_Transmission138_g170438 = Out_Transmission4_g170439;
				half Subsurface_Value268_g170438 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170442 = Data204_g169264;
				float Out_Dummy15_g170442 = 0;
				float4 Out_CoatParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170442 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170442 = Data15_g170442.Dummy;
				Out_CoatParams15_g170442 = Data15_g170442.CoatParams;
				Out_PaintParams15_g170442 = Data15_g170442.PaintParams;
				Out_GlowParams15_g170442 = Data15_g170442.GlowParams;
				Out_AtmoParams15_g170442= Data15_g170442.AtmoParams;
				Out_FadeParams15_g170442= Data15_g170442.FadeParams;
				Out_FormParams15_g170442 = Data15_g170442.FormParams;
				Out_LandParams15_g170442 = Data15_g170442.LandParams;
				Out_WindParams15_g170442 = Data15_g170442.WindParams;
				Out_PushParams15_g170442 = Data15_g170442.PushParams;
				}
				half4 Global_GlowParams373_g170438 = Out_GlowParams15_g170442;
				float lerpResult403_g170438 = lerp( 1.0 , saturate( (Global_GlowParams373_g170438).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170438 = lerpResult403_g170438;
				#else
				float staticSwitch367_g170438 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170438 = staticSwitch367_g170438;
				float temp_output_301_11_g170438 = Out_MultiMask4_g170439;
				half Visual_MultiMask292_g170438 = temp_output_301_11_g170438;
				float lerpResult293_g170438 = lerp( 1.0 , Visual_MultiMask292_g170438 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170438 = lerpResult293_g170438;
				half Custom_Mask363_g170438 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170438 = ( Visual_Transmission138_g170438 * Subsurface_Value268_g170438 * Subsurface_GlobalMask369_g170438 * Subsurface_MultiMask296_g170438 * Custom_Mask363_g170438 );
				#else
				float staticSwitch345_g170438 = 0.0;
				#endif
				half Final_Transmission269_g170438 = staticSwitch345_g170438;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170438 = ( Subsurface_Color264_g170438 * Final_Transmission269_g170438 * 10.0 );
				#else
				float3 staticSwitch348_g170438 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170438 = staticSwitch348_g170438;
				TVEModelData Data15_g170441 = Data16_g169262;
				float Out_Dummy15_g170441 = 0;
				float3 Out_PositionOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170441 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170441 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170441 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170441 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170441 = float3( 0,0,0 );
				float4 Out_VertexData15_g170441 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170441 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170441 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_PositionOS15_g170441 = Data15_g170441.PositionOS;
				Out_PositionWS15_g170441 = Data15_g170441.PositionWS;
				Out_PositionWO15_g170441 = Data15_g170441.PositionWO;
				Out_PositionRawOS15_g170441 = Data15_g170441.PositionRawOS;
				Out_PositionAddOS15_g170441 = Data15_g170441.PositionAddOS;
				Out_PivotOS15_g170441 = Data15_g170441.PivotOS;
				Out_PivotWS15_g170441 = Data15_g170441.PivotWS;
				Out_PivotWO15_g170441 = Data15_g170441.PivotWO;
				Out_NormalOS15_g170441 = Data15_g170441.NormalOS;
				Out_NormalWS15_g170441 = Data15_g170441.NormalWS;
				Out_NormalRawOS15_g170441 = Data15_g170441.NormalRawOS;
				Out_NormalRawWS15_g170441 = Data15_g170441.NormalRawWS;
				Out_TangentOS15_g170441 = Data15_g170441.TangentOS;
				Out_ViewDirWS15_g170441 = Data15_g170441.ViewDirWS;
				Out_VertexData15_g170441 = Data15_g170441.VertexData;
				Out_MotionData15_g170441 = Data15_g170441.MotionData;
				Out_BoundsData15_g170441 = Data15_g170441.BoundsData;
				Out_RotationData15_g170441 = Data15_g170441.RotationData;
				}
				half3 Model_ViewDirWS392_g170438 = Out_ViewDirWS15_g170441;
				float dotResult324_g170438 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170438 );
				float saferPower323_g170438 = abs( saturate( dotResult324_g170438 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170438 = 0.0;
				#else
				float staticSwitch330_g170438 = ( pow( saferPower323_g170438 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170438 = staticSwitch330_g170438;
				float3 temp_output_6_0_g170443 = ( Final_Translucency254_g170438 * Mask_Subsurface_View320_g170438 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170443 = ( temp_output_6_0_g170443 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170443 = temp_output_6_0_g170443;
				#endif
				half3 Subsurface_Approximation333_g170438 = staticSwitch14_g170443;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170438 = ( Visual_Albedo199_g170438 + Subsurface_Approximation333_g170438 );
				#else
				float3 staticSwitch353_g170438 = Visual_Albedo199_g170438;
				#endif
				half3 Final_Albedo312_g170438 = staticSwitch353_g170438;
				float3 In_Albedo3_g170440 = Final_Albedo312_g170438;
				float2 In_NormalTS3_g170440 = Out_NormalTS4_g170439;
				float3 In_NormalWS3_g170440 = Out_NormalWS4_g170439;
				float4 In_Shader3_g170440 = Out_Shader4_g170439;
				float4 In_Emissive3_g170440 = Out_Emissive4_g170439;
				float In_Grayscale3_g170440 = Out_Grayscale4_g170439;
				float In_Luminosity3_g170440 = Out_Luminosity4_g170439;
				float In_MultiMask3_g170440 = temp_output_301_11_g170438;
				float In_AlphaClip3_g170440 = Out_AlphaClip4_g170439;
				float In_AlphaFade3_g170440 = Out_AlphaFade4_g170439;
				float3 In_Translucency3_g170440 = Final_Translucency254_g170438;
				float In_Transmission3_g170440 = Final_Transmission269_g170438;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170438 = 0.0;
				#else
				float staticSwitch351_g170438 = 1.0;
				#endif
				half Final_Thickness275_g170438 = staticSwitch351_g170438;
				float In_Thickness3_g170440 = Final_Thickness275_g170438;
				float Final_Diffusion340_g170438 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170440 = Final_Diffusion340_g170438;
				{
				Data3_g170440.Dummy = In_Dummy3_g170440;
				Data3_g170440.Albedo = In_Albedo3_g170440;
				Data3_g170440.NormalTS = In_NormalTS3_g170440;
				Data3_g170440.NormalWS = In_NormalWS3_g170440;
				Data3_g170440.Shader = In_Shader3_g170440;
				Data3_g170440.Emissive= In_Emissive3_g170440;
				Data3_g170440.MultiMask = In_MultiMask3_g170440;
				Data3_g170440.Grayscale = In_Grayscale3_g170440;
				Data3_g170440.Luminosity = In_Luminosity3_g170440;
				Data3_g170440.AlphaClip = In_AlphaClip3_g170440;
				Data3_g170440.AlphaFade = In_AlphaFade3_g170440;
				Data3_g170440.Translucency = In_Translucency3_g170440;
				Data3_g170440.Transmission = In_Transmission3_g170440;
				Data3_g170440.Thickness = In_Thickness3_g170440;
				Data3_g170440.Diffusion = In_Diffusion3_g170440;
				}
				TVEVisualData Data4_g170455 = Data3_g170440;
				float Out_Dummy4_g170455 = 0;
				float3 Out_Albedo4_g170455 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170455 = float2( 0,0 );
				float3 Out_NormalWS4_g170455 = float3( 0,0,0 );
				float4 Out_Shader4_g170455 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170455 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170455 = 0;
				float Out_Grayscale4_g170455 = 0;
				float Out_Luminosity4_g170455 = 0;
				float Out_AlphaClip4_g170455 = 0;
				float Out_AlphaFade4_g170455 = 0;
				float3 Out_Translucency4_g170455 = float3( 0,0,0 );
				float Out_Transmission4_g170455 = 0;
				float Out_Thickness4_g170455 = 0;
				float Out_Diffusion4_g170455 = 0;
				{
				Out_Dummy4_g170455 = Data4_g170455.Dummy;
				Out_Albedo4_g170455 = Data4_g170455.Albedo;
				Out_NormalTS4_g170455 = Data4_g170455.NormalTS;
				Out_NormalWS4_g170455 = Data4_g170455.NormalWS;
				Out_Shader4_g170455 = Data4_g170455.Shader;
				Out_Emissive4_g170455= Data4_g170455.Emissive;
				Out_MultiMask4_g170455 = Data4_g170455.MultiMask;
				Out_Grayscale4_g170455 = Data4_g170455.Grayscale;
				Out_Luminosity4_g170455= Data4_g170455.Luminosity;
				Out_AlphaClip4_g170455 = Data4_g170455.AlphaClip;
				Out_AlphaFade4_g170455 = Data4_g170455.AlphaFade;
				Out_Translucency4_g170455 = Data4_g170455.Translucency;
				Out_Transmission4_g170455 = Data4_g170455.Transmission;
				Out_Thickness4_g170455 = Data4_g170455.Thickness;
				Out_Diffusion4_g170455 = Data4_g170455.Diffusion;
				}
				half3 Input_Albedo24_g170454 = Out_Albedo4_g170455;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170454 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170454 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170454 = staticSwitch22_g170454;
				float4 break24_g170449 = Out_Shader4_g170455;
				half Metallic95_g170449 = break24_g170449.x;
				half Input_Metallic25_g170454 = Metallic95_g170449;
				half OneMinusReflectivity31_g170454 = ( (ColorSpaceDielectricSpec23_g170454).w - ( (ColorSpaceDielectricSpec23_g170454).w * Input_Metallic25_g170454 ) );
				
				float3 appendResult23_g170449 = (float3(Out_NormalTS4_g170455 , 1.0));
				float3 temp_output_13_0_g170453 = appendResult23_g170449;
				float3 temp_output_33_0_g170453 = ( temp_output_13_0_g170453 * _render_normal );
				float3 switchResult12_g170453 = (((ase_vface>0)?(temp_output_13_0_g170453):(temp_output_33_0_g170453)));
				
				half Smoothness105_g170449 = break24_g170449.w;
				half Input_Smoothness43_g170459 = Smoothness105_g170449;
				half Input_True57_g170461 = Input_Smoothness43_g170459;
				half True33_g170461 = Input_True57_g170461;
				half RenderSpec102_g170449 = _RenderSpecular;
				half Input_RenderSpec58_g170459 = RenderSpec102_g170449;
				float temp_output_46_0_g170459 = max( ( Input_Smoothness43_g170459 * Input_RenderSpec58_g170459 ) , 0.001 );
				float temp_output_6_0_g170460 = temp_output_46_0_g170459;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_61_0_g170459 = staticSwitch14_g170460;
				half Input_False58_g170461 = temp_output_61_0_g170459;
				half False33_g170461 = Input_False58_g170461;
				half localShadowPassCheck33_g170461 = ShadowPassCheck33_g170461( True33_g170461 , False33_g170461 );
				
				half Input_True57_g170462 = 0.04;
				half True33_g170462 = Input_True57_g170462;
				half Input_False58_g170462 = temp_output_46_0_g170459;
				half False33_g170462 = Input_False58_g170462;
				half localShadowPassCheck33_g170462 = ShadowPassCheck33_g170462( True33_g170462 , False33_g170462 );
				
				float localCustomAlphaClip19_g170456 = ( 0.0 );
				float temp_output_3_0_g170456 = Out_AlphaClip4_g170455;
				float Alpha19_g170456 = temp_output_3_0_g170456;
				float temp_output_15_0_g170456 = 0.0;
				float Treshold19_g170456 = temp_output_15_0_g170456;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#else
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g170454 * OneMinusReflectivity31_g170454 );
				o.Normal = switchResult12_g170453;
				o.Emission = (Out_Emissive4_g170455).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g170461;
					o.Gloss = localShadowPassCheck33_g170462;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 1, 1, 1 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha19_g170456 * Out_AlphaFade4_g170455 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}
			half ShadowPassCheck33_g170461( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g170462( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170447 = (TVEModelData)0;
				float In_Dummy16_g170447 = 0.0;
				TVEModelData Data16_g170424 = (TVEModelData)0;
				half Dummy1575_g170422 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170424 = Dummy1575_g170422;
				TVEModelData Data16_g170402 = (TVEModelData)0;
				float In_Dummy16_g170402 = 0.0;
				TVEModelData Data16_g170082 = (TVEModelData)0;
				half Dummy181_g170066 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170082 = Dummy181_g170066;
				TVEModelData Data16_g170030 = (TVEModelData)0;
				half Dummy181_g170027 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170030 = Dummy181_g170027;
				TVEModelData Data16_g169992 = (TVEModelData)0;
				half Dummy181_g169989 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g169992 = Dummy181_g169989;
				TVEModelData Data16_g169969 = (TVEModelData)0;
				float In_Dummy16_g169969 = 0.0;
				TVEModelData Data16_g169263 = (TVEModelData)0;
				half Dummy207_g169248 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g169263 = Dummy207_g169248;
				half3 PositionOS131_g169248 = v.vertex.xyz;
				float3 In_PositionOS16_g169263 = PositionOS131_g169248;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g169248 = ase_worldPos;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169263 = PositionWS122_g169248;
				float4x4 break19_g169250 = unity_ObjectToWorld;
				float3 appendResult20_g169250 = (float3(break19_g169250[ 0 ][ 3 ] , break19_g169250[ 1 ][ 3 ] , break19_g169250[ 2 ][ 3 ]));
				half3 ObjectData20_g169252 = appendResult20_g169250;
				half3 WorldData19_g169252 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169252 = WorldData19_g169252;
				#else
				float3 staticSwitch14_g169252 = ObjectData20_g169252;
				#endif
				float3 temp_output_124_0_g169250 = staticSwitch14_g169252;
				float3 temp_output_239_7_g169248 = temp_output_124_0_g169250;
				float4x4 break19_g169254 = unity_ObjectToWorld;
				float3 appendResult20_g169254 = (float3(break19_g169254[ 0 ][ 3 ] , break19_g169254[ 1 ][ 3 ] , break19_g169254[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g169258 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g169248 = PositionOS131_g169248;
				float3 appendResult234_g169248 = (float3(break233_g169248.x , 0.0 , break233_g169248.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g169248 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g169248 = appendResult60_g169258;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g169248 = appendResult234_g169248;
				#else
				float3 staticSwitch229_g169248 = _Vector0;
				#endif
				half3 PivotOS149_g169248 = staticSwitch229_g169248;
				float3 temp_output_122_0_g169254 = PivotOS149_g169248;
				float3 PivotsOnly105_g169254 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g169254 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g169256 = ( appendResult20_g169254 + PivotsOnly105_g169254 );
				half3 WorldData19_g169256 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169256 = WorldData19_g169256;
				#else
				float3 staticSwitch14_g169256 = ObjectData20_g169256;
				#endif
				float3 temp_output_124_0_g169254 = staticSwitch14_g169256;
				float3 temp_output_237_7_g169248 = temp_output_124_0_g169254;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#else
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#endif
				float3 vertexToFrag76_g169248 = staticSwitch236_g169248;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169263 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169263 = PositionOS131_g169248;
				float3 In_PositionAddOS16_g169263 = float3( 0,0,0 );
				float3 In_PivotOS16_g169263 = PivotOS149_g169248;
				float3 In_PivotWS16_g169263 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169263 = PivotWO133_g169248;
				half3 NormalOS134_g169248 = v.normal;
				float3 In_NormalOS16_g169263 = NormalOS134_g169248;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169263 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169263 = NormalOS134_g169248;
				float3 objToWorldDir298_g169248 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g169248 = objToWorldDir298_g169248;
				float3 In_NormalRawWS16_g169263 = Normal_RawWS136_g169248;
				half4 TangentlOS153_g169248 = v.tangent;
				float4 In_TangentOS16_g169263 = TangentlOS153_g169248;
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169263 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = v.ase_color;
				float4 In_VertexData16_g169263 = VertexMasks171_g169248;
				float4 break33_g169261 = _object_phase_mode;
				float temp_output_30_0_g169261 = ( v.ase_color.r * break33_g169261.x );
				float temp_output_29_0_g169261 = ( v.ase_color.g * break33_g169261.y );
				float temp_output_31_0_g169261 = ( v.ase_color.b * break33_g169261.z );
				float temp_output_28_0_g169261 = ( temp_output_30_0_g169261 + temp_output_29_0_g169261 + temp_output_31_0_g169261 + ( v.ase_color.a * break33_g169261.w ) );
				float3 break243_g169248 = PivotWO133_g169248;
				float4 appendResult177_g169248 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g169261 + ( break243_g169248.x + break243_g169248.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g169248 = appendResult177_g169248;
				float4 In_MotionData16_g169263 = MotionMasks176_g169248;
				half Object_HeightValue267_g169248 = _ObjectHeightValue;
				half Object_RadiusValue268_g169248 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g169248 = saturate( ( (PositionOS131_g169248).y / Object_HeightValue267_g169248 ) );
				half Bounds_SphereMask282_g169248 = saturate( ( length( PositionOS131_g169248 ) / max( Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 ) ) );
				float4 appendResult253_g169248 = (float4(Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 , Bounds_HeightMask274_g169248 , Bounds_SphereMask282_g169248));
				half4 BoundsData254_g169248 = appendResult253_g169248;
				float4 In_BoundsData16_g169263 = BoundsData254_g169248;
				float4 In_RotationData16_g169263 = float4( 0,0,0,0 );
				{
				Data16_g169263.Dummy = In_Dummy16_g169263;
				Data16_g169263.PositionOS = In_PositionOS16_g169263;
				Data16_g169263.PositionWS = In_PositionWS16_g169263;
				Data16_g169263.PositionWO = In_PositionWO16_g169263;
				Data16_g169263.PositionRawOS = In_PositionRawOS16_g169263;
				Data16_g169263.PositionAddOS = In_PositionAddOS16_g169263;
				Data16_g169263.PivotOS = In_PivotOS16_g169263;
				Data16_g169263.PivotWS = In_PivotWS16_g169263;
				Data16_g169263.PivotWO = In_PivotWO16_g169263;
				Data16_g169263.NormalOS = In_NormalOS16_g169263;
				Data16_g169263.NormalWS = In_NormalWS16_g169263;
				Data16_g169263.NormalRawOS = In_NormalRawOS16_g169263;
				Data16_g169263.NormalRawWS = In_NormalRawWS16_g169263;
				Data16_g169263.TangentOS = In_TangentOS16_g169263;
				Data16_g169263.ViewDirWS = In_ViewDirWS16_g169263;
				Data16_g169263.VertexData = In_VertexData16_g169263;
				Data16_g169263.MotionData = In_MotionData16_g169263;
				Data16_g169263.BoundsData = In_BoundsData16_g169263;
				Data16_g169263.RotationData = In_RotationData16_g169263;
				}
				TVEModelData Data15_g169970 = Data16_g169263;
				float Out_Dummy15_g169970 = 0;
				float3 Out_PositionOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169970 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169970 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169970 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169970 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169970 = float3( 0,0,0 );
				float4 Out_VertexData15_g169970 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169970 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169970 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169970 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169970 = Data15_g169970.Dummy;
				Out_PositionOS15_g169970 = Data15_g169970.PositionOS;
				Out_PositionWS15_g169970 = Data15_g169970.PositionWS;
				Out_PositionWO15_g169970 = Data15_g169970.PositionWO;
				Out_PositionRawOS15_g169970 = Data15_g169970.PositionRawOS;
				Out_PositionAddOS15_g169970 = Data15_g169970.PositionAddOS;
				Out_PivotOS15_g169970 = Data15_g169970.PivotOS;
				Out_PivotWS15_g169970 = Data15_g169970.PivotWS;
				Out_PivotWO15_g169970 = Data15_g169970.PivotWO;
				Out_NormalOS15_g169970 = Data15_g169970.NormalOS;
				Out_NormalWS15_g169970 = Data15_g169970.NormalWS;
				Out_NormalRawOS15_g169970 = Data15_g169970.NormalRawOS;
				Out_NormalRawWS15_g169970 = Data15_g169970.NormalRawWS;
				Out_TangentOS15_g169970 = Data15_g169970.TangentOS;
				Out_ViewDirWS15_g169970 = Data15_g169970.ViewDirWS;
				Out_VertexData15_g169970 = Data15_g169970.VertexData;
				Out_MotionData15_g169970 = Data15_g169970.MotionData;
				Out_BoundsData15_g169970 = Data15_g169970.BoundsData;
				Out_RotationData15_g169970 = Data15_g169970.RotationData;
				}
				float3 temp_output_218_24_g169968 = Out_PivotOS15_g169970;
				float3 In_PositionOS16_g169969 = ( Out_PositionOS15_g169970 - temp_output_218_24_g169968 );
				float3 In_PositionWS16_g169969 = Out_PositionWS15_g169970;
				float3 In_PositionWO16_g169969 = Out_PositionWO15_g169970;
				float3 In_PositionRawOS16_g169969 = Out_PositionRawOS15_g169970;
				float3 In_PositionAddOS16_g169969 = Out_PositionAddOS15_g169970;
				float3 In_PivotOS16_g169969 = temp_output_218_24_g169968;
				float3 In_PivotWS16_g169969 = Out_PivotWS15_g169970;
				float3 In_PivotWO16_g169969 = Out_PivotWO15_g169970;
				float3 In_NormalOS16_g169969 = Out_NormalOS15_g169970;
				float3 In_NormalWS16_g169969 = Out_NormalWS15_g169970;
				float3 In_NormalRawOS16_g169969 = Out_NormalRawOS15_g169970;
				float3 In_NormalRawWS16_g169969 = Out_NormalRawWS15_g169970;
				float4 In_TangentOS16_g169969 = Out_TangentOS15_g169970;
				float3 In_ViewDirWS16_g169969 = Out_ViewDirWS15_g169970;
				float4 In_VertexData16_g169969 = Out_VertexData15_g169970;
				float4 In_MotionData16_g169969 = Out_MotionData15_g169970;
				float4 In_BoundsData16_g169969 = Out_BoundsData15_g169970;
				float4 In_RotationData16_g169969 = Out_RotationData15_g169970;
				{
				Data16_g169969.Dummy = In_Dummy16_g169969;
				Data16_g169969.PositionOS = In_PositionOS16_g169969;
				Data16_g169969.PositionWS = In_PositionWS16_g169969;
				Data16_g169969.PositionWO = In_PositionWO16_g169969;
				Data16_g169969.PositionRawOS = In_PositionRawOS16_g169969;
				Data16_g169969.PositionAddOS = In_PositionAddOS16_g169969;
				Data16_g169969.PivotOS = In_PivotOS16_g169969;
				Data16_g169969.PivotWS = In_PivotWS16_g169969;
				Data16_g169969.PivotWO = In_PivotWO16_g169969;
				Data16_g169969.NormalOS = In_NormalOS16_g169969;
				Data16_g169969.NormalWS = In_NormalWS16_g169969;
				Data16_g169969.NormalRawOS = In_NormalRawOS16_g169969;
				Data16_g169969.NormalRawWS = In_NormalRawWS16_g169969;
				Data16_g169969.TangentOS = In_TangentOS16_g169969;
				Data16_g169969.ViewDirWS = In_ViewDirWS16_g169969;
				Data16_g169969.VertexData = In_VertexData16_g169969;
				Data16_g169969.MotionData = In_MotionData16_g169969;
				Data16_g169969.BoundsData = In_BoundsData16_g169969;
				Data16_g169969.RotationData = In_RotationData16_g169969;
				}
				TVEModelData Data15_g169990 = Data16_g169969;
				float Out_Dummy15_g169990 = 0;
				float3 Out_PositionOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169990 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169990 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169990 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169990 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169990 = float3( 0,0,0 );
				float4 Out_VertexData15_g169990 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169990 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169990 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169990 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169990 = Data15_g169990.Dummy;
				Out_PositionOS15_g169990 = Data15_g169990.PositionOS;
				Out_PositionWS15_g169990 = Data15_g169990.PositionWS;
				Out_PositionWO15_g169990 = Data15_g169990.PositionWO;
				Out_PositionRawOS15_g169990 = Data15_g169990.PositionRawOS;
				Out_PositionAddOS15_g169990 = Data15_g169990.PositionAddOS;
				Out_PivotOS15_g169990 = Data15_g169990.PivotOS;
				Out_PivotWS15_g169990 = Data15_g169990.PivotWS;
				Out_PivotWO15_g169990 = Data15_g169990.PivotWO;
				Out_NormalOS15_g169990 = Data15_g169990.NormalOS;
				Out_NormalWS15_g169990 = Data15_g169990.NormalWS;
				Out_NormalRawOS15_g169990 = Data15_g169990.NormalRawOS;
				Out_NormalRawWS15_g169990 = Data15_g169990.NormalRawWS;
				Out_TangentOS15_g169990 = Data15_g169990.TangentOS;
				Out_ViewDirWS15_g169990 = Data15_g169990.ViewDirWS;
				Out_VertexData15_g169990 = Data15_g169990.VertexData;
				Out_MotionData15_g169990 = Data15_g169990.MotionData;
				Out_BoundsData15_g169990 = Data15_g169990.BoundsData;
				Out_RotationData15_g169990 = Data15_g169990.RotationData;
				}
				half3 Model_PositionOS147_g169989 = Out_PositionOS15_g169990;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g169991 = unity_CameraToWorld;
				float3 appendResult118_g169991 = (float3(break117_g169991[ 0 ][ 2 ] , break117_g169991[ 1 ][ 2 ] , break117_g169991[ 2 ][ 2 ]));
				float3 lerpResult209_g169989 = lerp( ase_worldViewDir , -appendResult118_g169991 , unity_OrthoParams.w);
				float3 break201_g169989 = cross( lerpResult209_g169989 , half3(0,1,0) );
				float3 appendResult196_g169989 = (float3(-break201_g169989.z , 0.0 , break201_g169989.x));
				float dotResult189_g169989 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g169989 = abs( dotResult189_g169989 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g169989 = ( Model_PositionOS147_g169989 + ( mul( unity_WorldToObject, float4( appendResult196_g169989 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g169989 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g169989).y ) ) );
				#else
				float3 staticSwitch211_g169989 = Model_PositionOS147_g169989;
				#endif
				half3 Final_Position178_g169989 = staticSwitch211_g169989;
				float3 In_PositionOS16_g169992 = Final_Position178_g169989;
				float3 In_PositionWS16_g169992 = Out_PositionWS15_g169990;
				float3 In_PositionWO16_g169992 = Out_PositionWO15_g169990;
				float3 In_PositionRawOS16_g169992 = Out_PositionRawOS15_g169990;
				float3 In_PositionAddOS16_g169992 = Out_PositionAddOS15_g169990;
				float3 In_PivotOS16_g169992 = Out_PivotOS15_g169990;
				float3 In_PivotWS16_g169992 = Out_PivotWS15_g169990;
				float3 In_PivotWO16_g169992 = Out_PivotWO15_g169990;
				float3 In_NormalOS16_g169992 = Out_NormalOS15_g169990;
				float3 In_NormalWS16_g169992 = Out_NormalWS15_g169990;
				float3 In_NormalRawOS16_g169992 = Out_NormalRawOS15_g169990;
				float3 In_NormalRawWS16_g169992 = Out_NormalRawWS15_g169990;
				float4 In_TangentOS16_g169992 = Out_TangentOS15_g169990;
				float3 In_ViewDirWS16_g169992 = Out_ViewDirWS15_g169990;
				float4 In_VertexData16_g169992 = Out_VertexData15_g169990;
				float4 In_MotionData16_g169992 = Out_MotionData15_g169990;
				float4 In_BoundsData16_g169992 = Out_BoundsData15_g169990;
				float4 In_RotationData16_g169992 = Out_RotationData15_g169990;
				{
				Data16_g169992.Dummy = In_Dummy16_g169992;
				Data16_g169992.PositionOS = In_PositionOS16_g169992;
				Data16_g169992.PositionWS = In_PositionWS16_g169992;
				Data16_g169992.PositionWO = In_PositionWO16_g169992;
				Data16_g169992.PositionRawOS = In_PositionRawOS16_g169992;
				Data16_g169992.PositionAddOS = In_PositionAddOS16_g169992;
				Data16_g169992.PivotOS = In_PivotOS16_g169992;
				Data16_g169992.PivotWS = In_PivotWS16_g169992;
				Data16_g169992.PivotWO = In_PivotWO16_g169992;
				Data16_g169992.NormalOS = In_NormalOS16_g169992;
				Data16_g169992.NormalWS = In_NormalWS16_g169992;
				Data16_g169992.NormalRawOS = In_NormalRawOS16_g169992;
				Data16_g169992.NormalRawWS = In_NormalRawWS16_g169992;
				Data16_g169992.TangentOS = In_TangentOS16_g169992;
				Data16_g169992.ViewDirWS = In_ViewDirWS16_g169992;
				Data16_g169992.VertexData = In_VertexData16_g169992;
				Data16_g169992.MotionData = In_MotionData16_g169992;
				Data16_g169992.BoundsData = In_BoundsData16_g169992;
				Data16_g169992.RotationData = In_RotationData16_g169992;
				}
				TVEModelData Data15_g170029 = Data16_g169992;
				float Out_Dummy15_g170029 = 0;
				float3 Out_PositionOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170029 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170029 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170029 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170029 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170029 = float3( 0,0,0 );
				float4 Out_VertexData15_g170029 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170029 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170029 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170029 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170029 = Data15_g170029.Dummy;
				Out_PositionOS15_g170029 = Data15_g170029.PositionOS;
				Out_PositionWS15_g170029 = Data15_g170029.PositionWS;
				Out_PositionWO15_g170029 = Data15_g170029.PositionWO;
				Out_PositionRawOS15_g170029 = Data15_g170029.PositionRawOS;
				Out_PositionAddOS15_g170029 = Data15_g170029.PositionAddOS;
				Out_PivotOS15_g170029 = Data15_g170029.PivotOS;
				Out_PivotWS15_g170029 = Data15_g170029.PivotWS;
				Out_PivotWO15_g170029 = Data15_g170029.PivotWO;
				Out_NormalOS15_g170029 = Data15_g170029.NormalOS;
				Out_NormalWS15_g170029 = Data15_g170029.NormalWS;
				Out_NormalRawOS15_g170029 = Data15_g170029.NormalRawOS;
				Out_NormalRawWS15_g170029 = Data15_g170029.NormalRawWS;
				Out_TangentOS15_g170029 = Data15_g170029.TangentOS;
				Out_ViewDirWS15_g170029 = Data15_g170029.ViewDirWS;
				Out_VertexData15_g170029 = Data15_g170029.VertexData;
				Out_MotionData15_g170029 = Data15_g170029.MotionData;
				Out_BoundsData15_g170029 = Data15_g170029.BoundsData;
				Out_RotationData15_g170029 = Data15_g170029.RotationData;
				}
				half3 Model_PositionOS147_g170027 = Out_PositionOS15_g170029;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170027 = Out_PivotWO15_g170029;
				half3 Model_PivotWO162_g170027 = temp_output_210_19_g170027;
				float temp_output_7_0_g170028 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170028 = ( _SizeFadeDistMinValue - temp_output_7_0_g170028 );
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170031 = Data204_g169264;
				float Out_Dummy15_g170031 = 0;
				float4 Out_CoatParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170031 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170031 = Data15_g170031.Dummy;
				Out_CoatParams15_g170031 = Data15_g170031.CoatParams;
				Out_PaintParams15_g170031 = Data15_g170031.PaintParams;
				Out_GlowParams15_g170031 = Data15_g170031.GlowParams;
				Out_AtmoParams15_g170031= Data15_g170031.AtmoParams;
				Out_FadeParams15_g170031= Data15_g170031.FadeParams;
				Out_FormParams15_g170031 = Data15_g170031.FormParams;
				Out_LandParams15_g170031 = Data15_g170031.LandParams;
				Out_WindParams15_g170031 = Data15_g170031.WindParams;
				Out_PushParams15_g170031 = Data15_g170031.PushParams;
				}
				half4 Input_FormParams188_g170027 = Out_FormParams15_g170031;
				float lerpResult213_g170027 = lerp( 1.0 , (Input_FormParams188_g170027).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170027 = lerpResult213_g170027;
				#else
				float staticSwitch194_g170027 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170027 = staticSwitch194_g170027;
				float temp_output_189_0_g170027 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170027 ) - temp_output_7_0_g170028 ) / ( temp_output_10_0_g170028 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170027 );
				float3 appendResult200_g170027 = (float3(temp_output_189_0_g170027 , temp_output_189_0_g170027 , temp_output_189_0_g170027));
				float3 appendResult201_g170027 = (float3(1.0 , temp_output_189_0_g170027 , 1.0));
				float3 lerpResult202_g170027 = lerp( appendResult200_g170027 , appendResult201_g170027 , _SizeFadeScaleMode);
				float3 lerpResult184_g170027 = lerp( temp_cast_5 , lerpResult202_g170027 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170027 = ( lerpResult184_g170027 * Model_PositionOS147_g170027 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170027 = temp_output_167_0_g170027;
				#else
				float3 staticSwitch199_g170027 = Model_PositionOS147_g170027;
				#endif
				half3 Final_Position178_g170027 = staticSwitch199_g170027;
				float3 In_PositionOS16_g170030 = Final_Position178_g170027;
				float3 In_PositionWS16_g170030 = Out_PositionWS15_g170029;
				float3 In_PositionWO16_g170030 = Out_PositionWO15_g170029;
				float3 In_PositionRawOS16_g170030 = Out_PositionRawOS15_g170029;
				float3 In_PositionAddOS16_g170030 = Out_PositionAddOS15_g170029;
				float3 temp_output_210_24_g170027 = Out_PivotOS15_g170029;
				float3 In_PivotOS16_g170030 = temp_output_210_24_g170027;
				float3 In_PivotWS16_g170030 = Out_PivotWS15_g170029;
				float3 In_PivotWO16_g170030 = temp_output_210_19_g170027;
				float3 In_NormalOS16_g170030 = Out_NormalOS15_g170029;
				float3 In_NormalWS16_g170030 = Out_NormalWS15_g170029;
				float3 In_NormalRawOS16_g170030 = Out_NormalRawOS15_g170029;
				float3 In_NormalRawWS16_g170030 = Out_NormalRawWS15_g170029;
				float4 In_TangentOS16_g170030 = Out_TangentOS15_g170029;
				float3 In_ViewDirWS16_g170030 = Out_ViewDirWS15_g170029;
				float4 In_VertexData16_g170030 = Out_VertexData15_g170029;
				float4 In_MotionData16_g170030 = Out_MotionData15_g170029;
				float4 In_BoundsData16_g170030 = Out_BoundsData15_g170029;
				float4 In_RotationData16_g170030 = Out_RotationData15_g170029;
				{
				Data16_g170030.Dummy = In_Dummy16_g170030;
				Data16_g170030.PositionOS = In_PositionOS16_g170030;
				Data16_g170030.PositionWS = In_PositionWS16_g170030;
				Data16_g170030.PositionWO = In_PositionWO16_g170030;
				Data16_g170030.PositionRawOS = In_PositionRawOS16_g170030;
				Data16_g170030.PositionAddOS = In_PositionAddOS16_g170030;
				Data16_g170030.PivotOS = In_PivotOS16_g170030;
				Data16_g170030.PivotWS = In_PivotWS16_g170030;
				Data16_g170030.PivotWO = In_PivotWO16_g170030;
				Data16_g170030.NormalOS = In_NormalOS16_g170030;
				Data16_g170030.NormalWS = In_NormalWS16_g170030;
				Data16_g170030.NormalRawOS = In_NormalRawOS16_g170030;
				Data16_g170030.NormalRawWS = In_NormalRawWS16_g170030;
				Data16_g170030.TangentOS = In_TangentOS16_g170030;
				Data16_g170030.ViewDirWS = In_ViewDirWS16_g170030;
				Data16_g170030.VertexData = In_VertexData16_g170030;
				Data16_g170030.MotionData = In_MotionData16_g170030;
				Data16_g170030.BoundsData = In_BoundsData16_g170030;
				Data16_g170030.RotationData = In_RotationData16_g170030;
				}
				TVEModelData Data15_g170078 = Data16_g170030;
				float Out_Dummy15_g170078 = 0;
				float3 Out_PositionOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170078 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170078 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170078 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170078 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170078 = float3( 0,0,0 );
				float4 Out_VertexData15_g170078 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170078 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170078 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170078 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170078 = Data15_g170078.Dummy;
				Out_PositionOS15_g170078 = Data15_g170078.PositionOS;
				Out_PositionWS15_g170078 = Data15_g170078.PositionWS;
				Out_PositionWO15_g170078 = Data15_g170078.PositionWO;
				Out_PositionRawOS15_g170078 = Data15_g170078.PositionRawOS;
				Out_PositionAddOS15_g170078 = Data15_g170078.PositionAddOS;
				Out_PivotOS15_g170078 = Data15_g170078.PivotOS;
				Out_PivotWS15_g170078 = Data15_g170078.PivotWS;
				Out_PivotWO15_g170078 = Data15_g170078.PivotWO;
				Out_NormalOS15_g170078 = Data15_g170078.NormalOS;
				Out_NormalWS15_g170078 = Data15_g170078.NormalWS;
				Out_NormalRawOS15_g170078 = Data15_g170078.NormalRawOS;
				Out_NormalRawWS15_g170078 = Data15_g170078.NormalRawWS;
				Out_TangentOS15_g170078 = Data15_g170078.TangentOS;
				Out_ViewDirWS15_g170078 = Data15_g170078.ViewDirWS;
				Out_VertexData15_g170078 = Data15_g170078.VertexData;
				Out_MotionData15_g170078 = Data15_g170078.MotionData;
				Out_BoundsData15_g170078 = Data15_g170078.BoundsData;
				Out_RotationData15_g170078 = Data15_g170078.RotationData;
				}
				float3 temp_output_1567_0_g170066 = Out_PositionOS15_g170078;
				float3 In_PositionOS16_g170082 = temp_output_1567_0_g170066;
				float3 temp_output_1567_16_g170066 = Out_PositionWS15_g170078;
				float3 In_PositionWS16_g170082 = temp_output_1567_16_g170066;
				float3 temp_output_1567_17_g170066 = Out_PositionWO15_g170078;
				float3 In_PositionWO16_g170082 = temp_output_1567_17_g170066;
				float3 In_PositionRawOS16_g170082 = Out_PositionRawOS15_g170078;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170066 = Out_VertexData15_g170078;
				half4 Model_VertexMasks518_g170066 = temp_output_1567_29_g170066;
				float4 break1689_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170080 = _motion_small_vert_mode;
				float temp_output_30_0_g170080 = ( break1689_g170066.x * break33_g170080.x );
				float temp_output_29_0_g170080 = ( break1689_g170066.y * break33_g170080.y );
				float temp_output_31_0_g170080 = ( break1689_g170066.z * break33_g170080.z );
				float temp_output_28_0_g170080 = ( temp_output_30_0_g170080 + temp_output_29_0_g170080 + temp_output_31_0_g170080 + ( break1689_g170066.w * break33_g170080.w ) );
				float temp_output_1727_0_g170066 = temp_output_28_0_g170080;
				float4 temp_output_1567_30_g170066 = Out_BoundsData15_g170078;
				half4 Model_BoundsData1322_g170066 = temp_output_1567_30_g170066;
				float4 break33_g170083 = _motion_small_proc_mode;
				float temp_output_30_0_g170083 = ( (Model_BoundsData1322_g170066).z * break33_g170083.x );
				float temp_output_29_0_g170083 = ( (Model_BoundsData1322_g170066).w * break33_g170083.y );
				float temp_output_1734_0_g170066 = ( temp_output_30_0_g170083 + temp_output_29_0_g170083 );
				float lerpResult1906_g170066 = lerp( temp_output_1727_0_g170066 , temp_output_1734_0_g170066 , _motion_small_mask_mode);
				float enc1805_g170066 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170066 = DecodeFloatToVector2( enc1805_g170066 );
				float2 break1804_g170066 = localDecodeFloatToVector21805_g170066;
				half Small_Mask_Legacy1806_g170066 = break1804_g170066.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170066 = Small_Mask_Legacy1806_g170066;
				#else
				float staticSwitch1800_g170066 = lerpResult1906_g170066;
				#endif
				float clampResult17_g170085 = clamp( staticSwitch1800_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170086 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170086 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170086 );
				float temp_output_6_0_g170087 = saturate( ( ( clampResult17_g170085 - temp_output_7_0_g170086 ) / ( temp_output_10_0_g170086 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170087 = ( temp_output_6_0_g170087 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170087 = temp_output_6_0_g170087;
				#endif
				half Small_Mask640_g170066 = staticSwitch14_g170087;
				half3 Model_PositionOS147_g170066 = temp_output_1567_0_g170066;
				float3 normalizeResult1832_g170066 = normalize( Model_PositionOS147_g170066 );
				float4 lerpResult627_g170120 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170120 = (lerpResult627_g170120).xy;
				half3 Model_PositionWO162_g170066 = temp_output_1567_17_g170066;
				float3 temp_output_1567_19_g170066 = Out_PivotWO15_g170078;
				half3 Model_PivotWO402_g170066 = temp_output_1567_19_g170066;
				float3 lerpResult829_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170066 = Out_MotionData15_g170078;
				half4 Model_MotionMasks489_g170066 = temp_output_1567_27_g170066;
				half3 Base_Position1394_g170066 = ( lerpResult829_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170120 = Base_Position1394_g170066;
				half Flow_Tillling1397_g170066 = _MotionTillingValue;
				half Input_MotionTilling321_g170120 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170120 = ( -(Input_PositionWO419_g170120).xz * Input_MotionTilling321_g170120 * 0.005 );
				float2 temp_output_3_0_g170133 = Noise_Coord515_g170120;
				float2 temp_output_606_0_g170120 = (Global_WindDirection593_g170120*2.0 + -1.0);
				float2 temp_output_21_0_g170133 = temp_output_606_0_g170120;
				float lerpResult128_g170121 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170066 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170120 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170120 = ( lerpResult128_g170121 * Input_MotionSpeed62_g170120 );
				half Noise_Speed516_g170120 = ( temp_output_505_0_g170120 * 0.02 );
				float temp_output_15_0_g170133 = Noise_Speed516_g170120;
				float temp_output_23_0_g170133 = frac( temp_output_15_0_g170133 );
				float4 lerpResult39_g170133 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * temp_output_23_0_g170133 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * frac( ( temp_output_15_0_g170133 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170133 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170120 = lerpResult39_g170133;
				half Flow_Noise1843_g170066 = _MotionNoiseValue;
				half Input_MotionNoise552_g170120 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170120 = lerp( Global_WindDirection593_g170120 , (Noise_Params535_g170120).rg , Input_MotionNoise552_g170120);
				half Global_WindIntensity576_g170120 = (lerpResult627_g170120).z;
				half Flow_Value1855_g170066 = _MotionIntensityValue;
				half Input_MotionValue629_g170120 = Flow_Value1855_g170066;
				float2 lerpResult574_g170120 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170120 , ( Global_WindIntensity576_g170120 * Input_MotionValue629_g170120 ));
				float3 appendResult566_g170120 = (float3(lerpResult574_g170120 , (Noise_Params535_g170120).b));
				float temp_output_136_0_g170122 = _global_wind_layer_value;
				float temp_output_19_0_g170124 = TVE_WindLayers[(int)temp_output_136_0_g170122];
				half3 Input_Position180_g170125 = Input_PositionWO419_g170120;
				float2 temp_output_75_0_g170125 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_82_0_g170125 = temp_output_136_0_g170122;
				float2 temp_output_119_0_g170125 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_7_0_g170130 = 1.0;
				float temp_output_10_0_g170130 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170130 );
				float4 lerpResult131_g170125 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170125,temp_output_82_0_g170125), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170125,temp_output_82_0_g170125), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170125 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170130 ) / temp_output_10_0_g170130 ) ));
				float4 temp_output_17_0_g170124 = lerpResult131_g170125;
				float4 temp_output_3_0_g170124 = TVE_WindParams;
				float4 ifLocalVar18_g170124 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170124 >= 0.5 )
				ifLocalVar18_g170124 = temp_output_17_0_g170124;
				else
				ifLocalVar18_g170124 = temp_output_3_0_g170124;
				float4 lerpResult22_g170124 = lerp( temp_output_3_0_g170124 , temp_output_17_0_g170124 , temp_output_19_0_g170124);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170124 = lerpResult22_g170124;
				#else
				float4 staticSwitch24_g170124 = ifLocalVar18_g170124;
				#endif
				float4 temp_output_610_0_g170120 = staticSwitch24_g170124;
				float3 lerpResult623_g170120 = lerp( appendResult566_g170120 , (temp_output_610_0_g170120).rgb , (temp_output_610_0_g170120).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170120 = lerpResult623_g170120;
				#else
				float3 staticSwitch612_g170120 = appendResult566_g170120;
				#endif
				float3 temp_output_1902_567_g170066 = staticSwitch612_g170120;
				float2 temp_output_1403_0_g170066 = (temp_output_1902_567_g170066).xy;
				float temp_output_136_0_g170067 = _global_push_layer_value;
				float temp_output_19_0_g170068 = TVE_PushLayers[(int)temp_output_136_0_g170067];
				float3 lerpResult1547_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170066 = ( lerpResult1547_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170069 = Bend_Position1549_g170066;
				float2 temp_output_75_0_g170069 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_82_0_g170069 = temp_output_136_0_g170067;
				float2 temp_output_119_0_g170069 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_7_0_g170074 = 1.0;
				float temp_output_10_0_g170074 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170074 );
				float4 lerpResult131_g170069 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170069,temp_output_82_0_g170069), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170069,temp_output_82_0_g170069), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170069 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170074 ) / temp_output_10_0_g170074 ) ));
				float4 temp_output_17_0_g170068 = lerpResult131_g170069;
				float4 temp_output_3_0_g170068 = TVE_PushParams;
				float4 ifLocalVar18_g170068 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170068 >= 0.5 )
				ifLocalVar18_g170068 = temp_output_17_0_g170068;
				else
				ifLocalVar18_g170068 = temp_output_3_0_g170068;
				float4 lerpResult22_g170068 = lerp( temp_output_3_0_g170068 , temp_output_17_0_g170068 , temp_output_19_0_g170068);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170068 = lerpResult22_g170068;
				#else
				float4 staticSwitch24_g170068 = ifLocalVar18_g170068;
				#endif
				half4 Global_BendParams214_g170066 = staticSwitch24_g170068;
				half Bend_Intensity1501_g170066 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170066 = saturate( ( (Global_BendParams214_g170066).a * Bend_Intensity1501_g170066 ) );
				#else
				float staticSwitch1527_g170066 = 0.0;
				#endif
				half Bend_Influence1504_g170066 = staticSwitch1527_g170066;
				float2 lerpResult1507_g170066 = lerp( temp_output_1403_0_g170066 , (Global_BendParams214_g170066).rg , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170066 = lerpResult1507_g170066;
				#else
				float2 staticSwitch1506_g170066 = temp_output_1403_0_g170066;
				#endif
				float2 break83_g170076 = (staticSwitch1506_g170066*2.0 + -1.0);
				float3 appendResult79_g170076 = (float3(break83_g170076.x , 0.0 , break83_g170076.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170076 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170105 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170105 = (lerpResult627_g170105).xy;
				float3 lerpResult1411_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170066 = ( lerpResult1411_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170105 = Small_Position1421_g170066;
				half Input_MotionTilling321_g170105 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170105 = ( -(Input_PositionWO419_g170105).xz * Input_MotionTilling321_g170105 * 0.005 );
				float2 temp_output_3_0_g170118 = Noise_Coord515_g170105;
				float2 temp_output_606_0_g170105 = (Global_WindDirection593_g170105*2.0 + -1.0);
				float2 temp_output_21_0_g170118 = temp_output_606_0_g170105;
				float lerpResult128_g170106 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170105 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170105 = ( lerpResult128_g170106 * Input_MotionSpeed62_g170105 );
				half Noise_Speed516_g170105 = ( temp_output_505_0_g170105 * 0.02 );
				float temp_output_15_0_g170118 = Noise_Speed516_g170105;
				float temp_output_23_0_g170118 = frac( temp_output_15_0_g170118 );
				float4 lerpResult39_g170118 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * temp_output_23_0_g170118 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * frac( ( temp_output_15_0_g170118 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170118 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170105 = lerpResult39_g170118;
				half Input_MotionNoise552_g170105 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170105 = lerp( Global_WindDirection593_g170105 , (Noise_Params535_g170105).rg , Input_MotionNoise552_g170105);
				half Global_WindIntensity576_g170105 = (lerpResult627_g170105).z;
				half Input_MotionValue629_g170105 = Flow_Value1855_g170066;
				float2 lerpResult574_g170105 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170105 , ( Global_WindIntensity576_g170105 * Input_MotionValue629_g170105 ));
				float3 appendResult566_g170105 = (float3(lerpResult574_g170105 , (Noise_Params535_g170105).b));
				float temp_output_136_0_g170107 = _global_wind_layer_value;
				float temp_output_19_0_g170109 = TVE_WindLayers[(int)temp_output_136_0_g170107];
				half3 Input_Position180_g170110 = Input_PositionWO419_g170105;
				float2 temp_output_75_0_g170110 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_82_0_g170110 = temp_output_136_0_g170107;
				float2 temp_output_119_0_g170110 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_7_0_g170115 = 1.0;
				float temp_output_10_0_g170115 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170115 );
				float4 lerpResult131_g170110 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170110,temp_output_82_0_g170110), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170110,temp_output_82_0_g170110), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170110 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170115 ) / temp_output_10_0_g170115 ) ));
				float4 temp_output_17_0_g170109 = lerpResult131_g170110;
				float4 temp_output_3_0_g170109 = TVE_WindParams;
				float4 ifLocalVar18_g170109 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170109 >= 0.5 )
				ifLocalVar18_g170109 = temp_output_17_0_g170109;
				else
				ifLocalVar18_g170109 = temp_output_3_0_g170109;
				float4 lerpResult22_g170109 = lerp( temp_output_3_0_g170109 , temp_output_17_0_g170109 , temp_output_19_0_g170109);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170109 = lerpResult22_g170109;
				#else
				float4 staticSwitch24_g170109 = ifLocalVar18_g170109;
				#endif
				float4 temp_output_610_0_g170105 = staticSwitch24_g170109;
				float3 lerpResult623_g170105 = lerp( appendResult566_g170105 , (temp_output_610_0_g170105).rgb , (temp_output_610_0_g170105).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170105 = lerpResult623_g170105;
				#else
				float3 staticSwitch612_g170105 = appendResult566_g170105;
				#endif
				float3 temp_output_1901_567_g170066 = staticSwitch612_g170105;
				float2 break83_g170077 = ((temp_output_1901_567_g170066).xy*2.0 + -1.0);
				float3 appendResult79_g170077 = (float3(break83_g170077.x , 0.0 , break83_g170077.y));
				half2 Small_Direction1489_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170077 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170066 = Small_Direction1489_g170066;
				#else
				float2 staticSwitch1485_g170066 = Base_Direction893_g170066;
				#endif
				half2 Wind_Direction1486_g170066 = staticSwitch1485_g170066;
				float2 break1828_g170066 = -Wind_Direction1486_g170066;
				float3 appendResult1830_g170066 = (float3(break1828_g170066.x , 0.0 , break1828_g170066.y));
				float dotResult1831_g170066 = dot( normalizeResult1832_g170066 , appendResult1830_g170066 );
				float lerpResult1826_g170066 = lerp( 1.0 , (dotResult1831_g170066*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170066 = lerpResult1826_g170066;
				float2 break1433_g170066 = Small_Direction1489_g170066;
				float3 appendResult1434_g170066 = (float3(break1433_g170066.x , length( Small_Direction1489_g170066 ) , break1433_g170066.y));
				half Small_Noise1427_g170066 = abs( (temp_output_1901_567_g170066).z );
				float3 appendResult1786_g170066 = (float3(Small_Noise1427_g170066 , (Small_Noise1427_g170066*0.4 + -0.2) , Small_Noise1427_g170066));
				half3 Small_Squash789_g170066 = ( _MotionSmallIntensityValue * Small_Mask640_g170066 * Motion_FrontMask1142_g170066 * appendResult1434_g170066 * appendResult1786_g170066 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170066 = Small_Squash789_g170066;
				#else
				float3 staticSwitch495_g170066 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170081 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170081 = ( break1710_g170066.x * break33_g170081.x );
				float temp_output_29_0_g170081 = ( break1710_g170066.y * break33_g170081.y );
				float temp_output_31_0_g170081 = ( break1710_g170066.z * break33_g170081.z );
				float temp_output_28_0_g170081 = ( temp_output_30_0_g170081 + temp_output_29_0_g170081 + temp_output_31_0_g170081 + ( break1710_g170066.w * break33_g170081.w ) );
				float temp_output_1729_0_g170066 = temp_output_28_0_g170081;
				float4 break33_g170084 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170084 = ( (Model_BoundsData1322_g170066).z * break33_g170084.x );
				float temp_output_29_0_g170084 = ( (Model_BoundsData1322_g170066).w * break33_g170084.y );
				float temp_output_1735_0_g170066 = ( temp_output_30_0_g170084 + temp_output_29_0_g170084 );
				float lerpResult1908_g170066 = lerp( temp_output_1729_0_g170066 , temp_output_1735_0_g170066 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170066 = break1804_g170066.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170066 = Tiny_Mask_Legacy1807_g170066;
				#else
				float staticSwitch1810_g170066 = lerpResult1908_g170066;
				#endif
				float clampResult17_g170088 = clamp( staticSwitch1810_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170089 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170089 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170089 );
				float temp_output_6_0_g170090 = saturate( ( ( clampResult17_g170088 - temp_output_7_0_g170089 ) / ( temp_output_10_0_g170089 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170090 = ( temp_output_6_0_g170090 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170090 = temp_output_6_0_g170090;
				#endif
				half Tiny_Mask218_g170066 = staticSwitch14_g170090;
				half3 Input_Position500_g170091 = Model_PositionWO162_g170066;
				half Input_MotionTilling321_g170091 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170091 = 0.0;
				float lerpResult128_g170093 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170091 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170091 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170091).xz * Input_MotionTilling321_g170091 * 0.03 ) + Input_MotionPhase330_g170091 + ( lerpResult128_g170093 * Input_MotionSpeed62_g170091 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170091 = (float3(tex2DNode460_g170091.r , tex2DNode460_g170091.g , tex2DNode460_g170091.b));
				half3 Flutter_Texture489_g170091 = (appendResult462_g170091*2.0 + -1.0);
				half3 Tiny_Direction859_g170066 = Flutter_Texture489_g170091;
				half Base_Noise1159_g170066 = abs( (temp_output_1902_567_g170066).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170066 = Small_Noise1427_g170066;
				#else
				float staticSwitch1453_g170066 = Base_Noise1159_g170066;
				#endif
				half Wind_Noise1475_g170066 = staticSwitch1453_g170066;
				half3 Model_PositionWS1819_g170066 = temp_output_1567_16_g170066;
				half Motion_FadeMask1820_g170066 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170066 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170066 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170066 * Tiny_Direction859_g170066 * length( Wind_Direction1486_g170066 ) * Wind_Noise1475_g170066 * Motion_FrontMask1142_g170066 * Motion_FadeMask1820_g170066 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170066 = Tiny_Flutter1451_g170066;
				#else
				float3 staticSwitch414_g170066 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170066 = ( staticSwitch495_g170066 + staticSwitch414_g170066 );
				float3 In_PositionAddOS16_g170082 = Final_PositionADD1569_g170066;
				float3 temp_output_1567_24_g170066 = Out_PivotOS15_g170078;
				float3 In_PivotOS16_g170082 = temp_output_1567_24_g170066;
				float3 In_PivotWS16_g170082 = Out_PivotWS15_g170078;
				float3 In_PivotWO16_g170082 = temp_output_1567_19_g170066;
				float3 temp_output_1567_20_g170066 = Out_NormalOS15_g170078;
				float3 In_NormalOS16_g170082 = temp_output_1567_20_g170066;
				float3 In_NormalWS16_g170082 = Out_NormalWS15_g170078;
				float3 In_NormalRawOS16_g170082 = Out_NormalRawOS15_g170078;
				float3 In_NormalRawWS16_g170082 = Out_NormalRawWS15_g170078;
				float4 In_TangentOS16_g170082 = Out_TangentOS15_g170078;
				float3 In_ViewDirWS16_g170082 = Out_ViewDirWS15_g170078;
				float4 In_VertexData16_g170082 = temp_output_1567_29_g170066;
				float4 In_MotionData16_g170082 = temp_output_1567_27_g170066;
				float4 In_BoundsData16_g170082 = temp_output_1567_30_g170066;
				half Base_Intensity1883_g170066 = _MotionBaseIntensityValue;
				float4 break748_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170098 = _motion_base_vert_mode;
				float temp_output_30_0_g170098 = ( break748_g170066.x * break33_g170098.x );
				float temp_output_29_0_g170098 = ( break748_g170066.y * break33_g170098.y );
				float temp_output_31_0_g170098 = ( break748_g170066.z * break33_g170098.z );
				float temp_output_28_0_g170098 = ( temp_output_30_0_g170098 + temp_output_29_0_g170098 + temp_output_31_0_g170098 + ( break748_g170066.w * break33_g170098.w ) );
				float temp_output_1731_0_g170066 = temp_output_28_0_g170098;
				float4 break33_g170099 = _motion_base_proc_mode;
				float temp_output_30_0_g170099 = ( (Model_BoundsData1322_g170066).z * break33_g170099.x );
				float temp_output_29_0_g170099 = ( (Model_BoundsData1322_g170066).w * break33_g170099.y );
				float temp_output_1733_0_g170066 = ( temp_output_30_0_g170099 + temp_output_29_0_g170099 );
				float lerpResult1904_g170066 = lerp( temp_output_1731_0_g170066 , temp_output_1733_0_g170066 , _motion_base_mask_mode);
				float clampResult17_g170095 = clamp( lerpResult1904_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170096 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170096 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170096 );
				float temp_output_6_0_g170097 = saturate( ( ( clampResult17_g170095 - temp_output_7_0_g170096 ) / ( temp_output_10_0_g170096 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170097 = ( temp_output_6_0_g170097 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170097 = temp_output_6_0_g170097;
				#endif
				half Base_Mask217_g170066 = staticSwitch14_g170097;
				float lerpResult1768_g170066 = lerp( (Base_Noise1159_g170066*2.0 + -1.0) , Base_Noise1159_g170066 , length( Base_Direction893_g170066 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170066 = ( Base_Intensity1883_g170066 * Base_Mask217_g170066 * lerpResult1768_g170066 );
				#else
				float staticSwitch1573_g170066 = 0.0;
				#endif
				float4 break1864_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170103 = _motion_push_vert_mode;
				float temp_output_30_0_g170103 = ( break1864_g170066.x * break33_g170103.x );
				float temp_output_29_0_g170103 = ( break1864_g170066.y * break33_g170103.y );
				float temp_output_31_0_g170103 = ( break1864_g170066.z * break33_g170103.z );
				float temp_output_28_0_g170103 = ( temp_output_30_0_g170103 + temp_output_29_0_g170103 + temp_output_31_0_g170103 + ( break1864_g170066.w * break33_g170103.w ) );
				float temp_output_1867_0_g170066 = temp_output_28_0_g170103;
				float4 break33_g170104 = _motion_push_proc_mode;
				float temp_output_30_0_g170104 = ( (Model_BoundsData1322_g170066).z * break33_g170104.x );
				float temp_output_29_0_g170104 = ( (Model_BoundsData1322_g170066).w * break33_g170104.y );
				float temp_output_1868_0_g170066 = ( temp_output_30_0_g170104 + temp_output_29_0_g170104 );
				float lerpResult1910_g170066 = lerp( temp_output_1867_0_g170066 , temp_output_1868_0_g170066 , _motion_push_mask_mode);
				float clampResult17_g170101 = clamp( lerpResult1910_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170102 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170102 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170102 );
				float temp_output_6_0_g170135 = saturate( ( ( clampResult17_g170101 - temp_output_7_0_g170102 ) / ( temp_output_10_0_g170102 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170135 = ( temp_output_6_0_g170135 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170135 = temp_output_6_0_g170135;
				#endif
				half Push_Mask1877_g170066 = staticSwitch14_g170135;
				float lerpResult1496_g170066 = lerp( staticSwitch1573_g170066 , ( Bend_Intensity1501_g170066 * Push_Mask1877_g170066 ) , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170066 = lerpResult1496_g170066;
				#else
				float staticSwitch1517_g170066 = staticSwitch1573_g170066;
				#endif
				half2 Base_Bending1440_g170066 = ( staticSwitch1517_g170066 * Base_Direction893_g170066 );
				half2 Final_VertexBend1570_g170066 = Base_Bending1440_g170066;
				float4 In_RotationData16_g170082 = float4( Final_VertexBend1570_g170066, 0.0 , 0.0 );
				{
				Data16_g170082.Dummy = In_Dummy16_g170082;
				Data16_g170082.PositionOS = In_PositionOS16_g170082;
				Data16_g170082.PositionWS = In_PositionWS16_g170082;
				Data16_g170082.PositionWO = In_PositionWO16_g170082;
				Data16_g170082.PositionRawOS = In_PositionRawOS16_g170082;
				Data16_g170082.PositionAddOS = In_PositionAddOS16_g170082;
				Data16_g170082.PivotOS = In_PivotOS16_g170082;
				Data16_g170082.PivotWS = In_PivotWS16_g170082;
				Data16_g170082.PivotWO = In_PivotWO16_g170082;
				Data16_g170082.NormalOS = In_NormalOS16_g170082;
				Data16_g170082.NormalWS = In_NormalWS16_g170082;
				Data16_g170082.NormalRawOS = In_NormalRawOS16_g170082;
				Data16_g170082.NormalRawWS = In_NormalRawWS16_g170082;
				Data16_g170082.TangentOS = In_TangentOS16_g170082;
				Data16_g170082.ViewDirWS = In_ViewDirWS16_g170082;
				Data16_g170082.VertexData = In_VertexData16_g170082;
				Data16_g170082.MotionData = In_MotionData16_g170082;
				Data16_g170082.BoundsData = In_BoundsData16_g170082;
				Data16_g170082.RotationData = In_RotationData16_g170082;
				}
				TVEModelData Data15_g170401 = Data16_g170082;
				float Out_Dummy15_g170401 = 0;
				float3 Out_PositionOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170401 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170401 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170401 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170401 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170401 = float3( 0,0,0 );
				float4 Out_VertexData15_g170401 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170401 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170401 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170401 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170401 = Data15_g170401.Dummy;
				Out_PositionOS15_g170401 = Data15_g170401.PositionOS;
				Out_PositionWS15_g170401 = Data15_g170401.PositionWS;
				Out_PositionWO15_g170401 = Data15_g170401.PositionWO;
				Out_PositionRawOS15_g170401 = Data15_g170401.PositionRawOS;
				Out_PositionAddOS15_g170401 = Data15_g170401.PositionAddOS;
				Out_PivotOS15_g170401 = Data15_g170401.PivotOS;
				Out_PivotWS15_g170401 = Data15_g170401.PivotWS;
				Out_PivotWO15_g170401 = Data15_g170401.PivotWO;
				Out_NormalOS15_g170401 = Data15_g170401.NormalOS;
				Out_NormalWS15_g170401 = Data15_g170401.NormalWS;
				Out_NormalRawOS15_g170401 = Data15_g170401.NormalRawOS;
				Out_NormalRawWS15_g170401 = Data15_g170401.NormalRawWS;
				Out_TangentOS15_g170401 = Data15_g170401.TangentOS;
				Out_ViewDirWS15_g170401 = Data15_g170401.ViewDirWS;
				Out_VertexData15_g170401 = Data15_g170401.VertexData;
				Out_MotionData15_g170401 = Data15_g170401.MotionData;
				Out_BoundsData15_g170401 = Data15_g170401.BoundsData;
				Out_RotationData15_g170401 = Data15_g170401.RotationData;
				}
				half3 Model_PositionOS147_g170400 = Out_PositionOS15_g170401;
				half3 Input_False58_g170406 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170403 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170404 = VertexPos40_g170403;
				float3 appendResult74_g170404 = (float3(VertexPos40_g170404.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170404 = appendResult74_g170404;
				float3 break84_g170404 = VertexPos40_g170404;
				float3 appendResult81_g170404 = (float3(0.0 , break84_g170404.y , break84_g170404.z));
				half3 VertexPosOtherAxis82_g170404 = appendResult81_g170404;
				float4 temp_output_1567_33_g170400 = Out_RotationData15_g170401;
				half4 Model_VertexBend1569_g170400 = temp_output_1567_33_g170400;
				half2 Angle44_g170403 = (Model_VertexBend1569_g170400).xy;
				half Angle44_g170404 = (Angle44_g170403).y;
				half3 VertexPos40_g170405 = ( VertexPosRotationAxis50_g170404 + ( VertexPosOtherAxis82_g170404 * cos( Angle44_g170404 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170404 ) * sin( Angle44_g170404 ) ) );
				float3 appendResult74_g170405 = (float3(0.0 , 0.0 , VertexPos40_g170405.z));
				half3 VertexPosRotationAxis50_g170405 = appendResult74_g170405;
				float3 break84_g170405 = VertexPos40_g170405;
				float3 appendResult81_g170405 = (float3(break84_g170405.x , break84_g170405.y , 0.0));
				half3 VertexPosOtherAxis82_g170405 = appendResult81_g170405;
				half Angle44_g170405 = -(Angle44_g170403).x;
				half3 Input_True57_g170406 = ( VertexPosRotationAxis50_g170405 + ( VertexPosOtherAxis82_g170405 * cos( Angle44_g170405 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170405 ) * sin( Angle44_g170405 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch65_g170406 = Input_False58_g170406;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch67_g170406 = staticSwitch65_g170406;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch69_g170406 = staticSwitch67_g170406;
				#endif
				float3 temp_output_1567_31_g170400 = Out_PositionAddOS15_g170401;
				half3 Model_PositionADD1568_g170400 = temp_output_1567_31_g170400;
				half3 Final_PositionOS178_g170400 = ( staticSwitch69_g170406 + Model_PositionADD1568_g170400 );
				float3 In_PositionOS16_g170402 = Final_PositionOS178_g170400;
				float3 In_PositionWS16_g170402 = Out_PositionWS15_g170401;
				float3 In_PositionWO16_g170402 = Out_PositionWO15_g170401;
				float3 In_PositionRawOS16_g170402 = Out_PositionRawOS15_g170401;
				float3 In_PositionAddOS16_g170402 = temp_output_1567_31_g170400;
				float3 In_PivotOS16_g170402 = Out_PivotOS15_g170401;
				float3 In_PivotWS16_g170402 = Out_PivotWS15_g170401;
				float3 In_PivotWO16_g170402 = Out_PivotWO15_g170401;
				float3 In_NormalOS16_g170402 = Out_NormalOS15_g170401;
				float3 In_NormalWS16_g170402 = Out_NormalWS15_g170401;
				float3 In_NormalRawOS16_g170402 = Out_NormalRawOS15_g170401;
				float3 In_NormalRawWS16_g170402 = Out_NormalRawWS15_g170401;
				float4 In_TangentOS16_g170402 = Out_TangentOS15_g170401;
				float3 In_ViewDirWS16_g170402 = Out_ViewDirWS15_g170401;
				float4 In_VertexData16_g170402 = Out_VertexData15_g170401;
				float4 In_MotionData16_g170402 = Out_MotionData15_g170401;
				float4 In_BoundsData16_g170402 = Out_BoundsData15_g170401;
				float4 In_RotationData16_g170402 = temp_output_1567_33_g170400;
				{
				Data16_g170402.Dummy = In_Dummy16_g170402;
				Data16_g170402.PositionOS = In_PositionOS16_g170402;
				Data16_g170402.PositionWS = In_PositionWS16_g170402;
				Data16_g170402.PositionWO = In_PositionWO16_g170402;
				Data16_g170402.PositionRawOS = In_PositionRawOS16_g170402;
				Data16_g170402.PositionAddOS = In_PositionAddOS16_g170402;
				Data16_g170402.PivotOS = In_PivotOS16_g170402;
				Data16_g170402.PivotWS = In_PivotWS16_g170402;
				Data16_g170402.PivotWO = In_PivotWO16_g170402;
				Data16_g170402.NormalOS = In_NormalOS16_g170402;
				Data16_g170402.NormalWS = In_NormalWS16_g170402;
				Data16_g170402.NormalRawOS = In_NormalRawOS16_g170402;
				Data16_g170402.NormalRawWS = In_NormalRawWS16_g170402;
				Data16_g170402.TangentOS = In_TangentOS16_g170402;
				Data16_g170402.ViewDirWS = In_ViewDirWS16_g170402;
				Data16_g170402.VertexData = In_VertexData16_g170402;
				Data16_g170402.MotionData = In_MotionData16_g170402;
				Data16_g170402.BoundsData = In_BoundsData16_g170402;
				Data16_g170402.RotationData = In_RotationData16_g170402;
				}
				TVEModelData Data15_g170423 = Data16_g170402;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				}
				float3 In_PositionOS16_g170424 = Out_PositionOS15_g170423;
				float3 In_PositionWS16_g170424 = Out_PositionWS15_g170423;
				float3 temp_output_1567_17_g170422 = Out_PositionWO15_g170423;
				float3 In_PositionWO16_g170424 = temp_output_1567_17_g170422;
				float3 temp_output_1567_26_g170422 = Out_PositionRawOS15_g170423;
				float3 In_PositionRawOS16_g170424 = temp_output_1567_26_g170422;
				float3 In_PositionAddOS16_g170424 = Out_PositionAddOS15_g170423;
				float3 In_PivotOS16_g170424 = Out_PivotOS15_g170423;
				float3 In_PivotWS16_g170424 = Out_PivotWS15_g170423;
				float3 In_PivotWO16_g170424 = Out_PivotWO15_g170423;
				half3 Model_NormalOS1568_g170422 = Out_NormalOS15_g170423;
				float3 lerpResult1589_g170422 = lerp( Model_NormalOS1568_g170422 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170422 = temp_output_1567_26_g170422;
				float3 normalizeResult1594_g170422 = ASESafeNormalize( ( Model_PositionRAW1592_g170422 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170422 = lerp( lerpResult1589_g170422 , normalizeResult1594_g170422 , _NormalSphereValue);
				half3 Input_False58_g170437 = lerpResult1585_g170422;
				half3 VertexPos40_g170426 = lerpResult1585_g170422;
				half3 VertexPos40_g170427 = VertexPos40_g170426;
				float3 appendResult74_g170427 = (float3(VertexPos40_g170427.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170427 = appendResult74_g170427;
				float3 break84_g170427 = VertexPos40_g170427;
				float3 appendResult81_g170427 = (float3(0.0 , break84_g170427.y , break84_g170427.z));
				half3 VertexPosOtherAxis82_g170427 = appendResult81_g170427;
				float4 temp_output_1567_33_g170422 = Out_RotationData15_g170423;
				half4 Model_RotationData1583_g170422 = temp_output_1567_33_g170422;
				half2 Angle44_g170426 = Model_RotationData1583_g170422.xy;
				half Angle44_g170427 = (Angle44_g170426).y;
				half3 VertexPos40_g170428 = ( VertexPosRotationAxis50_g170427 + ( VertexPosOtherAxis82_g170427 * cos( Angle44_g170427 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170427 ) * sin( Angle44_g170427 ) ) );
				float3 appendResult74_g170428 = (float3(0.0 , 0.0 , VertexPos40_g170428.z));
				half3 VertexPosRotationAxis50_g170428 = appendResult74_g170428;
				float3 break84_g170428 = VertexPos40_g170428;
				float3 appendResult81_g170428 = (float3(break84_g170428.x , break84_g170428.y , 0.0));
				half3 VertexPosOtherAxis82_g170428 = appendResult81_g170428;
				half Angle44_g170428 = -(Angle44_g170426).x;
				float3 lerpResult1591_g170422 = lerp( lerpResult1585_g170422 , ( VertexPosRotationAxis50_g170428 + ( VertexPosOtherAxis82_g170428 * cos( Angle44_g170428 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170428 ) * sin( Angle44_g170428 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170437 = lerpResult1591_g170422;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch65_g170437 = Input_False58_g170437;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch67_g170437 = staticSwitch65_g170437;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch69_g170437 = staticSwitch67_g170437;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170422 = staticSwitch69_g170437;
				#else
				float3 staticSwitch1595_g170422 = lerpResult1585_g170422;
				#endif
				float4 temp_output_1567_29_g170422 = Out_VertexData15_g170423;
				half4 Model_VertexData1608_g170422 = temp_output_1567_29_g170422;
				float4 break1683_g170422 = Model_VertexData1608_g170422;
				float4 break33_g170430 = _normal_vert_mode;
				float temp_output_30_0_g170430 = ( break1683_g170422.x * break33_g170430.x );
				float temp_output_29_0_g170430 = ( break1683_g170422.y * break33_g170430.y );
				float temp_output_31_0_g170430 = ( break1683_g170422.z * break33_g170430.z );
				float temp_output_28_0_g170430 = ( temp_output_30_0_g170430 + temp_output_29_0_g170430 + temp_output_31_0_g170430 + ( break1683_g170422.w * break33_g170430.w ) );
				float clampResult17_g170432 = clamp( temp_output_28_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170431 = _NormalMeshRemap.x;
				float temp_output_10_0_g170431 = ( _NormalMeshRemap.y - temp_output_7_0_g170431 );
				float lerpResult1695_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170432 - temp_output_7_0_g170431 ) / ( temp_output_10_0_g170431 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170433 = lerpResult1695_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				float temp_output_1690_0_g170422 = staticSwitch14_g170433;
				half Normal_MeskMask1691_g170422 = temp_output_1690_0_g170422;
				half Normal_Proj_Mask1647_g170422 = 1.0;
				float temp_output_1699_0_g170422 = ( Normal_MeskMask1691_g170422 * Normal_Proj_Mask1647_g170422 );
				float3 lerpResult1670_g170422 = lerp( Model_NormalOS1568_g170422 , staticSwitch1595_g170422 , temp_output_1699_0_g170422);
				half3 Final_NormalOS178_g170422 = lerpResult1670_g170422;
				float3 In_NormalOS16_g170424 = Final_NormalOS178_g170422;
				float3 temp_output_1567_21_g170422 = Out_NormalWS15_g170423;
				float3 In_NormalWS16_g170424 = temp_output_1567_21_g170422;
				float3 In_NormalRawOS16_g170424 = Out_NormalRawOS15_g170423;
				float3 In_NormalRawWS16_g170424 = Out_NormalRawWS15_g170423;
				float4 In_TangentOS16_g170424 = Out_TangentOS15_g170423;
				float3 In_ViewDirWS16_g170424 = Out_ViewDirWS15_g170423;
				float4 In_VertexData16_g170424 = temp_output_1567_29_g170422;
				float4 In_MotionData16_g170424 = Out_MotionData15_g170423;
				float4 In_BoundsData16_g170424 = Out_BoundsData15_g170423;
				float4 In_RotationData16_g170424 = temp_output_1567_33_g170422;
				{
				Data16_g170424.Dummy = In_Dummy16_g170424;
				Data16_g170424.PositionOS = In_PositionOS16_g170424;
				Data16_g170424.PositionWS = In_PositionWS16_g170424;
				Data16_g170424.PositionWO = In_PositionWO16_g170424;
				Data16_g170424.PositionRawOS = In_PositionRawOS16_g170424;
				Data16_g170424.PositionAddOS = In_PositionAddOS16_g170424;
				Data16_g170424.PivotOS = In_PivotOS16_g170424;
				Data16_g170424.PivotWS = In_PivotWS16_g170424;
				Data16_g170424.PivotWO = In_PivotWO16_g170424;
				Data16_g170424.NormalOS = In_NormalOS16_g170424;
				Data16_g170424.NormalWS = In_NormalWS16_g170424;
				Data16_g170424.NormalRawOS = In_NormalRawOS16_g170424;
				Data16_g170424.NormalRawWS = In_NormalRawWS16_g170424;
				Data16_g170424.TangentOS = In_TangentOS16_g170424;
				Data16_g170424.ViewDirWS = In_ViewDirWS16_g170424;
				Data16_g170424.VertexData = In_VertexData16_g170424;
				Data16_g170424.MotionData = In_MotionData16_g170424;
				Data16_g170424.BoundsData = In_BoundsData16_g170424;
				Data16_g170424.RotationData = In_RotationData16_g170424;
				}
				TVEModelData Data15_g170446 = Data16_g170424;
				float Out_Dummy15_g170446 = 0;
				float3 Out_PositionOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170446 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170446 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170446 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170446 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170446 = float3( 0,0,0 );
				float4 Out_VertexData15_g170446 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170446 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170446 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170446 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170446 = Data15_g170446.Dummy;
				Out_PositionOS15_g170446 = Data15_g170446.PositionOS;
				Out_PositionWS15_g170446 = Data15_g170446.PositionWS;
				Out_PositionWO15_g170446 = Data15_g170446.PositionWO;
				Out_PositionRawOS15_g170446 = Data15_g170446.PositionRawOS;
				Out_PositionAddOS15_g170446 = Data15_g170446.PositionAddOS;
				Out_PivotOS15_g170446 = Data15_g170446.PivotOS;
				Out_PivotWS15_g170446 = Data15_g170446.PivotWS;
				Out_PivotWO15_g170446 = Data15_g170446.PivotWO;
				Out_NormalOS15_g170446 = Data15_g170446.NormalOS;
				Out_NormalWS15_g170446 = Data15_g170446.NormalWS;
				Out_NormalRawOS15_g170446 = Data15_g170446.NormalRawOS;
				Out_NormalRawWS15_g170446 = Data15_g170446.NormalRawWS;
				Out_TangentOS15_g170446 = Data15_g170446.TangentOS;
				Out_ViewDirWS15_g170446 = Data15_g170446.ViewDirWS;
				Out_VertexData15_g170446 = Data15_g170446.VertexData;
				Out_MotionData15_g170446 = Data15_g170446.MotionData;
				Out_BoundsData15_g170446 = Data15_g170446.BoundsData;
				Out_RotationData15_g170446 = Data15_g170446.RotationData;
				}
				float3 temp_output_217_24_g170445 = Out_PivotOS15_g170446;
				float3 In_PositionOS16_g170447 = ( Out_PositionOS15_g170446 + temp_output_217_24_g170445 );
				float3 In_PositionWS16_g170447 = Out_PositionWS15_g170446;
				float3 In_PositionWO16_g170447 = Out_PositionWO15_g170446;
				float3 In_PositionRawOS16_g170447 = Out_PositionRawOS15_g170446;
				float3 In_PositionAddOS16_g170447 = Out_PositionAddOS15_g170446;
				float3 In_PivotOS16_g170447 = temp_output_217_24_g170445;
				float3 In_PivotWS16_g170447 = Out_PivotWS15_g170446;
				float3 In_PivotWO16_g170447 = Out_PivotWO15_g170446;
				float3 In_NormalOS16_g170447 = Out_NormalOS15_g170446;
				float3 In_NormalWS16_g170447 = Out_NormalWS15_g170446;
				float3 In_NormalRawOS16_g170447 = Out_NormalRawOS15_g170446;
				float3 In_NormalRawWS16_g170447 = Out_NormalRawWS15_g170446;
				float4 In_TangentOS16_g170447 = Out_TangentOS15_g170446;
				float3 In_ViewDirWS16_g170447 = Out_ViewDirWS15_g170446;
				float4 In_VertexData16_g170447 = Out_VertexData15_g170446;
				float4 In_MotionData16_g170447 = Out_MotionData15_g170446;
				float4 In_BoundsData16_g170447 = Out_BoundsData15_g170446;
				float4 In_RotationData16_g170447 = Out_RotationData15_g170446;
				{
				Data16_g170447.Dummy = In_Dummy16_g170447;
				Data16_g170447.PositionOS = In_PositionOS16_g170447;
				Data16_g170447.PositionWS = In_PositionWS16_g170447;
				Data16_g170447.PositionWO = In_PositionWO16_g170447;
				Data16_g170447.PositionRawOS = In_PositionRawOS16_g170447;
				Data16_g170447.PositionAddOS = In_PositionAddOS16_g170447;
				Data16_g170447.PivotOS = In_PivotOS16_g170447;
				Data16_g170447.PivotWS = In_PivotWS16_g170447;
				Data16_g170447.PivotWO = In_PivotWO16_g170447;
				Data16_g170447.NormalOS = In_NormalOS16_g170447;
				Data16_g170447.NormalWS = In_NormalWS16_g170447;
				Data16_g170447.NormalRawOS = In_NormalRawOS16_g170447;
				Data16_g170447.NormalRawWS = In_NormalRawWS16_g170447;
				Data16_g170447.TangentOS = In_TangentOS16_g170447;
				Data16_g170447.ViewDirWS = In_ViewDirWS16_g170447;
				Data16_g170447.VertexData = In_VertexData16_g170447;
				Data16_g170447.MotionData = In_MotionData16_g170447;
				Data16_g170447.BoundsData = In_BoundsData16_g170447;
				Data16_g170447.RotationData = In_RotationData16_g170447;
				}
				TVEModelData Data15_g170452 = Data16_g170447;
				float Out_Dummy15_g170452 = 0;
				float3 Out_PositionOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170452 = float3( 0,0,0 );
				float4 Out_VertexData15_g170452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_PositionOS15_g170452 = Data15_g170452.PositionOS;
				Out_PositionWS15_g170452 = Data15_g170452.PositionWS;
				Out_PositionWO15_g170452 = Data15_g170452.PositionWO;
				Out_PositionRawOS15_g170452 = Data15_g170452.PositionRawOS;
				Out_PositionAddOS15_g170452 = Data15_g170452.PositionAddOS;
				Out_PivotOS15_g170452 = Data15_g170452.PivotOS;
				Out_PivotWS15_g170452 = Data15_g170452.PivotWS;
				Out_PivotWO15_g170452 = Data15_g170452.PivotWO;
				Out_NormalOS15_g170452 = Data15_g170452.NormalOS;
				Out_NormalWS15_g170452 = Data15_g170452.NormalWS;
				Out_NormalRawOS15_g170452 = Data15_g170452.NormalRawOS;
				Out_NormalRawWS15_g170452 = Data15_g170452.NormalRawWS;
				Out_TangentOS15_g170452 = Data15_g170452.TangentOS;
				Out_ViewDirWS15_g170452 = Data15_g170452.ViewDirWS;
				Out_VertexData15_g170452 = Data15_g170452.VertexData;
				Out_MotionData15_g170452 = Data15_g170452.MotionData;
				Out_BoundsData15_g170452 = Data15_g170452.BoundsData;
				Out_RotationData15_g170452 = Data15_g170452.RotationData;
				}
				float3 temp_output_31_0_g170449 = Out_PositionOS15_g170452;
				
				o.ase_texcoord11.xyz = vertexToFrag73_g169248;
				o.ase_texcoord12.xyz = vertexToFrag76_g169248;
				float temp_output_6_0_g170100 = ( _MotionHighlightValue * length( Wind_Direction1486_g170066 ) * Motion_FadeMask1820_g170066 * ( Base_Mask217_g170066 * Base_Mask217_g170066 ) * ( Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170100 = ( temp_output_6_0_g170100 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170100 = temp_output_6_0_g170100;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170100;
				float4 appendResult23_g170165 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170165 = appendResult23_g170165;
				o.ase_texcoord13 = vertexToFrag24_g170165;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170449 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170452;
				v.tangent = Out_TangentOS15_g170452;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g170455 = ( 0.0 );
				float localCompData3_g170440 = ( 0.0 );
				TVEVisualData Data3_g170440 = (TVEVisualData)0;
				half Dummy145_g170438 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170440 = Dummy145_g170438;
				float localBreakData4_g170439 = ( 0.0 );
				float localCompData3_g170419 = ( 0.0 );
				TVEVisualData Data3_g170419 = (TVEVisualData)0;
				half Dummy145_g170407 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170419 = Dummy145_g170407;
				float localBreakData4_g170418 = ( 0.0 );
				float localCompData3_g170393 = ( 0.0 );
				TVEVisualData Data3_g170393 = (TVEVisualData)0;
				half Dummy594_g170389 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170393 = Dummy594_g170389;
				float localBreakData4_g170392 = ( 0.0 );
				float localCompData3_g170378 = ( 0.0 );
				TVEVisualData Data3_g170378 = (TVEVisualData)0;
				half Dummy594_g170376 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170378 = Dummy594_g170376;
				float localBreakData4_g170377 = ( 0.0 );
				float localCompData3_g170360 = ( 0.0 );
				TVEVisualData Data3_g170360 = (TVEVisualData)0;
				half Dummy594_g170358 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170360 = Dummy594_g170358;
				float localBreakData4_g170359 = ( 0.0 );
				float localCompData3_g170325 = ( 0.0 );
				TVEVisualData Data3_g170325 = (TVEVisualData)0;
				half Dummy594_g170322 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170325 = Dummy594_g170322;
				float localBreakData4_g170323 = ( 0.0 );
				float localCompData3_g170321 = ( 0.0 );
				TVEVisualData Data3_g170321 = (TVEVisualData)0;
				float In_Dummy3_g170321 = 0.0;
				float localBreakData4_g170320 = ( 0.0 );
				float localCompData3_g170194 = ( 0.0 );
				TVEVisualData Data3_g170194 = (TVEVisualData)0;
				half Dummy205_g170190 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170194 = Dummy205_g170190;
				float localBreakData4_g170192 = ( 0.0 );
				float localCompData3_g170169 = ( 0.0 );
				TVEVisualData Data3_g170169 = (TVEVisualData)0;
				half Dummy205_g170166 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170169 = Dummy205_g170166;
				float localBreakData4_g170171 = ( 0.0 );
				float localCompData3_g170160 = ( 0.0 );
				TVEVisualData Data3_g170160 = (TVEVisualData)0;
				half Dummy220_g170156 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170160 = Dummy220_g170156;
				float localBreakData4_g170158 = ( 0.0 );
				float localCompData3_g170150 = ( 0.0 );
				TVEVisualData Data3_g170150 = (TVEVisualData)0;
				half Dummy220_g170146 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170150 = Dummy220_g170146;
				float localBreakData4_g170149 = ( 0.0 );
				float localCompData3_g170138 = ( 0.0 );
				TVEVisualData Data3_g170138 = (TVEVisualData)0;
				half Dummy202_g170136 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170138 = Dummy202_g170136;
				float localBreakData4_g170137 = ( 0.0 );
				float localCompData3_g170050 = ( 0.0 );
				TVEVisualData Data3_g170050 = (TVEVisualData)0;
				half4 Dummy944_g170033 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170050 = Dummy944_g170033.x;
				float localBreakData4_g170049 = ( 0.0 );
				float localCompData3_g170004 = ( 0.0 );
				TVEVisualData Data3_g170004 = (TVEVisualData)0;
				half4 Dummy946_g169993 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170004 = Dummy946_g169993.x;
				float localBreakData4_g170007 = ( 0.0 );
				float localCompData3_g169981 = ( 0.0 );
				TVEVisualData Data3_g169981 = (TVEVisualData)0;
				half4 Dummy130_g169971 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g169981 = Dummy130_g169971.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169982) = _MainAlbedoTex;
				SamplerState Sampler276_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g169971 = _main_coord_value;
				float4 temp_output_37_0_g169982 = Local_Coords180_g169971;
				half4 Coords276_g169982 = temp_output_37_0_g169982;
				half2 TexCoord276_g169982 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169982 = SampleMain( Texture276_g169982 , Sampler276_g169982 , Coords276_g169982 , TexCoord276_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169982) = _MainAlbedoTex;
				SamplerState Sampler275_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169982 = temp_output_37_0_g169982;
				half2 TexCoord275_g169982 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169982 = SampleExtra( Texture275_g169982 , Sampler275_g169982 , Coords275_g169982 , TexCoord275_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169982) = _MainAlbedoTex;
				SamplerState Sampler238_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169982 = temp_output_37_0_g169982;
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 vertexToFrag73_g169248 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 vertexToFrag76_g169248 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = IN.ase_color;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169972 = Data16_g169262;
				float Out_Dummy15_g169972 = 0;
				float3 Out_PositionOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169972 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169972 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169972 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169972 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169972 = float3( 0,0,0 );
				float4 Out_VertexData15_g169972 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169972 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169972 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169972 = Data15_g169972.Dummy;
				Out_PositionOS15_g169972 = Data15_g169972.PositionOS;
				Out_PositionWS15_g169972 = Data15_g169972.PositionWS;
				Out_PositionWO15_g169972 = Data15_g169972.PositionWO;
				Out_PositionRawOS15_g169972 = Data15_g169972.PositionRawOS;
				Out_PositionAddOS15_g169972 = Data15_g169972.PositionAddOS;
				Out_PivotOS15_g169972 = Data15_g169972.PivotOS;
				Out_PivotWS15_g169972 = Data15_g169972.PivotWS;
				Out_PivotWO15_g169972 = Data15_g169972.PivotWO;
				Out_NormalOS15_g169972 = Data15_g169972.NormalOS;
				Out_NormalWS15_g169972 = Data15_g169972.NormalWS;
				Out_NormalRawOS15_g169972 = Data15_g169972.NormalRawOS;
				Out_NormalRawWS15_g169972 = Data15_g169972.NormalRawWS;
				Out_TangentOS15_g169972 = Data15_g169972.TangentOS;
				Out_ViewDirWS15_g169972 = Data15_g169972.ViewDirWS;
				Out_VertexData15_g169972 = Data15_g169972.VertexData;
				Out_MotionData15_g169972 = Data15_g169972.MotionData;
				Out_BoundsData15_g169972 = Data15_g169972.BoundsData;
				Out_RotationData15_g169972 = Data15_g169972.RotationData;
				}
				half3 Model_PositionWO222_g169971 = Out_PositionWO15_g169972;
				float3 temp_output_279_0_g169982 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169982 = temp_output_279_0_g169982;
				half4 localSamplePlanar2D238_g169982 = SamplePlanar2D( Texture238_g169982 , Sampler238_g169982 , Coords238_g169982 , WorldPosition238_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169982) = _MainAlbedoTex;
				SamplerState Sampler246_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition246_g169982 = temp_output_279_0_g169982;
				half3 Model_NormalWS226_g169971 = Out_NormalWS15_g169972;
				float3 temp_output_280_0_g169982 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169982 = temp_output_280_0_g169982;
				half4 localSamplePlanar3D246_g169982 = SamplePlanar3D( Texture246_g169982 , Sampler246_g169982 , Coords246_g169982 , WorldPosition246_g169982 , WorldNormal246_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169982) = _MainAlbedoTex;
				SamplerState Sampler234_g169982 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169982 = temp_output_37_0_g169982;
				float3 WorldPosition234_g169982 = temp_output_279_0_g169982;
				float4 localSampleStochastic2D234_g169982 = SampleStochastic2D( Texture234_g169982 , Sampler234_g169982 , Coords234_g169982 , WorldPosition234_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169982) = _MainAlbedoTex;
				SamplerState Sampler263_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition263_g169982 = temp_output_279_0_g169982;
				half3 WorldNormal263_g169982 = temp_output_280_0_g169982;
				half4 localSampleStochastic3D263_g169982 = SampleStochastic3D( Texture263_g169982 , Sampler263_g169982 , Coords263_g169982 , WorldPosition263_g169982 , WorldNormal263_g169982 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g169971 = localSampleExtra275_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g169971 = localSamplePlanar2D238_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g169971 = localSamplePlanar3D246_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g169971 = localSampleStochastic2D234_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g169971 = localSampleStochastic3D263_g169982;
				#else
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#endif
				half4 Local_AlbedoTex185_g169971 = staticSwitch184_g169971;
				float3 lerpResult53_g169971 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g169971).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g169971 = lerpResult53_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169984) = _MainShaderTex;
				SamplerState Sampler276_g169984 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169984 = Local_Coords180_g169971;
				half4 Coords276_g169984 = temp_output_37_0_g169984;
				half2 TexCoord276_g169984 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169984 = SampleMain( Texture276_g169984 , Sampler276_g169984 , Coords276_g169984 , TexCoord276_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169984) = _MainShaderTex;
				SamplerState Sampler275_g169984 = sampler_Linear_Repeat;
				half4 Coords275_g169984 = temp_output_37_0_g169984;
				half2 TexCoord275_g169984 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169984 = SampleExtra( Texture275_g169984 , Sampler275_g169984 , Coords275_g169984 , TexCoord275_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169984) = _MainShaderTex;
				SamplerState Sampler238_g169984 = sampler_Linear_Repeat;
				half4 Coords238_g169984 = temp_output_37_0_g169984;
				float3 temp_output_279_0_g169984 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169984 = temp_output_279_0_g169984;
				half4 localSamplePlanar2D238_g169984 = SamplePlanar2D( Texture238_g169984 , Sampler238_g169984 , Coords238_g169984 , WorldPosition238_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169984) = _MainShaderTex;
				SamplerState Sampler246_g169984 = sampler_Linear_Repeat;
				half4 Coords246_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition246_g169984 = temp_output_279_0_g169984;
				float3 temp_output_280_0_g169984 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169984 = temp_output_280_0_g169984;
				half4 localSamplePlanar3D246_g169984 = SamplePlanar3D( Texture246_g169984 , Sampler246_g169984 , Coords246_g169984 , WorldPosition246_g169984 , WorldNormal246_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169984) = _MainShaderTex;
				SamplerState Sampler234_g169984 = sampler_Linear_Repeat;
				float4 Coords234_g169984 = temp_output_37_0_g169984;
				float3 WorldPosition234_g169984 = temp_output_279_0_g169984;
				float4 localSampleStochastic2D234_g169984 = SampleStochastic2D( Texture234_g169984 , Sampler234_g169984 , Coords234_g169984 , WorldPosition234_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169984) = _MainShaderTex;
				SamplerState Sampler263_g169984 = sampler_Linear_Repeat;
				half4 Coords263_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition263_g169984 = temp_output_279_0_g169984;
				half3 WorldNormal263_g169984 = temp_output_280_0_g169984;
				half4 localSampleStochastic3D263_g169984 = SampleStochastic3D( Texture263_g169984 , Sampler263_g169984 , Coords263_g169984 , WorldPosition263_g169984 , WorldNormal263_g169984 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g169971 = localSampleExtra275_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g169971 = localSamplePlanar2D238_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g169971 = localSamplePlanar3D246_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g169971 = localSampleStochastic2D234_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g169971 = localSampleStochastic3D263_g169984;
				#else
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#endif
				half4 Local_MasksTex199_g169971 = staticSwitch198_g169971;
				float lerpResult23_g169971 = lerp( 1.0 , (Local_MasksTex199_g169971).y , _MainOcclusionValue);
				float4 appendResult73_g169971 = (float4(( (Local_MasksTex199_g169971).x * _MainMetallicValue ) , lerpResult23_g169971 , (Local_MasksTex199_g169971).z , ( (Local_MasksTex199_g169971).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g169971 = appendResult73_g169971;
				float clampResult17_g169977 = clamp( (Local_Masks109_g169971).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g169978 = _MainMultiRemap.x;
				float temp_output_10_0_g169978 = ( _MainMultiRemap.y - temp_output_7_0_g169978 );
				half Local_MultiMask78_g169971 = saturate( ( ( clampResult17_g169977 - temp_output_7_0_g169978 ) / ( temp_output_10_0_g169978 + 0.0001 ) ) );
				float lerpResult58_g169971 = lerp( 1.0 , Local_MultiMask78_g169971 , _MainColorMode);
				float4 lerpResult62_g169971 = lerp( _MainColorTwo , _MainColor , lerpResult58_g169971);
				half3 Local_ColorRGB93_g169971 = (lerpResult62_g169971).rgb;
				half3 Local_Albedo139_g169971 = ( Local_AlbedoRGB107_g169971 * Local_ColorRGB93_g169971 );
				float3 In_Albedo3_g169981 = Local_Albedo139_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169983) = _MainNormalTex;
				SamplerState Sampler276_g169983 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169983 = Local_Coords180_g169971;
				half4 Coords276_g169983 = temp_output_37_0_g169983;
				half2 TexCoord276_g169983 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169983 = SampleMain( Texture276_g169983 , Sampler276_g169983 , Coords276_g169983 , TexCoord276_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169983) = _MainNormalTex;
				SamplerState Sampler275_g169983 = sampler_Linear_Repeat;
				half4 Coords275_g169983 = temp_output_37_0_g169983;
				half2 TexCoord275_g169983 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169983 = SampleExtra( Texture275_g169983 , Sampler275_g169983 , Coords275_g169983 , TexCoord275_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169983) = _MainNormalTex;
				SamplerState Sampler238_g169983 = sampler_Linear_Repeat;
				half4 Coords238_g169983 = temp_output_37_0_g169983;
				float3 temp_output_279_0_g169983 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169983 = temp_output_279_0_g169983;
				half4 localSamplePlanar2D238_g169983 = SamplePlanar2D( Texture238_g169983 , Sampler238_g169983 , Coords238_g169983 , WorldPosition238_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169983) = _MainNormalTex;
				SamplerState Sampler246_g169983 = sampler_Linear_Repeat;
				half4 Coords246_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition246_g169983 = temp_output_279_0_g169983;
				float3 temp_output_280_0_g169983 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169983 = temp_output_280_0_g169983;
				half4 localSamplePlanar3D246_g169983 = SamplePlanar3D( Texture246_g169983 , Sampler246_g169983 , Coords246_g169983 , WorldPosition246_g169983 , WorldNormal246_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169983) = _MainNormalTex;
				SamplerState Sampler234_g169983 = sampler_Linear_Repeat;
				float4 Coords234_g169983 = temp_output_37_0_g169983;
				float3 WorldPosition234_g169983 = temp_output_279_0_g169983;
				float4 localSampleStochastic2D234_g169983 = SampleStochastic2D( Texture234_g169983 , Sampler234_g169983 , Coords234_g169983 , WorldPosition234_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169983) = _MainNormalTex;
				SamplerState Sampler263_g169983 = sampler_Linear_Repeat;
				half4 Coords263_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition263_g169983 = temp_output_279_0_g169983;
				half3 WorldNormal263_g169983 = temp_output_280_0_g169983;
				half4 localSampleStochastic3D263_g169983 = SampleStochastic3D( Texture263_g169983 , Sampler263_g169983 , Coords263_g169983 , WorldPosition263_g169983 , WorldNormal263_g169983 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g169971 = localSampleExtra275_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g169971 = localSamplePlanar2D238_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g169971 = localSamplePlanar3D246_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g169971 = localSampleStochastic2D234_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g169971 = localSampleStochastic3D263_g169983;
				#else
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#endif
				half4 Local_NormaTex191_g169971 = staticSwitch193_g169971;
				half4 Normal_Packed45_g169973 = Local_NormaTex191_g169971;
				float2 appendResult58_g169973 = (float2(( (Normal_Packed45_g169973).x * (Normal_Packed45_g169973).w ) , (Normal_Packed45_g169973).y));
				half2 Normal_Default50_g169973 = appendResult58_g169973;
				half2 Normal_ASTC41_g169973 = (Normal_Packed45_g169973).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169973 = Normal_ASTC41_g169973;
				#else
				float2 staticSwitch38_g169973 = Normal_Default50_g169973;
				#endif
				half2 Normal_NO_DTX544_g169973 = (Normal_Packed45_g169973).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169973 = Normal_NO_DTX544_g169973;
				#else
				float2 staticSwitch37_g169973 = staticSwitch38_g169973;
				#endif
				float2 temp_output_26_0_g169971 = ( (staticSwitch37_g169973*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g169974 = temp_output_26_0_g169971;
				float2 break71_g169974 = Normal_Planar45_g169974;
				float3 appendResult72_g169974 = (float3(break71_g169974.x , 0.0 , break71_g169974.y));
				float2 temp_output_205_0_g169971 = (mul( ase_worldToTangent, appendResult72_g169974 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#else
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#endif
				half2 Local_NormalTS108_g169971 = staticSwitch204_g169971;
				float2 In_NormalTS3_g169981 = Local_NormalTS108_g169971;
				float3 appendResult68_g169975 = (float3(Local_NormalTS108_g169971 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g169975 = appendResult68_g169975;
				float3 worldNormal74_g169975 = normalize( float3(dot(tanToWorld0,tanNormal74_g169975), dot(tanToWorld1,tanNormal74_g169975), dot(tanToWorld2,tanNormal74_g169975)) );
				half3 Local_NormalWS250_g169971 = worldNormal74_g169975;
				float3 In_NormalWS3_g169981 = Local_NormalWS250_g169971;
				float4 In_Shader3_g169981 = Local_Masks109_g169971;
				float4 In_Emissive3_g169981 = half4(1,1,1,1);
				float3 temp_output_3_0_g169976 = Local_Albedo139_g169971;
				float dotResult20_g169976 = dot( temp_output_3_0_g169976 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g169971 = dotResult20_g169976;
				float In_Grayscale3_g169981 = Local_Grayscale110_g169971;
				float clampResult144_g169971 = clamp( saturate( ( Local_Grayscale110_g169971 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g169971 = clampResult144_g169971;
				float In_Luminosity3_g169981 = Local_Luminosity145_g169971;
				float In_MultiMask3_g169981 = Local_MultiMask78_g169971;
				float temp_output_187_0_g169971 = (Local_AlbedoTex185_g169971).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g169971 = ( temp_output_187_0_g169971 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g169971 = temp_output_187_0_g169971;
				#endif
				half Local_AlphaClip111_g169971 = staticSwitch236_g169971;
				float In_AlphaClip3_g169981 = Local_AlphaClip111_g169971;
				half Local_AlphaFade246_g169971 = (lerpResult62_g169971).a;
				float In_AlphaFade3_g169981 = Local_AlphaFade246_g169971;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g169981 = temp_cast_4;
				float In_Transmission3_g169981 = 1.0;
				float In_Thickness3_g169981 = 0.0;
				float In_Diffusion3_g169981 = 0.0;
				{
				Data3_g169981.Dummy = In_Dummy3_g169981;
				Data3_g169981.Albedo = In_Albedo3_g169981;
				Data3_g169981.NormalTS = In_NormalTS3_g169981;
				Data3_g169981.NormalWS = In_NormalWS3_g169981;
				Data3_g169981.Shader = In_Shader3_g169981;
				Data3_g169981.Emissive= In_Emissive3_g169981;
				Data3_g169981.MultiMask = In_MultiMask3_g169981;
				Data3_g169981.Grayscale = In_Grayscale3_g169981;
				Data3_g169981.Luminosity = In_Luminosity3_g169981;
				Data3_g169981.AlphaClip = In_AlphaClip3_g169981;
				Data3_g169981.AlphaFade = In_AlphaFade3_g169981;
				Data3_g169981.Translucency = In_Translucency3_g169981;
				Data3_g169981.Transmission = In_Transmission3_g169981;
				Data3_g169981.Thickness = In_Thickness3_g169981;
				Data3_g169981.Diffusion = In_Diffusion3_g169981;
				}
				TVEVisualData Data4_g170007 = Data3_g169981;
				float Out_Dummy4_g170007 = 0;
				float3 Out_Albedo4_g170007 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170007 = float2( 0,0 );
				float3 Out_NormalWS4_g170007 = float3( 0,0,0 );
				float4 Out_Shader4_g170007 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170007 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170007 = 0;
				float Out_Grayscale4_g170007 = 0;
				float Out_Luminosity4_g170007 = 0;
				float Out_AlphaClip4_g170007 = 0;
				float Out_AlphaFade4_g170007 = 0;
				float3 Out_Translucency4_g170007 = float3( 0,0,0 );
				float Out_Transmission4_g170007 = 0;
				float Out_Thickness4_g170007 = 0;
				float Out_Diffusion4_g170007 = 0;
				{
				Out_Dummy4_g170007 = Data4_g170007.Dummy;
				Out_Albedo4_g170007 = Data4_g170007.Albedo;
				Out_NormalTS4_g170007 = Data4_g170007.NormalTS;
				Out_NormalWS4_g170007 = Data4_g170007.NormalWS;
				Out_Shader4_g170007 = Data4_g170007.Shader;
				Out_Emissive4_g170007= Data4_g170007.Emissive;
				Out_MultiMask4_g170007 = Data4_g170007.MultiMask;
				Out_Grayscale4_g170007 = Data4_g170007.Grayscale;
				Out_Luminosity4_g170007= Data4_g170007.Luminosity;
				Out_AlphaClip4_g170007 = Data4_g170007.AlphaClip;
				Out_AlphaFade4_g170007 = Data4_g170007.AlphaFade;
				Out_Translucency4_g170007 = Data4_g170007.Translucency;
				Out_Transmission4_g170007 = Data4_g170007.Transmission;
				Out_Thickness4_g170007 = Data4_g170007.Thickness;
				Out_Diffusion4_g170007 = Data4_g170007.Diffusion;
				}
				half3 Visual_Albedo527_g169993 = Out_Albedo4_g170007;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169994) = _SecondAlbedoTex;
				SamplerState Sampler276_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g169993 = _second_coord_value;
				float4 temp_output_37_0_g169994 = Local_LayerCoords790_g169993;
				half4 Coords276_g169994 = temp_output_37_0_g169994;
				half2 TexCoord276_g169994 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169994 = SampleMain( Texture276_g169994 , Sampler276_g169994 , Coords276_g169994 , TexCoord276_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169994) = _SecondAlbedoTex;
				SamplerState Sampler275_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169994 = temp_output_37_0_g169994;
				half2 TexCoord275_g169994 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169994 = SampleExtra( Texture275_g169994 , Sampler275_g169994 , Coords275_g169994 , TexCoord275_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169994) = _SecondAlbedoTex;
				SamplerState Sampler238_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169994 = temp_output_37_0_g169994;
				TVEModelData Data15_g170005 = Data16_g169262;
				float Out_Dummy15_g170005 = 0;
				float3 Out_PositionOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170005 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170005 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170005 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170005 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170005 = float3( 0,0,0 );
				float4 Out_VertexData15_g170005 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170005 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170005 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170005 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170005 = Data15_g170005.Dummy;
				Out_PositionOS15_g170005 = Data15_g170005.PositionOS;
				Out_PositionWS15_g170005 = Data15_g170005.PositionWS;
				Out_PositionWO15_g170005 = Data15_g170005.PositionWO;
				Out_PositionRawOS15_g170005 = Data15_g170005.PositionRawOS;
				Out_PositionAddOS15_g170005 = Data15_g170005.PositionAddOS;
				Out_PivotOS15_g170005 = Data15_g170005.PivotOS;
				Out_PivotWS15_g170005 = Data15_g170005.PivotWS;
				Out_PivotWO15_g170005 = Data15_g170005.PivotWO;
				Out_NormalOS15_g170005 = Data15_g170005.NormalOS;
				Out_NormalWS15_g170005 = Data15_g170005.NormalWS;
				Out_NormalRawOS15_g170005 = Data15_g170005.NormalRawOS;
				Out_NormalRawWS15_g170005 = Data15_g170005.NormalRawWS;
				Out_TangentOS15_g170005 = Data15_g170005.TangentOS;
				Out_ViewDirWS15_g170005 = Data15_g170005.ViewDirWS;
				Out_VertexData15_g170005 = Data15_g170005.VertexData;
				Out_MotionData15_g170005 = Data15_g170005.MotionData;
				Out_BoundsData15_g170005 = Data15_g170005.BoundsData;
				Out_RotationData15_g170005 = Data15_g170005.RotationData;
				}
				half3 Model_PositionWO636_g169993 = Out_PositionWO15_g170005;
				float3 temp_output_279_0_g169994 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169994 = temp_output_279_0_g169994;
				half4 localSamplePlanar2D238_g169994 = SamplePlanar2D( Texture238_g169994 , Sampler238_g169994 , Coords238_g169994 , WorldPosition238_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169994) = _SecondAlbedoTex;
				SamplerState Sampler246_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition246_g169994 = temp_output_279_0_g169994;
				half3 Model_NormalWS869_g169993 = Out_NormalWS15_g170005;
				float3 temp_output_280_0_g169994 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169994 = temp_output_280_0_g169994;
				half4 localSamplePlanar3D246_g169994 = SamplePlanar3D( Texture246_g169994 , Sampler246_g169994 , Coords246_g169994 , WorldPosition246_g169994 , WorldNormal246_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169994) = _SecondAlbedoTex;
				SamplerState Sampler234_g169994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169994 = temp_output_37_0_g169994;
				float3 WorldPosition234_g169994 = temp_output_279_0_g169994;
				float4 localSampleStochastic2D234_g169994 = SampleStochastic2D( Texture234_g169994 , Sampler234_g169994 , Coords234_g169994 , WorldPosition234_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169994) = _SecondAlbedoTex;
				SamplerState Sampler263_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition263_g169994 = temp_output_279_0_g169994;
				half3 WorldNormal263_g169994 = temp_output_280_0_g169994;
				half4 localSampleStochastic3D263_g169994 = SampleStochastic3D( Texture263_g169994 , Sampler263_g169994 , Coords263_g169994 , WorldPosition263_g169994 , WorldNormal263_g169994 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g169993 = localSampleExtra275_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g169993 = localSamplePlanar2D238_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g169993 = localSamplePlanar3D246_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g169993 = localSampleStochastic2D234_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g169993 = localSampleStochastic3D263_g169994;
				#else
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#endif
				half4 Local_AlbedoTex777_g169993 = staticSwitch693_g169993;
				float3 lerpResult716_g169993 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g169993).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g169993 = lerpResult716_g169993;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169996) = _SecondShaderTex;
				SamplerState Sampler276_g169996 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169996 = Local_LayerCoords790_g169993;
				half4 Coords276_g169996 = temp_output_37_0_g169996;
				half2 TexCoord276_g169996 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169996 = SampleMain( Texture276_g169996 , Sampler276_g169996 , Coords276_g169996 , TexCoord276_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169996) = _SecondShaderTex;
				SamplerState Sampler275_g169996 = sampler_Linear_Repeat;
				half4 Coords275_g169996 = temp_output_37_0_g169996;
				half2 TexCoord275_g169996 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169996 = SampleExtra( Texture275_g169996 , Sampler275_g169996 , Coords275_g169996 , TexCoord275_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169996) = _SecondShaderTex;
				SamplerState Sampler238_g169996 = sampler_Linear_Repeat;
				half4 Coords238_g169996 = temp_output_37_0_g169996;
				float3 temp_output_279_0_g169996 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169996 = temp_output_279_0_g169996;
				half4 localSamplePlanar2D238_g169996 = SamplePlanar2D( Texture238_g169996 , Sampler238_g169996 , Coords238_g169996 , WorldPosition238_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169996) = _SecondShaderTex;
				SamplerState Sampler246_g169996 = sampler_Linear_Repeat;
				half4 Coords246_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition246_g169996 = temp_output_279_0_g169996;
				float3 temp_output_280_0_g169996 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169996 = temp_output_280_0_g169996;
				half4 localSamplePlanar3D246_g169996 = SamplePlanar3D( Texture246_g169996 , Sampler246_g169996 , Coords246_g169996 , WorldPosition246_g169996 , WorldNormal246_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169996) = _SecondShaderTex;
				SamplerState Sampler234_g169996 = sampler_Linear_Repeat;
				float4 Coords234_g169996 = temp_output_37_0_g169996;
				float3 WorldPosition234_g169996 = temp_output_279_0_g169996;
				float4 localSampleStochastic2D234_g169996 = SampleStochastic2D( Texture234_g169996 , Sampler234_g169996 , Coords234_g169996 , WorldPosition234_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169996) = _SecondShaderTex;
				SamplerState Sampler263_g169996 = sampler_Linear_Repeat;
				half4 Coords263_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition263_g169996 = temp_output_279_0_g169996;
				half3 WorldNormal263_g169996 = temp_output_280_0_g169996;
				half4 localSampleStochastic3D263_g169996 = SampleStochastic3D( Texture263_g169996 , Sampler263_g169996 , Coords263_g169996 , WorldPosition263_g169996 , WorldNormal263_g169996 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g169993 = localSampleExtra275_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g169993 = localSamplePlanar2D238_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g169993 = localSamplePlanar3D246_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g169993 = localSampleStochastic2D234_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g169993 = localSampleStochastic3D263_g169996;
				#else
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#endif
				half4 Local_ShaderTex775_g169993 = staticSwitch722_g169993;
				float lerpResult739_g169993 = lerp( 1.0 , (Local_ShaderTex775_g169993).y , _SecondOcclusionValue);
				float4 appendResult749_g169993 = (float4(( (Local_ShaderTex775_g169993).x * _SecondMetallicValue ) , lerpResult739_g169993 , (Local_ShaderTex775_g169993).z , ( (Local_ShaderTex775_g169993).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g169993 = appendResult749_g169993;
				float clampResult17_g170000 = clamp( (Local_Masks750_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170001 = _SecondMultiRemap.x;
				float temp_output_10_0_g170001 = ( _SecondMultiRemap.y - temp_output_7_0_g170001 );
				float temp_output_765_0_g169993 = saturate( ( ( clampResult17_g170000 - temp_output_7_0_g170001 ) / ( temp_output_10_0_g170001 + 0.0001 ) ) );
				half Local_MultiMask767_g169993 = temp_output_765_0_g169993;
				float lerpResult705_g169993 = lerp( 1.0 , Local_MultiMask767_g169993 , _SecondColorMode);
				float4 lerpResult706_g169993 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g169993);
				half3 Local_ColorRGB774_g169993 = (lerpResult706_g169993).rgb;
				half3 Local_Albedo768_g169993 = ( Local_AlbedoRGB771_g169993 * Local_ColorRGB774_g169993 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170020 = 2.0;
				#else
				float staticSwitch1_g170020 = 4.594794;
				#endif
				float3 lerpResult985_g169993 = lerp( Local_Albedo768_g169993 , ( Visual_Albedo527_g169993 * Local_Albedo768_g169993 * staticSwitch1_g170020 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169997) = _SecondMaskTex;
				SamplerState Sampler276_g169997 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g169993 = _second_mask_coord_value;
				float4 temp_output_37_0_g169997 = Local_BlendCoords813_g169993;
				half4 Coords276_g169997 = temp_output_37_0_g169997;
				half2 TexCoord276_g169997 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169997 = SampleMain( Texture276_g169997 , Sampler276_g169997 , Coords276_g169997 , TexCoord276_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169997) = _SecondMaskTex;
				SamplerState Sampler275_g169997 = sampler_Linear_Repeat;
				half4 Coords275_g169997 = temp_output_37_0_g169997;
				half2 TexCoord275_g169997 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169997 = SampleExtra( Texture275_g169997 , Sampler275_g169997 , Coords275_g169997 , TexCoord275_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169997) = _SecondMaskTex;
				SamplerState Sampler238_g169997 = sampler_Linear_Repeat;
				half4 Coords238_g169997 = temp_output_37_0_g169997;
				float3 temp_output_279_0_g169997 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169997 = temp_output_279_0_g169997;
				half4 localSamplePlanar2D238_g169997 = SamplePlanar2D( Texture238_g169997 , Sampler238_g169997 , Coords238_g169997 , WorldPosition238_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169997) = _SecondMaskTex;
				SamplerState Sampler246_g169997 = sampler_Linear_Repeat;
				half4 Coords246_g169997 = temp_output_37_0_g169997;
				half3 WorldPosition246_g169997 = temp_output_279_0_g169997;
				float3 temp_output_280_0_g169997 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169997 = temp_output_280_0_g169997;
				half4 localSamplePlanar3D246_g169997 = SamplePlanar3D( Texture246_g169997 , Sampler246_g169997 , Coords246_g169997 , WorldPosition246_g169997 , WorldNormal246_g169997 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g169993 = localSampleExtra275_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g169993 = localSamplePlanar2D238_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g169993 = localSamplePlanar3D246_g169997;
				#else
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#endif
				half4 Local_MaskTex861_g169993 = staticSwitch817_g169993;
				float clampResult17_g170011 = clamp( (Local_MaskTex861_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170010 = _SecondMaskRemap.x;
				float temp_output_10_0_g170010 = ( _SecondMaskRemap.y - temp_output_7_0_g170010 );
				float lerpResult1015_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170011 - temp_output_7_0_g170010 ) / ( temp_output_10_0_g170010 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g169993 = lerpResult1015_g169993;
				half3 Visual_NormalWS951_g169993 = Out_NormalWS4_g170007;
				float clampResult17_g170012 = clamp( saturate( (Visual_NormalWS951_g169993).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170013 = _SecondProjRemap.x;
				float temp_output_10_0_g170013 = ( _SecondProjRemap.y - temp_output_7_0_g170013 );
				float lerpResult996_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170012 - temp_output_7_0_g170013 ) / ( temp_output_10_0_g170013 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g169993 = lerpResult996_g169993;
				half4 Model_VertexMasks964_g169993 = Out_VertexData15_g170005;
				float4 break965_g169993 = Model_VertexMasks964_g169993;
				float4 break33_g170014 = _second_vert_mode;
				float temp_output_30_0_g170014 = ( break965_g169993.x * break33_g170014.x );
				float temp_output_29_0_g170014 = ( break965_g169993.y * break33_g170014.y );
				float temp_output_31_0_g170014 = ( break965_g169993.z * break33_g170014.z );
				float temp_output_28_0_g170014 = ( temp_output_30_0_g170014 + temp_output_29_0_g170014 + temp_output_31_0_g170014 + ( break965_g169993.w * break33_g170014.w ) );
				float clampResult17_g170008 = clamp( temp_output_28_0_g170014 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170009 = _SecondMeshRemap.x;
				float temp_output_10_0_g170009 = ( _SecondMeshRemap.y - temp_output_7_0_g170009 );
				float lerpResult1017_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170008 - temp_output_7_0_g170009 ) / ( temp_output_10_0_g170009 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170022 = lerpResult1017_g169993;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170022 = ( temp_output_6_0_g170022 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170022 = temp_output_6_0_g170022;
				#endif
				float temp_output_987_0_g169993 = staticSwitch14_g170022;
				half Blend_VertMask918_g169993 = temp_output_987_0_g169993;
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170006 = Data204_g169264;
				float Out_Dummy15_g170006 = 0;
				float4 Out_CoatParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170006 = Data15_g170006.Dummy;
				Out_CoatParams15_g170006 = Data15_g170006.CoatParams;
				Out_PaintParams15_g170006 = Data15_g170006.PaintParams;
				Out_GlowParams15_g170006 = Data15_g170006.GlowParams;
				Out_AtmoParams15_g170006= Data15_g170006.AtmoParams;
				Out_FadeParams15_g170006= Data15_g170006.FadeParams;
				Out_FormParams15_g170006 = Data15_g170006.FormParams;
				Out_LandParams15_g170006 = Data15_g170006.LandParams;
				Out_WindParams15_g170006 = Data15_g170006.WindParams;
				Out_PushParams15_g170006 = Data15_g170006.PushParams;
				}
				half4 Global_CoatParams975_g169993 = Out_CoatParams15_g170006;
				float lerpResult1013_g169993 = lerp( 1.0 , (Global_CoatParams975_g169993).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g169993 = lerpResult1013_g169993;
				#else
				float staticSwitch971_g169993 = 1.0;
				#endif
				half Blend_GlobalMask972_g169993 = staticSwitch971_g169993;
				float temp_output_432_0_g169993 = ( _SecondIntensityValue * Blend_TexMask429_g169993 * Blend_ProjMask434_g169993 * Blend_VertMask918_g169993 * Blend_GlobalMask972_g169993 );
				float clampResult17_g170016 = clamp( temp_output_432_0_g169993 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170015 = _SecondBlendRemap.x;
				float temp_output_10_0_g170015 = ( _SecondBlendRemap.y - temp_output_7_0_g170015 );
				half Blend_Mask412_g169993 = ( saturate( ( ( clampResult17_g170016 - temp_output_7_0_g170015 ) / ( temp_output_10_0_g170015 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g169993 = lerp( Visual_Albedo527_g169993 , lerpResult985_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g169993 = lerpResult403_g169993;
				#else
				float3 staticSwitch415_g169993 = Visual_Albedo527_g169993;
				#endif
				half3 Final_Albedo601_g169993 = staticSwitch415_g169993;
				float3 In_Albedo3_g170004 = Final_Albedo601_g169993;
				half2 Visual_NormalTS529_g169993 = Out_NormalTS4_g170007;
				float2 lerpResult40_g170018 = lerp( float2( 0,0 ) , Visual_NormalTS529_g169993 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169995) = _SecondNormalTex;
				SamplerState Sampler276_g169995 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169995 = Local_LayerCoords790_g169993;
				half4 Coords276_g169995 = temp_output_37_0_g169995;
				half2 TexCoord276_g169995 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g169995 = SampleMain( Texture276_g169995 , Sampler276_g169995 , Coords276_g169995 , TexCoord276_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169995) = _SecondNormalTex;
				SamplerState Sampler275_g169995 = sampler_Linear_Repeat;
				half4 Coords275_g169995 = temp_output_37_0_g169995;
				half2 TexCoord275_g169995 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g169995 = SampleExtra( Texture275_g169995 , Sampler275_g169995 , Coords275_g169995 , TexCoord275_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169995) = _SecondNormalTex;
				SamplerState Sampler238_g169995 = sampler_Linear_Repeat;
				half4 Coords238_g169995 = temp_output_37_0_g169995;
				float3 temp_output_279_0_g169995 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169995 = temp_output_279_0_g169995;
				half4 localSamplePlanar2D238_g169995 = SamplePlanar2D( Texture238_g169995 , Sampler238_g169995 , Coords238_g169995 , WorldPosition238_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169995) = _SecondNormalTex;
				SamplerState Sampler246_g169995 = sampler_Linear_Repeat;
				half4 Coords246_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition246_g169995 = temp_output_279_0_g169995;
				float3 temp_output_280_0_g169995 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169995 = temp_output_280_0_g169995;
				half4 localSamplePlanar3D246_g169995 = SamplePlanar3D( Texture246_g169995 , Sampler246_g169995 , Coords246_g169995 , WorldPosition246_g169995 , WorldNormal246_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169995) = _SecondNormalTex;
				SamplerState Sampler234_g169995 = sampler_Linear_Repeat;
				float4 Coords234_g169995 = temp_output_37_0_g169995;
				float3 WorldPosition234_g169995 = temp_output_279_0_g169995;
				float4 localSampleStochastic2D234_g169995 = SampleStochastic2D( Texture234_g169995 , Sampler234_g169995 , Coords234_g169995 , WorldPosition234_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169995) = _SecondNormalTex;
				SamplerState Sampler263_g169995 = sampler_Linear_Repeat;
				half4 Coords263_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition263_g169995 = temp_output_279_0_g169995;
				half3 WorldNormal263_g169995 = temp_output_280_0_g169995;
				half4 localSampleStochastic3D263_g169995 = SampleStochastic3D( Texture263_g169995 , Sampler263_g169995 , Coords263_g169995 , WorldPosition263_g169995 , WorldNormal263_g169995 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g169993 = localSampleExtra275_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g169993 = localSamplePlanar2D238_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g169993 = localSamplePlanar3D246_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g169993 = localSampleStochastic2D234_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g169993 = localSampleStochastic3D263_g169995;
				#else
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#endif
				half4 Local_NormalTex776_g169993 = staticSwitch698_g169993;
				half4 Normal_Packed45_g169998 = Local_NormalTex776_g169993;
				float2 appendResult58_g169998 = (float2(( (Normal_Packed45_g169998).x * (Normal_Packed45_g169998).w ) , (Normal_Packed45_g169998).y));
				half2 Normal_Default50_g169998 = appendResult58_g169998;
				half2 Normal_ASTC41_g169998 = (Normal_Packed45_g169998).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169998 = Normal_ASTC41_g169998;
				#else
				float2 staticSwitch38_g169998 = Normal_Default50_g169998;
				#endif
				half2 Normal_NO_DTX544_g169998 = (Normal_Packed45_g169998).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169998 = Normal_NO_DTX544_g169998;
				#else
				float2 staticSwitch37_g169998 = staticSwitch38_g169998;
				#endif
				float2 temp_output_724_0_g169993 = ( (staticSwitch37_g169998*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g169999 = temp_output_724_0_g169993;
				float2 break71_g169999 = Normal_Planar45_g169999;
				float3 appendResult72_g169999 = (float3(break71_g169999.x , 0.0 , break71_g169999.y));
				float2 temp_output_858_0_g169993 = (mul( ase_worldToTangent, appendResult72_g169999 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#else
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#endif
				half2 Local_NormalTS729_g169993 = staticSwitch727_g169993;
				float2 temp_output_36_0_g170018 = ( lerpResult40_g170018 + Local_NormalTS729_g169993 );
				float2 lerpResult405_g169993 = lerp( Visual_NormalTS529_g169993 , temp_output_36_0_g170018 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g169993 = lerpResult405_g169993;
				#else
				float2 staticSwitch418_g169993 = Visual_NormalTS529_g169993;
				#endif
				half2 Final_NormalTS612_g169993 = staticSwitch418_g169993;
				float2 In_NormalTS3_g170004 = Final_NormalTS612_g169993;
				float3 appendResult68_g170019 = (float3(Final_NormalTS612_g169993 , 1.0));
				float3 tanNormal74_g170019 = appendResult68_g170019;
				float3 worldNormal74_g170019 = normalize( float3(dot(tanToWorld0,tanNormal74_g170019), dot(tanToWorld1,tanNormal74_g170019), dot(tanToWorld2,tanNormal74_g170019)) );
				half3 Final_NormalWS950_g169993 = worldNormal74_g170019;
				float3 In_NormalWS3_g170004 = Final_NormalWS950_g169993;
				half4 Visual_Shader531_g169993 = Out_Shader4_g170007;
				float4 lerpResult994_g169993 = lerp( Local_Masks750_g169993 , ( Visual_Shader531_g169993 * Local_Masks750_g169993 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g169993 = lerp( Visual_Shader531_g169993 , lerpResult994_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g169993 = lerpResult440_g169993;
				#else
				float4 staticSwitch451_g169993 = Visual_Shader531_g169993;
				#endif
				half4 Final_Masks613_g169993 = staticSwitch451_g169993;
				float4 In_Shader3_g170004 = Final_Masks613_g169993;
				float4 In_Emissive3_g170004 = Out_Emissive4_g170007;
				float3 temp_output_3_0_g170021 = Final_Albedo601_g169993;
				float dotResult20_g170021 = dot( temp_output_3_0_g170021 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g169993 = dotResult20_g170021;
				float In_Grayscale3_g170004 = Final_Grayscale615_g169993;
				float clampResult651_g169993 = clamp( saturate( ( Final_Grayscale615_g169993 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g169993 = clampResult651_g169993;
				float In_Luminosity3_g170004 = Final_Luminosity652_g169993;
				half Visual_MultiMask547_g169993 = Out_MultiMask4_g170007;
				float lerpResult477_g169993 = lerp( Visual_MultiMask547_g169993 , Local_MultiMask767_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch482_g169993 = lerpResult477_g169993;
				#else
				float staticSwitch482_g169993 = Visual_MultiMask547_g169993;
				#endif
				half Final_MultiMask572_g169993 = staticSwitch482_g169993;
				float In_MultiMask3_g170004 = Final_MultiMask572_g169993;
				half Visual_AlphaClip559_g169993 = Out_AlphaClip4_g170007;
				float temp_output_718_0_g169993 = (Local_AlbedoTex777_g169993).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g169993 = ( temp_output_718_0_g169993 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g169993 = temp_output_718_0_g169993;
				#endif
				half Local_AlphaClip772_g169993 = staticSwitch932_g169993;
				float lerpResult448_g169993 = lerp( Visual_AlphaClip559_g169993 , Local_AlphaClip772_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch564_g169993 = lerpResult448_g169993;
				#else
				float staticSwitch564_g169993 = Visual_AlphaClip559_g169993;
				#endif
				half Final_AlphaClip602_g169993 = staticSwitch564_g169993;
				float In_AlphaClip3_g170004 = Final_AlphaClip602_g169993;
				half Visual_AlphaFade588_g169993 = Out_AlphaFade4_g170007;
				half Local_AlphaFade773_g169993 = (lerpResult706_g169993).a;
				float lerpResult604_g169993 = lerp( Visual_AlphaFade588_g169993 , Local_AlphaFade773_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch608_g169993 = lerpResult604_g169993;
				#else
				float staticSwitch608_g169993 = Visual_AlphaFade588_g169993;
				#endif
				half Final_AlphaFade611_g169993 = staticSwitch608_g169993;
				float In_AlphaFade3_g170004 = Final_AlphaFade611_g169993;
				float3 In_Translucency3_g170004 = Out_Translucency4_g170007;
				float In_Transmission3_g170004 = Out_Transmission4_g170007;
				float In_Thickness3_g170004 = Out_Thickness4_g170007;
				float In_Diffusion3_g170004 = Out_Diffusion4_g170007;
				{
				Data3_g170004.Dummy = In_Dummy3_g170004;
				Data3_g170004.Albedo = In_Albedo3_g170004;
				Data3_g170004.NormalTS = In_NormalTS3_g170004;
				Data3_g170004.NormalWS = In_NormalWS3_g170004;
				Data3_g170004.Shader = In_Shader3_g170004;
				Data3_g170004.Emissive= In_Emissive3_g170004;
				Data3_g170004.MultiMask = In_MultiMask3_g170004;
				Data3_g170004.Grayscale = In_Grayscale3_g170004;
				Data3_g170004.Luminosity = In_Luminosity3_g170004;
				Data3_g170004.AlphaClip = In_AlphaClip3_g170004;
				Data3_g170004.AlphaFade = In_AlphaFade3_g170004;
				Data3_g170004.Translucency = In_Translucency3_g170004;
				Data3_g170004.Transmission = In_Transmission3_g170004;
				Data3_g170004.Thickness = In_Thickness3_g170004;
				Data3_g170004.Diffusion = In_Diffusion3_g170004;
				}
				TVEVisualData Data4_g170049 = Data3_g170004;
				float Out_Dummy4_g170049 = 0;
				float3 Out_Albedo4_g170049 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170049 = float2( 0,0 );
				float3 Out_NormalWS4_g170049 = float3( 0,0,0 );
				float4 Out_Shader4_g170049 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170049 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170049 = 0;
				float Out_Grayscale4_g170049 = 0;
				float Out_Luminosity4_g170049 = 0;
				float Out_AlphaClip4_g170049 = 0;
				float Out_AlphaFade4_g170049 = 0;
				float3 Out_Translucency4_g170049 = float3( 0,0,0 );
				float Out_Transmission4_g170049 = 0;
				float Out_Thickness4_g170049 = 0;
				float Out_Diffusion4_g170049 = 0;
				{
				Out_Dummy4_g170049 = Data4_g170049.Dummy;
				Out_Albedo4_g170049 = Data4_g170049.Albedo;
				Out_NormalTS4_g170049 = Data4_g170049.NormalTS;
				Out_NormalWS4_g170049 = Data4_g170049.NormalWS;
				Out_Shader4_g170049 = Data4_g170049.Shader;
				Out_Emissive4_g170049= Data4_g170049.Emissive;
				Out_MultiMask4_g170049 = Data4_g170049.MultiMask;
				Out_Grayscale4_g170049 = Data4_g170049.Grayscale;
				Out_Luminosity4_g170049= Data4_g170049.Luminosity;
				Out_AlphaClip4_g170049 = Data4_g170049.AlphaClip;
				Out_AlphaFade4_g170049 = Data4_g170049.AlphaFade;
				Out_Translucency4_g170049 = Data4_g170049.Translucency;
				Out_Transmission4_g170049 = Data4_g170049.Transmission;
				Out_Thickness4_g170049 = Data4_g170049.Thickness;
				Out_Diffusion4_g170049 = Data4_g170049.Diffusion;
				}
				half3 Visual_Albedo527_g170033 = Out_Albedo4_g170049;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170033 = _third_coord_value;
				float4 temp_output_37_0_g170034 = Local_LayerCoords790_g170033;
				half4 Coords276_g170034 = temp_output_37_0_g170034;
				half2 TexCoord276_g170034 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170034 = SampleMain( Texture276_g170034 , Sampler276_g170034 , Coords276_g170034 , TexCoord276_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170034 = temp_output_37_0_g170034;
				half2 TexCoord275_g170034 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170034 = SampleExtra( Texture275_g170034 , Sampler275_g170034 , Coords275_g170034 , TexCoord275_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170034 = temp_output_37_0_g170034;
				TVEModelData Data15_g170061 = Data16_g169262;
				float Out_Dummy15_g170061 = 0;
				float3 Out_PositionOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170061 = float3( 0,0,0 );
				float4 Out_VertexData15_g170061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170061 = Data15_g170061.Dummy;
				Out_PositionOS15_g170061 = Data15_g170061.PositionOS;
				Out_PositionWS15_g170061 = Data15_g170061.PositionWS;
				Out_PositionWO15_g170061 = Data15_g170061.PositionWO;
				Out_PositionRawOS15_g170061 = Data15_g170061.PositionRawOS;
				Out_PositionAddOS15_g170061 = Data15_g170061.PositionAddOS;
				Out_PivotOS15_g170061 = Data15_g170061.PivotOS;
				Out_PivotWS15_g170061 = Data15_g170061.PivotWS;
				Out_PivotWO15_g170061 = Data15_g170061.PivotWO;
				Out_NormalOS15_g170061 = Data15_g170061.NormalOS;
				Out_NormalWS15_g170061 = Data15_g170061.NormalWS;
				Out_NormalRawOS15_g170061 = Data15_g170061.NormalRawOS;
				Out_NormalRawWS15_g170061 = Data15_g170061.NormalRawWS;
				Out_TangentOS15_g170061 = Data15_g170061.TangentOS;
				Out_ViewDirWS15_g170061 = Data15_g170061.ViewDirWS;
				Out_VertexData15_g170061 = Data15_g170061.VertexData;
				Out_MotionData15_g170061 = Data15_g170061.MotionData;
				Out_BoundsData15_g170061 = Data15_g170061.BoundsData;
				Out_RotationData15_g170061 = Data15_g170061.RotationData;
				}
				half3 Model_PositionWO636_g170033 = Out_PositionWO15_g170061;
				float3 temp_output_279_0_g170034 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170034 = temp_output_279_0_g170034;
				half4 localSamplePlanar2D238_g170034 = SamplePlanar2D( Texture238_g170034 , Sampler238_g170034 , Coords238_g170034 , WorldPosition238_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition246_g170034 = temp_output_279_0_g170034;
				half3 Model_NormalWS869_g170033 = Out_NormalWS15_g170061;
				float3 temp_output_280_0_g170034 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170034 = temp_output_280_0_g170034;
				half4 localSamplePlanar3D246_g170034 = SamplePlanar3D( Texture246_g170034 , Sampler246_g170034 , Coords246_g170034 , WorldPosition246_g170034 , WorldNormal246_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170034 = temp_output_37_0_g170034;
				float3 WorldPosition234_g170034 = temp_output_279_0_g170034;
				float4 localSampleStochastic2D234_g170034 = SampleStochastic2D( Texture234_g170034 , Sampler234_g170034 , Coords234_g170034 , WorldPosition234_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition263_g170034 = temp_output_279_0_g170034;
				half3 WorldNormal263_g170034 = temp_output_280_0_g170034;
				half4 localSampleStochastic3D263_g170034 = SampleStochastic3D( Texture263_g170034 , Sampler263_g170034 , Coords263_g170034 , WorldPosition263_g170034 , WorldNormal263_g170034 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170033 = localSampleExtra275_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170033 = localSamplePlanar2D238_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170033 = localSamplePlanar3D246_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170033 = localSampleStochastic2D234_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170033 = localSampleStochastic3D263_g170034;
				#else
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#endif
				half4 Local_AlbedoTex777_g170033 = staticSwitch693_g170033;
				float3 lerpResult716_g170033 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170033).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170033 = lerpResult716_g170033;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170036) = _ThirdShaderTex;
				SamplerState Sampler276_g170036 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170036 = Local_LayerCoords790_g170033;
				half4 Coords276_g170036 = temp_output_37_0_g170036;
				half2 TexCoord276_g170036 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170036 = SampleMain( Texture276_g170036 , Sampler276_g170036 , Coords276_g170036 , TexCoord276_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170036) = _ThirdShaderTex;
				SamplerState Sampler275_g170036 = sampler_Linear_Repeat;
				half4 Coords275_g170036 = temp_output_37_0_g170036;
				half2 TexCoord275_g170036 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170036 = SampleExtra( Texture275_g170036 , Sampler275_g170036 , Coords275_g170036 , TexCoord275_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170036) = _ThirdShaderTex;
				SamplerState Sampler238_g170036 = sampler_Linear_Repeat;
				half4 Coords238_g170036 = temp_output_37_0_g170036;
				float3 temp_output_279_0_g170036 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170036 = temp_output_279_0_g170036;
				half4 localSamplePlanar2D238_g170036 = SamplePlanar2D( Texture238_g170036 , Sampler238_g170036 , Coords238_g170036 , WorldPosition238_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170036) = _ThirdShaderTex;
				SamplerState Sampler246_g170036 = sampler_Linear_Repeat;
				half4 Coords246_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition246_g170036 = temp_output_279_0_g170036;
				float3 temp_output_280_0_g170036 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170036 = temp_output_280_0_g170036;
				half4 localSamplePlanar3D246_g170036 = SamplePlanar3D( Texture246_g170036 , Sampler246_g170036 , Coords246_g170036 , WorldPosition246_g170036 , WorldNormal246_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170036) = _ThirdShaderTex;
				SamplerState Sampler234_g170036 = sampler_Linear_Repeat;
				float4 Coords234_g170036 = temp_output_37_0_g170036;
				float3 WorldPosition234_g170036 = temp_output_279_0_g170036;
				float4 localSampleStochastic2D234_g170036 = SampleStochastic2D( Texture234_g170036 , Sampler234_g170036 , Coords234_g170036 , WorldPosition234_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170036) = _ThirdShaderTex;
				SamplerState Sampler263_g170036 = sampler_Linear_Repeat;
				half4 Coords263_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition263_g170036 = temp_output_279_0_g170036;
				half3 WorldNormal263_g170036 = temp_output_280_0_g170036;
				half4 localSampleStochastic3D263_g170036 = SampleStochastic3D( Texture263_g170036 , Sampler263_g170036 , Coords263_g170036 , WorldPosition263_g170036 , WorldNormal263_g170036 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170033 = localSampleExtra275_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170033 = localSamplePlanar2D238_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170033 = localSamplePlanar3D246_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170033 = localSampleStochastic2D234_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170033 = localSampleStochastic3D263_g170036;
				#else
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#endif
				half4 Local_ShaderTex775_g170033 = staticSwitch722_g170033;
				float lerpResult739_g170033 = lerp( 1.0 , (Local_ShaderTex775_g170033).y , _ThirdOcclusionValue);
				float4 appendResult749_g170033 = (float4(( (Local_ShaderTex775_g170033).x * _ThirdMetallicValue ) , lerpResult739_g170033 , (Local_ShaderTex775_g170033).z , ( (Local_ShaderTex775_g170033).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170033 = appendResult749_g170033;
				float clampResult17_g170039 = clamp( (Local_Masks750_g170033).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170040 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170040 = ( _ThirdMultiRemap.y - temp_output_7_0_g170040 );
				float temp_output_765_0_g170033 = saturate( ( ( clampResult17_g170039 - temp_output_7_0_g170040 ) / ( temp_output_10_0_g170040 + 0.0001 ) ) );
				half Local_MultiMask767_g170033 = temp_output_765_0_g170033;
				float lerpResult705_g170033 = lerp( 1.0 , Local_MultiMask767_g170033 , _ThirdColorMode);
				float4 lerpResult706_g170033 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170033);
				half3 Local_ColorRGB774_g170033 = (lerpResult706_g170033).rgb;
				half3 Local_Albedo768_g170033 = ( Local_AlbedoRGB771_g170033 * Local_ColorRGB774_g170033 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170057 = 2.0;
				#else
				float staticSwitch1_g170057 = 4.594794;
				#endif
				float3 lerpResult985_g170033 = lerp( Local_Albedo768_g170033 , ( Visual_Albedo527_g170033 * Local_Albedo768_g170033 * staticSwitch1_g170057 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170060) = _ThirdMaskTex;
				SamplerState Sampler276_g170060 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170033 = _third_mask_coord_value;
				float4 temp_output_37_0_g170060 = Local_MaskCoords813_g170033;
				half4 Coords276_g170060 = temp_output_37_0_g170060;
				half2 TexCoord276_g170060 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170060 = SampleMain( Texture276_g170060 , Sampler276_g170060 , Coords276_g170060 , TexCoord276_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170060) = _ThirdMaskTex;
				SamplerState Sampler275_g170060 = sampler_Linear_Repeat;
				half4 Coords275_g170060 = temp_output_37_0_g170060;
				half2 TexCoord275_g170060 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170060 = SampleExtra( Texture275_g170060 , Sampler275_g170060 , Coords275_g170060 , TexCoord275_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170060) = _ThirdMaskTex;
				SamplerState Sampler238_g170060 = sampler_Linear_Repeat;
				half4 Coords238_g170060 = temp_output_37_0_g170060;
				float3 temp_output_279_0_g170060 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170060 = temp_output_279_0_g170060;
				half4 localSamplePlanar2D238_g170060 = SamplePlanar2D( Texture238_g170060 , Sampler238_g170060 , Coords238_g170060 , WorldPosition238_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170060) = _ThirdMaskTex;
				SamplerState Sampler246_g170060 = sampler_Linear_Repeat;
				half4 Coords246_g170060 = temp_output_37_0_g170060;
				half3 WorldPosition246_g170060 = temp_output_279_0_g170060;
				float3 temp_output_280_0_g170060 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170060 = temp_output_280_0_g170060;
				half4 localSamplePlanar3D246_g170060 = SamplePlanar3D( Texture246_g170060 , Sampler246_g170060 , Coords246_g170060 , WorldPosition246_g170060 , WorldNormal246_g170060 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170033 = localSampleExtra275_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170033 = localSamplePlanar2D238_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170033 = localSamplePlanar3D246_g170060;
				#else
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#endif
				half4 Local_MaskTex861_g170033 = staticSwitch817_g170033;
				float clampResult17_g170044 = clamp( (Local_MaskTex861_g170033).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170045 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170045 = ( _ThirdMaskRemap.y - temp_output_7_0_g170045 );
				float lerpResult1028_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170044 - temp_output_7_0_g170045 ) / ( temp_output_10_0_g170045 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170033 = lerpResult1028_g170033;
				half4 Model_VertexMasks960_g170033 = Out_VertexData15_g170061;
				float4 break961_g170033 = Model_VertexMasks960_g170033;
				float4 break33_g170048 = _third_vert_mode;
				float temp_output_30_0_g170048 = ( break961_g170033.x * break33_g170048.x );
				float temp_output_29_0_g170048 = ( break961_g170033.y * break33_g170048.y );
				float temp_output_31_0_g170048 = ( break961_g170033.z * break33_g170048.z );
				float temp_output_28_0_g170048 = ( temp_output_30_0_g170048 + temp_output_29_0_g170048 + temp_output_31_0_g170048 + ( break961_g170033.w * break33_g170048.w ) );
				float clampResult17_g170042 = clamp( temp_output_28_0_g170048 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170043 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170043 = ( _ThirdMeshRemap.y - temp_output_7_0_g170043 );
				float lerpResult1026_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170042 - temp_output_7_0_g170043 ) / ( temp_output_10_0_g170043 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170059 = lerpResult1026_g170033;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170059 = ( temp_output_6_0_g170059 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170059 = temp_output_6_0_g170059;
				#endif
				float temp_output_992_0_g170033 = staticSwitch14_g170059;
				half Blend_VertMask913_g170033 = temp_output_992_0_g170033;
				half3 Visual_NormalWS953_g170033 = Out_NormalWS4_g170049;
				float clampResult17_g170046 = clamp( saturate( (Visual_NormalWS953_g170033).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170047 = _ThirdProjRemap.x;
				float temp_output_10_0_g170047 = ( _ThirdProjRemap.y - temp_output_7_0_g170047 );
				float lerpResult1004_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170046 - temp_output_7_0_g170047 ) / ( temp_output_10_0_g170047 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170033 = lerpResult1004_g170033;
				TVEGlobalData Data15_g170051 = Data204_g169264;
				float Out_Dummy15_g170051 = 0;
				float4 Out_CoatParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170051 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170051 = Data15_g170051.Dummy;
				Out_CoatParams15_g170051 = Data15_g170051.CoatParams;
				Out_PaintParams15_g170051 = Data15_g170051.PaintParams;
				Out_GlowParams15_g170051 = Data15_g170051.GlowParams;
				Out_AtmoParams15_g170051= Data15_g170051.AtmoParams;
				Out_FadeParams15_g170051= Data15_g170051.FadeParams;
				Out_FormParams15_g170051 = Data15_g170051.FormParams;
				Out_LandParams15_g170051 = Data15_g170051.LandParams;
				Out_WindParams15_g170051 = Data15_g170051.WindParams;
				Out_PushParams15_g170051 = Data15_g170051.PushParams;
				}
				half4 Global_CoatParams972_g170033 = Out_CoatParams15_g170051;
				float lerpResult1023_g170033 = lerp( 1.0 , (Global_CoatParams972_g170033).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170033 = lerpResult1023_g170033;
				#else
				float staticSwitch965_g170033 = 1.0;
				#endif
				half Blend_GlobalMask968_g170033 = staticSwitch965_g170033;
				float temp_output_432_0_g170033 = ( _ThirdIntensityValue * Detail_TexMask429_g170033 * Blend_VertMask913_g170033 * Blend_ProjMask912_g170033 * Blend_GlobalMask968_g170033 );
				float clampResult17_g170053 = clamp( temp_output_432_0_g170033 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170052 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170052 = ( _ThirdBlendRemap.y - temp_output_7_0_g170052 );
				half Detail_Mask412_g170033 = ( saturate( ( ( clampResult17_g170053 - temp_output_7_0_g170052 ) / ( temp_output_10_0_g170052 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170033 = lerp( Visual_Albedo527_g170033 , lerpResult985_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170033 = lerpResult989_g170033;
				#else
				float3 staticSwitch415_g170033 = Visual_Albedo527_g170033;
				#endif
				half3 Final_Albedo601_g170033 = staticSwitch415_g170033;
				float3 In_Albedo3_g170050 = Final_Albedo601_g170033;
				half2 Visual_NormalTS529_g170033 = Out_NormalTS4_g170049;
				float2 lerpResult40_g170055 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170033 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170035) = _ThirdNormalTex;
				SamplerState Sampler276_g170035 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170035 = Local_LayerCoords790_g170033;
				half4 Coords276_g170035 = temp_output_37_0_g170035;
				half2 TexCoord276_g170035 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170035 = SampleMain( Texture276_g170035 , Sampler276_g170035 , Coords276_g170035 , TexCoord276_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170035) = _ThirdNormalTex;
				SamplerState Sampler275_g170035 = sampler_Linear_Repeat;
				half4 Coords275_g170035 = temp_output_37_0_g170035;
				half2 TexCoord275_g170035 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170035 = SampleExtra( Texture275_g170035 , Sampler275_g170035 , Coords275_g170035 , TexCoord275_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170035) = _ThirdNormalTex;
				SamplerState Sampler238_g170035 = sampler_Linear_Repeat;
				half4 Coords238_g170035 = temp_output_37_0_g170035;
				float3 temp_output_279_0_g170035 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170035 = temp_output_279_0_g170035;
				half4 localSamplePlanar2D238_g170035 = SamplePlanar2D( Texture238_g170035 , Sampler238_g170035 , Coords238_g170035 , WorldPosition238_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170035) = _ThirdNormalTex;
				SamplerState Sampler246_g170035 = sampler_Linear_Repeat;
				half4 Coords246_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition246_g170035 = temp_output_279_0_g170035;
				float3 temp_output_280_0_g170035 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170035 = temp_output_280_0_g170035;
				half4 localSamplePlanar3D246_g170035 = SamplePlanar3D( Texture246_g170035 , Sampler246_g170035 , Coords246_g170035 , WorldPosition246_g170035 , WorldNormal246_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170035) = _ThirdNormalTex;
				SamplerState Sampler234_g170035 = sampler_Linear_Repeat;
				float4 Coords234_g170035 = temp_output_37_0_g170035;
				float3 WorldPosition234_g170035 = temp_output_279_0_g170035;
				float4 localSampleStochastic2D234_g170035 = SampleStochastic2D( Texture234_g170035 , Sampler234_g170035 , Coords234_g170035 , WorldPosition234_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170035) = _ThirdNormalTex;
				SamplerState Sampler263_g170035 = sampler_Linear_Repeat;
				half4 Coords263_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition263_g170035 = temp_output_279_0_g170035;
				half3 WorldNormal263_g170035 = temp_output_280_0_g170035;
				half4 localSampleStochastic3D263_g170035 = SampleStochastic3D( Texture263_g170035 , Sampler263_g170035 , Coords263_g170035 , WorldPosition263_g170035 , WorldNormal263_g170035 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170033 = localSampleExtra275_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170033 = localSamplePlanar2D238_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170033 = localSamplePlanar3D246_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170033 = localSampleStochastic2D234_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170033 = localSampleStochastic3D263_g170035;
				#else
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#endif
				half4 Local_NormalTex776_g170033 = staticSwitch698_g170033;
				half4 Normal_Packed45_g170037 = Local_NormalTex776_g170033;
				float2 appendResult58_g170037 = (float2(( (Normal_Packed45_g170037).x * (Normal_Packed45_g170037).w ) , (Normal_Packed45_g170037).y));
				half2 Normal_Default50_g170037 = appendResult58_g170037;
				half2 Normal_ASTC41_g170037 = (Normal_Packed45_g170037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170037 = Normal_ASTC41_g170037;
				#else
				float2 staticSwitch38_g170037 = Normal_Default50_g170037;
				#endif
				half2 Normal_NO_DTX544_g170037 = (Normal_Packed45_g170037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170037 = Normal_NO_DTX544_g170037;
				#else
				float2 staticSwitch37_g170037 = staticSwitch38_g170037;
				#endif
				float2 temp_output_724_0_g170033 = ( (staticSwitch37_g170037*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170038 = temp_output_724_0_g170033;
				float2 break71_g170038 = Normal_Planar45_g170038;
				float3 appendResult72_g170038 = (float3(break71_g170038.x , 0.0 , break71_g170038.y));
				float2 temp_output_858_0_g170033 = (mul( ase_worldToTangent, appendResult72_g170038 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#else
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#endif
				half2 Local_NormalTS729_g170033 = staticSwitch727_g170033;
				float2 temp_output_36_0_g170055 = ( lerpResult40_g170055 + Local_NormalTS729_g170033 );
				float2 lerpResult405_g170033 = lerp( Visual_NormalTS529_g170033 , temp_output_36_0_g170055 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170033 = lerpResult405_g170033;
				#else
				float2 staticSwitch418_g170033 = Visual_NormalTS529_g170033;
				#endif
				half2 Final_NormalTS612_g170033 = staticSwitch418_g170033;
				float2 In_NormalTS3_g170050 = Final_NormalTS612_g170033;
				float3 appendResult68_g170056 = (float3(Final_NormalTS612_g170033 , 1.0));
				float3 tanNormal74_g170056 = appendResult68_g170056;
				float3 worldNormal74_g170056 = normalize( float3(dot(tanToWorld0,tanNormal74_g170056), dot(tanToWorld1,tanNormal74_g170056), dot(tanToWorld2,tanNormal74_g170056)) );
				half3 Final_NormalWS956_g170033 = worldNormal74_g170056;
				float3 In_NormalWS3_g170050 = Final_NormalWS956_g170033;
				half4 Visual_Shader531_g170033 = Out_Shader4_g170049;
				float4 lerpResult1000_g170033 = lerp( Local_Masks750_g170033 , ( Visual_Shader531_g170033 * Local_Masks750_g170033 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170033 = lerp( Visual_Shader531_g170033 , lerpResult1000_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170033 = lerpResult998_g170033;
				#else
				float4 staticSwitch451_g170033 = Visual_Shader531_g170033;
				#endif
				half4 Final_Masks613_g170033 = staticSwitch451_g170033;
				float4 In_Shader3_g170050 = Final_Masks613_g170033;
				float4 In_Emissive3_g170050 = Out_Emissive4_g170049;
				float3 temp_output_3_0_g170058 = Final_Albedo601_g170033;
				float dotResult20_g170058 = dot( temp_output_3_0_g170058 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170033 = dotResult20_g170058;
				float In_Grayscale3_g170050 = Final_Grayscale615_g170033;
				float clampResult651_g170033 = clamp( saturate( ( Final_Grayscale615_g170033 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170033 = clampResult651_g170033;
				float In_Luminosity3_g170050 = Final_Luminosity652_g170033;
				half Visual_MultiMask547_g170033 = Out_MultiMask4_g170049;
				float lerpResult477_g170033 = lerp( Visual_MultiMask547_g170033 , Local_MultiMask767_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch482_g170033 = lerpResult477_g170033;
				#else
				float staticSwitch482_g170033 = Visual_MultiMask547_g170033;
				#endif
				half Final_MultiMask572_g170033 = staticSwitch482_g170033;
				float In_MultiMask3_g170050 = Final_MultiMask572_g170033;
				half Visual_AlphaClip559_g170033 = Out_AlphaClip4_g170049;
				float temp_output_718_0_g170033 = (Local_AlbedoTex777_g170033).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170033 = ( temp_output_718_0_g170033 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170033 = temp_output_718_0_g170033;
				#endif
				half Local_AlphaClip772_g170033 = staticSwitch924_g170033;
				float lerpResult448_g170033 = lerp( Visual_AlphaClip559_g170033 , Local_AlphaClip772_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch564_g170033 = lerpResult448_g170033;
				#else
				float staticSwitch564_g170033 = Visual_AlphaClip559_g170033;
				#endif
				half Final_AlphaClip602_g170033 = staticSwitch564_g170033;
				float In_AlphaClip3_g170050 = Final_AlphaClip602_g170033;
				half Visual_AlphaFade588_g170033 = Out_AlphaFade4_g170049;
				half Local_AlphaFade773_g170033 = (lerpResult706_g170033).a;
				float lerpResult604_g170033 = lerp( Visual_AlphaFade588_g170033 , Local_AlphaFade773_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch608_g170033 = lerpResult604_g170033;
				#else
				float staticSwitch608_g170033 = Visual_AlphaFade588_g170033;
				#endif
				half Final_AlphaFade611_g170033 = staticSwitch608_g170033;
				float In_AlphaFade3_g170050 = Final_AlphaFade611_g170033;
				float3 In_Translucency3_g170050 = Out_Translucency4_g170049;
				float In_Transmission3_g170050 = Out_Transmission4_g170049;
				float In_Thickness3_g170050 = Out_Thickness4_g170049;
				float In_Diffusion3_g170050 = Out_Diffusion4_g170049;
				{
				Data3_g170050.Dummy = In_Dummy3_g170050;
				Data3_g170050.Albedo = In_Albedo3_g170050;
				Data3_g170050.NormalTS = In_NormalTS3_g170050;
				Data3_g170050.NormalWS = In_NormalWS3_g170050;
				Data3_g170050.Shader = In_Shader3_g170050;
				Data3_g170050.Emissive= In_Emissive3_g170050;
				Data3_g170050.MultiMask = In_MultiMask3_g170050;
				Data3_g170050.Grayscale = In_Grayscale3_g170050;
				Data3_g170050.Luminosity = In_Luminosity3_g170050;
				Data3_g170050.AlphaClip = In_AlphaClip3_g170050;
				Data3_g170050.AlphaFade = In_AlphaFade3_g170050;
				Data3_g170050.Translucency = In_Translucency3_g170050;
				Data3_g170050.Transmission = In_Transmission3_g170050;
				Data3_g170050.Thickness = In_Thickness3_g170050;
				Data3_g170050.Diffusion = In_Diffusion3_g170050;
				}
				TVEVisualData Data4_g170137 = Data3_g170050;
				float Out_Dummy4_g170137 = 0;
				float3 Out_Albedo4_g170137 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170137 = float2( 0,0 );
				float3 Out_NormalWS4_g170137 = float3( 0,0,0 );
				float4 Out_Shader4_g170137 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170137 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170137 = 0;
				float Out_Grayscale4_g170137 = 0;
				float Out_Luminosity4_g170137 = 0;
				float Out_AlphaClip4_g170137 = 0;
				float Out_AlphaFade4_g170137 = 0;
				float3 Out_Translucency4_g170137 = float3( 0,0,0 );
				float Out_Transmission4_g170137 = 0;
				float Out_Thickness4_g170137 = 0;
				float Out_Diffusion4_g170137 = 0;
				{
				Out_Dummy4_g170137 = Data4_g170137.Dummy;
				Out_Albedo4_g170137 = Data4_g170137.Albedo;
				Out_NormalTS4_g170137 = Data4_g170137.NormalTS;
				Out_NormalWS4_g170137 = Data4_g170137.NormalWS;
				Out_Shader4_g170137 = Data4_g170137.Shader;
				Out_Emissive4_g170137= Data4_g170137.Emissive;
				Out_MultiMask4_g170137 = Data4_g170137.MultiMask;
				Out_Grayscale4_g170137 = Data4_g170137.Grayscale;
				Out_Luminosity4_g170137= Data4_g170137.Luminosity;
				Out_AlphaClip4_g170137 = Data4_g170137.AlphaClip;
				Out_AlphaFade4_g170137 = Data4_g170137.AlphaFade;
				Out_Translucency4_g170137 = Data4_g170137.Translucency;
				Out_Transmission4_g170137 = Data4_g170137.Transmission;
				Out_Thickness4_g170137 = Data4_g170137.Thickness;
				Out_Diffusion4_g170137 = Data4_g170137.Diffusion;
				}
				half3 Visual_Albedo127_g170136 = Out_Albedo4_g170137;
				TVEModelData Data15_g170139 = Data16_g169262;
				float Out_Dummy15_g170139 = 0;
				float3 Out_PositionOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170139 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170139 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170139 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170139 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170139 = float3( 0,0,0 );
				float4 Out_VertexData15_g170139 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170139 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170139 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170139 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170139 = Data15_g170139.Dummy;
				Out_PositionOS15_g170139 = Data15_g170139.PositionOS;
				Out_PositionWS15_g170139 = Data15_g170139.PositionWS;
				Out_PositionWO15_g170139 = Data15_g170139.PositionWO;
				Out_PositionRawOS15_g170139 = Data15_g170139.PositionRawOS;
				Out_PositionAddOS15_g170139 = Data15_g170139.PositionAddOS;
				Out_PivotOS15_g170139 = Data15_g170139.PivotOS;
				Out_PivotWS15_g170139 = Data15_g170139.PivotWS;
				Out_PivotWO15_g170139 = Data15_g170139.PivotWO;
				Out_NormalOS15_g170139 = Data15_g170139.NormalOS;
				Out_NormalWS15_g170139 = Data15_g170139.NormalWS;
				Out_NormalRawOS15_g170139 = Data15_g170139.NormalRawOS;
				Out_NormalRawWS15_g170139 = Data15_g170139.NormalRawWS;
				Out_TangentOS15_g170139 = Data15_g170139.TangentOS;
				Out_ViewDirWS15_g170139 = Data15_g170139.ViewDirWS;
				Out_VertexData15_g170139 = Data15_g170139.VertexData;
				Out_MotionData15_g170139 = Data15_g170139.MotionData;
				Out_BoundsData15_g170139 = Data15_g170139.BoundsData;
				Out_RotationData15_g170139 = Data15_g170139.RotationData;
				}
				half4 Model_VertexData206_g170136 = Out_VertexData15_g170139;
				float4 break208_g170136 = Model_VertexData206_g170136;
				float4 break33_g170144 = _occlusion_vert_mode;
				float temp_output_30_0_g170144 = ( break208_g170136.x * break33_g170144.x );
				float temp_output_29_0_g170144 = ( break208_g170136.y * break33_g170144.y );
				float temp_output_31_0_g170144 = ( break208_g170136.z * break33_g170144.z );
				float temp_output_28_0_g170144 = ( temp_output_30_0_g170144 + temp_output_29_0_g170144 + temp_output_31_0_g170144 + ( break208_g170136.w * break33_g170144.w ) );
				float temp_output_194_0_g170136 = temp_output_28_0_g170144;
				float clampResult17_g170142 = clamp( temp_output_194_0_g170136 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170141 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170141 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170141 );
				float temp_output_6_0_g170143 = saturate( ( ( clampResult17_g170142 - temp_output_7_0_g170141 ) / ( temp_output_10_0_g170141 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170143 = ( temp_output_6_0_g170143 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170143 = temp_output_6_0_g170143;
				#endif
				half Occlusion_Mask82_g170136 = staticSwitch14_g170143;
				float3 lerpResult75_g170136 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170136);
				float3 lerpResult186_g170136 = lerp( Visual_Albedo127_g170136 , ( Visual_Albedo127_g170136 * lerpResult75_g170136 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170136 = lerpResult186_g170136;
				#else
				float3 staticSwitch171_g170136 = Visual_Albedo127_g170136;
				#endif
				half3 Final_Albedo160_g170136 = staticSwitch171_g170136;
				float3 In_Albedo3_g170138 = Final_Albedo160_g170136;
				float2 In_NormalTS3_g170138 = Out_NormalTS4_g170137;
				float3 In_NormalWS3_g170138 = Out_NormalWS4_g170137;
				float4 In_Shader3_g170138 = Out_Shader4_g170137;
				float4 In_Emissive3_g170138 = Out_Emissive4_g170137;
				float3 temp_output_3_0_g170140 = Final_Albedo160_g170136;
				float dotResult20_g170140 = dot( temp_output_3_0_g170140 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170136 = dotResult20_g170140;
				float In_Grayscale3_g170138 = Final_Grayscale164_g170136;
				float clampResult180_g170136 = clamp( saturate( ( Final_Grayscale164_g170136 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170136 = clampResult180_g170136;
				float In_Luminosity3_g170138 = Final_Shading181_g170136;
				float In_MultiMask3_g170138 = Out_MultiMask4_g170137;
				float In_AlphaClip3_g170138 = Out_AlphaClip4_g170137;
				float In_AlphaFade3_g170138 = Out_AlphaFade4_g170137;
				float3 In_Translucency3_g170138 = Out_Translucency4_g170137;
				float In_Transmission3_g170138 = Out_Transmission4_g170137;
				float In_Thickness3_g170138 = Out_Thickness4_g170137;
				float In_Diffusion3_g170138 = Out_Diffusion4_g170137;
				{
				Data3_g170138.Dummy = In_Dummy3_g170138;
				Data3_g170138.Albedo = In_Albedo3_g170138;
				Data3_g170138.NormalTS = In_NormalTS3_g170138;
				Data3_g170138.NormalWS = In_NormalWS3_g170138;
				Data3_g170138.Shader = In_Shader3_g170138;
				Data3_g170138.Emissive= In_Emissive3_g170138;
				Data3_g170138.MultiMask = In_MultiMask3_g170138;
				Data3_g170138.Grayscale = In_Grayscale3_g170138;
				Data3_g170138.Luminosity = In_Luminosity3_g170138;
				Data3_g170138.AlphaClip = In_AlphaClip3_g170138;
				Data3_g170138.AlphaFade = In_AlphaFade3_g170138;
				Data3_g170138.Translucency = In_Translucency3_g170138;
				Data3_g170138.Transmission = In_Transmission3_g170138;
				Data3_g170138.Thickness = In_Thickness3_g170138;
				Data3_g170138.Diffusion = In_Diffusion3_g170138;
				}
				TVEVisualData Data4_g170149 = Data3_g170138;
				float Out_Dummy4_g170149 = 0;
				float3 Out_Albedo4_g170149 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170149 = float2( 0,0 );
				float3 Out_NormalWS4_g170149 = float3( 0,0,0 );
				float4 Out_Shader4_g170149 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170149 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170149 = 0;
				float Out_Grayscale4_g170149 = 0;
				float Out_Luminosity4_g170149 = 0;
				float Out_AlphaClip4_g170149 = 0;
				float Out_AlphaFade4_g170149 = 0;
				float3 Out_Translucency4_g170149 = float3( 0,0,0 );
				float Out_Transmission4_g170149 = 0;
				float Out_Thickness4_g170149 = 0;
				float Out_Diffusion4_g170149 = 0;
				{
				Out_Dummy4_g170149 = Data4_g170149.Dummy;
				Out_Albedo4_g170149 = Data4_g170149.Albedo;
				Out_NormalTS4_g170149 = Data4_g170149.NormalTS;
				Out_NormalWS4_g170149 = Data4_g170149.NormalWS;
				Out_Shader4_g170149 = Data4_g170149.Shader;
				Out_Emissive4_g170149= Data4_g170149.Emissive;
				Out_MultiMask4_g170149 = Data4_g170149.MultiMask;
				Out_Grayscale4_g170149 = Data4_g170149.Grayscale;
				Out_Luminosity4_g170149= Data4_g170149.Luminosity;
				Out_AlphaClip4_g170149 = Data4_g170149.AlphaClip;
				Out_AlphaFade4_g170149 = Data4_g170149.AlphaFade;
				Out_Translucency4_g170149 = Data4_g170149.Translucency;
				Out_Transmission4_g170149 = Data4_g170149.Transmission;
				Out_Thickness4_g170149 = Data4_g170149.Thickness;
				Out_Diffusion4_g170149 = Data4_g170149.Diffusion;
				}
				half3 Visual_Albedo127_g170146 = Out_Albedo4_g170149;
				TVEModelData Data15_g170147 = Data16_g169262;
				float Out_Dummy15_g170147 = 0;
				float3 Out_PositionOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170147 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170147 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170147 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170147 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170147 = float3( 0,0,0 );
				float4 Out_VertexData15_g170147 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170147 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170147 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170147 = Data15_g170147.Dummy;
				Out_PositionOS15_g170147 = Data15_g170147.PositionOS;
				Out_PositionWS15_g170147 = Data15_g170147.PositionWS;
				Out_PositionWO15_g170147 = Data15_g170147.PositionWO;
				Out_PositionRawOS15_g170147 = Data15_g170147.PositionRawOS;
				Out_PositionAddOS15_g170147 = Data15_g170147.PositionAddOS;
				Out_PivotOS15_g170147 = Data15_g170147.PivotOS;
				Out_PivotWS15_g170147 = Data15_g170147.PivotWS;
				Out_PivotWO15_g170147 = Data15_g170147.PivotWO;
				Out_NormalOS15_g170147 = Data15_g170147.NormalOS;
				Out_NormalWS15_g170147 = Data15_g170147.NormalWS;
				Out_NormalRawOS15_g170147 = Data15_g170147.NormalRawOS;
				Out_NormalRawWS15_g170147 = Data15_g170147.NormalRawWS;
				Out_TangentOS15_g170147 = Data15_g170147.TangentOS;
				Out_ViewDirWS15_g170147 = Data15_g170147.ViewDirWS;
				Out_VertexData15_g170147 = Data15_g170147.VertexData;
				Out_MotionData15_g170147 = Data15_g170147.MotionData;
				Out_BoundsData15_g170147 = Data15_g170147.BoundsData;
				Out_RotationData15_g170147 = Data15_g170147.RotationData;
				}
				half4 Model_VertexData224_g170146 = Out_VertexData15_g170147;
				float4 break226_g170146 = Model_VertexData224_g170146;
				float4 break33_g170148 = _gradient_vert_mode;
				float temp_output_30_0_g170148 = ( break226_g170146.x * break33_g170148.x );
				float temp_output_29_0_g170148 = ( break226_g170146.y * break33_g170148.y );
				float temp_output_31_0_g170148 = ( break226_g170146.z * break33_g170148.z );
				float temp_output_28_0_g170148 = ( temp_output_30_0_g170148 + temp_output_29_0_g170148 + temp_output_31_0_g170148 + ( break226_g170146.w * break33_g170148.w ) );
				float temp_output_211_0_g170146 = temp_output_28_0_g170148;
				float clampResult17_g170153 = clamp( temp_output_211_0_g170146 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170154 = _GradientMeshRemap.x;
				float temp_output_10_0_g170154 = ( _GradientMeshRemap.y - temp_output_7_0_g170154 );
				float temp_output_6_0_g170155 = saturate( ( ( clampResult17_g170153 - temp_output_7_0_g170154 ) / ( temp_output_10_0_g170154 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170155 = ( temp_output_6_0_g170155 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170155 = temp_output_6_0_g170155;
				#endif
				half Gradient_VertMask82_g170146 = staticSwitch14_g170155;
				half Gradient_Mask200_g170146 = Gradient_VertMask82_g170146;
				float3 lerpResult75_g170146 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170146);
				float temp_output_162_11_g170146 = Out_MultiMask4_g170149;
				half Visual_MultiMask196_g170146 = temp_output_162_11_g170146;
				float lerpResult190_g170146 = lerp( 1.0 , Visual_MultiMask196_g170146 , _GradientMultiValue);
				half Gradient_MultiMask194_g170146 = lerpResult190_g170146;
				float3 lerpResult186_g170146 = lerp( Visual_Albedo127_g170146 , ( Visual_Albedo127_g170146 * lerpResult75_g170146 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170146 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170146 = lerpResult186_g170146;
				#else
				float3 staticSwitch171_g170146 = Visual_Albedo127_g170146;
				#endif
				half3 Final_Albedo160_g170146 = staticSwitch171_g170146;
				float3 In_Albedo3_g170150 = Final_Albedo160_g170146;
				float2 In_NormalTS3_g170150 = Out_NormalTS4_g170149;
				float3 In_NormalWS3_g170150 = Out_NormalWS4_g170149;
				float4 In_Shader3_g170150 = Out_Shader4_g170149;
				float4 In_Emissive3_g170150 = Out_Emissive4_g170149;
				float3 temp_output_3_0_g170151 = Final_Albedo160_g170146;
				float dotResult20_g170151 = dot( temp_output_3_0_g170151 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170146 = dotResult20_g170151;
				float In_Grayscale3_g170150 = Final_Grayscale164_g170146;
				float clampResult180_g170146 = clamp( saturate( ( Final_Grayscale164_g170146 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170146 = clampResult180_g170146;
				float In_Luminosity3_g170150 = Final_Luminosity181_g170146;
				float In_MultiMask3_g170150 = temp_output_162_11_g170146;
				float In_AlphaClip3_g170150 = Out_AlphaClip4_g170149;
				float In_AlphaFade3_g170150 = Out_AlphaFade4_g170149;
				float3 In_Translucency3_g170150 = Out_Translucency4_g170149;
				float In_Transmission3_g170150 = Out_Transmission4_g170149;
				float In_Thickness3_g170150 = Out_Thickness4_g170149;
				float In_Diffusion3_g170150 = Out_Diffusion4_g170149;
				{
				Data3_g170150.Dummy = In_Dummy3_g170150;
				Data3_g170150.Albedo = In_Albedo3_g170150;
				Data3_g170150.NormalTS = In_NormalTS3_g170150;
				Data3_g170150.NormalWS = In_NormalWS3_g170150;
				Data3_g170150.Shader = In_Shader3_g170150;
				Data3_g170150.Emissive= In_Emissive3_g170150;
				Data3_g170150.MultiMask = In_MultiMask3_g170150;
				Data3_g170150.Grayscale = In_Grayscale3_g170150;
				Data3_g170150.Luminosity = In_Luminosity3_g170150;
				Data3_g170150.AlphaClip = In_AlphaClip3_g170150;
				Data3_g170150.AlphaFade = In_AlphaFade3_g170150;
				Data3_g170150.Translucency = In_Translucency3_g170150;
				Data3_g170150.Transmission = In_Transmission3_g170150;
				Data3_g170150.Thickness = In_Thickness3_g170150;
				Data3_g170150.Diffusion = In_Diffusion3_g170150;
				}
				TVEVisualData Data4_g170158 = Data3_g170150;
				float Out_Dummy4_g170158 = 0;
				float3 Out_Albedo4_g170158 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170158 = float2( 0,0 );
				float3 Out_NormalWS4_g170158 = float3( 0,0,0 );
				float4 Out_Shader4_g170158 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170158 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170158 = 0;
				float Out_Grayscale4_g170158 = 0;
				float Out_Luminosity4_g170158 = 0;
				float Out_AlphaClip4_g170158 = 0;
				float Out_AlphaFade4_g170158 = 0;
				float3 Out_Translucency4_g170158 = float3( 0,0,0 );
				float Out_Transmission4_g170158 = 0;
				float Out_Thickness4_g170158 = 0;
				float Out_Diffusion4_g170158 = 0;
				{
				Out_Dummy4_g170158 = Data4_g170158.Dummy;
				Out_Albedo4_g170158 = Data4_g170158.Albedo;
				Out_NormalTS4_g170158 = Data4_g170158.NormalTS;
				Out_NormalWS4_g170158 = Data4_g170158.NormalWS;
				Out_Shader4_g170158 = Data4_g170158.Shader;
				Out_Emissive4_g170158= Data4_g170158.Emissive;
				Out_MultiMask4_g170158 = Data4_g170158.MultiMask;
				Out_Grayscale4_g170158 = Data4_g170158.Grayscale;
				Out_Luminosity4_g170158= Data4_g170158.Luminosity;
				Out_AlphaClip4_g170158 = Data4_g170158.AlphaClip;
				Out_AlphaFade4_g170158 = Data4_g170158.AlphaFade;
				Out_Translucency4_g170158 = Data4_g170158.Translucency;
				Out_Transmission4_g170158 = Data4_g170158.Transmission;
				Out_Thickness4_g170158 = Data4_g170158.Thickness;
				Out_Diffusion4_g170158 = Data4_g170158.Diffusion;
				}
				half3 Visual_Albedo127_g170156 = Out_Albedo4_g170158;
				TVEModelData Data15_g170159 = Data16_g169262;
				float Out_Dummy15_g170159 = 0;
				float3 Out_PositionOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170159 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170159 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170159 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170159 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170159 = float3( 0,0,0 );
				float4 Out_VertexData15_g170159 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170159 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170159 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170159 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170159 = Data15_g170159.Dummy;
				Out_PositionOS15_g170159 = Data15_g170159.PositionOS;
				Out_PositionWS15_g170159 = Data15_g170159.PositionWS;
				Out_PositionWO15_g170159 = Data15_g170159.PositionWO;
				Out_PositionRawOS15_g170159 = Data15_g170159.PositionRawOS;
				Out_PositionAddOS15_g170159 = Data15_g170159.PositionAddOS;
				Out_PivotOS15_g170159 = Data15_g170159.PivotOS;
				Out_PivotWS15_g170159 = Data15_g170159.PivotWS;
				Out_PivotWO15_g170159 = Data15_g170159.PivotWO;
				Out_NormalOS15_g170159 = Data15_g170159.NormalOS;
				Out_NormalWS15_g170159 = Data15_g170159.NormalWS;
				Out_NormalRawOS15_g170159 = Data15_g170159.NormalRawOS;
				Out_NormalRawWS15_g170159 = Data15_g170159.NormalRawWS;
				Out_TangentOS15_g170159 = Data15_g170159.TangentOS;
				Out_ViewDirWS15_g170159 = Data15_g170159.ViewDirWS;
				Out_VertexData15_g170159 = Data15_g170159.VertexData;
				Out_MotionData15_g170159 = Data15_g170159.MotionData;
				Out_BoundsData15_g170159 = Data15_g170159.BoundsData;
				Out_RotationData15_g170159 = Data15_g170159.RotationData;
				}
				half3 Model_PositionWO224_g170156 = Out_PositionWO15_g170159;
				half3 Model_PivotWO239_g170156 = Out_PivotWO15_g170159;
				float3 lerpResult242_g170156 = lerp( Model_PositionWO224_g170156 , Model_PivotWO239_g170156 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170161 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170156 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170163 = clamp( tex3DNode60_g170161.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170164 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170164 = ( _VariationNoiseRemap.y - temp_output_7_0_g170164 );
				float temp_output_238_0_g170156 = saturate( ( ( clampResult17_g170163 - temp_output_7_0_g170164 ) / ( temp_output_10_0_g170164 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170156 = temp_output_238_0_g170156;
				half Variaton_Mask200_g170156 = Variaton_NoiseMask82_g170156;
				float3 lerpResult75_g170156 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170156);
				float temp_output_162_11_g170156 = Out_MultiMask4_g170158;
				half Visual_MultiMask196_g170156 = temp_output_162_11_g170156;
				float lerpResult190_g170156 = lerp( 1.0 , Visual_MultiMask196_g170156 , _VariationMultiValue);
				half Variaton_MultiMask194_g170156 = lerpResult190_g170156;
				float3 lerpResult186_g170156 = lerp( Visual_Albedo127_g170156 , ( Visual_Albedo127_g170156 * lerpResult75_g170156 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170156 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170156 = lerpResult186_g170156;
				#else
				float3 staticSwitch171_g170156 = Visual_Albedo127_g170156;
				#endif
				half3 Final_Albedo160_g170156 = staticSwitch171_g170156;
				float3 In_Albedo3_g170160 = Final_Albedo160_g170156;
				float2 In_NormalTS3_g170160 = Out_NormalTS4_g170158;
				float3 In_NormalWS3_g170160 = Out_NormalWS4_g170158;
				float4 In_Shader3_g170160 = Out_Shader4_g170158;
				float4 In_Emissive3_g170160 = Out_Emissive4_g170158;
				float3 temp_output_3_0_g170157 = Final_Albedo160_g170156;
				float dotResult20_g170157 = dot( temp_output_3_0_g170157 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170156 = dotResult20_g170157;
				float In_Grayscale3_g170160 = Final_Grayscale164_g170156;
				float clampResult180_g170156 = clamp( saturate( ( Final_Grayscale164_g170156 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170156 = clampResult180_g170156;
				float In_Luminosity3_g170160 = Final_Luminosity181_g170156;
				float In_MultiMask3_g170160 = temp_output_162_11_g170156;
				float In_AlphaClip3_g170160 = Out_AlphaClip4_g170158;
				float In_AlphaFade3_g170160 = Out_AlphaFade4_g170158;
				float3 In_Translucency3_g170160 = Out_Translucency4_g170158;
				float In_Transmission3_g170160 = Out_Transmission4_g170158;
				float In_Thickness3_g170160 = Out_Thickness4_g170158;
				float In_Diffusion3_g170160 = Out_Diffusion4_g170158;
				{
				Data3_g170160.Dummy = In_Dummy3_g170160;
				Data3_g170160.Albedo = In_Albedo3_g170160;
				Data3_g170160.NormalTS = In_NormalTS3_g170160;
				Data3_g170160.NormalWS = In_NormalWS3_g170160;
				Data3_g170160.Shader = In_Shader3_g170160;
				Data3_g170160.Emissive= In_Emissive3_g170160;
				Data3_g170160.MultiMask = In_MultiMask3_g170160;
				Data3_g170160.Grayscale = In_Grayscale3_g170160;
				Data3_g170160.Luminosity = In_Luminosity3_g170160;
				Data3_g170160.AlphaClip = In_AlphaClip3_g170160;
				Data3_g170160.AlphaFade = In_AlphaFade3_g170160;
				Data3_g170160.Translucency = In_Translucency3_g170160;
				Data3_g170160.Transmission = In_Transmission3_g170160;
				Data3_g170160.Thickness = In_Thickness3_g170160;
				Data3_g170160.Diffusion = In_Diffusion3_g170160;
				}
				TVEVisualData Data4_g170171 = Data3_g170160;
				float Out_Dummy4_g170171 = 0;
				float3 Out_Albedo4_g170171 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170171 = float2( 0,0 );
				float3 Out_NormalWS4_g170171 = float3( 0,0,0 );
				float4 Out_Shader4_g170171 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170171 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170171 = 0;
				float Out_Grayscale4_g170171 = 0;
				float Out_Luminosity4_g170171 = 0;
				float Out_AlphaClip4_g170171 = 0;
				float Out_AlphaFade4_g170171 = 0;
				float3 Out_Translucency4_g170171 = float3( 0,0,0 );
				float Out_Transmission4_g170171 = 0;
				float Out_Thickness4_g170171 = 0;
				float Out_Diffusion4_g170171 = 0;
				{
				Out_Dummy4_g170171 = Data4_g170171.Dummy;
				Out_Albedo4_g170171 = Data4_g170171.Albedo;
				Out_NormalTS4_g170171 = Data4_g170171.NormalTS;
				Out_NormalWS4_g170171 = Data4_g170171.NormalWS;
				Out_Shader4_g170171 = Data4_g170171.Shader;
				Out_Emissive4_g170171= Data4_g170171.Emissive;
				Out_MultiMask4_g170171 = Data4_g170171.MultiMask;
				Out_Grayscale4_g170171 = Data4_g170171.Grayscale;
				Out_Luminosity4_g170171= Data4_g170171.Luminosity;
				Out_AlphaClip4_g170171 = Data4_g170171.AlphaClip;
				Out_AlphaFade4_g170171 = Data4_g170171.AlphaFade;
				Out_Translucency4_g170171 = Data4_g170171.Translucency;
				Out_Transmission4_g170171 = Data4_g170171.Transmission;
				Out_Thickness4_g170171 = Data4_g170171.Thickness;
				Out_Diffusion4_g170171 = Data4_g170171.Diffusion;
				}
				half3 Visual_Albedo139_g170166 = Out_Albedo4_g170171;
				float temp_output_200_12_g170166 = Out_Grayscale4_g170171;
				half Visual_Grayscale150_g170166 = temp_output_200_12_g170166;
				float3 temp_cast_37 = (Visual_Grayscale150_g170166).xxx;
				TVEGlobalData Data15_g170168 = Data204_g169264;
				float Out_Dummy15_g170168 = 0;
				float4 Out_CoatParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170168 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170168 = Data15_g170168.Dummy;
				Out_CoatParams15_g170168 = Data15_g170168.CoatParams;
				Out_PaintParams15_g170168 = Data15_g170168.PaintParams;
				Out_GlowParams15_g170168 = Data15_g170168.GlowParams;
				Out_AtmoParams15_g170168= Data15_g170168.AtmoParams;
				Out_FadeParams15_g170168= Data15_g170168.FadeParams;
				Out_FormParams15_g170168 = Data15_g170168.FormParams;
				Out_LandParams15_g170168 = Data15_g170168.LandParams;
				Out_WindParams15_g170168 = Data15_g170168.WindParams;
				Out_PushParams15_g170168 = Data15_g170168.PushParams;
				}
				half4 Global_PaintParams209_g170166 = Out_PaintParams15_g170168;
				float temp_output_6_0_g170170 = ( saturate( (Global_PaintParams209_g170166).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170170 = ( temp_output_6_0_g170170 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170170 = temp_output_6_0_g170170;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170166 = staticSwitch14_g170170;
				#else
				float staticSwitch283_g170166 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170166 = staticSwitch283_g170166;
				float3 lerpResult368_g170166 = lerp( Visual_Albedo139_g170166 , temp_cast_37 , ( Tinting_GlobalValue285_g170166 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170189 = 2.0;
				#else
				float staticSwitch1_g170189 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170166 = (Global_PaintParams209_g170166).xyz;
				#else
				float3 staticSwitch288_g170166 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170166 = staticSwitch288_g170166;
				float temp_output_200_11_g170166 = Out_MultiMask4_g170171;
				half Visual_MultiMask181_g170166 = temp_output_200_11_g170166;
				float lerpResult147_g170166 = lerp( 1.0 , Visual_MultiMask181_g170166 , _TintingMultiValue);
				half Tinting_MutiMask121_g170166 = lerpResult147_g170166;
				half Tinting_TexMask385_g170166 = 1.0;
				float temp_output_200_15_g170166 = Out_Luminosity4_g170171;
				half Visual_Luminosity257_g170166 = temp_output_200_15_g170166;
				float clampResult17_g170183 = clamp( Visual_Luminosity257_g170166 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170182 = _TintingLumaRemap.x;
				float temp_output_10_0_g170182 = ( _TintingLumaRemap.y - temp_output_7_0_g170182 );
				float lerpResult228_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170183 - temp_output_7_0_g170182 ) / ( temp_output_10_0_g170182 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170166 = lerpResult228_g170166;
				TVEModelData Data15_g170167 = Data16_g169262;
				float Out_Dummy15_g170167 = 0;
				float3 Out_PositionOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170167 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170167 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170167 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170167 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170167 = float3( 0,0,0 );
				float4 Out_VertexData15_g170167 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170167 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170167 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170167 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170167 = Data15_g170167.Dummy;
				Out_PositionOS15_g170167 = Data15_g170167.PositionOS;
				Out_PositionWS15_g170167 = Data15_g170167.PositionWS;
				Out_PositionWO15_g170167 = Data15_g170167.PositionWO;
				Out_PositionRawOS15_g170167 = Data15_g170167.PositionRawOS;
				Out_PositionAddOS15_g170167 = Data15_g170167.PositionAddOS;
				Out_PivotOS15_g170167 = Data15_g170167.PivotOS;
				Out_PivotWS15_g170167 = Data15_g170167.PivotWS;
				Out_PivotWO15_g170167 = Data15_g170167.PivotWO;
				Out_NormalOS15_g170167 = Data15_g170167.NormalOS;
				Out_NormalWS15_g170167 = Data15_g170167.NormalWS;
				Out_NormalRawOS15_g170167 = Data15_g170167.NormalRawOS;
				Out_NormalRawWS15_g170167 = Data15_g170167.NormalRawWS;
				Out_TangentOS15_g170167 = Data15_g170167.TangentOS;
				Out_ViewDirWS15_g170167 = Data15_g170167.ViewDirWS;
				Out_VertexData15_g170167 = Data15_g170167.VertexData;
				Out_MotionData15_g170167 = Data15_g170167.MotionData;
				Out_BoundsData15_g170167 = Data15_g170167.BoundsData;
				Out_RotationData15_g170167 = Data15_g170167.RotationData;
				}
				half4 Model_VertexMasks307_g170166 = Out_VertexData15_g170167;
				float4 break311_g170166 = Model_VertexMasks307_g170166;
				float4 break33_g170175 = _tinting_vert_mode;
				float temp_output_30_0_g170175 = ( break311_g170166.x * break33_g170175.x );
				float temp_output_29_0_g170175 = ( break311_g170166.y * break33_g170175.y );
				float temp_output_31_0_g170175 = ( break311_g170166.z * break33_g170175.z );
				float temp_output_28_0_g170175 = ( temp_output_30_0_g170175 + temp_output_29_0_g170175 + temp_output_31_0_g170175 + ( break311_g170166.w * break33_g170175.w ) );
				float clampResult17_g170181 = clamp( temp_output_28_0_g170175 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170180 = _TintingMeshRemap.x;
				float temp_output_10_0_g170180 = ( _TintingMeshRemap.y - temp_output_7_0_g170180 );
				float lerpResult370_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170181 - temp_output_7_0_g170180 ) / ( temp_output_10_0_g170180 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170184 = lerpResult370_g170166;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170184 = ( temp_output_6_0_g170184 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170184 = temp_output_6_0_g170184;
				#endif
				float temp_output_333_0_g170166 = staticSwitch14_g170184;
				half Tinting_VertMask309_g170166 = temp_output_333_0_g170166;
				half Tinting_NoiseMask213_g170166 = 1.0;
				half Custom_Mask345_g170166 = 1.0;
				float temp_output_7_0_g170178 = _TintingBlendRemap.x;
				float temp_output_10_0_g170178 = ( _TintingBlendRemap.y - temp_output_7_0_g170178 );
				half Tinting_Mask242_g170166 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170166 * Tinting_TexMask385_g170166 * Tinting_LumaMask153_g170166 * Tinting_VertMask309_g170166 * Tinting_NoiseMask213_g170166 * Tinting_GlobalValue285_g170166 * Custom_Mask345_g170166 ) - temp_output_7_0_g170178 ) / ( temp_output_10_0_g170178 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170166 = lerp( Visual_Albedo139_g170166 , ( lerpResult368_g170166 * staticSwitch1_g170189 * Tinting_ColorGlobal290_g170166 * (_TintingColor).rgb ) , Tinting_Mask242_g170166);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170166 = lerpResult90_g170166;
				#else
				float3 staticSwitch286_g170166 = Visual_Albedo139_g170166;
				#endif
				half3 Final_Albedo97_g170166 = staticSwitch286_g170166;
				float3 In_Albedo3_g170169 = Final_Albedo97_g170166;
				float2 In_NormalTS3_g170169 = Out_NormalTS4_g170171;
				float3 In_NormalWS3_g170169 = Out_NormalWS4_g170171;
				float4 In_Shader3_g170169 = Out_Shader4_g170171;
				float4 In_Emissive3_g170169 = Out_Emissive4_g170171;
				float In_Grayscale3_g170169 = temp_output_200_12_g170166;
				float In_Luminosity3_g170169 = temp_output_200_15_g170166;
				float In_MultiMask3_g170169 = temp_output_200_11_g170166;
				float In_AlphaClip3_g170169 = Out_AlphaClip4_g170171;
				float In_AlphaFade3_g170169 = Out_AlphaFade4_g170171;
				float3 In_Translucency3_g170169 = Out_Translucency4_g170171;
				float In_Transmission3_g170169 = Out_Transmission4_g170171;
				float In_Thickness3_g170169 = Out_Thickness4_g170171;
				float In_Diffusion3_g170169 = Out_Diffusion4_g170171;
				{
				Data3_g170169.Dummy = In_Dummy3_g170169;
				Data3_g170169.Albedo = In_Albedo3_g170169;
				Data3_g170169.NormalTS = In_NormalTS3_g170169;
				Data3_g170169.NormalWS = In_NormalWS3_g170169;
				Data3_g170169.Shader = In_Shader3_g170169;
				Data3_g170169.Emissive= In_Emissive3_g170169;
				Data3_g170169.MultiMask = In_MultiMask3_g170169;
				Data3_g170169.Grayscale = In_Grayscale3_g170169;
				Data3_g170169.Luminosity = In_Luminosity3_g170169;
				Data3_g170169.AlphaClip = In_AlphaClip3_g170169;
				Data3_g170169.AlphaFade = In_AlphaFade3_g170169;
				Data3_g170169.Translucency = In_Translucency3_g170169;
				Data3_g170169.Transmission = In_Transmission3_g170169;
				Data3_g170169.Thickness = In_Thickness3_g170169;
				Data3_g170169.Diffusion = In_Diffusion3_g170169;
				}
				TVEVisualData Data4_g170192 = Data3_g170169;
				float Out_Dummy4_g170192 = 0;
				float3 Out_Albedo4_g170192 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170192 = float2( 0,0 );
				float3 Out_NormalWS4_g170192 = float3( 0,0,0 );
				float4 Out_Shader4_g170192 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170192 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170192 = 0;
				float Out_Grayscale4_g170192 = 0;
				float Out_Luminosity4_g170192 = 0;
				float Out_AlphaClip4_g170192 = 0;
				float Out_AlphaFade4_g170192 = 0;
				float3 Out_Translucency4_g170192 = float3( 0,0,0 );
				float Out_Transmission4_g170192 = 0;
				float Out_Thickness4_g170192 = 0;
				float Out_Diffusion4_g170192 = 0;
				{
				Out_Dummy4_g170192 = Data4_g170192.Dummy;
				Out_Albedo4_g170192 = Data4_g170192.Albedo;
				Out_NormalTS4_g170192 = Data4_g170192.NormalTS;
				Out_NormalWS4_g170192 = Data4_g170192.NormalWS;
				Out_Shader4_g170192 = Data4_g170192.Shader;
				Out_Emissive4_g170192= Data4_g170192.Emissive;
				Out_MultiMask4_g170192 = Data4_g170192.MultiMask;
				Out_Grayscale4_g170192 = Data4_g170192.Grayscale;
				Out_Luminosity4_g170192= Data4_g170192.Luminosity;
				Out_AlphaClip4_g170192 = Data4_g170192.AlphaClip;
				Out_AlphaFade4_g170192 = Data4_g170192.AlphaFade;
				Out_Translucency4_g170192 = Data4_g170192.Translucency;
				Out_Transmission4_g170192 = Data4_g170192.Transmission;
				Out_Thickness4_g170192 = Data4_g170192.Thickness;
				Out_Diffusion4_g170192 = Data4_g170192.Diffusion;
				}
				half3 Visual_Albedo292_g170190 = Out_Albedo4_g170192;
				float temp_output_280_12_g170190 = Out_Grayscale4_g170192;
				half Visual_Grayscale308_g170190 = temp_output_280_12_g170190;
				float3 temp_cast_39 = (Visual_Grayscale308_g170190).xxx;
				TVEGlobalData Data15_g170191 = Data204_g169264;
				float Out_Dummy15_g170191 = 0;
				float4 Out_CoatParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170191 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170191 = Data15_g170191.Dummy;
				Out_CoatParams15_g170191 = Data15_g170191.CoatParams;
				Out_PaintParams15_g170191 = Data15_g170191.PaintParams;
				Out_GlowParams15_g170191 = Data15_g170191.GlowParams;
				Out_AtmoParams15_g170191= Data15_g170191.AtmoParams;
				Out_FadeParams15_g170191= Data15_g170191.FadeParams;
				Out_FormParams15_g170191 = Data15_g170191.FormParams;
				Out_LandParams15_g170191 = Data15_g170191.LandParams;
				Out_WindParams15_g170191 = Data15_g170191.WindParams;
				Out_PushParams15_g170191 = Data15_g170191.PushParams;
				}
				half4 Global_AtmoParams314_g170190 = Out_AtmoParams15_g170191;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170190 = ( (Global_AtmoParams314_g170190).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170190 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170190 = staticSwitch351_g170190;
				float3 lerpResult485_g170190 = lerp( Visual_Albedo292_g170190 , temp_cast_39 , ( Dryness_GlobalMask352_g170190 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170212 = RGBToHSV( lerpResult485_g170190 );
				half3 hsvTorgb61_g170212 = HSVToRGB( half3(( hsvTorgb58_g170212.x + _DrynessShiftValue ),hsvTorgb58_g170212.y,hsvTorgb58_g170212.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170190 = hsvTorgb61_g170212;
				#else
				float3 staticSwitch499_g170190 = lerpResult485_g170190;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170211 = 2.0;
				#else
				float staticSwitch1_g170211 = 4.594794;
				#endif
				half Dryness_TexMask478_g170190 = 1.0;
				float temp_output_280_11_g170190 = Out_MultiMask4_g170192;
				half Visual_MultiMask310_g170190 = temp_output_280_11_g170190;
				float lerpResult283_g170190 = lerp( 1.0 , Visual_MultiMask310_g170190 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170190 = lerpResult283_g170190;
				float temp_output_280_15_g170190 = Out_Luminosity4_g170192;
				half Visual_Luminosity309_g170190 = temp_output_280_15_g170190;
				float clampResult17_g170207 = clamp( Visual_Luminosity309_g170190 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170206 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170206 = ( _DrynessLumaRemap.y - temp_output_7_0_g170206 );
				float lerpResult295_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170207 - temp_output_7_0_g170206 ) / ( temp_output_10_0_g170206 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170190 = lerpResult295_g170190;
				TVEModelData Data15_g170193 = Data16_g169262;
				float Out_Dummy15_g170193 = 0;
				float3 Out_PositionOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170193 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170193 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170193 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170193 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170193 = float3( 0,0,0 );
				float4 Out_VertexData15_g170193 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170193 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170193 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170193 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170193 = Data15_g170193.Dummy;
				Out_PositionOS15_g170193 = Data15_g170193.PositionOS;
				Out_PositionWS15_g170193 = Data15_g170193.PositionWS;
				Out_PositionWO15_g170193 = Data15_g170193.PositionWO;
				Out_PositionRawOS15_g170193 = Data15_g170193.PositionRawOS;
				Out_PositionAddOS15_g170193 = Data15_g170193.PositionAddOS;
				Out_PivotOS15_g170193 = Data15_g170193.PivotOS;
				Out_PivotWS15_g170193 = Data15_g170193.PivotWS;
				Out_PivotWO15_g170193 = Data15_g170193.PivotWO;
				Out_NormalOS15_g170193 = Data15_g170193.NormalOS;
				Out_NormalWS15_g170193 = Data15_g170193.NormalWS;
				Out_NormalRawOS15_g170193 = Data15_g170193.NormalRawOS;
				Out_NormalRawWS15_g170193 = Data15_g170193.NormalRawWS;
				Out_TangentOS15_g170193 = Data15_g170193.TangentOS;
				Out_ViewDirWS15_g170193 = Data15_g170193.ViewDirWS;
				Out_VertexData15_g170193 = Data15_g170193.VertexData;
				Out_MotionData15_g170193 = Data15_g170193.MotionData;
				Out_BoundsData15_g170193 = Data15_g170193.BoundsData;
				Out_RotationData15_g170193 = Data15_g170193.RotationData;
				}
				half4 Model_VertexMasks386_g170190 = Out_VertexData15_g170193;
				float4 break375_g170190 = Model_VertexMasks386_g170190;
				float4 break33_g170200 = _dryness_vert_mode;
				float temp_output_30_0_g170200 = ( break375_g170190.x * break33_g170200.x );
				float temp_output_29_0_g170200 = ( break375_g170190.y * break33_g170200.y );
				float temp_output_31_0_g170200 = ( break375_g170190.z * break33_g170200.z );
				float temp_output_28_0_g170200 = ( temp_output_30_0_g170200 + temp_output_29_0_g170200 + temp_output_31_0_g170200 + ( break375_g170190.w * break33_g170200.w ) );
				float clampResult17_g170201 = clamp( temp_output_28_0_g170200 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170202 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170202 = ( _DrynessMeshRemap.y - temp_output_7_0_g170202 );
				float lerpResult452_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170201 - temp_output_7_0_g170202 ) / ( temp_output_10_0_g170202 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170208 = lerpResult452_g170190;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170208 = ( temp_output_6_0_g170208 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170208 = temp_output_6_0_g170208;
				#endif
				float temp_output_448_0_g170190 = staticSwitch14_g170208;
				half Dryness_VertMask378_g170190 = temp_output_448_0_g170190;
				half Dryness_MaskNoise291_g170190 = 1.0;
				half Custom_Mask411_g170190 = 1.0;
				float temp_output_7_0_g170205 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170205 = ( _DrynessBlendRemap.y - temp_output_7_0_g170205 );
				half Dryness_Mask329_g170190 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170190 * Dryness_MultiMask302_g170190 * Dryness_LumaMask301_g170190 * Dryness_VertMask378_g170190 * Dryness_MaskNoise291_g170190 * Dryness_GlobalMask352_g170190 * Custom_Mask411_g170190 ) - temp_output_7_0_g170205 ) / ( temp_output_10_0_g170205 + 0.0001 ) ) );
				float3 lerpResult336_g170190 = lerp( Visual_Albedo292_g170190 , ( staticSwitch499_g170190 * staticSwitch1_g170211 * (_DrynessColor).rgb ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170190 = lerpResult336_g170190;
				#else
				float3 staticSwitch356_g170190 = Visual_Albedo292_g170190;
				#endif
				half3 Final_Albedo331_g170190 = staticSwitch356_g170190;
				float3 In_Albedo3_g170194 = Final_Albedo331_g170190;
				float2 In_NormalTS3_g170194 = Out_NormalTS4_g170192;
				float3 In_NormalWS3_g170194 = Out_NormalWS4_g170192;
				half4 Visual_Shader415_g170190 = Out_Shader4_g170192;
				float4 break438_g170190 = Visual_Shader415_g170190;
				float4 appendResult439_g170190 = (float4(break438_g170190.x , break438_g170190.y , break438_g170190.z , ( break438_g170190.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170190 = lerp( Visual_Shader415_g170190 , appendResult439_g170190 , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170190 = lerpResult427_g170190;
				#else
				float4 staticSwitch426_g170190 = Visual_Shader415_g170190;
				#endif
				half4 Final_Shader433_g170190 = staticSwitch426_g170190;
				float4 In_Shader3_g170194 = Final_Shader433_g170190;
				float4 In_Emissive3_g170194 = Out_Emissive4_g170192;
				float In_Grayscale3_g170194 = temp_output_280_12_g170190;
				float In_Luminosity3_g170194 = temp_output_280_15_g170190;
				float In_MultiMask3_g170194 = temp_output_280_11_g170190;
				float In_AlphaClip3_g170194 = Out_AlphaClip4_g170192;
				float In_AlphaFade3_g170194 = Out_AlphaFade4_g170192;
				float3 In_Translucency3_g170194 = Out_Translucency4_g170192;
				half Visual_Transmission416_g170190 = Out_Transmission4_g170192;
				float lerpResult421_g170190 = lerp( Visual_Transmission416_g170190 , ( Visual_Transmission416_g170190 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170190 = lerpResult421_g170190;
				#else
				float staticSwitch418_g170190 = Visual_Transmission416_g170190;
				#endif
				half Final_Transmission425_g170190 = staticSwitch418_g170190;
				float In_Transmission3_g170194 = Final_Transmission425_g170190;
				float In_Thickness3_g170194 = Out_Thickness4_g170192;
				float In_Diffusion3_g170194 = Out_Diffusion4_g170192;
				{
				Data3_g170194.Dummy = In_Dummy3_g170194;
				Data3_g170194.Albedo = In_Albedo3_g170194;
				Data3_g170194.NormalTS = In_NormalTS3_g170194;
				Data3_g170194.NormalWS = In_NormalWS3_g170194;
				Data3_g170194.Shader = In_Shader3_g170194;
				Data3_g170194.Emissive= In_Emissive3_g170194;
				Data3_g170194.MultiMask = In_MultiMask3_g170194;
				Data3_g170194.Grayscale = In_Grayscale3_g170194;
				Data3_g170194.Luminosity = In_Luminosity3_g170194;
				Data3_g170194.AlphaClip = In_AlphaClip3_g170194;
				Data3_g170194.AlphaFade = In_AlphaFade3_g170194;
				Data3_g170194.Translucency = In_Translucency3_g170194;
				Data3_g170194.Transmission = In_Transmission3_g170194;
				Data3_g170194.Thickness = In_Thickness3_g170194;
				Data3_g170194.Diffusion = In_Diffusion3_g170194;
				}
				TVEVisualData Data4_g170320 = Data3_g170194;
				float Out_Dummy4_g170320 = 0;
				float3 Out_Albedo4_g170320 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170320 = float2( 0,0 );
				float3 Out_NormalWS4_g170320 = float3( 0,0,0 );
				float4 Out_Shader4_g170320 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170320 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170320 = 0;
				float Out_Grayscale4_g170320 = 0;
				float Out_Luminosity4_g170320 = 0;
				float Out_AlphaClip4_g170320 = 0;
				float Out_AlphaFade4_g170320 = 0;
				float3 Out_Translucency4_g170320 = float3( 0,0,0 );
				float Out_Transmission4_g170320 = 0;
				float Out_Thickness4_g170320 = 0;
				float Out_Diffusion4_g170320 = 0;
				{
				Out_Dummy4_g170320 = Data4_g170320.Dummy;
				Out_Albedo4_g170320 = Data4_g170320.Albedo;
				Out_NormalTS4_g170320 = Data4_g170320.NormalTS;
				Out_NormalWS4_g170320 = Data4_g170320.NormalWS;
				Out_Shader4_g170320 = Data4_g170320.Shader;
				Out_Emissive4_g170320= Data4_g170320.Emissive;
				Out_MultiMask4_g170320 = Data4_g170320.MultiMask;
				Out_Grayscale4_g170320 = Data4_g170320.Grayscale;
				Out_Luminosity4_g170320= Data4_g170320.Luminosity;
				Out_AlphaClip4_g170320 = Data4_g170320.AlphaClip;
				Out_AlphaFade4_g170320 = Data4_g170320.AlphaFade;
				Out_Translucency4_g170320 = Data4_g170320.Translucency;
				Out_Transmission4_g170320 = Data4_g170320.Transmission;
				Out_Thickness4_g170320 = Data4_g170320.Thickness;
				Out_Diffusion4_g170320 = Data4_g170320.Diffusion;
				}
				half3 Visual_Albedo127_g170319 = Out_Albedo4_g170320;
				float4 vertexToFrag24_g170165 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170165;
				float clampResult208_g170319 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170319 = ( Visual_Albedo127_g170319 + ( ( Visual_Albedo127_g170319 * Visual_Albedo127_g170319 * 200.0 * _motion_highlight_color ) * clampResult208_g170319 ) );
				#else
				float3 staticSwitch209_g170319 = Visual_Albedo127_g170319;
				#endif
				half3 Final_Albedo160_g170319 = staticSwitch209_g170319;
				float3 In_Albedo3_g170321 = Final_Albedo160_g170319;
				float2 In_NormalTS3_g170321 = Out_NormalTS4_g170320;
				float3 In_NormalWS3_g170321 = Out_NormalWS4_g170320;
				float4 In_Shader3_g170321 = Out_Shader4_g170320;
				float4 In_Emissive3_g170321 = Out_Emissive4_g170320;
				float In_Grayscale3_g170321 = Out_Grayscale4_g170320;
				float In_Luminosity3_g170321 = Out_Luminosity4_g170320;
				float In_MultiMask3_g170321 = Out_MultiMask4_g170320;
				float In_AlphaClip3_g170321 = Out_AlphaClip4_g170320;
				float In_AlphaFade3_g170321 = Out_AlphaFade4_g170320;
				float3 In_Translucency3_g170321 = Out_Translucency4_g170320;
				float In_Transmission3_g170321 = Out_Transmission4_g170320;
				float In_Thickness3_g170321 = Out_Thickness4_g170320;
				float In_Diffusion3_g170321 = Out_Diffusion4_g170320;
				{
				Data3_g170321.Dummy = In_Dummy3_g170321;
				Data3_g170321.Albedo = In_Albedo3_g170321;
				Data3_g170321.NormalTS = In_NormalTS3_g170321;
				Data3_g170321.NormalWS = In_NormalWS3_g170321;
				Data3_g170321.Shader = In_Shader3_g170321;
				Data3_g170321.Emissive= In_Emissive3_g170321;
				Data3_g170321.MultiMask = In_MultiMask3_g170321;
				Data3_g170321.Grayscale = In_Grayscale3_g170321;
				Data3_g170321.Luminosity = In_Luminosity3_g170321;
				Data3_g170321.AlphaClip = In_AlphaClip3_g170321;
				Data3_g170321.AlphaFade = In_AlphaFade3_g170321;
				Data3_g170321.Translucency = In_Translucency3_g170321;
				Data3_g170321.Transmission = In_Transmission3_g170321;
				Data3_g170321.Thickness = In_Thickness3_g170321;
				Data3_g170321.Diffusion = In_Diffusion3_g170321;
				}
				TVEVisualData Data4_g170323 = Data3_g170321;
				float Out_Dummy4_g170323 = 0;
				float3 Out_Albedo4_g170323 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170323 = float2( 0,0 );
				float3 Out_NormalWS4_g170323 = float3( 0,0,0 );
				float4 Out_Shader4_g170323 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170323 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170323 = 0;
				float Out_Grayscale4_g170323 = 0;
				float Out_Luminosity4_g170323 = 0;
				float Out_AlphaClip4_g170323 = 0;
				float Out_AlphaFade4_g170323 = 0;
				float3 Out_Translucency4_g170323 = float3( 0,0,0 );
				float Out_Transmission4_g170323 = 0;
				float Out_Thickness4_g170323 = 0;
				float Out_Diffusion4_g170323 = 0;
				{
				Out_Dummy4_g170323 = Data4_g170323.Dummy;
				Out_Albedo4_g170323 = Data4_g170323.Albedo;
				Out_NormalTS4_g170323 = Data4_g170323.NormalTS;
				Out_NormalWS4_g170323 = Data4_g170323.NormalWS;
				Out_Shader4_g170323 = Data4_g170323.Shader;
				Out_Emissive4_g170323= Data4_g170323.Emissive;
				Out_MultiMask4_g170323 = Data4_g170323.MultiMask;
				Out_Grayscale4_g170323 = Data4_g170323.Grayscale;
				Out_Luminosity4_g170323= Data4_g170323.Luminosity;
				Out_AlphaClip4_g170323 = Data4_g170323.AlphaClip;
				Out_AlphaFade4_g170323 = Data4_g170323.AlphaFade;
				Out_Translucency4_g170323 = Data4_g170323.Translucency;
				Out_Transmission4_g170323 = Data4_g170323.Transmission;
				Out_Thickness4_g170323 = Data4_g170323.Thickness;
				Out_Diffusion4_g170323 = Data4_g170323.Diffusion;
				}
				half3 Visual_Albedo127_g170322 = Out_Albedo4_g170323;
				float3 temp_output_622_0_g170322 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170326 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170327 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170327 = ( temp_output_6_0_g170327 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170327 = temp_output_6_0_g170327;
				#endif
				half4 Overlay_Coords639_g170322 = staticSwitch14_g170327;
				float4 temp_output_37_0_g170326 = Overlay_Coords639_g170322;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				TVEModelData Data15_g170328 = Data16_g169262;
				float Out_Dummy15_g170328 = 0;
				float3 Out_PositionOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170328 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170328 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170328 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170328 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170328 = float3( 0,0,0 );
				float4 Out_VertexData15_g170328 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170328 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170328 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170328 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170328 = Data15_g170328.Dummy;
				Out_PositionOS15_g170328 = Data15_g170328.PositionOS;
				Out_PositionWS15_g170328 = Data15_g170328.PositionWS;
				Out_PositionWO15_g170328 = Data15_g170328.PositionWO;
				Out_PositionRawOS15_g170328 = Data15_g170328.PositionRawOS;
				Out_PositionAddOS15_g170328 = Data15_g170328.PositionAddOS;
				Out_PivotOS15_g170328 = Data15_g170328.PivotOS;
				Out_PivotWS15_g170328 = Data15_g170328.PivotWS;
				Out_PivotWO15_g170328 = Data15_g170328.PivotWO;
				Out_NormalOS15_g170328 = Data15_g170328.NormalOS;
				Out_NormalWS15_g170328 = Data15_g170328.NormalWS;
				Out_NormalRawOS15_g170328 = Data15_g170328.NormalRawOS;
				Out_NormalRawWS15_g170328 = Data15_g170328.NormalRawWS;
				Out_TangentOS15_g170328 = Data15_g170328.TangentOS;
				Out_ViewDirWS15_g170328 = Data15_g170328.ViewDirWS;
				Out_VertexData15_g170328 = Data15_g170328.VertexData;
				Out_MotionData15_g170328 = Data15_g170328.MotionData;
				Out_BoundsData15_g170328 = Data15_g170328.BoundsData;
				Out_RotationData15_g170328 = Data15_g170328.RotationData;
				}
				half3 Model_PositionWO602_g170322 = Out_PositionWO15_g170328;
				float3 temp_output_279_0_g170326 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170326 = sampler_Linear_Repeat;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				half3 Model_NormalWS712_g170322 = Out_NormalWS15_g170328;
				float3 temp_output_280_0_g170326 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170326 = sampler_Linear_Repeat;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170326 = sampler_Linear_Repeat;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170322 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170322 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170322 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#endif
				half3 Overlay_Albedo526_g170322 = (staticSwitch676_g170322).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170322 = ( temp_output_622_0_g170322 * Overlay_Albedo526_g170322 );
				#else
				float3 staticSwitch578_g170322 = temp_output_622_0_g170322;
				#endif
				float3 temp_output_6_0_g170334 = staticSwitch578_g170322;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170334 = ( temp_output_6_0_g170334 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170334 = temp_output_6_0_g170334;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170331) = _OverlayGlitterTex;
				SamplerState Sampler246_g170331 = sampler_Linear_Repeat;
				float4 appendResult863_g170322 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170331 = appendResult863_g170322;
				half4 Coords246_g170331 = temp_output_37_0_g170331;
				float3 temp_output_279_0_g170331 = Model_PositionWO602_g170322;
				half3 WorldPosition246_g170331 = temp_output_279_0_g170331;
				float3 temp_output_280_0_g170331 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170331 = temp_output_280_0_g170331;
				half4 localSamplePlanar3D246_g170331 = SamplePlanar3D( Texture246_g170331 , Sampler246_g170331 , Coords246_g170331 , WorldPosition246_g170331 , WorldNormal246_g170331 );
				half Overlay_GlitterTex854_g170322 = (localSamplePlanar3D246_g170331).x;
				half3 Model_PositionWS879_g170322 = Out_PositionWS15_g170328;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170322 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170322 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170322 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170322 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170322 = staticSwitch868_g170322;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170348) = _OverlayMaskTex;
				SamplerState Sampler276_g170348 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170349 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170349 = ( temp_output_6_0_g170349 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170349 = temp_output_6_0_g170349;
				#endif
				half4 Local_MaskCoords888_g170322 = staticSwitch14_g170349;
				float4 temp_output_37_0_g170348 = Local_MaskCoords888_g170322;
				half4 Coords276_g170348 = temp_output_37_0_g170348;
				half2 TexCoord276_g170348 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170348 = SampleMain( Texture276_g170348 , Sampler276_g170348 , Coords276_g170348 , TexCoord276_g170348 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170348) = _OverlayMaskTex;
				SamplerState Sampler275_g170348 = sampler_Linear_Repeat;
				half4 Coords275_g170348 = temp_output_37_0_g170348;
				half2 TexCoord275_g170348 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170348 = SampleExtra( Texture275_g170348 , Sampler275_g170348 , Coords275_g170348 , TexCoord275_g170348 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170322 = localSampleExtra275_g170348;
				#else
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#endif
				half4 Local_MaskTex887_g170322 = staticSwitch894_g170322;
				float clampResult17_g170350 = clamp( (Local_MaskTex887_g170322).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170351 = ( _OverlayMaskRemap.y - temp_output_7_0_g170351 );
				float lerpResult900_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170322 = lerpResult900_g170322;
				float3 temp_output_739_21_g170322 = Out_NormalWS4_g170323;
				half3 Visual_NormalWS749_g170322 = temp_output_739_21_g170322;
				float clampResult17_g170344 = clamp( saturate( (Visual_NormalWS749_g170322).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170343 = _OverlayProjRemap.x;
				float temp_output_10_0_g170343 = ( _OverlayProjRemap.y - temp_output_7_0_g170343 );
				float lerpResult842_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170344 - temp_output_7_0_g170343 ) / ( temp_output_10_0_g170343 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170322 = lerpResult842_g170322;
				float temp_output_739_15_g170322 = Out_Luminosity4_g170323;
				half Visual_Luminosity654_g170322 = temp_output_739_15_g170322;
				float clampResult17_g170346 = clamp( Visual_Luminosity654_g170322 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170345 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170345 = ( _OverlayLumaRemap.y - temp_output_7_0_g170345 );
				float lerpResult587_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170345 ) / ( temp_output_10_0_g170345 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170322 = lerpResult587_g170322;
				half4 Model_VertexMasks791_g170322 = Out_VertexData15_g170328;
				float4 break792_g170322 = Model_VertexMasks791_g170322;
				float4 break33_g170336 = _overlay_vert_mode;
				float temp_output_30_0_g170336 = ( break792_g170322.x * break33_g170336.x );
				float temp_output_29_0_g170336 = ( break792_g170322.y * break33_g170336.y );
				float temp_output_31_0_g170336 = ( break792_g170322.z * break33_g170336.z );
				float temp_output_28_0_g170336 = ( temp_output_30_0_g170336 + temp_output_29_0_g170336 + temp_output_31_0_g170336 + ( break792_g170322.w * break33_g170336.w ) );
				float clampResult17_g170337 = clamp( temp_output_28_0_g170336 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170340 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170340 = ( _OverlayMeshRemap.y - temp_output_7_0_g170340 );
				float lerpResult881_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170337 - temp_output_7_0_g170340 ) / ( temp_output_10_0_g170340 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170347 = lerpResult881_g170322;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170347 = ( temp_output_6_0_g170347 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170347 = temp_output_6_0_g170347;
				#endif
				float temp_output_831_0_g170322 = staticSwitch14_g170347;
				half Overlay_VertMask801_g170322 = temp_output_831_0_g170322;
				half Overlay_MaskNoise427_g170322 = 1.0;
				TVEGlobalData Data15_g170324 = Data204_g169264;
				float Out_Dummy15_g170324 = 0;
				float4 Out_CoatParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170324 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170324 = Data15_g170324.Dummy;
				Out_CoatParams15_g170324 = Data15_g170324.CoatParams;
				Out_PaintParams15_g170324 = Data15_g170324.PaintParams;
				Out_GlowParams15_g170324 = Data15_g170324.GlowParams;
				Out_AtmoParams15_g170324= Data15_g170324.AtmoParams;
				Out_FadeParams15_g170324= Data15_g170324.FadeParams;
				Out_FormParams15_g170324 = Data15_g170324.FormParams;
				Out_LandParams15_g170324 = Data15_g170324.LandParams;
				Out_WindParams15_g170324 = Data15_g170324.WindParams;
				Out_PushParams15_g170324 = Data15_g170324.PushParams;
				}
				half4 Global_AtmoParams516_g170322 = Out_AtmoParams15_g170324;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170322 = ( (Global_AtmoParams516_g170322).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170322 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170322 = staticSwitch705_g170322;
				half Custom_Mask646_g170322 = 1.0;
				float temp_output_7_0_g170352 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170352 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170352 );
				half Overlay_Mask494_g170322 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170322 * Overlay_MaskProj457_g170322 * Overlay_MaskLuma438_g170322 * Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 * Custom_Mask646_g170322 ) - temp_output_7_0_g170352 ) / ( temp_output_10_0_g170352 + 0.0001 ) ) );
				float3 lerpResult467_g170322 = lerp( Visual_Albedo127_g170322 , ( staticSwitch14_g170334 + Overlay_GlitterColor865_g170322 ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170322 = lerpResult467_g170322;
				#else
				float3 staticSwitch577_g170322 = Visual_Albedo127_g170322;
				#endif
				half3 Final_Albedo493_g170322 = staticSwitch577_g170322;
				float3 In_Albedo3_g170325 = Final_Albedo493_g170322;
				half2 Visual_NormalTS535_g170322 = Out_NormalTS4_g170323;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170329) = _OverlayNormalTex;
				SamplerState Sampler238_g170329 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170329 = Overlay_Coords639_g170322;
				half4 Coords238_g170329 = temp_output_37_0_g170329;
				float3 temp_output_279_0_g170329 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170329 = temp_output_279_0_g170329;
				half4 localSamplePlanar2D238_g170329 = SamplePlanar2D( Texture238_g170329 , Sampler238_g170329 , Coords238_g170329 , WorldPosition238_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170329) = _OverlayNormalTex;
				SamplerState Sampler246_g170329 = sampler_Linear_Repeat;
				half4 Coords246_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition246_g170329 = temp_output_279_0_g170329;
				float3 temp_output_280_0_g170329 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170329 = temp_output_280_0_g170329;
				half4 localSamplePlanar3D246_g170329 = SamplePlanar3D( Texture246_g170329 , Sampler246_g170329 , Coords246_g170329 , WorldPosition246_g170329 , WorldNormal246_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170329) = _OverlayNormalTex;
				SamplerState Sampler234_g170329 = sampler_Linear_Repeat;
				float4 Coords234_g170329 = temp_output_37_0_g170329;
				float3 WorldPosition234_g170329 = temp_output_279_0_g170329;
				float4 localSampleStochastic2D234_g170329 = SampleStochastic2D( Texture234_g170329 , Sampler234_g170329 , Coords234_g170329 , WorldPosition234_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170329) = _OverlayNormalTex;
				SamplerState Sampler263_g170329 = sampler_Linear_Repeat;
				half4 Coords263_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition263_g170329 = temp_output_279_0_g170329;
				half3 WorldNormal263_g170329 = temp_output_280_0_g170329;
				half4 localSampleStochastic3D263_g170329 = SampleStochastic3D( Texture263_g170329 , Sampler263_g170329 , Coords263_g170329 , WorldPosition263_g170329 , WorldNormal263_g170329 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170322 = localSamplePlanar3D246_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170322 = localSampleStochastic2D234_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170322 = localSampleStochastic3D263_g170329;
				#else
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#endif
				half4 Normal_Packed45_g170333 = staticSwitch686_g170322;
				float2 appendResult58_g170333 = (float2(( (Normal_Packed45_g170333).x * (Normal_Packed45_g170333).w ) , (Normal_Packed45_g170333).y));
				half2 Normal_Default50_g170333 = appendResult58_g170333;
				half2 Normal_ASTC41_g170333 = (Normal_Packed45_g170333).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170333 = Normal_ASTC41_g170333;
				#else
				float2 staticSwitch38_g170333 = Normal_Default50_g170333;
				#endif
				half2 Normal_NO_DTX544_g170333 = (Normal_Packed45_g170333).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170333 = Normal_NO_DTX544_g170333;
				#else
				float2 staticSwitch37_g170333 = staticSwitch38_g170333;
				#endif
				half2 Normal_Planar45_g170332 = (staticSwitch37_g170333*2.0 + -1.0);
				float2 break71_g170332 = Normal_Planar45_g170332;
				float3 appendResult72_g170332 = (float3(break71_g170332.x , 0.0 , break71_g170332.y));
				half2 Overlay_Normal528_g170322 = (mul( ase_worldToTangent, appendResult72_g170332 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170322 = Overlay_Normal528_g170322;
				#else
				float2 staticSwitch579_g170322 = Visual_NormalTS535_g170322;
				#endif
				float2 lerpResult551_g170322 = lerp( Visual_NormalTS535_g170322 , ( staticSwitch579_g170322 * _OverlayNormalValue ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170322 = lerpResult551_g170322;
				#else
				float2 staticSwitch583_g170322 = Visual_NormalTS535_g170322;
				#endif
				half2 Final_NormalTS499_g170322 = staticSwitch583_g170322;
				float2 In_NormalTS3_g170325 = Final_NormalTS499_g170322;
				float3 In_NormalWS3_g170325 = temp_output_739_21_g170322;
				half4 Visual_Masks536_g170322 = Out_Shader4_g170323;
				float4 appendResult585_g170322 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170322 = lerp( Visual_Masks536_g170322 , appendResult585_g170322 , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170322 = lerpResult584_g170322;
				#else
				float4 staticSwitch586_g170322 = Visual_Masks536_g170322;
				#endif
				half4 Final_Masks482_g170322 = staticSwitch586_g170322;
				float4 In_Shader3_g170325 = Final_Masks482_g170322;
				float4 In_Emissive3_g170325 = Out_Emissive4_g170323;
				float temp_output_739_12_g170322 = Out_Grayscale4_g170323;
				float In_Grayscale3_g170325 = temp_output_739_12_g170322;
				float In_Luminosity3_g170325 = temp_output_739_15_g170322;
				float In_MultiMask3_g170325 = Out_MultiMask4_g170323;
				float In_AlphaClip3_g170325 = Out_AlphaClip4_g170323;
				float In_AlphaFade3_g170325 = Out_AlphaFade4_g170323;
				float3 In_Translucency3_g170325 = Out_Translucency4_g170323;
				half Visual_Transmission699_g170322 = Out_Transmission4_g170323;
				float lerpResult746_g170322 = lerp( Visual_Transmission699_g170322 , ( Visual_Transmission699_g170322 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170322 = lerpResult746_g170322;
				#else
				float staticSwitch703_g170322 = Visual_Transmission699_g170322;
				#endif
				half Final_Transmission702_g170322 = staticSwitch703_g170322;
				float In_Transmission3_g170325 = Final_Transmission702_g170322;
				float In_Thickness3_g170325 = Out_Thickness4_g170323;
				float In_Diffusion3_g170325 = Out_Diffusion4_g170323;
				{
				Data3_g170325.Dummy = In_Dummy3_g170325;
				Data3_g170325.Albedo = In_Albedo3_g170325;
				Data3_g170325.NormalTS = In_NormalTS3_g170325;
				Data3_g170325.NormalWS = In_NormalWS3_g170325;
				Data3_g170325.Shader = In_Shader3_g170325;
				Data3_g170325.Emissive= In_Emissive3_g170325;
				Data3_g170325.MultiMask = In_MultiMask3_g170325;
				Data3_g170325.Grayscale = In_Grayscale3_g170325;
				Data3_g170325.Luminosity = In_Luminosity3_g170325;
				Data3_g170325.AlphaClip = In_AlphaClip3_g170325;
				Data3_g170325.AlphaFade = In_AlphaFade3_g170325;
				Data3_g170325.Translucency = In_Translucency3_g170325;
				Data3_g170325.Transmission = In_Transmission3_g170325;
				Data3_g170325.Thickness = In_Thickness3_g170325;
				Data3_g170325.Diffusion = In_Diffusion3_g170325;
				}
				TVEVisualData Data4_g170359 = Data3_g170325;
				float Out_Dummy4_g170359 = 0;
				float3 Out_Albedo4_g170359 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170359 = float2( 0,0 );
				float3 Out_NormalWS4_g170359 = float3( 0,0,0 );
				float4 Out_Shader4_g170359 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170359 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170359 = 0;
				float Out_Grayscale4_g170359 = 0;
				float Out_Luminosity4_g170359 = 0;
				float Out_AlphaClip4_g170359 = 0;
				float Out_AlphaFade4_g170359 = 0;
				float3 Out_Translucency4_g170359 = float3( 0,0,0 );
				float Out_Transmission4_g170359 = 0;
				float Out_Thickness4_g170359 = 0;
				float Out_Diffusion4_g170359 = 0;
				{
				Out_Dummy4_g170359 = Data4_g170359.Dummy;
				Out_Albedo4_g170359 = Data4_g170359.Albedo;
				Out_NormalTS4_g170359 = Data4_g170359.NormalTS;
				Out_NormalWS4_g170359 = Data4_g170359.NormalWS;
				Out_Shader4_g170359 = Data4_g170359.Shader;
				Out_Emissive4_g170359= Data4_g170359.Emissive;
				Out_MultiMask4_g170359 = Data4_g170359.MultiMask;
				Out_Grayscale4_g170359 = Data4_g170359.Grayscale;
				Out_Luminosity4_g170359= Data4_g170359.Luminosity;
				Out_AlphaClip4_g170359 = Data4_g170359.AlphaClip;
				Out_AlphaFade4_g170359 = Data4_g170359.AlphaFade;
				Out_Translucency4_g170359 = Data4_g170359.Translucency;
				Out_Transmission4_g170359 = Data4_g170359.Transmission;
				Out_Thickness4_g170359 = Data4_g170359.Thickness;
				Out_Diffusion4_g170359 = Data4_g170359.Diffusion;
				}
				half3 Visual_Albedo127_g170358 = Out_Albedo4_g170359;
				TVEGlobalData Data15_g170371 = Data204_g169264;
				float Out_Dummy15_g170371 = 0;
				float4 Out_CoatParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_CoatParams15_g170371 = Data15_g170371.CoatParams;
				Out_PaintParams15_g170371 = Data15_g170371.PaintParams;
				Out_GlowParams15_g170371 = Data15_g170371.GlowParams;
				Out_AtmoParams15_g170371= Data15_g170371.AtmoParams;
				Out_FadeParams15_g170371= Data15_g170371.FadeParams;
				Out_FormParams15_g170371 = Data15_g170371.FormParams;
				Out_LandParams15_g170371 = Data15_g170371.LandParams;
				Out_WindParams15_g170371 = Data15_g170371.WindParams;
				Out_PushParams15_g170371 = Data15_g170371.PushParams;
				}
				half4 Global_AtmoParams516_g170358 = Out_AtmoParams15_g170371;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170358 = ( (Global_AtmoParams516_g170358).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170358 = 1.0;
				#endif
				half Global_Wetness429_g170358 = staticSwitch663_g170358;
				half Wetness_Value866_g170358 = ( _WetnessIntensityValue * Global_Wetness429_g170358 );
				half4 Visual_Masks536_g170358 = Out_Shader4_g170359;
				float temp_output_757_0_g170358 = (Visual_Masks536_g170358).z;
				half Water_HeightMask782_g170358 = temp_output_757_0_g170358;
				float clampResult17_g170369 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170358 ) - Water_HeightMask782_g170358 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170370 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170370 );
				TVEModelData Data15_g170361 = Data16_g169262;
				float Out_Dummy15_g170361 = 0;
				float3 Out_PositionOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170361 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170361 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170361 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170361 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170361 = float3( 0,0,0 );
				float4 Out_VertexData15_g170361 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170361 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170361 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170361 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170361 = Data15_g170361.Dummy;
				Out_PositionOS15_g170361 = Data15_g170361.PositionOS;
				Out_PositionWS15_g170361 = Data15_g170361.PositionWS;
				Out_PositionWO15_g170361 = Data15_g170361.PositionWO;
				Out_PositionRawOS15_g170361 = Data15_g170361.PositionRawOS;
				Out_PositionAddOS15_g170361 = Data15_g170361.PositionAddOS;
				Out_PivotOS15_g170361 = Data15_g170361.PivotOS;
				Out_PivotWS15_g170361 = Data15_g170361.PivotWS;
				Out_PivotWO15_g170361 = Data15_g170361.PivotWO;
				Out_NormalOS15_g170361 = Data15_g170361.NormalOS;
				Out_NormalWS15_g170361 = Data15_g170361.NormalWS;
				Out_NormalRawOS15_g170361 = Data15_g170361.NormalRawOS;
				Out_NormalRawWS15_g170361 = Data15_g170361.NormalRawWS;
				Out_TangentOS15_g170361 = Data15_g170361.TangentOS;
				Out_ViewDirWS15_g170361 = Data15_g170361.ViewDirWS;
				Out_VertexData15_g170361 = Data15_g170361.VertexData;
				Out_MotionData15_g170361 = Data15_g170361.MotionData;
				Out_BoundsData15_g170361 = Data15_g170361.BoundsData;
				Out_RotationData15_g170361 = Data15_g170361.RotationData;
				}
				half3 Model_NormalWS798_g170358 = Out_NormalWS15_g170361;
				float temp_output_786_0_g170358 = saturate( (Model_NormalWS798_g170358).y );
				half Wetness_ProjMask790_g170358 = temp_output_786_0_g170358;
				half Water_Mask760_g170358 = ( saturate( ( ( clampResult17_g170369 - temp_output_7_0_g170370 ) / ( temp_output_10_0_g170370 + 0.0001 ) ) ) * Wetness_ProjMask790_g170358 );
				float3 lerpResult918_g170358 = lerp( Visual_Albedo127_g170358 , ( Visual_Albedo127_g170358 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170358 = lerpResult918_g170358;
				#else
				float3 staticSwitch946_g170358 = Visual_Albedo127_g170358;
				#endif
				float3 lerpResult768_g170358 = lerp( staticSwitch946_g170358 , ( staticSwitch946_g170358 * staticSwitch946_g170358 ) , _WetnessContrastValue);
				float3 lerpResult651_g170358 = lerp( Visual_Albedo127_g170358 , lerpResult768_g170358 , Wetness_Value866_g170358);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170358 = lerpResult651_g170358;
				#else
				float3 staticSwitch577_g170358 = Visual_Albedo127_g170358;
				#endif
				half3 Final_Albedo493_g170358 = staticSwitch577_g170358;
				float3 In_Albedo3_g170360 = Final_Albedo493_g170358;
				half2 Visual_Normal535_g170358 = Out_NormalTS4_g170359;
				float lerpResult877_g170358 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170358 = ( Visual_Normal535_g170358 * lerpResult877_g170358 );
				#else
				float2 staticSwitch957_g170358 = Visual_Normal535_g170358;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170363) = _WetnessDropsTex;
				SamplerState Sampler238_g170363 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170358 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170363 = appendResult924_g170358;
				half4 Coords238_g170363 = temp_output_37_0_g170363;
				half3 Model_PositionWO602_g170358 = Out_PositionWO15_g170361;
				float3 temp_output_279_0_g170363 = Model_PositionWO602_g170358;
				half3 WorldPosition238_g170363 = temp_output_279_0_g170363;
				half4 localSamplePlanar2D238_g170363 = SamplePlanar2D( Texture238_g170363 , Sampler238_g170363 , Coords238_g170363 , WorldPosition238_g170363 );
				float4 temp_output_676_0_g170358 = localSamplePlanar2D238_g170363;
				half2 Rain_DropsNormal919_g170358 = (temp_output_676_0_g170358).zw;
				float2 temp_output_903_0_g170358 = (Rain_DropsNormal919_g170358*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170358 = (temp_output_676_0_g170358).xy;
				float2 lerpResult904_g170358 = lerp( temp_output_903_0_g170358 , (Rain_RingsNormal713_g170358*2.0 + -1.0) , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170358 = lerpResult904_g170358;
				#else
				float2 staticSwitch960_g170358 = temp_output_903_0_g170358;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170358 = ( (Global_AtmoParams516_g170358).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170358 = 1.0;
				#endif
				half Global_Rain955_g170358 = staticSwitch949_g170358;
				half3 Model_PositionWS823_g170358 = Out_PositionWS15_g170361;
				half2 Normal_Planar45_g170374 = ( staticSwitch960_g170358 * Global_Rain955_g170358 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170358 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				half2 Wetness_Normal526_g170358 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170358 = ( staticSwitch957_g170358 + ( Wetness_ProjMask790_g170358 * Wetness_Normal526_g170358 ) );
				#else
				float2 staticSwitch583_g170358 = Visual_Normal535_g170358;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170358 = staticSwitch583_g170358;
				#else
				float2 staticSwitch774_g170358 = Visual_Normal535_g170358;
				#endif
				half2 Final_Normal499_g170358 = staticSwitch774_g170358;
				float2 In_NormalTS3_g170360 = Final_Normal499_g170358;
				float3 In_NormalWS3_g170360 = Out_NormalWS4_g170359;
				float4 break658_g170358 = Visual_Masks536_g170358;
				float temp_output_935_0_g170358 = ( Wetness_Value866_g170358 * _WetnessSmoothnessValue );
				float lerpResult941_g170358 = lerp( temp_output_935_0_g170358 , 2.0 , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170358 = lerpResult941_g170358;
				#else
				float staticSwitch959_g170358 = temp_output_935_0_g170358;
				#endif
				float4 appendResult661_g170358 = (float4(break658_g170358.x , break658_g170358.y , break658_g170358.z , saturate( ( break658_g170358.w + staticSwitch959_g170358 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170358 = appendResult661_g170358;
				#else
				float4 staticSwitch586_g170358 = Visual_Masks536_g170358;
				#endif
				half4 Final_Masks482_g170358 = staticSwitch586_g170358;
				float4 In_Shader3_g170360 = Final_Masks482_g170358;
				float4 In_Emissive3_g170360 = Out_Emissive4_g170359;
				float In_Grayscale3_g170360 = Out_Grayscale4_g170359;
				float In_Luminosity3_g170360 = Out_Luminosity4_g170359;
				float In_MultiMask3_g170360 = Out_MultiMask4_g170359;
				float In_AlphaClip3_g170360 = Out_AlphaClip4_g170359;
				float In_AlphaFade3_g170360 = Out_AlphaFade4_g170359;
				float3 In_Translucency3_g170360 = Out_Translucency4_g170359;
				float In_Transmission3_g170360 = Out_Transmission4_g170359;
				float In_Thickness3_g170360 = Out_Thickness4_g170359;
				float In_Diffusion3_g170360 = Out_Diffusion4_g170359;
				{
				Data3_g170360.Dummy = In_Dummy3_g170360;
				Data3_g170360.Albedo = In_Albedo3_g170360;
				Data3_g170360.NormalTS = In_NormalTS3_g170360;
				Data3_g170360.NormalWS = In_NormalWS3_g170360;
				Data3_g170360.Shader = In_Shader3_g170360;
				Data3_g170360.Emissive= In_Emissive3_g170360;
				Data3_g170360.MultiMask = In_MultiMask3_g170360;
				Data3_g170360.Grayscale = In_Grayscale3_g170360;
				Data3_g170360.Luminosity = In_Luminosity3_g170360;
				Data3_g170360.AlphaClip = In_AlphaClip3_g170360;
				Data3_g170360.AlphaFade = In_AlphaFade3_g170360;
				Data3_g170360.Translucency = In_Translucency3_g170360;
				Data3_g170360.Transmission = In_Transmission3_g170360;
				Data3_g170360.Thickness = In_Thickness3_g170360;
				Data3_g170360.Diffusion = In_Diffusion3_g170360;
				}
				TVEVisualData Data4_g170377 = Data3_g170360;
				float Out_Dummy4_g170377 = 0;
				float3 Out_Albedo4_g170377 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170377 = float2( 0,0 );
				float3 Out_NormalWS4_g170377 = float3( 0,0,0 );
				float4 Out_Shader4_g170377 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170377 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170377 = 0;
				float Out_Grayscale4_g170377 = 0;
				float Out_Luminosity4_g170377 = 0;
				float Out_AlphaClip4_g170377 = 0;
				float Out_AlphaFade4_g170377 = 0;
				float3 Out_Translucency4_g170377 = float3( 0,0,0 );
				float Out_Transmission4_g170377 = 0;
				float Out_Thickness4_g170377 = 0;
				float Out_Diffusion4_g170377 = 0;
				{
				Out_Dummy4_g170377 = Data4_g170377.Dummy;
				Out_Albedo4_g170377 = Data4_g170377.Albedo;
				Out_NormalTS4_g170377 = Data4_g170377.NormalTS;
				Out_NormalWS4_g170377 = Data4_g170377.NormalWS;
				Out_Shader4_g170377 = Data4_g170377.Shader;
				Out_Emissive4_g170377= Data4_g170377.Emissive;
				Out_MultiMask4_g170377 = Data4_g170377.MultiMask;
				Out_Grayscale4_g170377 = Data4_g170377.Grayscale;
				Out_Luminosity4_g170377= Data4_g170377.Luminosity;
				Out_AlphaClip4_g170377 = Data4_g170377.AlphaClip;
				Out_AlphaFade4_g170377 = Data4_g170377.AlphaFade;
				Out_Translucency4_g170377 = Data4_g170377.Translucency;
				Out_Transmission4_g170377 = Data4_g170377.Transmission;
				Out_Thickness4_g170377 = Data4_g170377.Thickness;
				Out_Diffusion4_g170377 = Data4_g170377.Diffusion;
				}
				float3 In_Albedo3_g170378 = Out_Albedo4_g170377;
				float2 In_NormalTS3_g170378 = Out_NormalTS4_g170377;
				float3 In_NormalWS3_g170378 = Out_NormalWS4_g170377;
				float4 In_Shader3_g170378 = Out_Shader4_g170377;
				float4 In_Emissive3_g170378 = Out_Emissive4_g170377;
				float In_Grayscale3_g170378 = Out_Grayscale4_g170377;
				float In_Luminosity3_g170378 = Out_Luminosity4_g170377;
				float temp_output_571_11_g170376 = Out_MultiMask4_g170377;
				float In_MultiMask3_g170378 = temp_output_571_11_g170376;
				half Visual_AlphaClip667_g170376 = Out_AlphaClip4_g170377;
				TVEGlobalData Data15_g170388 = Data204_g169264;
				float Out_Dummy15_g170388 = 0;
				float4 Out_CoatParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170388 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170388 = Data15_g170388.Dummy;
				Out_CoatParams15_g170388 = Data15_g170388.CoatParams;
				Out_PaintParams15_g170388 = Data15_g170388.PaintParams;
				Out_GlowParams15_g170388 = Data15_g170388.GlowParams;
				Out_AtmoParams15_g170388= Data15_g170388.AtmoParams;
				Out_FadeParams15_g170388= Data15_g170388.FadeParams;
				Out_FormParams15_g170388 = Data15_g170388.FormParams;
				Out_LandParams15_g170388 = Data15_g170388.LandParams;
				Out_WindParams15_g170388 = Data15_g170388.WindParams;
				Out_PushParams15_g170388 = Data15_g170388.PushParams;
				}
				half4 Global_FadeParams516_g170376 = Out_FadeParams15_g170388;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170376 = saturate( (Global_FadeParams516_g170376).w );
				#else
				float staticSwitch663_g170376 = 1.0;
				#endif
				half Local_GlobalMask429_g170376 = staticSwitch663_g170376;
				float lerpResult811_g170376 = lerp( 1.0 , Visual_AlphaClip667_g170376 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170376 = lerpResult811_g170376;
				TVEModelData Data15_g170379 = Data16_g169262;
				float Out_Dummy15_g170379 = 0;
				float3 Out_PositionOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170379 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170379 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170379 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170379 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170379 = float3( 0,0,0 );
				float4 Out_VertexData15_g170379 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170379 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170379 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170379 = Data15_g170379.Dummy;
				Out_PositionOS15_g170379 = Data15_g170379.PositionOS;
				Out_PositionWS15_g170379 = Data15_g170379.PositionWS;
				Out_PositionWO15_g170379 = Data15_g170379.PositionWO;
				Out_PositionRawOS15_g170379 = Data15_g170379.PositionRawOS;
				Out_PositionAddOS15_g170379 = Data15_g170379.PositionAddOS;
				Out_PivotOS15_g170379 = Data15_g170379.PivotOS;
				Out_PivotWS15_g170379 = Data15_g170379.PivotWS;
				Out_PivotWO15_g170379 = Data15_g170379.PivotWO;
				Out_NormalOS15_g170379 = Data15_g170379.NormalOS;
				Out_NormalWS15_g170379 = Data15_g170379.NormalWS;
				Out_NormalRawOS15_g170379 = Data15_g170379.NormalRawOS;
				Out_NormalRawWS15_g170379 = Data15_g170379.NormalRawWS;
				Out_TangentOS15_g170379 = Data15_g170379.TangentOS;
				Out_ViewDirWS15_g170379 = Data15_g170379.ViewDirWS;
				Out_VertexData15_g170379 = Data15_g170379.VertexData;
				Out_MotionData15_g170379 = Data15_g170379.MotionData;
				Out_BoundsData15_g170379 = Data15_g170379.BoundsData;
				Out_RotationData15_g170379 = Data15_g170379.RotationData;
				}
				half3 Model_PositionWO602_g170376 = Out_PositionWO15_g170379;
				float4 tex3DNode60_g170382 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170376 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170376 = lerp( 1.0 , tex3DNode60_g170382.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170376 = lerpResult673_g170376;
				half4 Model_VertexMasks752_g170376 = Out_VertexData15_g170379;
				float4 break755_g170376 = Model_VertexMasks752_g170376;
				float4 break33_g170380 = _cutout_vert_mode;
				float temp_output_30_0_g170380 = ( break755_g170376.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break755_g170376.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break755_g170376.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break755_g170376.w * break33_g170380.w ) );
				float clampResult17_g170381 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170384 = ( _CutoutMeshRemap.y - temp_output_7_0_g170384 );
				float lerpResult820_g170376 = lerp( 1.0 , saturate( ( ( clampResult17_g170381 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170385 = lerpResult820_g170376;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170385 = ( temp_output_6_0_g170385 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170385 = temp_output_6_0_g170385;
				#endif
				float temp_output_801_0_g170376 = staticSwitch14_g170385;
				half Local_VertMask766_g170376 = temp_output_801_0_g170376;
				half Visual_MultiMask671_g170376 = temp_output_571_11_g170376;
				float lerpResult683_g170376 = lerp( 1.0 , Visual_MultiMask671_g170376 , _CutoutMultiValue);
				half Local_MultiMask685_g170376 = lerpResult683_g170376;
				float lerpResult728_g170376 = lerp( Visual_AlphaClip667_g170376 , min( Visual_AlphaClip667_g170376 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170376 ) - ( Local_AlphaMask814_g170376 * Local_NoiseMask678_g170376 * Local_VertMask766_g170376 ) ) ) ) , Local_MultiMask685_g170376);
				half Local_AlphaClip784_g170376 = lerpResult728_g170376;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170376 = Local_AlphaClip784_g170376;
				#else
				float staticSwitch577_g170376 = Visual_AlphaClip667_g170376;
				#endif
				half Final_AlphaClip795_g170376 = staticSwitch577_g170376;
				float In_AlphaClip3_g170378 = Final_AlphaClip795_g170376;
				float In_AlphaFade3_g170378 = Out_AlphaFade4_g170377;
				float3 In_Translucency3_g170378 = Out_Translucency4_g170377;
				float In_Transmission3_g170378 = Out_Transmission4_g170377;
				float In_Thickness3_g170378 = Out_Thickness4_g170377;
				float In_Diffusion3_g170378 = Out_Diffusion4_g170377;
				{
				Data3_g170378.Dummy = In_Dummy3_g170378;
				Data3_g170378.Albedo = In_Albedo3_g170378;
				Data3_g170378.NormalTS = In_NormalTS3_g170378;
				Data3_g170378.NormalWS = In_NormalWS3_g170378;
				Data3_g170378.Shader = In_Shader3_g170378;
				Data3_g170378.Emissive= In_Emissive3_g170378;
				Data3_g170378.MultiMask = In_MultiMask3_g170378;
				Data3_g170378.Grayscale = In_Grayscale3_g170378;
				Data3_g170378.Luminosity = In_Luminosity3_g170378;
				Data3_g170378.AlphaClip = In_AlphaClip3_g170378;
				Data3_g170378.AlphaFade = In_AlphaFade3_g170378;
				Data3_g170378.Translucency = In_Translucency3_g170378;
				Data3_g170378.Transmission = In_Transmission3_g170378;
				Data3_g170378.Thickness = In_Thickness3_g170378;
				Data3_g170378.Diffusion = In_Diffusion3_g170378;
				}
				TVEVisualData Data4_g170392 = Data3_g170378;
				float Out_Dummy4_g170392 = 0;
				float3 Out_Albedo4_g170392 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170392 = float2( 0,0 );
				float3 Out_NormalWS4_g170392 = float3( 0,0,0 );
				float4 Out_Shader4_g170392 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170392 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170392 = 0;
				float Out_Grayscale4_g170392 = 0;
				float Out_Luminosity4_g170392 = 0;
				float Out_AlphaClip4_g170392 = 0;
				float Out_AlphaFade4_g170392 = 0;
				float3 Out_Translucency4_g170392 = float3( 0,0,0 );
				float Out_Transmission4_g170392 = 0;
				float Out_Thickness4_g170392 = 0;
				float Out_Diffusion4_g170392 = 0;
				{
				Out_Dummy4_g170392 = Data4_g170392.Dummy;
				Out_Albedo4_g170392 = Data4_g170392.Albedo;
				Out_NormalTS4_g170392 = Data4_g170392.NormalTS;
				Out_NormalWS4_g170392 = Data4_g170392.NormalWS;
				Out_Shader4_g170392 = Data4_g170392.Shader;
				Out_Emissive4_g170392= Data4_g170392.Emissive;
				Out_MultiMask4_g170392 = Data4_g170392.MultiMask;
				Out_Grayscale4_g170392 = Data4_g170392.Grayscale;
				Out_Luminosity4_g170392= Data4_g170392.Luminosity;
				Out_AlphaClip4_g170392 = Data4_g170392.AlphaClip;
				Out_AlphaFade4_g170392 = Data4_g170392.AlphaFade;
				Out_Translucency4_g170392 = Data4_g170392.Translucency;
				Out_Transmission4_g170392 = Data4_g170392.Transmission;
				Out_Thickness4_g170392 = Data4_g170392.Thickness;
				Out_Diffusion4_g170392 = Data4_g170392.Diffusion;
				}
				float3 In_Albedo3_g170393 = Out_Albedo4_g170392;
				float2 In_NormalTS3_g170393 = Out_NormalTS4_g170392;
				float3 In_NormalWS3_g170393 = Out_NormalWS4_g170392;
				float4 In_Shader3_g170393 = Out_Shader4_g170392;
				float4 In_Emissive3_g170393 = Out_Emissive4_g170392;
				float In_Grayscale3_g170393 = Out_Grayscale4_g170392;
				float In_Luminosity3_g170393 = Out_Luminosity4_g170392;
				float temp_output_821_11_g170389 = Out_MultiMask4_g170392;
				float In_MultiMask3_g170393 = temp_output_821_11_g170389;
				half Visual_AlphaClip754_g170389 = Out_AlphaClip4_g170392;
				half Dither_Constant768_g170389 = _DitherConstantValue;
				float temp_output_756_0_g170389 = distance( worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170389 = ( ( 1.0 - saturate( ( temp_output_756_0_g170389 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170391 = Data16_g169262;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionWS776_g170389 = Out_PositionWS15_g170391;
				float temp_output_7_0_g170398 = _DitherDistanceMinValue;
				float temp_output_10_0_g170398 = ( _DitherDistanceMaxValue - temp_output_7_0_g170398 );
				half Dither_Distance856_g170389 = ( saturate( ( ( distance( Model_PositionWS776_g170389 , _WorldSpaceCameraPos ) - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170389 = Out_ViewDirWS15_g170391;
				float3 normalizeResult792_g170389 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170389 = dot( Model_ViewDirWS845_g170389 , normalizeResult792_g170389 );
				half Dither_Glancing784_g170389 = ( saturate( ( ( 1.0 - abs( dotResult778_g170389 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170389 = max( max( max( Dither_Constant768_g170389 , Dither_Proximity767_g170389 ) , Dither_Distance856_g170389 ) , Dither_Glancing784_g170389 );
				half3 Model_PositionWO602_g170389 = Out_PositionWO15_g170391;
				float4 tex3DNode60_g170396 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170389 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170389 = tex3DNode60_g170396.r;
				half Visual_MultiMask671_g170389 = temp_output_821_11_g170389;
				float lerpResult683_g170389 = lerp( 1.0 , Visual_MultiMask671_g170389 , _DitherMultiValue);
				half Local_MaskMulti685_g170389 = lerpResult683_g170389;
				float lerpResult728_g170389 = lerp( Visual_AlphaClip754_g170389 , min( Visual_AlphaClip754_g170389 , ( -0.001 - ( Dither_Value429_g170389 - Local_MaskNoise678_g170389 ) ) ) , Local_MaskMulti685_g170389);
				half Local_AlphaClip834_g170389 = lerpResult728_g170389;
				#ifdef TVE_DITHER
				float staticSwitch577_g170389 = Local_AlphaClip834_g170389;
				#else
				float staticSwitch577_g170389 = Visual_AlphaClip754_g170389;
				#endif
				half Final_AlphaClip493_g170389 = staticSwitch577_g170389;
				float In_AlphaClip3_g170393 = Final_AlphaClip493_g170389;
				float In_AlphaFade3_g170393 = Out_AlphaFade4_g170392;
				float3 In_Translucency3_g170393 = Out_Translucency4_g170392;
				float In_Transmission3_g170393 = Out_Transmission4_g170392;
				float In_Thickness3_g170393 = Out_Thickness4_g170392;
				float In_Diffusion3_g170393 = Out_Diffusion4_g170392;
				{
				Data3_g170393.Dummy = In_Dummy3_g170393;
				Data3_g170393.Albedo = In_Albedo3_g170393;
				Data3_g170393.NormalTS = In_NormalTS3_g170393;
				Data3_g170393.NormalWS = In_NormalWS3_g170393;
				Data3_g170393.Shader = In_Shader3_g170393;
				Data3_g170393.Emissive= In_Emissive3_g170393;
				Data3_g170393.MultiMask = In_MultiMask3_g170393;
				Data3_g170393.Grayscale = In_Grayscale3_g170393;
				Data3_g170393.Luminosity = In_Luminosity3_g170393;
				Data3_g170393.AlphaClip = In_AlphaClip3_g170393;
				Data3_g170393.AlphaFade = In_AlphaFade3_g170393;
				Data3_g170393.Translucency = In_Translucency3_g170393;
				Data3_g170393.Transmission = In_Transmission3_g170393;
				Data3_g170393.Thickness = In_Thickness3_g170393;
				Data3_g170393.Diffusion = In_Diffusion3_g170393;
				}
				TVEVisualData Data4_g170418 = Data3_g170393;
				float Out_Dummy4_g170418 = 0;
				float3 Out_Albedo4_g170418 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170418 = float2( 0,0 );
				float3 Out_NormalWS4_g170418 = float3( 0,0,0 );
				float4 Out_Shader4_g170418 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170418 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170418 = 0;
				float Out_Grayscale4_g170418 = 0;
				float Out_Luminosity4_g170418 = 0;
				float Out_AlphaClip4_g170418 = 0;
				float Out_AlphaFade4_g170418 = 0;
				float3 Out_Translucency4_g170418 = float3( 0,0,0 );
				float Out_Transmission4_g170418 = 0;
				float Out_Thickness4_g170418 = 0;
				float Out_Diffusion4_g170418 = 0;
				{
				Out_Dummy4_g170418 = Data4_g170418.Dummy;
				Out_Albedo4_g170418 = Data4_g170418.Albedo;
				Out_NormalTS4_g170418 = Data4_g170418.NormalTS;
				Out_NormalWS4_g170418 = Data4_g170418.NormalWS;
				Out_Shader4_g170418 = Data4_g170418.Shader;
				Out_Emissive4_g170418= Data4_g170418.Emissive;
				Out_MultiMask4_g170418 = Data4_g170418.MultiMask;
				Out_Grayscale4_g170418 = Data4_g170418.Grayscale;
				Out_Luminosity4_g170418= Data4_g170418.Luminosity;
				Out_AlphaClip4_g170418 = Data4_g170418.AlphaClip;
				Out_AlphaFade4_g170418 = Data4_g170418.AlphaFade;
				Out_Translucency4_g170418 = Data4_g170418.Translucency;
				Out_Transmission4_g170418 = Data4_g170418.Transmission;
				Out_Thickness4_g170418 = Data4_g170418.Thickness;
				Out_Diffusion4_g170418 = Data4_g170418.Diffusion;
				}
				float3 temp_output_297_0_g170407 = Out_Albedo4_g170418;
				float3 In_Albedo3_g170419 = temp_output_297_0_g170407;
				float2 In_NormalTS3_g170419 = Out_NormalTS4_g170418;
				float3 In_NormalWS3_g170419 = Out_NormalWS4_g170418;
				float4 In_Shader3_g170419 = Out_Shader4_g170418;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170407 = Out_Emissive4_g170418;
				TVEModelData Data15_g170408 = Data16_g169262;
				float Out_Dummy15_g170408 = 0;
				float3 Out_PositionOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170408 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170408 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170408 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170408 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170408 = float3( 0,0,0 );
				float4 Out_VertexData15_g170408 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170408 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170408 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170408 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170408 = Data15_g170408.Dummy;
				Out_PositionOS15_g170408 = Data15_g170408.PositionOS;
				Out_PositionWS15_g170408 = Data15_g170408.PositionWS;
				Out_PositionWO15_g170408 = Data15_g170408.PositionWO;
				Out_PositionRawOS15_g170408 = Data15_g170408.PositionRawOS;
				Out_PositionAddOS15_g170408 = Data15_g170408.PositionAddOS;
				Out_PivotOS15_g170408 = Data15_g170408.PivotOS;
				Out_PivotWS15_g170408 = Data15_g170408.PivotWS;
				Out_PivotWO15_g170408 = Data15_g170408.PivotWO;
				Out_NormalOS15_g170408 = Data15_g170408.NormalOS;
				Out_NormalWS15_g170408 = Data15_g170408.NormalWS;
				Out_NormalRawOS15_g170408 = Data15_g170408.NormalRawOS;
				Out_NormalRawWS15_g170408 = Data15_g170408.NormalRawWS;
				Out_TangentOS15_g170408 = Data15_g170408.TangentOS;
				Out_ViewDirWS15_g170408 = Data15_g170408.ViewDirWS;
				Out_VertexData15_g170408 = Data15_g170408.VertexData;
				Out_MotionData15_g170408 = Data15_g170408.MotionData;
				Out_BoundsData15_g170408 = Data15_g170408.BoundsData;
				Out_RotationData15_g170408 = Data15_g170408.RotationData;
				}
				half4 Model_VertexMasks216_g170407 = Out_VertexData15_g170408;
				float4 break251_g170407 = Model_VertexMasks216_g170407;
				float4 break33_g170412 = _emissive_vert_mode;
				float temp_output_30_0_g170412 = ( break251_g170407.x * break33_g170412.x );
				float temp_output_29_0_g170412 = ( break251_g170407.y * break33_g170412.y );
				float temp_output_31_0_g170412 = ( break251_g170407.z * break33_g170412.z );
				float temp_output_28_0_g170412 = ( temp_output_30_0_g170412 + temp_output_29_0_g170412 + temp_output_31_0_g170412 + ( break251_g170407.w * break33_g170412.w ) );
				float clampResult17_g170411 = clamp( temp_output_28_0_g170412 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170415 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170415 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170415 );
				float lerpResult303_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170415 ) / ( temp_output_10_0_g170415 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170421 = lerpResult303_g170407;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_263_0_g170407 = staticSwitch14_g170421;
				half Emissive_MeshMask221_g170407 = temp_output_263_0_g170407;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170410) = _EmissiveMaskTex;
				SamplerState Sampler276_g170410 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170416 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170416 = ( temp_output_6_0_g170416 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170416 = temp_output_6_0_g170416;
				#endif
				half4 Emissive_Coords167_g170407 = staticSwitch14_g170416;
				float4 temp_output_37_0_g170410 = Emissive_Coords167_g170407;
				half4 Coords276_g170410 = temp_output_37_0_g170410;
				half2 TexCoord276_g170410 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170410 = SampleMain( Texture276_g170410 , Sampler276_g170410 , Coords276_g170410 , TexCoord276_g170410 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170410) = _EmissiveMaskTex;
				SamplerState Sampler275_g170410 = sampler_Linear_Repeat;
				half4 Coords275_g170410 = temp_output_37_0_g170410;
				half2 TexCoord275_g170410 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170410 = SampleExtra( Texture275_g170410 , Sampler275_g170410 , Coords275_g170410 , TexCoord275_g170410 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170407 = localSampleExtra275_g170410;
				#else
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#endif
				half4 Emissive_MaskTex201_g170407 = staticSwitch176_g170407;
				float clampResult17_g170414 = clamp( (Emissive_MaskTex201_g170407).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170413 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170413 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170413 );
				float lerpResult302_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170414 - temp_output_7_0_g170413 ) / ( temp_output_10_0_g170413 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170407 = lerpResult302_g170407;
				float temp_output_279_0_g170407 = ( Emissive_MeshMask221_g170407 * Emissive_Mask103_g170407 );
				float3 appendResult293_g170407 = (float3(temp_output_279_0_g170407 , temp_output_279_0_g170407 , temp_output_279_0_g170407));
				half3 Local_EmissiveColor278_g170407 = appendResult293_g170407;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170409 = Data204_g169264;
				float Out_Dummy15_g170409 = 0;
				float4 Out_CoatParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170409 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170409 = Data15_g170409.Dummy;
				Out_CoatParams15_g170409 = Data15_g170409.CoatParams;
				Out_PaintParams15_g170409 = Data15_g170409.PaintParams;
				Out_GlowParams15_g170409 = Data15_g170409.GlowParams;
				Out_AtmoParams15_g170409= Data15_g170409.AtmoParams;
				Out_FadeParams15_g170409= Data15_g170409.FadeParams;
				Out_FormParams15_g170409 = Data15_g170409.FormParams;
				Out_LandParams15_g170409 = Data15_g170409.LandParams;
				Out_WindParams15_g170409 = Data15_g170409.WindParams;
				Out_PushParams15_g170409 = Data15_g170409.PushParams;
				}
				half4 Global_GlowParams179_g170407 = Out_GlowParams15_g170409;
				float3 lerpResult299_g170407 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170407).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170407 = lerpResult299_g170407;
				#else
				float3 staticSwitch228_g170407 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170407 = staticSwitch228_g170407;
				half3 Local_EmissiveValue88_g170407 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170407 );
				half3 Emissive_Blend260_g170407 = ( ( (Visual_Emissive255_g170407).xyz * Local_EmissiveColor278_g170407 ) * Local_EmissiveValue88_g170407 );
				float3 temp_output_3_0_g170417 = Emissive_Blend260_g170407;
				float temp_output_15_0_g170417 = _emissive_power_value;
				float3 temp_output_23_0_g170417 = ( temp_output_3_0_g170417 * temp_output_15_0_g170417 );
				float4 appendResult295_g170407 = (float4(temp_output_23_0_g170417 , Emissive_Mask103_g170407));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170407 = appendResult295_g170407;
				#else
				float4 staticSwitch129_g170407 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170407 = staticSwitch129_g170407;
				float4 In_Emissive3_g170419 = Final_Emissive184_g170407;
				float In_Grayscale3_g170419 = Out_Grayscale4_g170418;
				float In_Luminosity3_g170419 = Out_Luminosity4_g170418;
				float temp_output_297_11_g170407 = Out_MultiMask4_g170418;
				float In_MultiMask3_g170419 = temp_output_297_11_g170407;
				float In_AlphaClip3_g170419 = Out_AlphaClip4_g170418;
				float In_AlphaFade3_g170419 = Out_AlphaFade4_g170418;
				float3 In_Translucency3_g170419 = Out_Translucency4_g170418;
				float In_Transmission3_g170419 = Out_Transmission4_g170418;
				float In_Thickness3_g170419 = Out_Thickness4_g170418;
				float In_Diffusion3_g170419 = Out_Diffusion4_g170418;
				{
				Data3_g170419.Dummy = In_Dummy3_g170419;
				Data3_g170419.Albedo = In_Albedo3_g170419;
				Data3_g170419.NormalTS = In_NormalTS3_g170419;
				Data3_g170419.NormalWS = In_NormalWS3_g170419;
				Data3_g170419.Shader = In_Shader3_g170419;
				Data3_g170419.Emissive= In_Emissive3_g170419;
				Data3_g170419.MultiMask = In_MultiMask3_g170419;
				Data3_g170419.Grayscale = In_Grayscale3_g170419;
				Data3_g170419.Luminosity = In_Luminosity3_g170419;
				Data3_g170419.AlphaClip = In_AlphaClip3_g170419;
				Data3_g170419.AlphaFade = In_AlphaFade3_g170419;
				Data3_g170419.Translucency = In_Translucency3_g170419;
				Data3_g170419.Transmission = In_Transmission3_g170419;
				Data3_g170419.Thickness = In_Thickness3_g170419;
				Data3_g170419.Diffusion = In_Diffusion3_g170419;
				}
				TVEVisualData Data4_g170439 = Data3_g170419;
				float Out_Dummy4_g170439 = 0;
				float3 Out_Albedo4_g170439 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170439 = float2( 0,0 );
				float3 Out_NormalWS4_g170439 = float3( 0,0,0 );
				float4 Out_Shader4_g170439 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170439 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170439 = 0;
				float Out_Grayscale4_g170439 = 0;
				float Out_Luminosity4_g170439 = 0;
				float Out_AlphaClip4_g170439 = 0;
				float Out_AlphaFade4_g170439 = 0;
				float3 Out_Translucency4_g170439 = float3( 0,0,0 );
				float Out_Transmission4_g170439 = 0;
				float Out_Thickness4_g170439 = 0;
				float Out_Diffusion4_g170439 = 0;
				{
				Out_Dummy4_g170439 = Data4_g170439.Dummy;
				Out_Albedo4_g170439 = Data4_g170439.Albedo;
				Out_NormalTS4_g170439 = Data4_g170439.NormalTS;
				Out_NormalWS4_g170439 = Data4_g170439.NormalWS;
				Out_Shader4_g170439 = Data4_g170439.Shader;
				Out_Emissive4_g170439= Data4_g170439.Emissive;
				Out_MultiMask4_g170439 = Data4_g170439.MultiMask;
				Out_Grayscale4_g170439 = Data4_g170439.Grayscale;
				Out_Luminosity4_g170439= Data4_g170439.Luminosity;
				Out_AlphaClip4_g170439 = Data4_g170439.AlphaClip;
				Out_AlphaFade4_g170439 = Data4_g170439.AlphaFade;
				Out_Translucency4_g170439 = Data4_g170439.Translucency;
				Out_Transmission4_g170439 = Data4_g170439.Transmission;
				Out_Thickness4_g170439 = Data4_g170439.Thickness;
				Out_Diffusion4_g170439 = Data4_g170439.Diffusion;
				}
				half3 Visual_Albedo199_g170438 = Out_Albedo4_g170439;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170438 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170438 );
				half Visual_Transmission138_g170438 = Out_Transmission4_g170439;
				half Subsurface_Value268_g170438 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170442 = Data204_g169264;
				float Out_Dummy15_g170442 = 0;
				float4 Out_CoatParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170442 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170442 = Data15_g170442.Dummy;
				Out_CoatParams15_g170442 = Data15_g170442.CoatParams;
				Out_PaintParams15_g170442 = Data15_g170442.PaintParams;
				Out_GlowParams15_g170442 = Data15_g170442.GlowParams;
				Out_AtmoParams15_g170442= Data15_g170442.AtmoParams;
				Out_FadeParams15_g170442= Data15_g170442.FadeParams;
				Out_FormParams15_g170442 = Data15_g170442.FormParams;
				Out_LandParams15_g170442 = Data15_g170442.LandParams;
				Out_WindParams15_g170442 = Data15_g170442.WindParams;
				Out_PushParams15_g170442 = Data15_g170442.PushParams;
				}
				half4 Global_GlowParams373_g170438 = Out_GlowParams15_g170442;
				float lerpResult403_g170438 = lerp( 1.0 , saturate( (Global_GlowParams373_g170438).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170438 = lerpResult403_g170438;
				#else
				float staticSwitch367_g170438 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170438 = staticSwitch367_g170438;
				float temp_output_301_11_g170438 = Out_MultiMask4_g170439;
				half Visual_MultiMask292_g170438 = temp_output_301_11_g170438;
				float lerpResult293_g170438 = lerp( 1.0 , Visual_MultiMask292_g170438 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170438 = lerpResult293_g170438;
				half Custom_Mask363_g170438 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170438 = ( Visual_Transmission138_g170438 * Subsurface_Value268_g170438 * Subsurface_GlobalMask369_g170438 * Subsurface_MultiMask296_g170438 * Custom_Mask363_g170438 );
				#else
				float staticSwitch345_g170438 = 0.0;
				#endif
				half Final_Transmission269_g170438 = staticSwitch345_g170438;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170438 = ( Subsurface_Color264_g170438 * Final_Transmission269_g170438 * 10.0 );
				#else
				float3 staticSwitch348_g170438 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170438 = staticSwitch348_g170438;
				TVEModelData Data15_g170441 = Data16_g169262;
				float Out_Dummy15_g170441 = 0;
				float3 Out_PositionOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170441 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170441 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170441 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170441 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170441 = float3( 0,0,0 );
				float4 Out_VertexData15_g170441 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170441 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170441 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_PositionOS15_g170441 = Data15_g170441.PositionOS;
				Out_PositionWS15_g170441 = Data15_g170441.PositionWS;
				Out_PositionWO15_g170441 = Data15_g170441.PositionWO;
				Out_PositionRawOS15_g170441 = Data15_g170441.PositionRawOS;
				Out_PositionAddOS15_g170441 = Data15_g170441.PositionAddOS;
				Out_PivotOS15_g170441 = Data15_g170441.PivotOS;
				Out_PivotWS15_g170441 = Data15_g170441.PivotWS;
				Out_PivotWO15_g170441 = Data15_g170441.PivotWO;
				Out_NormalOS15_g170441 = Data15_g170441.NormalOS;
				Out_NormalWS15_g170441 = Data15_g170441.NormalWS;
				Out_NormalRawOS15_g170441 = Data15_g170441.NormalRawOS;
				Out_NormalRawWS15_g170441 = Data15_g170441.NormalRawWS;
				Out_TangentOS15_g170441 = Data15_g170441.TangentOS;
				Out_ViewDirWS15_g170441 = Data15_g170441.ViewDirWS;
				Out_VertexData15_g170441 = Data15_g170441.VertexData;
				Out_MotionData15_g170441 = Data15_g170441.MotionData;
				Out_BoundsData15_g170441 = Data15_g170441.BoundsData;
				Out_RotationData15_g170441 = Data15_g170441.RotationData;
				}
				half3 Model_ViewDirWS392_g170438 = Out_ViewDirWS15_g170441;
				float dotResult324_g170438 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170438 );
				float saferPower323_g170438 = abs( saturate( dotResult324_g170438 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170438 = 0.0;
				#else
				float staticSwitch330_g170438 = ( pow( saferPower323_g170438 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170438 = staticSwitch330_g170438;
				float3 temp_output_6_0_g170443 = ( Final_Translucency254_g170438 * Mask_Subsurface_View320_g170438 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170443 = ( temp_output_6_0_g170443 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170443 = temp_output_6_0_g170443;
				#endif
				half3 Subsurface_Approximation333_g170438 = staticSwitch14_g170443;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170438 = ( Visual_Albedo199_g170438 + Subsurface_Approximation333_g170438 );
				#else
				float3 staticSwitch353_g170438 = Visual_Albedo199_g170438;
				#endif
				half3 Final_Albedo312_g170438 = staticSwitch353_g170438;
				float3 In_Albedo3_g170440 = Final_Albedo312_g170438;
				float2 In_NormalTS3_g170440 = Out_NormalTS4_g170439;
				float3 In_NormalWS3_g170440 = Out_NormalWS4_g170439;
				float4 In_Shader3_g170440 = Out_Shader4_g170439;
				float4 In_Emissive3_g170440 = Out_Emissive4_g170439;
				float In_Grayscale3_g170440 = Out_Grayscale4_g170439;
				float In_Luminosity3_g170440 = Out_Luminosity4_g170439;
				float In_MultiMask3_g170440 = temp_output_301_11_g170438;
				float In_AlphaClip3_g170440 = Out_AlphaClip4_g170439;
				float In_AlphaFade3_g170440 = Out_AlphaFade4_g170439;
				float3 In_Translucency3_g170440 = Final_Translucency254_g170438;
				float In_Transmission3_g170440 = Final_Transmission269_g170438;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170438 = 0.0;
				#else
				float staticSwitch351_g170438 = 1.0;
				#endif
				half Final_Thickness275_g170438 = staticSwitch351_g170438;
				float In_Thickness3_g170440 = Final_Thickness275_g170438;
				float Final_Diffusion340_g170438 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170440 = Final_Diffusion340_g170438;
				{
				Data3_g170440.Dummy = In_Dummy3_g170440;
				Data3_g170440.Albedo = In_Albedo3_g170440;
				Data3_g170440.NormalTS = In_NormalTS3_g170440;
				Data3_g170440.NormalWS = In_NormalWS3_g170440;
				Data3_g170440.Shader = In_Shader3_g170440;
				Data3_g170440.Emissive= In_Emissive3_g170440;
				Data3_g170440.MultiMask = In_MultiMask3_g170440;
				Data3_g170440.Grayscale = In_Grayscale3_g170440;
				Data3_g170440.Luminosity = In_Luminosity3_g170440;
				Data3_g170440.AlphaClip = In_AlphaClip3_g170440;
				Data3_g170440.AlphaFade = In_AlphaFade3_g170440;
				Data3_g170440.Translucency = In_Translucency3_g170440;
				Data3_g170440.Transmission = In_Transmission3_g170440;
				Data3_g170440.Thickness = In_Thickness3_g170440;
				Data3_g170440.Diffusion = In_Diffusion3_g170440;
				}
				TVEVisualData Data4_g170455 = Data3_g170440;
				float Out_Dummy4_g170455 = 0;
				float3 Out_Albedo4_g170455 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170455 = float2( 0,0 );
				float3 Out_NormalWS4_g170455 = float3( 0,0,0 );
				float4 Out_Shader4_g170455 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170455 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170455 = 0;
				float Out_Grayscale4_g170455 = 0;
				float Out_Luminosity4_g170455 = 0;
				float Out_AlphaClip4_g170455 = 0;
				float Out_AlphaFade4_g170455 = 0;
				float3 Out_Translucency4_g170455 = float3( 0,0,0 );
				float Out_Transmission4_g170455 = 0;
				float Out_Thickness4_g170455 = 0;
				float Out_Diffusion4_g170455 = 0;
				{
				Out_Dummy4_g170455 = Data4_g170455.Dummy;
				Out_Albedo4_g170455 = Data4_g170455.Albedo;
				Out_NormalTS4_g170455 = Data4_g170455.NormalTS;
				Out_NormalWS4_g170455 = Data4_g170455.NormalWS;
				Out_Shader4_g170455 = Data4_g170455.Shader;
				Out_Emissive4_g170455= Data4_g170455.Emissive;
				Out_MultiMask4_g170455 = Data4_g170455.MultiMask;
				Out_Grayscale4_g170455 = Data4_g170455.Grayscale;
				Out_Luminosity4_g170455= Data4_g170455.Luminosity;
				Out_AlphaClip4_g170455 = Data4_g170455.AlphaClip;
				Out_AlphaFade4_g170455 = Data4_g170455.AlphaFade;
				Out_Translucency4_g170455 = Data4_g170455.Translucency;
				Out_Transmission4_g170455 = Data4_g170455.Transmission;
				Out_Thickness4_g170455 = Data4_g170455.Thickness;
				Out_Diffusion4_g170455 = Data4_g170455.Diffusion;
				}
				half3 Input_Albedo24_g170454 = Out_Albedo4_g170455;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170454 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170454 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170454 = staticSwitch22_g170454;
				float4 break24_g170449 = Out_Shader4_g170455;
				half Metallic95_g170449 = break24_g170449.x;
				half Input_Metallic25_g170454 = Metallic95_g170449;
				half OneMinusReflectivity31_g170454 = ( (ColorSpaceDielectricSpec23_g170454).w - ( (ColorSpaceDielectricSpec23_g170454).w * Input_Metallic25_g170454 ) );
				
				float3 appendResult23_g170449 = (float3(Out_NormalTS4_g170455 , 1.0));
				float3 temp_output_13_0_g170453 = appendResult23_g170449;
				float3 temp_output_33_0_g170453 = ( temp_output_13_0_g170453 * _render_normal );
				float3 switchResult12_g170453 = (((ase_vface>0)?(temp_output_13_0_g170453):(temp_output_33_0_g170453)));
				
				half Smoothness105_g170449 = break24_g170449.w;
				half Input_Smoothness43_g170459 = Smoothness105_g170449;
				half Input_True57_g170461 = Input_Smoothness43_g170459;
				half True33_g170461 = Input_True57_g170461;
				half RenderSpec102_g170449 = _RenderSpecular;
				half Input_RenderSpec58_g170459 = RenderSpec102_g170449;
				float temp_output_46_0_g170459 = max( ( Input_Smoothness43_g170459 * Input_RenderSpec58_g170459 ) , 0.001 );
				float temp_output_6_0_g170460 = temp_output_46_0_g170459;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170460 = ( temp_output_6_0_g170460 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170460 = temp_output_6_0_g170460;
				#endif
				float temp_output_61_0_g170459 = staticSwitch14_g170460;
				half Input_False58_g170461 = temp_output_61_0_g170459;
				half False33_g170461 = Input_False58_g170461;
				half localShadowPassCheck33_g170461 = ShadowPassCheck33_g170461( True33_g170461 , False33_g170461 );
				
				half Input_True57_g170462 = 0.04;
				half True33_g170462 = Input_True57_g170462;
				half Input_False58_g170462 = temp_output_46_0_g170459;
				half False33_g170462 = Input_False58_g170462;
				half localShadowPassCheck33_g170462 = ShadowPassCheck33_g170462( True33_g170462 , False33_g170462 );
				
				float localCustomAlphaClip19_g170456 = ( 0.0 );
				float temp_output_3_0_g170456 = Out_AlphaClip4_g170455;
				float Alpha19_g170456 = temp_output_3_0_g170456;
				float temp_output_15_0_g170456 = 0.0;
				float Treshold19_g170456 = temp_output_15_0_g170456;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#else
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g170454 * OneMinusReflectivity31_g170454 );
				o.Normal = switchResult12_g170453;
				o.Emission = (Out_Emissive4_g170455).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g170461;
					o.Gloss = localShadowPassCheck33_g170462;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 0, 0, 0 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha19_g170456 * Out_AlphaFade4_g170455 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170447 = (TVEModelData)0;
				float In_Dummy16_g170447 = 0.0;
				TVEModelData Data16_g170424 = (TVEModelData)0;
				half Dummy1575_g170422 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170424 = Dummy1575_g170422;
				TVEModelData Data16_g170402 = (TVEModelData)0;
				float In_Dummy16_g170402 = 0.0;
				TVEModelData Data16_g170082 = (TVEModelData)0;
				half Dummy181_g170066 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170082 = Dummy181_g170066;
				TVEModelData Data16_g170030 = (TVEModelData)0;
				half Dummy181_g170027 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170030 = Dummy181_g170027;
				TVEModelData Data16_g169992 = (TVEModelData)0;
				half Dummy181_g169989 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g169992 = Dummy181_g169989;
				TVEModelData Data16_g169969 = (TVEModelData)0;
				float In_Dummy16_g169969 = 0.0;
				TVEModelData Data16_g169263 = (TVEModelData)0;
				half Dummy207_g169248 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g169263 = Dummy207_g169248;
				half3 PositionOS131_g169248 = v.vertex.xyz;
				float3 In_PositionOS16_g169263 = PositionOS131_g169248;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g169248 = ase_worldPos;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169263 = PositionWS122_g169248;
				float4x4 break19_g169250 = unity_ObjectToWorld;
				float3 appendResult20_g169250 = (float3(break19_g169250[ 0 ][ 3 ] , break19_g169250[ 1 ][ 3 ] , break19_g169250[ 2 ][ 3 ]));
				half3 ObjectData20_g169252 = appendResult20_g169250;
				half3 WorldData19_g169252 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169252 = WorldData19_g169252;
				#else
				float3 staticSwitch14_g169252 = ObjectData20_g169252;
				#endif
				float3 temp_output_124_0_g169250 = staticSwitch14_g169252;
				float3 temp_output_239_7_g169248 = temp_output_124_0_g169250;
				float4x4 break19_g169254 = unity_ObjectToWorld;
				float3 appendResult20_g169254 = (float3(break19_g169254[ 0 ][ 3 ] , break19_g169254[ 1 ][ 3 ] , break19_g169254[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g169258 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g169248 = PositionOS131_g169248;
				float3 appendResult234_g169248 = (float3(break233_g169248.x , 0.0 , break233_g169248.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g169248 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g169248 = appendResult60_g169258;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g169248 = appendResult234_g169248;
				#else
				float3 staticSwitch229_g169248 = _Vector0;
				#endif
				half3 PivotOS149_g169248 = staticSwitch229_g169248;
				float3 temp_output_122_0_g169254 = PivotOS149_g169248;
				float3 PivotsOnly105_g169254 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g169254 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g169256 = ( appendResult20_g169254 + PivotsOnly105_g169254 );
				half3 WorldData19_g169256 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169256 = WorldData19_g169256;
				#else
				float3 staticSwitch14_g169256 = ObjectData20_g169256;
				#endif
				float3 temp_output_124_0_g169254 = staticSwitch14_g169256;
				float3 temp_output_237_7_g169248 = temp_output_124_0_g169254;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#else
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#endif
				float3 vertexToFrag76_g169248 = staticSwitch236_g169248;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169263 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169263 = PositionOS131_g169248;
				float3 In_PositionAddOS16_g169263 = float3( 0,0,0 );
				float3 In_PivotOS16_g169263 = PivotOS149_g169248;
				float3 In_PivotWS16_g169263 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169263 = PivotWO133_g169248;
				half3 NormalOS134_g169248 = v.normal;
				float3 In_NormalOS16_g169263 = NormalOS134_g169248;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169263 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169263 = NormalOS134_g169248;
				float3 objToWorldDir298_g169248 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g169248 = objToWorldDir298_g169248;
				float3 In_NormalRawWS16_g169263 = Normal_RawWS136_g169248;
				half4 TangentlOS153_g169248 = v.tangent;
				float4 In_TangentOS16_g169263 = TangentlOS153_g169248;
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169263 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = v.ase_color;
				float4 In_VertexData16_g169263 = VertexMasks171_g169248;
				float4 break33_g169261 = _object_phase_mode;
				float temp_output_30_0_g169261 = ( v.ase_color.r * break33_g169261.x );
				float temp_output_29_0_g169261 = ( v.ase_color.g * break33_g169261.y );
				float temp_output_31_0_g169261 = ( v.ase_color.b * break33_g169261.z );
				float temp_output_28_0_g169261 = ( temp_output_30_0_g169261 + temp_output_29_0_g169261 + temp_output_31_0_g169261 + ( v.ase_color.a * break33_g169261.w ) );
				float3 break243_g169248 = PivotWO133_g169248;
				float4 appendResult177_g169248 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g169261 + ( break243_g169248.x + break243_g169248.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g169248 = appendResult177_g169248;
				float4 In_MotionData16_g169263 = MotionMasks176_g169248;
				half Object_HeightValue267_g169248 = _ObjectHeightValue;
				half Object_RadiusValue268_g169248 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g169248 = saturate( ( (PositionOS131_g169248).y / Object_HeightValue267_g169248 ) );
				half Bounds_SphereMask282_g169248 = saturate( ( length( PositionOS131_g169248 ) / max( Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 ) ) );
				float4 appendResult253_g169248 = (float4(Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 , Bounds_HeightMask274_g169248 , Bounds_SphereMask282_g169248));
				half4 BoundsData254_g169248 = appendResult253_g169248;
				float4 In_BoundsData16_g169263 = BoundsData254_g169248;
				float4 In_RotationData16_g169263 = float4( 0,0,0,0 );
				{
				Data16_g169263.Dummy = In_Dummy16_g169263;
				Data16_g169263.PositionOS = In_PositionOS16_g169263;
				Data16_g169263.PositionWS = In_PositionWS16_g169263;
				Data16_g169263.PositionWO = In_PositionWO16_g169263;
				Data16_g169263.PositionRawOS = In_PositionRawOS16_g169263;
				Data16_g169263.PositionAddOS = In_PositionAddOS16_g169263;
				Data16_g169263.PivotOS = In_PivotOS16_g169263;
				Data16_g169263.PivotWS = In_PivotWS16_g169263;
				Data16_g169263.PivotWO = In_PivotWO16_g169263;
				Data16_g169263.NormalOS = In_NormalOS16_g169263;
				Data16_g169263.NormalWS = In_NormalWS16_g169263;
				Data16_g169263.NormalRawOS = In_NormalRawOS16_g169263;
				Data16_g169263.NormalRawWS = In_NormalRawWS16_g169263;
				Data16_g169263.TangentOS = In_TangentOS16_g169263;
				Data16_g169263.ViewDirWS = In_ViewDirWS16_g169263;
				Data16_g169263.VertexData = In_VertexData16_g169263;
				Data16_g169263.MotionData = In_MotionData16_g169263;
				Data16_g169263.BoundsData = In_BoundsData16_g169263;
				Data16_g169263.RotationData = In_RotationData16_g169263;
				}
				TVEModelData Data15_g169970 = Data16_g169263;
				float Out_Dummy15_g169970 = 0;
				float3 Out_PositionOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169970 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169970 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169970 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169970 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169970 = float3( 0,0,0 );
				float4 Out_VertexData15_g169970 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169970 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169970 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169970 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169970 = Data15_g169970.Dummy;
				Out_PositionOS15_g169970 = Data15_g169970.PositionOS;
				Out_PositionWS15_g169970 = Data15_g169970.PositionWS;
				Out_PositionWO15_g169970 = Data15_g169970.PositionWO;
				Out_PositionRawOS15_g169970 = Data15_g169970.PositionRawOS;
				Out_PositionAddOS15_g169970 = Data15_g169970.PositionAddOS;
				Out_PivotOS15_g169970 = Data15_g169970.PivotOS;
				Out_PivotWS15_g169970 = Data15_g169970.PivotWS;
				Out_PivotWO15_g169970 = Data15_g169970.PivotWO;
				Out_NormalOS15_g169970 = Data15_g169970.NormalOS;
				Out_NormalWS15_g169970 = Data15_g169970.NormalWS;
				Out_NormalRawOS15_g169970 = Data15_g169970.NormalRawOS;
				Out_NormalRawWS15_g169970 = Data15_g169970.NormalRawWS;
				Out_TangentOS15_g169970 = Data15_g169970.TangentOS;
				Out_ViewDirWS15_g169970 = Data15_g169970.ViewDirWS;
				Out_VertexData15_g169970 = Data15_g169970.VertexData;
				Out_MotionData15_g169970 = Data15_g169970.MotionData;
				Out_BoundsData15_g169970 = Data15_g169970.BoundsData;
				Out_RotationData15_g169970 = Data15_g169970.RotationData;
				}
				float3 temp_output_218_24_g169968 = Out_PivotOS15_g169970;
				float3 In_PositionOS16_g169969 = ( Out_PositionOS15_g169970 - temp_output_218_24_g169968 );
				float3 In_PositionWS16_g169969 = Out_PositionWS15_g169970;
				float3 In_PositionWO16_g169969 = Out_PositionWO15_g169970;
				float3 In_PositionRawOS16_g169969 = Out_PositionRawOS15_g169970;
				float3 In_PositionAddOS16_g169969 = Out_PositionAddOS15_g169970;
				float3 In_PivotOS16_g169969 = temp_output_218_24_g169968;
				float3 In_PivotWS16_g169969 = Out_PivotWS15_g169970;
				float3 In_PivotWO16_g169969 = Out_PivotWO15_g169970;
				float3 In_NormalOS16_g169969 = Out_NormalOS15_g169970;
				float3 In_NormalWS16_g169969 = Out_NormalWS15_g169970;
				float3 In_NormalRawOS16_g169969 = Out_NormalRawOS15_g169970;
				float3 In_NormalRawWS16_g169969 = Out_NormalRawWS15_g169970;
				float4 In_TangentOS16_g169969 = Out_TangentOS15_g169970;
				float3 In_ViewDirWS16_g169969 = Out_ViewDirWS15_g169970;
				float4 In_VertexData16_g169969 = Out_VertexData15_g169970;
				float4 In_MotionData16_g169969 = Out_MotionData15_g169970;
				float4 In_BoundsData16_g169969 = Out_BoundsData15_g169970;
				float4 In_RotationData16_g169969 = Out_RotationData15_g169970;
				{
				Data16_g169969.Dummy = In_Dummy16_g169969;
				Data16_g169969.PositionOS = In_PositionOS16_g169969;
				Data16_g169969.PositionWS = In_PositionWS16_g169969;
				Data16_g169969.PositionWO = In_PositionWO16_g169969;
				Data16_g169969.PositionRawOS = In_PositionRawOS16_g169969;
				Data16_g169969.PositionAddOS = In_PositionAddOS16_g169969;
				Data16_g169969.PivotOS = In_PivotOS16_g169969;
				Data16_g169969.PivotWS = In_PivotWS16_g169969;
				Data16_g169969.PivotWO = In_PivotWO16_g169969;
				Data16_g169969.NormalOS = In_NormalOS16_g169969;
				Data16_g169969.NormalWS = In_NormalWS16_g169969;
				Data16_g169969.NormalRawOS = In_NormalRawOS16_g169969;
				Data16_g169969.NormalRawWS = In_NormalRawWS16_g169969;
				Data16_g169969.TangentOS = In_TangentOS16_g169969;
				Data16_g169969.ViewDirWS = In_ViewDirWS16_g169969;
				Data16_g169969.VertexData = In_VertexData16_g169969;
				Data16_g169969.MotionData = In_MotionData16_g169969;
				Data16_g169969.BoundsData = In_BoundsData16_g169969;
				Data16_g169969.RotationData = In_RotationData16_g169969;
				}
				TVEModelData Data15_g169990 = Data16_g169969;
				float Out_Dummy15_g169990 = 0;
				float3 Out_PositionOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169990 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169990 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169990 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169990 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169990 = float3( 0,0,0 );
				float4 Out_VertexData15_g169990 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169990 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169990 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169990 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169990 = Data15_g169990.Dummy;
				Out_PositionOS15_g169990 = Data15_g169990.PositionOS;
				Out_PositionWS15_g169990 = Data15_g169990.PositionWS;
				Out_PositionWO15_g169990 = Data15_g169990.PositionWO;
				Out_PositionRawOS15_g169990 = Data15_g169990.PositionRawOS;
				Out_PositionAddOS15_g169990 = Data15_g169990.PositionAddOS;
				Out_PivotOS15_g169990 = Data15_g169990.PivotOS;
				Out_PivotWS15_g169990 = Data15_g169990.PivotWS;
				Out_PivotWO15_g169990 = Data15_g169990.PivotWO;
				Out_NormalOS15_g169990 = Data15_g169990.NormalOS;
				Out_NormalWS15_g169990 = Data15_g169990.NormalWS;
				Out_NormalRawOS15_g169990 = Data15_g169990.NormalRawOS;
				Out_NormalRawWS15_g169990 = Data15_g169990.NormalRawWS;
				Out_TangentOS15_g169990 = Data15_g169990.TangentOS;
				Out_ViewDirWS15_g169990 = Data15_g169990.ViewDirWS;
				Out_VertexData15_g169990 = Data15_g169990.VertexData;
				Out_MotionData15_g169990 = Data15_g169990.MotionData;
				Out_BoundsData15_g169990 = Data15_g169990.BoundsData;
				Out_RotationData15_g169990 = Data15_g169990.RotationData;
				}
				half3 Model_PositionOS147_g169989 = Out_PositionOS15_g169990;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g169991 = unity_CameraToWorld;
				float3 appendResult118_g169991 = (float3(break117_g169991[ 0 ][ 2 ] , break117_g169991[ 1 ][ 2 ] , break117_g169991[ 2 ][ 2 ]));
				float3 lerpResult209_g169989 = lerp( ase_worldViewDir , -appendResult118_g169991 , unity_OrthoParams.w);
				float3 break201_g169989 = cross( lerpResult209_g169989 , half3(0,1,0) );
				float3 appendResult196_g169989 = (float3(-break201_g169989.z , 0.0 , break201_g169989.x));
				float dotResult189_g169989 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g169989 = abs( dotResult189_g169989 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g169989 = ( Model_PositionOS147_g169989 + ( mul( unity_WorldToObject, float4( appendResult196_g169989 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g169989 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g169989).y ) ) );
				#else
				float3 staticSwitch211_g169989 = Model_PositionOS147_g169989;
				#endif
				half3 Final_Position178_g169989 = staticSwitch211_g169989;
				float3 In_PositionOS16_g169992 = Final_Position178_g169989;
				float3 In_PositionWS16_g169992 = Out_PositionWS15_g169990;
				float3 In_PositionWO16_g169992 = Out_PositionWO15_g169990;
				float3 In_PositionRawOS16_g169992 = Out_PositionRawOS15_g169990;
				float3 In_PositionAddOS16_g169992 = Out_PositionAddOS15_g169990;
				float3 In_PivotOS16_g169992 = Out_PivotOS15_g169990;
				float3 In_PivotWS16_g169992 = Out_PivotWS15_g169990;
				float3 In_PivotWO16_g169992 = Out_PivotWO15_g169990;
				float3 In_NormalOS16_g169992 = Out_NormalOS15_g169990;
				float3 In_NormalWS16_g169992 = Out_NormalWS15_g169990;
				float3 In_NormalRawOS16_g169992 = Out_NormalRawOS15_g169990;
				float3 In_NormalRawWS16_g169992 = Out_NormalRawWS15_g169990;
				float4 In_TangentOS16_g169992 = Out_TangentOS15_g169990;
				float3 In_ViewDirWS16_g169992 = Out_ViewDirWS15_g169990;
				float4 In_VertexData16_g169992 = Out_VertexData15_g169990;
				float4 In_MotionData16_g169992 = Out_MotionData15_g169990;
				float4 In_BoundsData16_g169992 = Out_BoundsData15_g169990;
				float4 In_RotationData16_g169992 = Out_RotationData15_g169990;
				{
				Data16_g169992.Dummy = In_Dummy16_g169992;
				Data16_g169992.PositionOS = In_PositionOS16_g169992;
				Data16_g169992.PositionWS = In_PositionWS16_g169992;
				Data16_g169992.PositionWO = In_PositionWO16_g169992;
				Data16_g169992.PositionRawOS = In_PositionRawOS16_g169992;
				Data16_g169992.PositionAddOS = In_PositionAddOS16_g169992;
				Data16_g169992.PivotOS = In_PivotOS16_g169992;
				Data16_g169992.PivotWS = In_PivotWS16_g169992;
				Data16_g169992.PivotWO = In_PivotWO16_g169992;
				Data16_g169992.NormalOS = In_NormalOS16_g169992;
				Data16_g169992.NormalWS = In_NormalWS16_g169992;
				Data16_g169992.NormalRawOS = In_NormalRawOS16_g169992;
				Data16_g169992.NormalRawWS = In_NormalRawWS16_g169992;
				Data16_g169992.TangentOS = In_TangentOS16_g169992;
				Data16_g169992.ViewDirWS = In_ViewDirWS16_g169992;
				Data16_g169992.VertexData = In_VertexData16_g169992;
				Data16_g169992.MotionData = In_MotionData16_g169992;
				Data16_g169992.BoundsData = In_BoundsData16_g169992;
				Data16_g169992.RotationData = In_RotationData16_g169992;
				}
				TVEModelData Data15_g170029 = Data16_g169992;
				float Out_Dummy15_g170029 = 0;
				float3 Out_PositionOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170029 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170029 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170029 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170029 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170029 = float3( 0,0,0 );
				float4 Out_VertexData15_g170029 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170029 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170029 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170029 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170029 = Data15_g170029.Dummy;
				Out_PositionOS15_g170029 = Data15_g170029.PositionOS;
				Out_PositionWS15_g170029 = Data15_g170029.PositionWS;
				Out_PositionWO15_g170029 = Data15_g170029.PositionWO;
				Out_PositionRawOS15_g170029 = Data15_g170029.PositionRawOS;
				Out_PositionAddOS15_g170029 = Data15_g170029.PositionAddOS;
				Out_PivotOS15_g170029 = Data15_g170029.PivotOS;
				Out_PivotWS15_g170029 = Data15_g170029.PivotWS;
				Out_PivotWO15_g170029 = Data15_g170029.PivotWO;
				Out_NormalOS15_g170029 = Data15_g170029.NormalOS;
				Out_NormalWS15_g170029 = Data15_g170029.NormalWS;
				Out_NormalRawOS15_g170029 = Data15_g170029.NormalRawOS;
				Out_NormalRawWS15_g170029 = Data15_g170029.NormalRawWS;
				Out_TangentOS15_g170029 = Data15_g170029.TangentOS;
				Out_ViewDirWS15_g170029 = Data15_g170029.ViewDirWS;
				Out_VertexData15_g170029 = Data15_g170029.VertexData;
				Out_MotionData15_g170029 = Data15_g170029.MotionData;
				Out_BoundsData15_g170029 = Data15_g170029.BoundsData;
				Out_RotationData15_g170029 = Data15_g170029.RotationData;
				}
				half3 Model_PositionOS147_g170027 = Out_PositionOS15_g170029;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170027 = Out_PivotWO15_g170029;
				half3 Model_PivotWO162_g170027 = temp_output_210_19_g170027;
				float temp_output_7_0_g170028 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170028 = ( _SizeFadeDistMinValue - temp_output_7_0_g170028 );
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170031 = Data204_g169264;
				float Out_Dummy15_g170031 = 0;
				float4 Out_CoatParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170031 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170031 = Data15_g170031.Dummy;
				Out_CoatParams15_g170031 = Data15_g170031.CoatParams;
				Out_PaintParams15_g170031 = Data15_g170031.PaintParams;
				Out_GlowParams15_g170031 = Data15_g170031.GlowParams;
				Out_AtmoParams15_g170031= Data15_g170031.AtmoParams;
				Out_FadeParams15_g170031= Data15_g170031.FadeParams;
				Out_FormParams15_g170031 = Data15_g170031.FormParams;
				Out_LandParams15_g170031 = Data15_g170031.LandParams;
				Out_WindParams15_g170031 = Data15_g170031.WindParams;
				Out_PushParams15_g170031 = Data15_g170031.PushParams;
				}
				half4 Input_FormParams188_g170027 = Out_FormParams15_g170031;
				float lerpResult213_g170027 = lerp( 1.0 , (Input_FormParams188_g170027).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170027 = lerpResult213_g170027;
				#else
				float staticSwitch194_g170027 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170027 = staticSwitch194_g170027;
				float temp_output_189_0_g170027 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170027 ) - temp_output_7_0_g170028 ) / ( temp_output_10_0_g170028 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170027 );
				float3 appendResult200_g170027 = (float3(temp_output_189_0_g170027 , temp_output_189_0_g170027 , temp_output_189_0_g170027));
				float3 appendResult201_g170027 = (float3(1.0 , temp_output_189_0_g170027 , 1.0));
				float3 lerpResult202_g170027 = lerp( appendResult200_g170027 , appendResult201_g170027 , _SizeFadeScaleMode);
				float3 lerpResult184_g170027 = lerp( temp_cast_5 , lerpResult202_g170027 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170027 = ( lerpResult184_g170027 * Model_PositionOS147_g170027 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170027 = temp_output_167_0_g170027;
				#else
				float3 staticSwitch199_g170027 = Model_PositionOS147_g170027;
				#endif
				half3 Final_Position178_g170027 = staticSwitch199_g170027;
				float3 In_PositionOS16_g170030 = Final_Position178_g170027;
				float3 In_PositionWS16_g170030 = Out_PositionWS15_g170029;
				float3 In_PositionWO16_g170030 = Out_PositionWO15_g170029;
				float3 In_PositionRawOS16_g170030 = Out_PositionRawOS15_g170029;
				float3 In_PositionAddOS16_g170030 = Out_PositionAddOS15_g170029;
				float3 temp_output_210_24_g170027 = Out_PivotOS15_g170029;
				float3 In_PivotOS16_g170030 = temp_output_210_24_g170027;
				float3 In_PivotWS16_g170030 = Out_PivotWS15_g170029;
				float3 In_PivotWO16_g170030 = temp_output_210_19_g170027;
				float3 In_NormalOS16_g170030 = Out_NormalOS15_g170029;
				float3 In_NormalWS16_g170030 = Out_NormalWS15_g170029;
				float3 In_NormalRawOS16_g170030 = Out_NormalRawOS15_g170029;
				float3 In_NormalRawWS16_g170030 = Out_NormalRawWS15_g170029;
				float4 In_TangentOS16_g170030 = Out_TangentOS15_g170029;
				float3 In_ViewDirWS16_g170030 = Out_ViewDirWS15_g170029;
				float4 In_VertexData16_g170030 = Out_VertexData15_g170029;
				float4 In_MotionData16_g170030 = Out_MotionData15_g170029;
				float4 In_BoundsData16_g170030 = Out_BoundsData15_g170029;
				float4 In_RotationData16_g170030 = Out_RotationData15_g170029;
				{
				Data16_g170030.Dummy = In_Dummy16_g170030;
				Data16_g170030.PositionOS = In_PositionOS16_g170030;
				Data16_g170030.PositionWS = In_PositionWS16_g170030;
				Data16_g170030.PositionWO = In_PositionWO16_g170030;
				Data16_g170030.PositionRawOS = In_PositionRawOS16_g170030;
				Data16_g170030.PositionAddOS = In_PositionAddOS16_g170030;
				Data16_g170030.PivotOS = In_PivotOS16_g170030;
				Data16_g170030.PivotWS = In_PivotWS16_g170030;
				Data16_g170030.PivotWO = In_PivotWO16_g170030;
				Data16_g170030.NormalOS = In_NormalOS16_g170030;
				Data16_g170030.NormalWS = In_NormalWS16_g170030;
				Data16_g170030.NormalRawOS = In_NormalRawOS16_g170030;
				Data16_g170030.NormalRawWS = In_NormalRawWS16_g170030;
				Data16_g170030.TangentOS = In_TangentOS16_g170030;
				Data16_g170030.ViewDirWS = In_ViewDirWS16_g170030;
				Data16_g170030.VertexData = In_VertexData16_g170030;
				Data16_g170030.MotionData = In_MotionData16_g170030;
				Data16_g170030.BoundsData = In_BoundsData16_g170030;
				Data16_g170030.RotationData = In_RotationData16_g170030;
				}
				TVEModelData Data15_g170078 = Data16_g170030;
				float Out_Dummy15_g170078 = 0;
				float3 Out_PositionOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170078 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170078 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170078 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170078 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170078 = float3( 0,0,0 );
				float4 Out_VertexData15_g170078 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170078 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170078 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170078 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170078 = Data15_g170078.Dummy;
				Out_PositionOS15_g170078 = Data15_g170078.PositionOS;
				Out_PositionWS15_g170078 = Data15_g170078.PositionWS;
				Out_PositionWO15_g170078 = Data15_g170078.PositionWO;
				Out_PositionRawOS15_g170078 = Data15_g170078.PositionRawOS;
				Out_PositionAddOS15_g170078 = Data15_g170078.PositionAddOS;
				Out_PivotOS15_g170078 = Data15_g170078.PivotOS;
				Out_PivotWS15_g170078 = Data15_g170078.PivotWS;
				Out_PivotWO15_g170078 = Data15_g170078.PivotWO;
				Out_NormalOS15_g170078 = Data15_g170078.NormalOS;
				Out_NormalWS15_g170078 = Data15_g170078.NormalWS;
				Out_NormalRawOS15_g170078 = Data15_g170078.NormalRawOS;
				Out_NormalRawWS15_g170078 = Data15_g170078.NormalRawWS;
				Out_TangentOS15_g170078 = Data15_g170078.TangentOS;
				Out_ViewDirWS15_g170078 = Data15_g170078.ViewDirWS;
				Out_VertexData15_g170078 = Data15_g170078.VertexData;
				Out_MotionData15_g170078 = Data15_g170078.MotionData;
				Out_BoundsData15_g170078 = Data15_g170078.BoundsData;
				Out_RotationData15_g170078 = Data15_g170078.RotationData;
				}
				float3 temp_output_1567_0_g170066 = Out_PositionOS15_g170078;
				float3 In_PositionOS16_g170082 = temp_output_1567_0_g170066;
				float3 temp_output_1567_16_g170066 = Out_PositionWS15_g170078;
				float3 In_PositionWS16_g170082 = temp_output_1567_16_g170066;
				float3 temp_output_1567_17_g170066 = Out_PositionWO15_g170078;
				float3 In_PositionWO16_g170082 = temp_output_1567_17_g170066;
				float3 In_PositionRawOS16_g170082 = Out_PositionRawOS15_g170078;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170066 = Out_VertexData15_g170078;
				half4 Model_VertexMasks518_g170066 = temp_output_1567_29_g170066;
				float4 break1689_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170080 = _motion_small_vert_mode;
				float temp_output_30_0_g170080 = ( break1689_g170066.x * break33_g170080.x );
				float temp_output_29_0_g170080 = ( break1689_g170066.y * break33_g170080.y );
				float temp_output_31_0_g170080 = ( break1689_g170066.z * break33_g170080.z );
				float temp_output_28_0_g170080 = ( temp_output_30_0_g170080 + temp_output_29_0_g170080 + temp_output_31_0_g170080 + ( break1689_g170066.w * break33_g170080.w ) );
				float temp_output_1727_0_g170066 = temp_output_28_0_g170080;
				float4 temp_output_1567_30_g170066 = Out_BoundsData15_g170078;
				half4 Model_BoundsData1322_g170066 = temp_output_1567_30_g170066;
				float4 break33_g170083 = _motion_small_proc_mode;
				float temp_output_30_0_g170083 = ( (Model_BoundsData1322_g170066).z * break33_g170083.x );
				float temp_output_29_0_g170083 = ( (Model_BoundsData1322_g170066).w * break33_g170083.y );
				float temp_output_1734_0_g170066 = ( temp_output_30_0_g170083 + temp_output_29_0_g170083 );
				float lerpResult1906_g170066 = lerp( temp_output_1727_0_g170066 , temp_output_1734_0_g170066 , _motion_small_mask_mode);
				float enc1805_g170066 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170066 = DecodeFloatToVector2( enc1805_g170066 );
				float2 break1804_g170066 = localDecodeFloatToVector21805_g170066;
				half Small_Mask_Legacy1806_g170066 = break1804_g170066.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170066 = Small_Mask_Legacy1806_g170066;
				#else
				float staticSwitch1800_g170066 = lerpResult1906_g170066;
				#endif
				float clampResult17_g170085 = clamp( staticSwitch1800_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170086 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170086 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170086 );
				float temp_output_6_0_g170087 = saturate( ( ( clampResult17_g170085 - temp_output_7_0_g170086 ) / ( temp_output_10_0_g170086 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170087 = ( temp_output_6_0_g170087 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170087 = temp_output_6_0_g170087;
				#endif
				half Small_Mask640_g170066 = staticSwitch14_g170087;
				half3 Model_PositionOS147_g170066 = temp_output_1567_0_g170066;
				float3 normalizeResult1832_g170066 = normalize( Model_PositionOS147_g170066 );
				float4 lerpResult627_g170120 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170120 = (lerpResult627_g170120).xy;
				half3 Model_PositionWO162_g170066 = temp_output_1567_17_g170066;
				float3 temp_output_1567_19_g170066 = Out_PivotWO15_g170078;
				half3 Model_PivotWO402_g170066 = temp_output_1567_19_g170066;
				float3 lerpResult829_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170066 = Out_MotionData15_g170078;
				half4 Model_MotionMasks489_g170066 = temp_output_1567_27_g170066;
				half3 Base_Position1394_g170066 = ( lerpResult829_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170120 = Base_Position1394_g170066;
				half Flow_Tillling1397_g170066 = _MotionTillingValue;
				half Input_MotionTilling321_g170120 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170120 = ( -(Input_PositionWO419_g170120).xz * Input_MotionTilling321_g170120 * 0.005 );
				float2 temp_output_3_0_g170133 = Noise_Coord515_g170120;
				float2 temp_output_606_0_g170120 = (Global_WindDirection593_g170120*2.0 + -1.0);
				float2 temp_output_21_0_g170133 = temp_output_606_0_g170120;
				float lerpResult128_g170121 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170066 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170120 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170120 = ( lerpResult128_g170121 * Input_MotionSpeed62_g170120 );
				half Noise_Speed516_g170120 = ( temp_output_505_0_g170120 * 0.02 );
				float temp_output_15_0_g170133 = Noise_Speed516_g170120;
				float temp_output_23_0_g170133 = frac( temp_output_15_0_g170133 );
				float4 lerpResult39_g170133 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * temp_output_23_0_g170133 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * frac( ( temp_output_15_0_g170133 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170133 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170120 = lerpResult39_g170133;
				half Flow_Noise1843_g170066 = _MotionNoiseValue;
				half Input_MotionNoise552_g170120 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170120 = lerp( Global_WindDirection593_g170120 , (Noise_Params535_g170120).rg , Input_MotionNoise552_g170120);
				half Global_WindIntensity576_g170120 = (lerpResult627_g170120).z;
				half Flow_Value1855_g170066 = _MotionIntensityValue;
				half Input_MotionValue629_g170120 = Flow_Value1855_g170066;
				float2 lerpResult574_g170120 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170120 , ( Global_WindIntensity576_g170120 * Input_MotionValue629_g170120 ));
				float3 appendResult566_g170120 = (float3(lerpResult574_g170120 , (Noise_Params535_g170120).b));
				float temp_output_136_0_g170122 = _global_wind_layer_value;
				float temp_output_19_0_g170124 = TVE_WindLayers[(int)temp_output_136_0_g170122];
				half3 Input_Position180_g170125 = Input_PositionWO419_g170120;
				float2 temp_output_75_0_g170125 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_82_0_g170125 = temp_output_136_0_g170122;
				float2 temp_output_119_0_g170125 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_7_0_g170130 = 1.0;
				float temp_output_10_0_g170130 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170130 );
				float4 lerpResult131_g170125 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170125,temp_output_82_0_g170125), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170125,temp_output_82_0_g170125), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170125 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170130 ) / temp_output_10_0_g170130 ) ));
				float4 temp_output_17_0_g170124 = lerpResult131_g170125;
				float4 temp_output_3_0_g170124 = TVE_WindParams;
				float4 ifLocalVar18_g170124 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170124 >= 0.5 )
				ifLocalVar18_g170124 = temp_output_17_0_g170124;
				else
				ifLocalVar18_g170124 = temp_output_3_0_g170124;
				float4 lerpResult22_g170124 = lerp( temp_output_3_0_g170124 , temp_output_17_0_g170124 , temp_output_19_0_g170124);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170124 = lerpResult22_g170124;
				#else
				float4 staticSwitch24_g170124 = ifLocalVar18_g170124;
				#endif
				float4 temp_output_610_0_g170120 = staticSwitch24_g170124;
				float3 lerpResult623_g170120 = lerp( appendResult566_g170120 , (temp_output_610_0_g170120).rgb , (temp_output_610_0_g170120).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170120 = lerpResult623_g170120;
				#else
				float3 staticSwitch612_g170120 = appendResult566_g170120;
				#endif
				float3 temp_output_1902_567_g170066 = staticSwitch612_g170120;
				float2 temp_output_1403_0_g170066 = (temp_output_1902_567_g170066).xy;
				float temp_output_136_0_g170067 = _global_push_layer_value;
				float temp_output_19_0_g170068 = TVE_PushLayers[(int)temp_output_136_0_g170067];
				float3 lerpResult1547_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170066 = ( lerpResult1547_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170069 = Bend_Position1549_g170066;
				float2 temp_output_75_0_g170069 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_82_0_g170069 = temp_output_136_0_g170067;
				float2 temp_output_119_0_g170069 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_7_0_g170074 = 1.0;
				float temp_output_10_0_g170074 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170074 );
				float4 lerpResult131_g170069 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170069,temp_output_82_0_g170069), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170069,temp_output_82_0_g170069), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170069 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170074 ) / temp_output_10_0_g170074 ) ));
				float4 temp_output_17_0_g170068 = lerpResult131_g170069;
				float4 temp_output_3_0_g170068 = TVE_PushParams;
				float4 ifLocalVar18_g170068 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170068 >= 0.5 )
				ifLocalVar18_g170068 = temp_output_17_0_g170068;
				else
				ifLocalVar18_g170068 = temp_output_3_0_g170068;
				float4 lerpResult22_g170068 = lerp( temp_output_3_0_g170068 , temp_output_17_0_g170068 , temp_output_19_0_g170068);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170068 = lerpResult22_g170068;
				#else
				float4 staticSwitch24_g170068 = ifLocalVar18_g170068;
				#endif
				half4 Global_BendParams214_g170066 = staticSwitch24_g170068;
				half Bend_Intensity1501_g170066 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170066 = saturate( ( (Global_BendParams214_g170066).a * Bend_Intensity1501_g170066 ) );
				#else
				float staticSwitch1527_g170066 = 0.0;
				#endif
				half Bend_Influence1504_g170066 = staticSwitch1527_g170066;
				float2 lerpResult1507_g170066 = lerp( temp_output_1403_0_g170066 , (Global_BendParams214_g170066).rg , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170066 = lerpResult1507_g170066;
				#else
				float2 staticSwitch1506_g170066 = temp_output_1403_0_g170066;
				#endif
				float2 break83_g170076 = (staticSwitch1506_g170066*2.0 + -1.0);
				float3 appendResult79_g170076 = (float3(break83_g170076.x , 0.0 , break83_g170076.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170076 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170105 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170105 = (lerpResult627_g170105).xy;
				float3 lerpResult1411_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170066 = ( lerpResult1411_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170105 = Small_Position1421_g170066;
				half Input_MotionTilling321_g170105 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170105 = ( -(Input_PositionWO419_g170105).xz * Input_MotionTilling321_g170105 * 0.005 );
				float2 temp_output_3_0_g170118 = Noise_Coord515_g170105;
				float2 temp_output_606_0_g170105 = (Global_WindDirection593_g170105*2.0 + -1.0);
				float2 temp_output_21_0_g170118 = temp_output_606_0_g170105;
				float lerpResult128_g170106 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170105 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170105 = ( lerpResult128_g170106 * Input_MotionSpeed62_g170105 );
				half Noise_Speed516_g170105 = ( temp_output_505_0_g170105 * 0.02 );
				float temp_output_15_0_g170118 = Noise_Speed516_g170105;
				float temp_output_23_0_g170118 = frac( temp_output_15_0_g170118 );
				float4 lerpResult39_g170118 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * temp_output_23_0_g170118 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * frac( ( temp_output_15_0_g170118 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170118 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170105 = lerpResult39_g170118;
				half Input_MotionNoise552_g170105 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170105 = lerp( Global_WindDirection593_g170105 , (Noise_Params535_g170105).rg , Input_MotionNoise552_g170105);
				half Global_WindIntensity576_g170105 = (lerpResult627_g170105).z;
				half Input_MotionValue629_g170105 = Flow_Value1855_g170066;
				float2 lerpResult574_g170105 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170105 , ( Global_WindIntensity576_g170105 * Input_MotionValue629_g170105 ));
				float3 appendResult566_g170105 = (float3(lerpResult574_g170105 , (Noise_Params535_g170105).b));
				float temp_output_136_0_g170107 = _global_wind_layer_value;
				float temp_output_19_0_g170109 = TVE_WindLayers[(int)temp_output_136_0_g170107];
				half3 Input_Position180_g170110 = Input_PositionWO419_g170105;
				float2 temp_output_75_0_g170110 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_82_0_g170110 = temp_output_136_0_g170107;
				float2 temp_output_119_0_g170110 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_7_0_g170115 = 1.0;
				float temp_output_10_0_g170115 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170115 );
				float4 lerpResult131_g170110 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170110,temp_output_82_0_g170110), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170110,temp_output_82_0_g170110), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170110 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170115 ) / temp_output_10_0_g170115 ) ));
				float4 temp_output_17_0_g170109 = lerpResult131_g170110;
				float4 temp_output_3_0_g170109 = TVE_WindParams;
				float4 ifLocalVar18_g170109 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170109 >= 0.5 )
				ifLocalVar18_g170109 = temp_output_17_0_g170109;
				else
				ifLocalVar18_g170109 = temp_output_3_0_g170109;
				float4 lerpResult22_g170109 = lerp( temp_output_3_0_g170109 , temp_output_17_0_g170109 , temp_output_19_0_g170109);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170109 = lerpResult22_g170109;
				#else
				float4 staticSwitch24_g170109 = ifLocalVar18_g170109;
				#endif
				float4 temp_output_610_0_g170105 = staticSwitch24_g170109;
				float3 lerpResult623_g170105 = lerp( appendResult566_g170105 , (temp_output_610_0_g170105).rgb , (temp_output_610_0_g170105).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170105 = lerpResult623_g170105;
				#else
				float3 staticSwitch612_g170105 = appendResult566_g170105;
				#endif
				float3 temp_output_1901_567_g170066 = staticSwitch612_g170105;
				float2 break83_g170077 = ((temp_output_1901_567_g170066).xy*2.0 + -1.0);
				float3 appendResult79_g170077 = (float3(break83_g170077.x , 0.0 , break83_g170077.y));
				half2 Small_Direction1489_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170077 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170066 = Small_Direction1489_g170066;
				#else
				float2 staticSwitch1485_g170066 = Base_Direction893_g170066;
				#endif
				half2 Wind_Direction1486_g170066 = staticSwitch1485_g170066;
				float2 break1828_g170066 = -Wind_Direction1486_g170066;
				float3 appendResult1830_g170066 = (float3(break1828_g170066.x , 0.0 , break1828_g170066.y));
				float dotResult1831_g170066 = dot( normalizeResult1832_g170066 , appendResult1830_g170066 );
				float lerpResult1826_g170066 = lerp( 1.0 , (dotResult1831_g170066*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170066 = lerpResult1826_g170066;
				float2 break1433_g170066 = Small_Direction1489_g170066;
				float3 appendResult1434_g170066 = (float3(break1433_g170066.x , length( Small_Direction1489_g170066 ) , break1433_g170066.y));
				half Small_Noise1427_g170066 = abs( (temp_output_1901_567_g170066).z );
				float3 appendResult1786_g170066 = (float3(Small_Noise1427_g170066 , (Small_Noise1427_g170066*0.4 + -0.2) , Small_Noise1427_g170066));
				half3 Small_Squash789_g170066 = ( _MotionSmallIntensityValue * Small_Mask640_g170066 * Motion_FrontMask1142_g170066 * appendResult1434_g170066 * appendResult1786_g170066 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170066 = Small_Squash789_g170066;
				#else
				float3 staticSwitch495_g170066 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170081 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170081 = ( break1710_g170066.x * break33_g170081.x );
				float temp_output_29_0_g170081 = ( break1710_g170066.y * break33_g170081.y );
				float temp_output_31_0_g170081 = ( break1710_g170066.z * break33_g170081.z );
				float temp_output_28_0_g170081 = ( temp_output_30_0_g170081 + temp_output_29_0_g170081 + temp_output_31_0_g170081 + ( break1710_g170066.w * break33_g170081.w ) );
				float temp_output_1729_0_g170066 = temp_output_28_0_g170081;
				float4 break33_g170084 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170084 = ( (Model_BoundsData1322_g170066).z * break33_g170084.x );
				float temp_output_29_0_g170084 = ( (Model_BoundsData1322_g170066).w * break33_g170084.y );
				float temp_output_1735_0_g170066 = ( temp_output_30_0_g170084 + temp_output_29_0_g170084 );
				float lerpResult1908_g170066 = lerp( temp_output_1729_0_g170066 , temp_output_1735_0_g170066 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170066 = break1804_g170066.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170066 = Tiny_Mask_Legacy1807_g170066;
				#else
				float staticSwitch1810_g170066 = lerpResult1908_g170066;
				#endif
				float clampResult17_g170088 = clamp( staticSwitch1810_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170089 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170089 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170089 );
				float temp_output_6_0_g170090 = saturate( ( ( clampResult17_g170088 - temp_output_7_0_g170089 ) / ( temp_output_10_0_g170089 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170090 = ( temp_output_6_0_g170090 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170090 = temp_output_6_0_g170090;
				#endif
				half Tiny_Mask218_g170066 = staticSwitch14_g170090;
				half3 Input_Position500_g170091 = Model_PositionWO162_g170066;
				half Input_MotionTilling321_g170091 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170091 = 0.0;
				float lerpResult128_g170093 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170091 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170091 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170091).xz * Input_MotionTilling321_g170091 * 0.03 ) + Input_MotionPhase330_g170091 + ( lerpResult128_g170093 * Input_MotionSpeed62_g170091 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170091 = (float3(tex2DNode460_g170091.r , tex2DNode460_g170091.g , tex2DNode460_g170091.b));
				half3 Flutter_Texture489_g170091 = (appendResult462_g170091*2.0 + -1.0);
				half3 Tiny_Direction859_g170066 = Flutter_Texture489_g170091;
				half Base_Noise1159_g170066 = abs( (temp_output_1902_567_g170066).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170066 = Small_Noise1427_g170066;
				#else
				float staticSwitch1453_g170066 = Base_Noise1159_g170066;
				#endif
				half Wind_Noise1475_g170066 = staticSwitch1453_g170066;
				half3 Model_PositionWS1819_g170066 = temp_output_1567_16_g170066;
				half Motion_FadeMask1820_g170066 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170066 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170066 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170066 * Tiny_Direction859_g170066 * length( Wind_Direction1486_g170066 ) * Wind_Noise1475_g170066 * Motion_FrontMask1142_g170066 * Motion_FadeMask1820_g170066 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170066 = Tiny_Flutter1451_g170066;
				#else
				float3 staticSwitch414_g170066 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170066 = ( staticSwitch495_g170066 + staticSwitch414_g170066 );
				float3 In_PositionAddOS16_g170082 = Final_PositionADD1569_g170066;
				float3 temp_output_1567_24_g170066 = Out_PivotOS15_g170078;
				float3 In_PivotOS16_g170082 = temp_output_1567_24_g170066;
				float3 In_PivotWS16_g170082 = Out_PivotWS15_g170078;
				float3 In_PivotWO16_g170082 = temp_output_1567_19_g170066;
				float3 temp_output_1567_20_g170066 = Out_NormalOS15_g170078;
				float3 In_NormalOS16_g170082 = temp_output_1567_20_g170066;
				float3 In_NormalWS16_g170082 = Out_NormalWS15_g170078;
				float3 In_NormalRawOS16_g170082 = Out_NormalRawOS15_g170078;
				float3 In_NormalRawWS16_g170082 = Out_NormalRawWS15_g170078;
				float4 In_TangentOS16_g170082 = Out_TangentOS15_g170078;
				float3 In_ViewDirWS16_g170082 = Out_ViewDirWS15_g170078;
				float4 In_VertexData16_g170082 = temp_output_1567_29_g170066;
				float4 In_MotionData16_g170082 = temp_output_1567_27_g170066;
				float4 In_BoundsData16_g170082 = temp_output_1567_30_g170066;
				half Base_Intensity1883_g170066 = _MotionBaseIntensityValue;
				float4 break748_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170098 = _motion_base_vert_mode;
				float temp_output_30_0_g170098 = ( break748_g170066.x * break33_g170098.x );
				float temp_output_29_0_g170098 = ( break748_g170066.y * break33_g170098.y );
				float temp_output_31_0_g170098 = ( break748_g170066.z * break33_g170098.z );
				float temp_output_28_0_g170098 = ( temp_output_30_0_g170098 + temp_output_29_0_g170098 + temp_output_31_0_g170098 + ( break748_g170066.w * break33_g170098.w ) );
				float temp_output_1731_0_g170066 = temp_output_28_0_g170098;
				float4 break33_g170099 = _motion_base_proc_mode;
				float temp_output_30_0_g170099 = ( (Model_BoundsData1322_g170066).z * break33_g170099.x );
				float temp_output_29_0_g170099 = ( (Model_BoundsData1322_g170066).w * break33_g170099.y );
				float temp_output_1733_0_g170066 = ( temp_output_30_0_g170099 + temp_output_29_0_g170099 );
				float lerpResult1904_g170066 = lerp( temp_output_1731_0_g170066 , temp_output_1733_0_g170066 , _motion_base_mask_mode);
				float clampResult17_g170095 = clamp( lerpResult1904_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170096 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170096 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170096 );
				float temp_output_6_0_g170097 = saturate( ( ( clampResult17_g170095 - temp_output_7_0_g170096 ) / ( temp_output_10_0_g170096 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170097 = ( temp_output_6_0_g170097 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170097 = temp_output_6_0_g170097;
				#endif
				half Base_Mask217_g170066 = staticSwitch14_g170097;
				float lerpResult1768_g170066 = lerp( (Base_Noise1159_g170066*2.0 + -1.0) , Base_Noise1159_g170066 , length( Base_Direction893_g170066 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170066 = ( Base_Intensity1883_g170066 * Base_Mask217_g170066 * lerpResult1768_g170066 );
				#else
				float staticSwitch1573_g170066 = 0.0;
				#endif
				float4 break1864_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170103 = _motion_push_vert_mode;
				float temp_output_30_0_g170103 = ( break1864_g170066.x * break33_g170103.x );
				float temp_output_29_0_g170103 = ( break1864_g170066.y * break33_g170103.y );
				float temp_output_31_0_g170103 = ( break1864_g170066.z * break33_g170103.z );
				float temp_output_28_0_g170103 = ( temp_output_30_0_g170103 + temp_output_29_0_g170103 + temp_output_31_0_g170103 + ( break1864_g170066.w * break33_g170103.w ) );
				float temp_output_1867_0_g170066 = temp_output_28_0_g170103;
				float4 break33_g170104 = _motion_push_proc_mode;
				float temp_output_30_0_g170104 = ( (Model_BoundsData1322_g170066).z * break33_g170104.x );
				float temp_output_29_0_g170104 = ( (Model_BoundsData1322_g170066).w * break33_g170104.y );
				float temp_output_1868_0_g170066 = ( temp_output_30_0_g170104 + temp_output_29_0_g170104 );
				float lerpResult1910_g170066 = lerp( temp_output_1867_0_g170066 , temp_output_1868_0_g170066 , _motion_push_mask_mode);
				float clampResult17_g170101 = clamp( lerpResult1910_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170102 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170102 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170102 );
				float temp_output_6_0_g170135 = saturate( ( ( clampResult17_g170101 - temp_output_7_0_g170102 ) / ( temp_output_10_0_g170102 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170135 = ( temp_output_6_0_g170135 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170135 = temp_output_6_0_g170135;
				#endif
				half Push_Mask1877_g170066 = staticSwitch14_g170135;
				float lerpResult1496_g170066 = lerp( staticSwitch1573_g170066 , ( Bend_Intensity1501_g170066 * Push_Mask1877_g170066 ) , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170066 = lerpResult1496_g170066;
				#else
				float staticSwitch1517_g170066 = staticSwitch1573_g170066;
				#endif
				half2 Base_Bending1440_g170066 = ( staticSwitch1517_g170066 * Base_Direction893_g170066 );
				half2 Final_VertexBend1570_g170066 = Base_Bending1440_g170066;
				float4 In_RotationData16_g170082 = float4( Final_VertexBend1570_g170066, 0.0 , 0.0 );
				{
				Data16_g170082.Dummy = In_Dummy16_g170082;
				Data16_g170082.PositionOS = In_PositionOS16_g170082;
				Data16_g170082.PositionWS = In_PositionWS16_g170082;
				Data16_g170082.PositionWO = In_PositionWO16_g170082;
				Data16_g170082.PositionRawOS = In_PositionRawOS16_g170082;
				Data16_g170082.PositionAddOS = In_PositionAddOS16_g170082;
				Data16_g170082.PivotOS = In_PivotOS16_g170082;
				Data16_g170082.PivotWS = In_PivotWS16_g170082;
				Data16_g170082.PivotWO = In_PivotWO16_g170082;
				Data16_g170082.NormalOS = In_NormalOS16_g170082;
				Data16_g170082.NormalWS = In_NormalWS16_g170082;
				Data16_g170082.NormalRawOS = In_NormalRawOS16_g170082;
				Data16_g170082.NormalRawWS = In_NormalRawWS16_g170082;
				Data16_g170082.TangentOS = In_TangentOS16_g170082;
				Data16_g170082.ViewDirWS = In_ViewDirWS16_g170082;
				Data16_g170082.VertexData = In_VertexData16_g170082;
				Data16_g170082.MotionData = In_MotionData16_g170082;
				Data16_g170082.BoundsData = In_BoundsData16_g170082;
				Data16_g170082.RotationData = In_RotationData16_g170082;
				}
				TVEModelData Data15_g170401 = Data16_g170082;
				float Out_Dummy15_g170401 = 0;
				float3 Out_PositionOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170401 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170401 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170401 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170401 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170401 = float3( 0,0,0 );
				float4 Out_VertexData15_g170401 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170401 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170401 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170401 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170401 = Data15_g170401.Dummy;
				Out_PositionOS15_g170401 = Data15_g170401.PositionOS;
				Out_PositionWS15_g170401 = Data15_g170401.PositionWS;
				Out_PositionWO15_g170401 = Data15_g170401.PositionWO;
				Out_PositionRawOS15_g170401 = Data15_g170401.PositionRawOS;
				Out_PositionAddOS15_g170401 = Data15_g170401.PositionAddOS;
				Out_PivotOS15_g170401 = Data15_g170401.PivotOS;
				Out_PivotWS15_g170401 = Data15_g170401.PivotWS;
				Out_PivotWO15_g170401 = Data15_g170401.PivotWO;
				Out_NormalOS15_g170401 = Data15_g170401.NormalOS;
				Out_NormalWS15_g170401 = Data15_g170401.NormalWS;
				Out_NormalRawOS15_g170401 = Data15_g170401.NormalRawOS;
				Out_NormalRawWS15_g170401 = Data15_g170401.NormalRawWS;
				Out_TangentOS15_g170401 = Data15_g170401.TangentOS;
				Out_ViewDirWS15_g170401 = Data15_g170401.ViewDirWS;
				Out_VertexData15_g170401 = Data15_g170401.VertexData;
				Out_MotionData15_g170401 = Data15_g170401.MotionData;
				Out_BoundsData15_g170401 = Data15_g170401.BoundsData;
				Out_RotationData15_g170401 = Data15_g170401.RotationData;
				}
				half3 Model_PositionOS147_g170400 = Out_PositionOS15_g170401;
				half3 Input_False58_g170406 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170403 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170404 = VertexPos40_g170403;
				float3 appendResult74_g170404 = (float3(VertexPos40_g170404.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170404 = appendResult74_g170404;
				float3 break84_g170404 = VertexPos40_g170404;
				float3 appendResult81_g170404 = (float3(0.0 , break84_g170404.y , break84_g170404.z));
				half3 VertexPosOtherAxis82_g170404 = appendResult81_g170404;
				float4 temp_output_1567_33_g170400 = Out_RotationData15_g170401;
				half4 Model_VertexBend1569_g170400 = temp_output_1567_33_g170400;
				half2 Angle44_g170403 = (Model_VertexBend1569_g170400).xy;
				half Angle44_g170404 = (Angle44_g170403).y;
				half3 VertexPos40_g170405 = ( VertexPosRotationAxis50_g170404 + ( VertexPosOtherAxis82_g170404 * cos( Angle44_g170404 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170404 ) * sin( Angle44_g170404 ) ) );
				float3 appendResult74_g170405 = (float3(0.0 , 0.0 , VertexPos40_g170405.z));
				half3 VertexPosRotationAxis50_g170405 = appendResult74_g170405;
				float3 break84_g170405 = VertexPos40_g170405;
				float3 appendResult81_g170405 = (float3(break84_g170405.x , break84_g170405.y , 0.0));
				half3 VertexPosOtherAxis82_g170405 = appendResult81_g170405;
				half Angle44_g170405 = -(Angle44_g170403).x;
				half3 Input_True57_g170406 = ( VertexPosRotationAxis50_g170405 + ( VertexPosOtherAxis82_g170405 * cos( Angle44_g170405 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170405 ) * sin( Angle44_g170405 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch65_g170406 = Input_False58_g170406;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch67_g170406 = staticSwitch65_g170406;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch69_g170406 = staticSwitch67_g170406;
				#endif
				float3 temp_output_1567_31_g170400 = Out_PositionAddOS15_g170401;
				half3 Model_PositionADD1568_g170400 = temp_output_1567_31_g170400;
				half3 Final_PositionOS178_g170400 = ( staticSwitch69_g170406 + Model_PositionADD1568_g170400 );
				float3 In_PositionOS16_g170402 = Final_PositionOS178_g170400;
				float3 In_PositionWS16_g170402 = Out_PositionWS15_g170401;
				float3 In_PositionWO16_g170402 = Out_PositionWO15_g170401;
				float3 In_PositionRawOS16_g170402 = Out_PositionRawOS15_g170401;
				float3 In_PositionAddOS16_g170402 = temp_output_1567_31_g170400;
				float3 In_PivotOS16_g170402 = Out_PivotOS15_g170401;
				float3 In_PivotWS16_g170402 = Out_PivotWS15_g170401;
				float3 In_PivotWO16_g170402 = Out_PivotWO15_g170401;
				float3 In_NormalOS16_g170402 = Out_NormalOS15_g170401;
				float3 In_NormalWS16_g170402 = Out_NormalWS15_g170401;
				float3 In_NormalRawOS16_g170402 = Out_NormalRawOS15_g170401;
				float3 In_NormalRawWS16_g170402 = Out_NormalRawWS15_g170401;
				float4 In_TangentOS16_g170402 = Out_TangentOS15_g170401;
				float3 In_ViewDirWS16_g170402 = Out_ViewDirWS15_g170401;
				float4 In_VertexData16_g170402 = Out_VertexData15_g170401;
				float4 In_MotionData16_g170402 = Out_MotionData15_g170401;
				float4 In_BoundsData16_g170402 = Out_BoundsData15_g170401;
				float4 In_RotationData16_g170402 = temp_output_1567_33_g170400;
				{
				Data16_g170402.Dummy = In_Dummy16_g170402;
				Data16_g170402.PositionOS = In_PositionOS16_g170402;
				Data16_g170402.PositionWS = In_PositionWS16_g170402;
				Data16_g170402.PositionWO = In_PositionWO16_g170402;
				Data16_g170402.PositionRawOS = In_PositionRawOS16_g170402;
				Data16_g170402.PositionAddOS = In_PositionAddOS16_g170402;
				Data16_g170402.PivotOS = In_PivotOS16_g170402;
				Data16_g170402.PivotWS = In_PivotWS16_g170402;
				Data16_g170402.PivotWO = In_PivotWO16_g170402;
				Data16_g170402.NormalOS = In_NormalOS16_g170402;
				Data16_g170402.NormalWS = In_NormalWS16_g170402;
				Data16_g170402.NormalRawOS = In_NormalRawOS16_g170402;
				Data16_g170402.NormalRawWS = In_NormalRawWS16_g170402;
				Data16_g170402.TangentOS = In_TangentOS16_g170402;
				Data16_g170402.ViewDirWS = In_ViewDirWS16_g170402;
				Data16_g170402.VertexData = In_VertexData16_g170402;
				Data16_g170402.MotionData = In_MotionData16_g170402;
				Data16_g170402.BoundsData = In_BoundsData16_g170402;
				Data16_g170402.RotationData = In_RotationData16_g170402;
				}
				TVEModelData Data15_g170423 = Data16_g170402;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				}
				float3 In_PositionOS16_g170424 = Out_PositionOS15_g170423;
				float3 In_PositionWS16_g170424 = Out_PositionWS15_g170423;
				float3 temp_output_1567_17_g170422 = Out_PositionWO15_g170423;
				float3 In_PositionWO16_g170424 = temp_output_1567_17_g170422;
				float3 temp_output_1567_26_g170422 = Out_PositionRawOS15_g170423;
				float3 In_PositionRawOS16_g170424 = temp_output_1567_26_g170422;
				float3 In_PositionAddOS16_g170424 = Out_PositionAddOS15_g170423;
				float3 In_PivotOS16_g170424 = Out_PivotOS15_g170423;
				float3 In_PivotWS16_g170424 = Out_PivotWS15_g170423;
				float3 In_PivotWO16_g170424 = Out_PivotWO15_g170423;
				half3 Model_NormalOS1568_g170422 = Out_NormalOS15_g170423;
				float3 lerpResult1589_g170422 = lerp( Model_NormalOS1568_g170422 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170422 = temp_output_1567_26_g170422;
				float3 normalizeResult1594_g170422 = ASESafeNormalize( ( Model_PositionRAW1592_g170422 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170422 = lerp( lerpResult1589_g170422 , normalizeResult1594_g170422 , _NormalSphereValue);
				half3 Input_False58_g170437 = lerpResult1585_g170422;
				half3 VertexPos40_g170426 = lerpResult1585_g170422;
				half3 VertexPos40_g170427 = VertexPos40_g170426;
				float3 appendResult74_g170427 = (float3(VertexPos40_g170427.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170427 = appendResult74_g170427;
				float3 break84_g170427 = VertexPos40_g170427;
				float3 appendResult81_g170427 = (float3(0.0 , break84_g170427.y , break84_g170427.z));
				half3 VertexPosOtherAxis82_g170427 = appendResult81_g170427;
				float4 temp_output_1567_33_g170422 = Out_RotationData15_g170423;
				half4 Model_RotationData1583_g170422 = temp_output_1567_33_g170422;
				half2 Angle44_g170426 = Model_RotationData1583_g170422.xy;
				half Angle44_g170427 = (Angle44_g170426).y;
				half3 VertexPos40_g170428 = ( VertexPosRotationAxis50_g170427 + ( VertexPosOtherAxis82_g170427 * cos( Angle44_g170427 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170427 ) * sin( Angle44_g170427 ) ) );
				float3 appendResult74_g170428 = (float3(0.0 , 0.0 , VertexPos40_g170428.z));
				half3 VertexPosRotationAxis50_g170428 = appendResult74_g170428;
				float3 break84_g170428 = VertexPos40_g170428;
				float3 appendResult81_g170428 = (float3(break84_g170428.x , break84_g170428.y , 0.0));
				half3 VertexPosOtherAxis82_g170428 = appendResult81_g170428;
				half Angle44_g170428 = -(Angle44_g170426).x;
				float3 lerpResult1591_g170422 = lerp( lerpResult1585_g170422 , ( VertexPosRotationAxis50_g170428 + ( VertexPosOtherAxis82_g170428 * cos( Angle44_g170428 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170428 ) * sin( Angle44_g170428 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170437 = lerpResult1591_g170422;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch65_g170437 = Input_False58_g170437;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch67_g170437 = staticSwitch65_g170437;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch69_g170437 = staticSwitch67_g170437;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170422 = staticSwitch69_g170437;
				#else
				float3 staticSwitch1595_g170422 = lerpResult1585_g170422;
				#endif
				float4 temp_output_1567_29_g170422 = Out_VertexData15_g170423;
				half4 Model_VertexData1608_g170422 = temp_output_1567_29_g170422;
				float4 break1683_g170422 = Model_VertexData1608_g170422;
				float4 break33_g170430 = _normal_vert_mode;
				float temp_output_30_0_g170430 = ( break1683_g170422.x * break33_g170430.x );
				float temp_output_29_0_g170430 = ( break1683_g170422.y * break33_g170430.y );
				float temp_output_31_0_g170430 = ( break1683_g170422.z * break33_g170430.z );
				float temp_output_28_0_g170430 = ( temp_output_30_0_g170430 + temp_output_29_0_g170430 + temp_output_31_0_g170430 + ( break1683_g170422.w * break33_g170430.w ) );
				float clampResult17_g170432 = clamp( temp_output_28_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170431 = _NormalMeshRemap.x;
				float temp_output_10_0_g170431 = ( _NormalMeshRemap.y - temp_output_7_0_g170431 );
				float lerpResult1695_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170432 - temp_output_7_0_g170431 ) / ( temp_output_10_0_g170431 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170433 = lerpResult1695_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				float temp_output_1690_0_g170422 = staticSwitch14_g170433;
				half Normal_MeskMask1691_g170422 = temp_output_1690_0_g170422;
				half Normal_Proj_Mask1647_g170422 = 1.0;
				float temp_output_1699_0_g170422 = ( Normal_MeskMask1691_g170422 * Normal_Proj_Mask1647_g170422 );
				float3 lerpResult1670_g170422 = lerp( Model_NormalOS1568_g170422 , staticSwitch1595_g170422 , temp_output_1699_0_g170422);
				half3 Final_NormalOS178_g170422 = lerpResult1670_g170422;
				float3 In_NormalOS16_g170424 = Final_NormalOS178_g170422;
				float3 temp_output_1567_21_g170422 = Out_NormalWS15_g170423;
				float3 In_NormalWS16_g170424 = temp_output_1567_21_g170422;
				float3 In_NormalRawOS16_g170424 = Out_NormalRawOS15_g170423;
				float3 In_NormalRawWS16_g170424 = Out_NormalRawWS15_g170423;
				float4 In_TangentOS16_g170424 = Out_TangentOS15_g170423;
				float3 In_ViewDirWS16_g170424 = Out_ViewDirWS15_g170423;
				float4 In_VertexData16_g170424 = temp_output_1567_29_g170422;
				float4 In_MotionData16_g170424 = Out_MotionData15_g170423;
				float4 In_BoundsData16_g170424 = Out_BoundsData15_g170423;
				float4 In_RotationData16_g170424 = temp_output_1567_33_g170422;
				{
				Data16_g170424.Dummy = In_Dummy16_g170424;
				Data16_g170424.PositionOS = In_PositionOS16_g170424;
				Data16_g170424.PositionWS = In_PositionWS16_g170424;
				Data16_g170424.PositionWO = In_PositionWO16_g170424;
				Data16_g170424.PositionRawOS = In_PositionRawOS16_g170424;
				Data16_g170424.PositionAddOS = In_PositionAddOS16_g170424;
				Data16_g170424.PivotOS = In_PivotOS16_g170424;
				Data16_g170424.PivotWS = In_PivotWS16_g170424;
				Data16_g170424.PivotWO = In_PivotWO16_g170424;
				Data16_g170424.NormalOS = In_NormalOS16_g170424;
				Data16_g170424.NormalWS = In_NormalWS16_g170424;
				Data16_g170424.NormalRawOS = In_NormalRawOS16_g170424;
				Data16_g170424.NormalRawWS = In_NormalRawWS16_g170424;
				Data16_g170424.TangentOS = In_TangentOS16_g170424;
				Data16_g170424.ViewDirWS = In_ViewDirWS16_g170424;
				Data16_g170424.VertexData = In_VertexData16_g170424;
				Data16_g170424.MotionData = In_MotionData16_g170424;
				Data16_g170424.BoundsData = In_BoundsData16_g170424;
				Data16_g170424.RotationData = In_RotationData16_g170424;
				}
				TVEModelData Data15_g170446 = Data16_g170424;
				float Out_Dummy15_g170446 = 0;
				float3 Out_PositionOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170446 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170446 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170446 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170446 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170446 = float3( 0,0,0 );
				float4 Out_VertexData15_g170446 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170446 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170446 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170446 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170446 = Data15_g170446.Dummy;
				Out_PositionOS15_g170446 = Data15_g170446.PositionOS;
				Out_PositionWS15_g170446 = Data15_g170446.PositionWS;
				Out_PositionWO15_g170446 = Data15_g170446.PositionWO;
				Out_PositionRawOS15_g170446 = Data15_g170446.PositionRawOS;
				Out_PositionAddOS15_g170446 = Data15_g170446.PositionAddOS;
				Out_PivotOS15_g170446 = Data15_g170446.PivotOS;
				Out_PivotWS15_g170446 = Data15_g170446.PivotWS;
				Out_PivotWO15_g170446 = Data15_g170446.PivotWO;
				Out_NormalOS15_g170446 = Data15_g170446.NormalOS;
				Out_NormalWS15_g170446 = Data15_g170446.NormalWS;
				Out_NormalRawOS15_g170446 = Data15_g170446.NormalRawOS;
				Out_NormalRawWS15_g170446 = Data15_g170446.NormalRawWS;
				Out_TangentOS15_g170446 = Data15_g170446.TangentOS;
				Out_ViewDirWS15_g170446 = Data15_g170446.ViewDirWS;
				Out_VertexData15_g170446 = Data15_g170446.VertexData;
				Out_MotionData15_g170446 = Data15_g170446.MotionData;
				Out_BoundsData15_g170446 = Data15_g170446.BoundsData;
				Out_RotationData15_g170446 = Data15_g170446.RotationData;
				}
				float3 temp_output_217_24_g170445 = Out_PivotOS15_g170446;
				float3 In_PositionOS16_g170447 = ( Out_PositionOS15_g170446 + temp_output_217_24_g170445 );
				float3 In_PositionWS16_g170447 = Out_PositionWS15_g170446;
				float3 In_PositionWO16_g170447 = Out_PositionWO15_g170446;
				float3 In_PositionRawOS16_g170447 = Out_PositionRawOS15_g170446;
				float3 In_PositionAddOS16_g170447 = Out_PositionAddOS15_g170446;
				float3 In_PivotOS16_g170447 = temp_output_217_24_g170445;
				float3 In_PivotWS16_g170447 = Out_PivotWS15_g170446;
				float3 In_PivotWO16_g170447 = Out_PivotWO15_g170446;
				float3 In_NormalOS16_g170447 = Out_NormalOS15_g170446;
				float3 In_NormalWS16_g170447 = Out_NormalWS15_g170446;
				float3 In_NormalRawOS16_g170447 = Out_NormalRawOS15_g170446;
				float3 In_NormalRawWS16_g170447 = Out_NormalRawWS15_g170446;
				float4 In_TangentOS16_g170447 = Out_TangentOS15_g170446;
				float3 In_ViewDirWS16_g170447 = Out_ViewDirWS15_g170446;
				float4 In_VertexData16_g170447 = Out_VertexData15_g170446;
				float4 In_MotionData16_g170447 = Out_MotionData15_g170446;
				float4 In_BoundsData16_g170447 = Out_BoundsData15_g170446;
				float4 In_RotationData16_g170447 = Out_RotationData15_g170446;
				{
				Data16_g170447.Dummy = In_Dummy16_g170447;
				Data16_g170447.PositionOS = In_PositionOS16_g170447;
				Data16_g170447.PositionWS = In_PositionWS16_g170447;
				Data16_g170447.PositionWO = In_PositionWO16_g170447;
				Data16_g170447.PositionRawOS = In_PositionRawOS16_g170447;
				Data16_g170447.PositionAddOS = In_PositionAddOS16_g170447;
				Data16_g170447.PivotOS = In_PivotOS16_g170447;
				Data16_g170447.PivotWS = In_PivotWS16_g170447;
				Data16_g170447.PivotWO = In_PivotWO16_g170447;
				Data16_g170447.NormalOS = In_NormalOS16_g170447;
				Data16_g170447.NormalWS = In_NormalWS16_g170447;
				Data16_g170447.NormalRawOS = In_NormalRawOS16_g170447;
				Data16_g170447.NormalRawWS = In_NormalRawWS16_g170447;
				Data16_g170447.TangentOS = In_TangentOS16_g170447;
				Data16_g170447.ViewDirWS = In_ViewDirWS16_g170447;
				Data16_g170447.VertexData = In_VertexData16_g170447;
				Data16_g170447.MotionData = In_MotionData16_g170447;
				Data16_g170447.BoundsData = In_BoundsData16_g170447;
				Data16_g170447.RotationData = In_RotationData16_g170447;
				}
				TVEModelData Data15_g170452 = Data16_g170447;
				float Out_Dummy15_g170452 = 0;
				float3 Out_PositionOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170452 = float3( 0,0,0 );
				float4 Out_VertexData15_g170452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_PositionOS15_g170452 = Data15_g170452.PositionOS;
				Out_PositionWS15_g170452 = Data15_g170452.PositionWS;
				Out_PositionWO15_g170452 = Data15_g170452.PositionWO;
				Out_PositionRawOS15_g170452 = Data15_g170452.PositionRawOS;
				Out_PositionAddOS15_g170452 = Data15_g170452.PositionAddOS;
				Out_PivotOS15_g170452 = Data15_g170452.PivotOS;
				Out_PivotWS15_g170452 = Data15_g170452.PivotWS;
				Out_PivotWO15_g170452 = Data15_g170452.PivotWO;
				Out_NormalOS15_g170452 = Data15_g170452.NormalOS;
				Out_NormalWS15_g170452 = Data15_g170452.NormalWS;
				Out_NormalRawOS15_g170452 = Data15_g170452.NormalRawOS;
				Out_NormalRawWS15_g170452 = Data15_g170452.NormalRawWS;
				Out_TangentOS15_g170452 = Data15_g170452.TangentOS;
				Out_ViewDirWS15_g170452 = Data15_g170452.ViewDirWS;
				Out_VertexData15_g170452 = Data15_g170452.VertexData;
				Out_MotionData15_g170452 = Data15_g170452.MotionData;
				Out_BoundsData15_g170452 = Data15_g170452.BoundsData;
				Out_RotationData15_g170452 = Data15_g170452.RotationData;
				}
				float3 temp_output_31_0_g170449 = Out_PositionOS15_g170452;
				
				o.ase_texcoord5.xyz = vertexToFrag73_g169248;
				o.ase_texcoord6.xyz = vertexToFrag76_g169248;
				o.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170100 = ( _MotionHighlightValue * length( Wind_Direction1486_g170066 ) * Motion_FadeMask1820_g170066 * ( Base_Mask217_g170066 * Base_Mask217_g170066 ) * ( Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170100 = ( temp_output_6_0_g170100 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170100 = temp_output_6_0_g170100;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170100;
				float4 appendResult23_g170165 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170165 = appendResult23_g170165;
				o.ase_texcoord10 = vertexToFrag24_g170165;
				o.ase_texcoord11.xyz = ase_worldPos;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.zw = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170449 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170452;
				v.tangent = Out_TangentOS15_g170452;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g170455 = ( 0.0 );
				float localCompData3_g170440 = ( 0.0 );
				TVEVisualData Data3_g170440 = (TVEVisualData)0;
				half Dummy145_g170438 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170440 = Dummy145_g170438;
				float localBreakData4_g170439 = ( 0.0 );
				float localCompData3_g170419 = ( 0.0 );
				TVEVisualData Data3_g170419 = (TVEVisualData)0;
				half Dummy145_g170407 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170419 = Dummy145_g170407;
				float localBreakData4_g170418 = ( 0.0 );
				float localCompData3_g170393 = ( 0.0 );
				TVEVisualData Data3_g170393 = (TVEVisualData)0;
				half Dummy594_g170389 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170393 = Dummy594_g170389;
				float localBreakData4_g170392 = ( 0.0 );
				float localCompData3_g170378 = ( 0.0 );
				TVEVisualData Data3_g170378 = (TVEVisualData)0;
				half Dummy594_g170376 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170378 = Dummy594_g170376;
				float localBreakData4_g170377 = ( 0.0 );
				float localCompData3_g170360 = ( 0.0 );
				TVEVisualData Data3_g170360 = (TVEVisualData)0;
				half Dummy594_g170358 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170360 = Dummy594_g170358;
				float localBreakData4_g170359 = ( 0.0 );
				float localCompData3_g170325 = ( 0.0 );
				TVEVisualData Data3_g170325 = (TVEVisualData)0;
				half Dummy594_g170322 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170325 = Dummy594_g170322;
				float localBreakData4_g170323 = ( 0.0 );
				float localCompData3_g170321 = ( 0.0 );
				TVEVisualData Data3_g170321 = (TVEVisualData)0;
				float In_Dummy3_g170321 = 0.0;
				float localBreakData4_g170320 = ( 0.0 );
				float localCompData3_g170194 = ( 0.0 );
				TVEVisualData Data3_g170194 = (TVEVisualData)0;
				half Dummy205_g170190 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170194 = Dummy205_g170190;
				float localBreakData4_g170192 = ( 0.0 );
				float localCompData3_g170169 = ( 0.0 );
				TVEVisualData Data3_g170169 = (TVEVisualData)0;
				half Dummy205_g170166 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170169 = Dummy205_g170166;
				float localBreakData4_g170171 = ( 0.0 );
				float localCompData3_g170160 = ( 0.0 );
				TVEVisualData Data3_g170160 = (TVEVisualData)0;
				half Dummy220_g170156 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170160 = Dummy220_g170156;
				float localBreakData4_g170158 = ( 0.0 );
				float localCompData3_g170150 = ( 0.0 );
				TVEVisualData Data3_g170150 = (TVEVisualData)0;
				half Dummy220_g170146 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170150 = Dummy220_g170146;
				float localBreakData4_g170149 = ( 0.0 );
				float localCompData3_g170138 = ( 0.0 );
				TVEVisualData Data3_g170138 = (TVEVisualData)0;
				half Dummy202_g170136 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170138 = Dummy202_g170136;
				float localBreakData4_g170137 = ( 0.0 );
				float localCompData3_g170050 = ( 0.0 );
				TVEVisualData Data3_g170050 = (TVEVisualData)0;
				half4 Dummy944_g170033 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170050 = Dummy944_g170033.x;
				float localBreakData4_g170049 = ( 0.0 );
				float localCompData3_g170004 = ( 0.0 );
				TVEVisualData Data3_g170004 = (TVEVisualData)0;
				half4 Dummy946_g169993 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170004 = Dummy946_g169993.x;
				float localBreakData4_g170007 = ( 0.0 );
				float localCompData3_g169981 = ( 0.0 );
				TVEVisualData Data3_g169981 = (TVEVisualData)0;
				half4 Dummy130_g169971 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g169981 = Dummy130_g169971.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169982) = _MainAlbedoTex;
				SamplerState Sampler276_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g169971 = _main_coord_value;
				float4 temp_output_37_0_g169982 = Local_Coords180_g169971;
				half4 Coords276_g169982 = temp_output_37_0_g169982;
				half2 TexCoord276_g169982 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169982 = SampleMain( Texture276_g169982 , Sampler276_g169982 , Coords276_g169982 , TexCoord276_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169982) = _MainAlbedoTex;
				SamplerState Sampler275_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169982 = temp_output_37_0_g169982;
				half2 TexCoord275_g169982 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169982 = SampleExtra( Texture275_g169982 , Sampler275_g169982 , Coords275_g169982 , TexCoord275_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169982) = _MainAlbedoTex;
				SamplerState Sampler238_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169982 = temp_output_37_0_g169982;
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 vertexToFrag73_g169248 = IN.ase_texcoord5.xyz;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 vertexToFrag76_g169248 = IN.ase_texcoord6.xyz;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 ase_worldNormal = IN.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = IN.ase_color;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169972 = Data16_g169262;
				float Out_Dummy15_g169972 = 0;
				float3 Out_PositionOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169972 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169972 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169972 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169972 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169972 = float3( 0,0,0 );
				float4 Out_VertexData15_g169972 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169972 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169972 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169972 = Data15_g169972.Dummy;
				Out_PositionOS15_g169972 = Data15_g169972.PositionOS;
				Out_PositionWS15_g169972 = Data15_g169972.PositionWS;
				Out_PositionWO15_g169972 = Data15_g169972.PositionWO;
				Out_PositionRawOS15_g169972 = Data15_g169972.PositionRawOS;
				Out_PositionAddOS15_g169972 = Data15_g169972.PositionAddOS;
				Out_PivotOS15_g169972 = Data15_g169972.PivotOS;
				Out_PivotWS15_g169972 = Data15_g169972.PivotWS;
				Out_PivotWO15_g169972 = Data15_g169972.PivotWO;
				Out_NormalOS15_g169972 = Data15_g169972.NormalOS;
				Out_NormalWS15_g169972 = Data15_g169972.NormalWS;
				Out_NormalRawOS15_g169972 = Data15_g169972.NormalRawOS;
				Out_NormalRawWS15_g169972 = Data15_g169972.NormalRawWS;
				Out_TangentOS15_g169972 = Data15_g169972.TangentOS;
				Out_ViewDirWS15_g169972 = Data15_g169972.ViewDirWS;
				Out_VertexData15_g169972 = Data15_g169972.VertexData;
				Out_MotionData15_g169972 = Data15_g169972.MotionData;
				Out_BoundsData15_g169972 = Data15_g169972.BoundsData;
				Out_RotationData15_g169972 = Data15_g169972.RotationData;
				}
				half3 Model_PositionWO222_g169971 = Out_PositionWO15_g169972;
				float3 temp_output_279_0_g169982 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169982 = temp_output_279_0_g169982;
				half4 localSamplePlanar2D238_g169982 = SamplePlanar2D( Texture238_g169982 , Sampler238_g169982 , Coords238_g169982 , WorldPosition238_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169982) = _MainAlbedoTex;
				SamplerState Sampler246_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition246_g169982 = temp_output_279_0_g169982;
				half3 Model_NormalWS226_g169971 = Out_NormalWS15_g169972;
				float3 temp_output_280_0_g169982 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169982 = temp_output_280_0_g169982;
				half4 localSamplePlanar3D246_g169982 = SamplePlanar3D( Texture246_g169982 , Sampler246_g169982 , Coords246_g169982 , WorldPosition246_g169982 , WorldNormal246_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169982) = _MainAlbedoTex;
				SamplerState Sampler234_g169982 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169982 = temp_output_37_0_g169982;
				float3 WorldPosition234_g169982 = temp_output_279_0_g169982;
				float4 localSampleStochastic2D234_g169982 = SampleStochastic2D( Texture234_g169982 , Sampler234_g169982 , Coords234_g169982 , WorldPosition234_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169982) = _MainAlbedoTex;
				SamplerState Sampler263_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition263_g169982 = temp_output_279_0_g169982;
				half3 WorldNormal263_g169982 = temp_output_280_0_g169982;
				half4 localSampleStochastic3D263_g169982 = SampleStochastic3D( Texture263_g169982 , Sampler263_g169982 , Coords263_g169982 , WorldPosition263_g169982 , WorldNormal263_g169982 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g169971 = localSampleExtra275_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g169971 = localSamplePlanar2D238_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g169971 = localSamplePlanar3D246_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g169971 = localSampleStochastic2D234_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g169971 = localSampleStochastic3D263_g169982;
				#else
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#endif
				half4 Local_AlbedoTex185_g169971 = staticSwitch184_g169971;
				float3 lerpResult53_g169971 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g169971).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g169971 = lerpResult53_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169984) = _MainShaderTex;
				SamplerState Sampler276_g169984 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169984 = Local_Coords180_g169971;
				half4 Coords276_g169984 = temp_output_37_0_g169984;
				half2 TexCoord276_g169984 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169984 = SampleMain( Texture276_g169984 , Sampler276_g169984 , Coords276_g169984 , TexCoord276_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169984) = _MainShaderTex;
				SamplerState Sampler275_g169984 = sampler_Linear_Repeat;
				half4 Coords275_g169984 = temp_output_37_0_g169984;
				half2 TexCoord275_g169984 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169984 = SampleExtra( Texture275_g169984 , Sampler275_g169984 , Coords275_g169984 , TexCoord275_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169984) = _MainShaderTex;
				SamplerState Sampler238_g169984 = sampler_Linear_Repeat;
				half4 Coords238_g169984 = temp_output_37_0_g169984;
				float3 temp_output_279_0_g169984 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169984 = temp_output_279_0_g169984;
				half4 localSamplePlanar2D238_g169984 = SamplePlanar2D( Texture238_g169984 , Sampler238_g169984 , Coords238_g169984 , WorldPosition238_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169984) = _MainShaderTex;
				SamplerState Sampler246_g169984 = sampler_Linear_Repeat;
				half4 Coords246_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition246_g169984 = temp_output_279_0_g169984;
				float3 temp_output_280_0_g169984 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169984 = temp_output_280_0_g169984;
				half4 localSamplePlanar3D246_g169984 = SamplePlanar3D( Texture246_g169984 , Sampler246_g169984 , Coords246_g169984 , WorldPosition246_g169984 , WorldNormal246_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169984) = _MainShaderTex;
				SamplerState Sampler234_g169984 = sampler_Linear_Repeat;
				float4 Coords234_g169984 = temp_output_37_0_g169984;
				float3 WorldPosition234_g169984 = temp_output_279_0_g169984;
				float4 localSampleStochastic2D234_g169984 = SampleStochastic2D( Texture234_g169984 , Sampler234_g169984 , Coords234_g169984 , WorldPosition234_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169984) = _MainShaderTex;
				SamplerState Sampler263_g169984 = sampler_Linear_Repeat;
				half4 Coords263_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition263_g169984 = temp_output_279_0_g169984;
				half3 WorldNormal263_g169984 = temp_output_280_0_g169984;
				half4 localSampleStochastic3D263_g169984 = SampleStochastic3D( Texture263_g169984 , Sampler263_g169984 , Coords263_g169984 , WorldPosition263_g169984 , WorldNormal263_g169984 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g169971 = localSampleExtra275_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g169971 = localSamplePlanar2D238_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g169971 = localSamplePlanar3D246_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g169971 = localSampleStochastic2D234_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g169971 = localSampleStochastic3D263_g169984;
				#else
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#endif
				half4 Local_MasksTex199_g169971 = staticSwitch198_g169971;
				float lerpResult23_g169971 = lerp( 1.0 , (Local_MasksTex199_g169971).y , _MainOcclusionValue);
				float4 appendResult73_g169971 = (float4(( (Local_MasksTex199_g169971).x * _MainMetallicValue ) , lerpResult23_g169971 , (Local_MasksTex199_g169971).z , ( (Local_MasksTex199_g169971).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g169971 = appendResult73_g169971;
				float clampResult17_g169977 = clamp( (Local_Masks109_g169971).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g169978 = _MainMultiRemap.x;
				float temp_output_10_0_g169978 = ( _MainMultiRemap.y - temp_output_7_0_g169978 );
				half Local_MultiMask78_g169971 = saturate( ( ( clampResult17_g169977 - temp_output_7_0_g169978 ) / ( temp_output_10_0_g169978 + 0.0001 ) ) );
				float lerpResult58_g169971 = lerp( 1.0 , Local_MultiMask78_g169971 , _MainColorMode);
				float4 lerpResult62_g169971 = lerp( _MainColorTwo , _MainColor , lerpResult58_g169971);
				half3 Local_ColorRGB93_g169971 = (lerpResult62_g169971).rgb;
				half3 Local_Albedo139_g169971 = ( Local_AlbedoRGB107_g169971 * Local_ColorRGB93_g169971 );
				float3 In_Albedo3_g169981 = Local_Albedo139_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169983) = _MainNormalTex;
				SamplerState Sampler276_g169983 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169983 = Local_Coords180_g169971;
				half4 Coords276_g169983 = temp_output_37_0_g169983;
				half2 TexCoord276_g169983 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169983 = SampleMain( Texture276_g169983 , Sampler276_g169983 , Coords276_g169983 , TexCoord276_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169983) = _MainNormalTex;
				SamplerState Sampler275_g169983 = sampler_Linear_Repeat;
				half4 Coords275_g169983 = temp_output_37_0_g169983;
				half2 TexCoord275_g169983 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169983 = SampleExtra( Texture275_g169983 , Sampler275_g169983 , Coords275_g169983 , TexCoord275_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169983) = _MainNormalTex;
				SamplerState Sampler238_g169983 = sampler_Linear_Repeat;
				half4 Coords238_g169983 = temp_output_37_0_g169983;
				float3 temp_output_279_0_g169983 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169983 = temp_output_279_0_g169983;
				half4 localSamplePlanar2D238_g169983 = SamplePlanar2D( Texture238_g169983 , Sampler238_g169983 , Coords238_g169983 , WorldPosition238_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169983) = _MainNormalTex;
				SamplerState Sampler246_g169983 = sampler_Linear_Repeat;
				half4 Coords246_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition246_g169983 = temp_output_279_0_g169983;
				float3 temp_output_280_0_g169983 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169983 = temp_output_280_0_g169983;
				half4 localSamplePlanar3D246_g169983 = SamplePlanar3D( Texture246_g169983 , Sampler246_g169983 , Coords246_g169983 , WorldPosition246_g169983 , WorldNormal246_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169983) = _MainNormalTex;
				SamplerState Sampler234_g169983 = sampler_Linear_Repeat;
				float4 Coords234_g169983 = temp_output_37_0_g169983;
				float3 WorldPosition234_g169983 = temp_output_279_0_g169983;
				float4 localSampleStochastic2D234_g169983 = SampleStochastic2D( Texture234_g169983 , Sampler234_g169983 , Coords234_g169983 , WorldPosition234_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169983) = _MainNormalTex;
				SamplerState Sampler263_g169983 = sampler_Linear_Repeat;
				half4 Coords263_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition263_g169983 = temp_output_279_0_g169983;
				half3 WorldNormal263_g169983 = temp_output_280_0_g169983;
				half4 localSampleStochastic3D263_g169983 = SampleStochastic3D( Texture263_g169983 , Sampler263_g169983 , Coords263_g169983 , WorldPosition263_g169983 , WorldNormal263_g169983 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g169971 = localSampleExtra275_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g169971 = localSamplePlanar2D238_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g169971 = localSamplePlanar3D246_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g169971 = localSampleStochastic2D234_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g169971 = localSampleStochastic3D263_g169983;
				#else
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#endif
				half4 Local_NormaTex191_g169971 = staticSwitch193_g169971;
				half4 Normal_Packed45_g169973 = Local_NormaTex191_g169971;
				float2 appendResult58_g169973 = (float2(( (Normal_Packed45_g169973).x * (Normal_Packed45_g169973).w ) , (Normal_Packed45_g169973).y));
				half2 Normal_Default50_g169973 = appendResult58_g169973;
				half2 Normal_ASTC41_g169973 = (Normal_Packed45_g169973).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169973 = Normal_ASTC41_g169973;
				#else
				float2 staticSwitch38_g169973 = Normal_Default50_g169973;
				#endif
				half2 Normal_NO_DTX544_g169973 = (Normal_Packed45_g169973).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169973 = Normal_NO_DTX544_g169973;
				#else
				float2 staticSwitch37_g169973 = staticSwitch38_g169973;
				#endif
				float2 temp_output_26_0_g169971 = ( (staticSwitch37_g169973*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord8.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g169974 = temp_output_26_0_g169971;
				float2 break71_g169974 = Normal_Planar45_g169974;
				float3 appendResult72_g169974 = (float3(break71_g169974.x , 0.0 , break71_g169974.y));
				float2 temp_output_205_0_g169971 = (mul( ase_worldToTangent, appendResult72_g169974 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#else
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#endif
				half2 Local_NormalTS108_g169971 = staticSwitch204_g169971;
				float2 In_NormalTS3_g169981 = Local_NormalTS108_g169971;
				float3 appendResult68_g169975 = (float3(Local_NormalTS108_g169971 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g169975 = appendResult68_g169975;
				float3 worldNormal74_g169975 = normalize( float3(dot(tanToWorld0,tanNormal74_g169975), dot(tanToWorld1,tanNormal74_g169975), dot(tanToWorld2,tanNormal74_g169975)) );
				half3 Local_NormalWS250_g169971 = worldNormal74_g169975;
				float3 In_NormalWS3_g169981 = Local_NormalWS250_g169971;
				float4 In_Shader3_g169981 = Local_Masks109_g169971;
				float4 In_Emissive3_g169981 = half4(1,1,1,1);
				float3 temp_output_3_0_g169976 = Local_Albedo139_g169971;
				float dotResult20_g169976 = dot( temp_output_3_0_g169976 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g169971 = dotResult20_g169976;
				float In_Grayscale3_g169981 = Local_Grayscale110_g169971;
				float clampResult144_g169971 = clamp( saturate( ( Local_Grayscale110_g169971 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g169971 = clampResult144_g169971;
				float In_Luminosity3_g169981 = Local_Luminosity145_g169971;
				float In_MultiMask3_g169981 = Local_MultiMask78_g169971;
				float temp_output_187_0_g169971 = (Local_AlbedoTex185_g169971).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g169971 = ( temp_output_187_0_g169971 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g169971 = temp_output_187_0_g169971;
				#endif
				half Local_AlphaClip111_g169971 = staticSwitch236_g169971;
				float In_AlphaClip3_g169981 = Local_AlphaClip111_g169971;
				half Local_AlphaFade246_g169971 = (lerpResult62_g169971).a;
				float In_AlphaFade3_g169981 = Local_AlphaFade246_g169971;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g169981 = temp_cast_4;
				float In_Transmission3_g169981 = 1.0;
				float In_Thickness3_g169981 = 0.0;
				float In_Diffusion3_g169981 = 0.0;
				{
				Data3_g169981.Dummy = In_Dummy3_g169981;
				Data3_g169981.Albedo = In_Albedo3_g169981;
				Data3_g169981.NormalTS = In_NormalTS3_g169981;
				Data3_g169981.NormalWS = In_NormalWS3_g169981;
				Data3_g169981.Shader = In_Shader3_g169981;
				Data3_g169981.Emissive= In_Emissive3_g169981;
				Data3_g169981.MultiMask = In_MultiMask3_g169981;
				Data3_g169981.Grayscale = In_Grayscale3_g169981;
				Data3_g169981.Luminosity = In_Luminosity3_g169981;
				Data3_g169981.AlphaClip = In_AlphaClip3_g169981;
				Data3_g169981.AlphaFade = In_AlphaFade3_g169981;
				Data3_g169981.Translucency = In_Translucency3_g169981;
				Data3_g169981.Transmission = In_Transmission3_g169981;
				Data3_g169981.Thickness = In_Thickness3_g169981;
				Data3_g169981.Diffusion = In_Diffusion3_g169981;
				}
				TVEVisualData Data4_g170007 = Data3_g169981;
				float Out_Dummy4_g170007 = 0;
				float3 Out_Albedo4_g170007 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170007 = float2( 0,0 );
				float3 Out_NormalWS4_g170007 = float3( 0,0,0 );
				float4 Out_Shader4_g170007 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170007 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170007 = 0;
				float Out_Grayscale4_g170007 = 0;
				float Out_Luminosity4_g170007 = 0;
				float Out_AlphaClip4_g170007 = 0;
				float Out_AlphaFade4_g170007 = 0;
				float3 Out_Translucency4_g170007 = float3( 0,0,0 );
				float Out_Transmission4_g170007 = 0;
				float Out_Thickness4_g170007 = 0;
				float Out_Diffusion4_g170007 = 0;
				{
				Out_Dummy4_g170007 = Data4_g170007.Dummy;
				Out_Albedo4_g170007 = Data4_g170007.Albedo;
				Out_NormalTS4_g170007 = Data4_g170007.NormalTS;
				Out_NormalWS4_g170007 = Data4_g170007.NormalWS;
				Out_Shader4_g170007 = Data4_g170007.Shader;
				Out_Emissive4_g170007= Data4_g170007.Emissive;
				Out_MultiMask4_g170007 = Data4_g170007.MultiMask;
				Out_Grayscale4_g170007 = Data4_g170007.Grayscale;
				Out_Luminosity4_g170007= Data4_g170007.Luminosity;
				Out_AlphaClip4_g170007 = Data4_g170007.AlphaClip;
				Out_AlphaFade4_g170007 = Data4_g170007.AlphaFade;
				Out_Translucency4_g170007 = Data4_g170007.Translucency;
				Out_Transmission4_g170007 = Data4_g170007.Transmission;
				Out_Thickness4_g170007 = Data4_g170007.Thickness;
				Out_Diffusion4_g170007 = Data4_g170007.Diffusion;
				}
				half3 Visual_Albedo527_g169993 = Out_Albedo4_g170007;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169994) = _SecondAlbedoTex;
				SamplerState Sampler276_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g169993 = _second_coord_value;
				float4 temp_output_37_0_g169994 = Local_LayerCoords790_g169993;
				half4 Coords276_g169994 = temp_output_37_0_g169994;
				half2 TexCoord276_g169994 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169994 = SampleMain( Texture276_g169994 , Sampler276_g169994 , Coords276_g169994 , TexCoord276_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169994) = _SecondAlbedoTex;
				SamplerState Sampler275_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169994 = temp_output_37_0_g169994;
				half2 TexCoord275_g169994 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169994 = SampleExtra( Texture275_g169994 , Sampler275_g169994 , Coords275_g169994 , TexCoord275_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169994) = _SecondAlbedoTex;
				SamplerState Sampler238_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169994 = temp_output_37_0_g169994;
				TVEModelData Data15_g170005 = Data16_g169262;
				float Out_Dummy15_g170005 = 0;
				float3 Out_PositionOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170005 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170005 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170005 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170005 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170005 = float3( 0,0,0 );
				float4 Out_VertexData15_g170005 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170005 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170005 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170005 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170005 = Data15_g170005.Dummy;
				Out_PositionOS15_g170005 = Data15_g170005.PositionOS;
				Out_PositionWS15_g170005 = Data15_g170005.PositionWS;
				Out_PositionWO15_g170005 = Data15_g170005.PositionWO;
				Out_PositionRawOS15_g170005 = Data15_g170005.PositionRawOS;
				Out_PositionAddOS15_g170005 = Data15_g170005.PositionAddOS;
				Out_PivotOS15_g170005 = Data15_g170005.PivotOS;
				Out_PivotWS15_g170005 = Data15_g170005.PivotWS;
				Out_PivotWO15_g170005 = Data15_g170005.PivotWO;
				Out_NormalOS15_g170005 = Data15_g170005.NormalOS;
				Out_NormalWS15_g170005 = Data15_g170005.NormalWS;
				Out_NormalRawOS15_g170005 = Data15_g170005.NormalRawOS;
				Out_NormalRawWS15_g170005 = Data15_g170005.NormalRawWS;
				Out_TangentOS15_g170005 = Data15_g170005.TangentOS;
				Out_ViewDirWS15_g170005 = Data15_g170005.ViewDirWS;
				Out_VertexData15_g170005 = Data15_g170005.VertexData;
				Out_MotionData15_g170005 = Data15_g170005.MotionData;
				Out_BoundsData15_g170005 = Data15_g170005.BoundsData;
				Out_RotationData15_g170005 = Data15_g170005.RotationData;
				}
				half3 Model_PositionWO636_g169993 = Out_PositionWO15_g170005;
				float3 temp_output_279_0_g169994 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169994 = temp_output_279_0_g169994;
				half4 localSamplePlanar2D238_g169994 = SamplePlanar2D( Texture238_g169994 , Sampler238_g169994 , Coords238_g169994 , WorldPosition238_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169994) = _SecondAlbedoTex;
				SamplerState Sampler246_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition246_g169994 = temp_output_279_0_g169994;
				half3 Model_NormalWS869_g169993 = Out_NormalWS15_g170005;
				float3 temp_output_280_0_g169994 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169994 = temp_output_280_0_g169994;
				half4 localSamplePlanar3D246_g169994 = SamplePlanar3D( Texture246_g169994 , Sampler246_g169994 , Coords246_g169994 , WorldPosition246_g169994 , WorldNormal246_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169994) = _SecondAlbedoTex;
				SamplerState Sampler234_g169994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169994 = temp_output_37_0_g169994;
				float3 WorldPosition234_g169994 = temp_output_279_0_g169994;
				float4 localSampleStochastic2D234_g169994 = SampleStochastic2D( Texture234_g169994 , Sampler234_g169994 , Coords234_g169994 , WorldPosition234_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169994) = _SecondAlbedoTex;
				SamplerState Sampler263_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition263_g169994 = temp_output_279_0_g169994;
				half3 WorldNormal263_g169994 = temp_output_280_0_g169994;
				half4 localSampleStochastic3D263_g169994 = SampleStochastic3D( Texture263_g169994 , Sampler263_g169994 , Coords263_g169994 , WorldPosition263_g169994 , WorldNormal263_g169994 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g169993 = localSampleExtra275_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g169993 = localSamplePlanar2D238_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g169993 = localSamplePlanar3D246_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g169993 = localSampleStochastic2D234_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g169993 = localSampleStochastic3D263_g169994;
				#else
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#endif
				half4 Local_AlbedoTex777_g169993 = staticSwitch693_g169993;
				float3 lerpResult716_g169993 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g169993).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g169993 = lerpResult716_g169993;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169996) = _SecondShaderTex;
				SamplerState Sampler276_g169996 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169996 = Local_LayerCoords790_g169993;
				half4 Coords276_g169996 = temp_output_37_0_g169996;
				half2 TexCoord276_g169996 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169996 = SampleMain( Texture276_g169996 , Sampler276_g169996 , Coords276_g169996 , TexCoord276_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169996) = _SecondShaderTex;
				SamplerState Sampler275_g169996 = sampler_Linear_Repeat;
				half4 Coords275_g169996 = temp_output_37_0_g169996;
				half2 TexCoord275_g169996 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169996 = SampleExtra( Texture275_g169996 , Sampler275_g169996 , Coords275_g169996 , TexCoord275_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169996) = _SecondShaderTex;
				SamplerState Sampler238_g169996 = sampler_Linear_Repeat;
				half4 Coords238_g169996 = temp_output_37_0_g169996;
				float3 temp_output_279_0_g169996 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169996 = temp_output_279_0_g169996;
				half4 localSamplePlanar2D238_g169996 = SamplePlanar2D( Texture238_g169996 , Sampler238_g169996 , Coords238_g169996 , WorldPosition238_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169996) = _SecondShaderTex;
				SamplerState Sampler246_g169996 = sampler_Linear_Repeat;
				half4 Coords246_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition246_g169996 = temp_output_279_0_g169996;
				float3 temp_output_280_0_g169996 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169996 = temp_output_280_0_g169996;
				half4 localSamplePlanar3D246_g169996 = SamplePlanar3D( Texture246_g169996 , Sampler246_g169996 , Coords246_g169996 , WorldPosition246_g169996 , WorldNormal246_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169996) = _SecondShaderTex;
				SamplerState Sampler234_g169996 = sampler_Linear_Repeat;
				float4 Coords234_g169996 = temp_output_37_0_g169996;
				float3 WorldPosition234_g169996 = temp_output_279_0_g169996;
				float4 localSampleStochastic2D234_g169996 = SampleStochastic2D( Texture234_g169996 , Sampler234_g169996 , Coords234_g169996 , WorldPosition234_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169996) = _SecondShaderTex;
				SamplerState Sampler263_g169996 = sampler_Linear_Repeat;
				half4 Coords263_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition263_g169996 = temp_output_279_0_g169996;
				half3 WorldNormal263_g169996 = temp_output_280_0_g169996;
				half4 localSampleStochastic3D263_g169996 = SampleStochastic3D( Texture263_g169996 , Sampler263_g169996 , Coords263_g169996 , WorldPosition263_g169996 , WorldNormal263_g169996 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g169993 = localSampleExtra275_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g169993 = localSamplePlanar2D238_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g169993 = localSamplePlanar3D246_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g169993 = localSampleStochastic2D234_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g169993 = localSampleStochastic3D263_g169996;
				#else
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#endif
				half4 Local_ShaderTex775_g169993 = staticSwitch722_g169993;
				float lerpResult739_g169993 = lerp( 1.0 , (Local_ShaderTex775_g169993).y , _SecondOcclusionValue);
				float4 appendResult749_g169993 = (float4(( (Local_ShaderTex775_g169993).x * _SecondMetallicValue ) , lerpResult739_g169993 , (Local_ShaderTex775_g169993).z , ( (Local_ShaderTex775_g169993).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g169993 = appendResult749_g169993;
				float clampResult17_g170000 = clamp( (Local_Masks750_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170001 = _SecondMultiRemap.x;
				float temp_output_10_0_g170001 = ( _SecondMultiRemap.y - temp_output_7_0_g170001 );
				float temp_output_765_0_g169993 = saturate( ( ( clampResult17_g170000 - temp_output_7_0_g170001 ) / ( temp_output_10_0_g170001 + 0.0001 ) ) );
				half Local_MultiMask767_g169993 = temp_output_765_0_g169993;
				float lerpResult705_g169993 = lerp( 1.0 , Local_MultiMask767_g169993 , _SecondColorMode);
				float4 lerpResult706_g169993 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g169993);
				half3 Local_ColorRGB774_g169993 = (lerpResult706_g169993).rgb;
				half3 Local_Albedo768_g169993 = ( Local_AlbedoRGB771_g169993 * Local_ColorRGB774_g169993 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170020 = 2.0;
				#else
				float staticSwitch1_g170020 = 4.594794;
				#endif
				float3 lerpResult985_g169993 = lerp( Local_Albedo768_g169993 , ( Visual_Albedo527_g169993 * Local_Albedo768_g169993 * staticSwitch1_g170020 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169997) = _SecondMaskTex;
				SamplerState Sampler276_g169997 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g169993 = _second_mask_coord_value;
				float4 temp_output_37_0_g169997 = Local_BlendCoords813_g169993;
				half4 Coords276_g169997 = temp_output_37_0_g169997;
				half2 TexCoord276_g169997 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169997 = SampleMain( Texture276_g169997 , Sampler276_g169997 , Coords276_g169997 , TexCoord276_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169997) = _SecondMaskTex;
				SamplerState Sampler275_g169997 = sampler_Linear_Repeat;
				half4 Coords275_g169997 = temp_output_37_0_g169997;
				half2 TexCoord275_g169997 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169997 = SampleExtra( Texture275_g169997 , Sampler275_g169997 , Coords275_g169997 , TexCoord275_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169997) = _SecondMaskTex;
				SamplerState Sampler238_g169997 = sampler_Linear_Repeat;
				half4 Coords238_g169997 = temp_output_37_0_g169997;
				float3 temp_output_279_0_g169997 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169997 = temp_output_279_0_g169997;
				half4 localSamplePlanar2D238_g169997 = SamplePlanar2D( Texture238_g169997 , Sampler238_g169997 , Coords238_g169997 , WorldPosition238_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169997) = _SecondMaskTex;
				SamplerState Sampler246_g169997 = sampler_Linear_Repeat;
				half4 Coords246_g169997 = temp_output_37_0_g169997;
				half3 WorldPosition246_g169997 = temp_output_279_0_g169997;
				float3 temp_output_280_0_g169997 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169997 = temp_output_280_0_g169997;
				half4 localSamplePlanar3D246_g169997 = SamplePlanar3D( Texture246_g169997 , Sampler246_g169997 , Coords246_g169997 , WorldPosition246_g169997 , WorldNormal246_g169997 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g169993 = localSampleExtra275_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g169993 = localSamplePlanar2D238_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g169993 = localSamplePlanar3D246_g169997;
				#else
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#endif
				half4 Local_MaskTex861_g169993 = staticSwitch817_g169993;
				float clampResult17_g170011 = clamp( (Local_MaskTex861_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170010 = _SecondMaskRemap.x;
				float temp_output_10_0_g170010 = ( _SecondMaskRemap.y - temp_output_7_0_g170010 );
				float lerpResult1015_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170011 - temp_output_7_0_g170010 ) / ( temp_output_10_0_g170010 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g169993 = lerpResult1015_g169993;
				half3 Visual_NormalWS951_g169993 = Out_NormalWS4_g170007;
				float clampResult17_g170012 = clamp( saturate( (Visual_NormalWS951_g169993).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170013 = _SecondProjRemap.x;
				float temp_output_10_0_g170013 = ( _SecondProjRemap.y - temp_output_7_0_g170013 );
				float lerpResult996_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170012 - temp_output_7_0_g170013 ) / ( temp_output_10_0_g170013 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g169993 = lerpResult996_g169993;
				half4 Model_VertexMasks964_g169993 = Out_VertexData15_g170005;
				float4 break965_g169993 = Model_VertexMasks964_g169993;
				float4 break33_g170014 = _second_vert_mode;
				float temp_output_30_0_g170014 = ( break965_g169993.x * break33_g170014.x );
				float temp_output_29_0_g170014 = ( break965_g169993.y * break33_g170014.y );
				float temp_output_31_0_g170014 = ( break965_g169993.z * break33_g170014.z );
				float temp_output_28_0_g170014 = ( temp_output_30_0_g170014 + temp_output_29_0_g170014 + temp_output_31_0_g170014 + ( break965_g169993.w * break33_g170014.w ) );
				float clampResult17_g170008 = clamp( temp_output_28_0_g170014 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170009 = _SecondMeshRemap.x;
				float temp_output_10_0_g170009 = ( _SecondMeshRemap.y - temp_output_7_0_g170009 );
				float lerpResult1017_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170008 - temp_output_7_0_g170009 ) / ( temp_output_10_0_g170009 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170022 = lerpResult1017_g169993;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170022 = ( temp_output_6_0_g170022 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170022 = temp_output_6_0_g170022;
				#endif
				float temp_output_987_0_g169993 = staticSwitch14_g170022;
				half Blend_VertMask918_g169993 = temp_output_987_0_g169993;
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170006 = Data204_g169264;
				float Out_Dummy15_g170006 = 0;
				float4 Out_CoatParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170006 = Data15_g170006.Dummy;
				Out_CoatParams15_g170006 = Data15_g170006.CoatParams;
				Out_PaintParams15_g170006 = Data15_g170006.PaintParams;
				Out_GlowParams15_g170006 = Data15_g170006.GlowParams;
				Out_AtmoParams15_g170006= Data15_g170006.AtmoParams;
				Out_FadeParams15_g170006= Data15_g170006.FadeParams;
				Out_FormParams15_g170006 = Data15_g170006.FormParams;
				Out_LandParams15_g170006 = Data15_g170006.LandParams;
				Out_WindParams15_g170006 = Data15_g170006.WindParams;
				Out_PushParams15_g170006 = Data15_g170006.PushParams;
				}
				half4 Global_CoatParams975_g169993 = Out_CoatParams15_g170006;
				float lerpResult1013_g169993 = lerp( 1.0 , (Global_CoatParams975_g169993).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g169993 = lerpResult1013_g169993;
				#else
				float staticSwitch971_g169993 = 1.0;
				#endif
				half Blend_GlobalMask972_g169993 = staticSwitch971_g169993;
				float temp_output_432_0_g169993 = ( _SecondIntensityValue * Blend_TexMask429_g169993 * Blend_ProjMask434_g169993 * Blend_VertMask918_g169993 * Blend_GlobalMask972_g169993 );
				float clampResult17_g170016 = clamp( temp_output_432_0_g169993 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170015 = _SecondBlendRemap.x;
				float temp_output_10_0_g170015 = ( _SecondBlendRemap.y - temp_output_7_0_g170015 );
				half Blend_Mask412_g169993 = ( saturate( ( ( clampResult17_g170016 - temp_output_7_0_g170015 ) / ( temp_output_10_0_g170015 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g169993 = lerp( Visual_Albedo527_g169993 , lerpResult985_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g169993 = lerpResult403_g169993;
				#else
				float3 staticSwitch415_g169993 = Visual_Albedo527_g169993;
				#endif
				half3 Final_Albedo601_g169993 = staticSwitch415_g169993;
				float3 In_Albedo3_g170004 = Final_Albedo601_g169993;
				half2 Visual_NormalTS529_g169993 = Out_NormalTS4_g170007;
				float2 lerpResult40_g170018 = lerp( float2( 0,0 ) , Visual_NormalTS529_g169993 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169995) = _SecondNormalTex;
				SamplerState Sampler276_g169995 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169995 = Local_LayerCoords790_g169993;
				half4 Coords276_g169995 = temp_output_37_0_g169995;
				half2 TexCoord276_g169995 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g169995 = SampleMain( Texture276_g169995 , Sampler276_g169995 , Coords276_g169995 , TexCoord276_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169995) = _SecondNormalTex;
				SamplerState Sampler275_g169995 = sampler_Linear_Repeat;
				half4 Coords275_g169995 = temp_output_37_0_g169995;
				half2 TexCoord275_g169995 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g169995 = SampleExtra( Texture275_g169995 , Sampler275_g169995 , Coords275_g169995 , TexCoord275_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169995) = _SecondNormalTex;
				SamplerState Sampler238_g169995 = sampler_Linear_Repeat;
				half4 Coords238_g169995 = temp_output_37_0_g169995;
				float3 temp_output_279_0_g169995 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169995 = temp_output_279_0_g169995;
				half4 localSamplePlanar2D238_g169995 = SamplePlanar2D( Texture238_g169995 , Sampler238_g169995 , Coords238_g169995 , WorldPosition238_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169995) = _SecondNormalTex;
				SamplerState Sampler246_g169995 = sampler_Linear_Repeat;
				half4 Coords246_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition246_g169995 = temp_output_279_0_g169995;
				float3 temp_output_280_0_g169995 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169995 = temp_output_280_0_g169995;
				half4 localSamplePlanar3D246_g169995 = SamplePlanar3D( Texture246_g169995 , Sampler246_g169995 , Coords246_g169995 , WorldPosition246_g169995 , WorldNormal246_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169995) = _SecondNormalTex;
				SamplerState Sampler234_g169995 = sampler_Linear_Repeat;
				float4 Coords234_g169995 = temp_output_37_0_g169995;
				float3 WorldPosition234_g169995 = temp_output_279_0_g169995;
				float4 localSampleStochastic2D234_g169995 = SampleStochastic2D( Texture234_g169995 , Sampler234_g169995 , Coords234_g169995 , WorldPosition234_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169995) = _SecondNormalTex;
				SamplerState Sampler263_g169995 = sampler_Linear_Repeat;
				half4 Coords263_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition263_g169995 = temp_output_279_0_g169995;
				half3 WorldNormal263_g169995 = temp_output_280_0_g169995;
				half4 localSampleStochastic3D263_g169995 = SampleStochastic3D( Texture263_g169995 , Sampler263_g169995 , Coords263_g169995 , WorldPosition263_g169995 , WorldNormal263_g169995 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g169993 = localSampleExtra275_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g169993 = localSamplePlanar2D238_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g169993 = localSamplePlanar3D246_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g169993 = localSampleStochastic2D234_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g169993 = localSampleStochastic3D263_g169995;
				#else
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#endif
				half4 Local_NormalTex776_g169993 = staticSwitch698_g169993;
				half4 Normal_Packed45_g169998 = Local_NormalTex776_g169993;
				float2 appendResult58_g169998 = (float2(( (Normal_Packed45_g169998).x * (Normal_Packed45_g169998).w ) , (Normal_Packed45_g169998).y));
				half2 Normal_Default50_g169998 = appendResult58_g169998;
				half2 Normal_ASTC41_g169998 = (Normal_Packed45_g169998).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169998 = Normal_ASTC41_g169998;
				#else
				float2 staticSwitch38_g169998 = Normal_Default50_g169998;
				#endif
				half2 Normal_NO_DTX544_g169998 = (Normal_Packed45_g169998).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169998 = Normal_NO_DTX544_g169998;
				#else
				float2 staticSwitch37_g169998 = staticSwitch38_g169998;
				#endif
				float2 temp_output_724_0_g169993 = ( (staticSwitch37_g169998*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g169999 = temp_output_724_0_g169993;
				float2 break71_g169999 = Normal_Planar45_g169999;
				float3 appendResult72_g169999 = (float3(break71_g169999.x , 0.0 , break71_g169999.y));
				float2 temp_output_858_0_g169993 = (mul( ase_worldToTangent, appendResult72_g169999 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#else
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#endif
				half2 Local_NormalTS729_g169993 = staticSwitch727_g169993;
				float2 temp_output_36_0_g170018 = ( lerpResult40_g170018 + Local_NormalTS729_g169993 );
				float2 lerpResult405_g169993 = lerp( Visual_NormalTS529_g169993 , temp_output_36_0_g170018 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g169993 = lerpResult405_g169993;
				#else
				float2 staticSwitch418_g169993 = Visual_NormalTS529_g169993;
				#endif
				half2 Final_NormalTS612_g169993 = staticSwitch418_g169993;
				float2 In_NormalTS3_g170004 = Final_NormalTS612_g169993;
				float3 appendResult68_g170019 = (float3(Final_NormalTS612_g169993 , 1.0));
				float3 tanNormal74_g170019 = appendResult68_g170019;
				float3 worldNormal74_g170019 = normalize( float3(dot(tanToWorld0,tanNormal74_g170019), dot(tanToWorld1,tanNormal74_g170019), dot(tanToWorld2,tanNormal74_g170019)) );
				half3 Final_NormalWS950_g169993 = worldNormal74_g170019;
				float3 In_NormalWS3_g170004 = Final_NormalWS950_g169993;
				half4 Visual_Shader531_g169993 = Out_Shader4_g170007;
				float4 lerpResult994_g169993 = lerp( Local_Masks750_g169993 , ( Visual_Shader531_g169993 * Local_Masks750_g169993 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g169993 = lerp( Visual_Shader531_g169993 , lerpResult994_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g169993 = lerpResult440_g169993;
				#else
				float4 staticSwitch451_g169993 = Visual_Shader531_g169993;
				#endif
				half4 Final_Masks613_g169993 = staticSwitch451_g169993;
				float4 In_Shader3_g170004 = Final_Masks613_g169993;
				float4 In_Emissive3_g170004 = Out_Emissive4_g170007;
				float3 temp_output_3_0_g170021 = Final_Albedo601_g169993;
				float dotResult20_g170021 = dot( temp_output_3_0_g170021 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g169993 = dotResult20_g170021;
				float In_Grayscale3_g170004 = Final_Grayscale615_g169993;
				float clampResult651_g169993 = clamp( saturate( ( Final_Grayscale615_g169993 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g169993 = clampResult651_g169993;
				float In_Luminosity3_g170004 = Final_Luminosity652_g169993;
				half Visual_MultiMask547_g169993 = Out_MultiMask4_g170007;
				float lerpResult477_g169993 = lerp( Visual_MultiMask547_g169993 , Local_MultiMask767_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch482_g169993 = lerpResult477_g169993;
				#else
				float staticSwitch482_g169993 = Visual_MultiMask547_g169993;
				#endif
				half Final_MultiMask572_g169993 = staticSwitch482_g169993;
				float In_MultiMask3_g170004 = Final_MultiMask572_g169993;
				half Visual_AlphaClip559_g169993 = Out_AlphaClip4_g170007;
				float temp_output_718_0_g169993 = (Local_AlbedoTex777_g169993).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g169993 = ( temp_output_718_0_g169993 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g169993 = temp_output_718_0_g169993;
				#endif
				half Local_AlphaClip772_g169993 = staticSwitch932_g169993;
				float lerpResult448_g169993 = lerp( Visual_AlphaClip559_g169993 , Local_AlphaClip772_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch564_g169993 = lerpResult448_g169993;
				#else
				float staticSwitch564_g169993 = Visual_AlphaClip559_g169993;
				#endif
				half Final_AlphaClip602_g169993 = staticSwitch564_g169993;
				float In_AlphaClip3_g170004 = Final_AlphaClip602_g169993;
				half Visual_AlphaFade588_g169993 = Out_AlphaFade4_g170007;
				half Local_AlphaFade773_g169993 = (lerpResult706_g169993).a;
				float lerpResult604_g169993 = lerp( Visual_AlphaFade588_g169993 , Local_AlphaFade773_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch608_g169993 = lerpResult604_g169993;
				#else
				float staticSwitch608_g169993 = Visual_AlphaFade588_g169993;
				#endif
				half Final_AlphaFade611_g169993 = staticSwitch608_g169993;
				float In_AlphaFade3_g170004 = Final_AlphaFade611_g169993;
				float3 In_Translucency3_g170004 = Out_Translucency4_g170007;
				float In_Transmission3_g170004 = Out_Transmission4_g170007;
				float In_Thickness3_g170004 = Out_Thickness4_g170007;
				float In_Diffusion3_g170004 = Out_Diffusion4_g170007;
				{
				Data3_g170004.Dummy = In_Dummy3_g170004;
				Data3_g170004.Albedo = In_Albedo3_g170004;
				Data3_g170004.NormalTS = In_NormalTS3_g170004;
				Data3_g170004.NormalWS = In_NormalWS3_g170004;
				Data3_g170004.Shader = In_Shader3_g170004;
				Data3_g170004.Emissive= In_Emissive3_g170004;
				Data3_g170004.MultiMask = In_MultiMask3_g170004;
				Data3_g170004.Grayscale = In_Grayscale3_g170004;
				Data3_g170004.Luminosity = In_Luminosity3_g170004;
				Data3_g170004.AlphaClip = In_AlphaClip3_g170004;
				Data3_g170004.AlphaFade = In_AlphaFade3_g170004;
				Data3_g170004.Translucency = In_Translucency3_g170004;
				Data3_g170004.Transmission = In_Transmission3_g170004;
				Data3_g170004.Thickness = In_Thickness3_g170004;
				Data3_g170004.Diffusion = In_Diffusion3_g170004;
				}
				TVEVisualData Data4_g170049 = Data3_g170004;
				float Out_Dummy4_g170049 = 0;
				float3 Out_Albedo4_g170049 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170049 = float2( 0,0 );
				float3 Out_NormalWS4_g170049 = float3( 0,0,0 );
				float4 Out_Shader4_g170049 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170049 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170049 = 0;
				float Out_Grayscale4_g170049 = 0;
				float Out_Luminosity4_g170049 = 0;
				float Out_AlphaClip4_g170049 = 0;
				float Out_AlphaFade4_g170049 = 0;
				float3 Out_Translucency4_g170049 = float3( 0,0,0 );
				float Out_Transmission4_g170049 = 0;
				float Out_Thickness4_g170049 = 0;
				float Out_Diffusion4_g170049 = 0;
				{
				Out_Dummy4_g170049 = Data4_g170049.Dummy;
				Out_Albedo4_g170049 = Data4_g170049.Albedo;
				Out_NormalTS4_g170049 = Data4_g170049.NormalTS;
				Out_NormalWS4_g170049 = Data4_g170049.NormalWS;
				Out_Shader4_g170049 = Data4_g170049.Shader;
				Out_Emissive4_g170049= Data4_g170049.Emissive;
				Out_MultiMask4_g170049 = Data4_g170049.MultiMask;
				Out_Grayscale4_g170049 = Data4_g170049.Grayscale;
				Out_Luminosity4_g170049= Data4_g170049.Luminosity;
				Out_AlphaClip4_g170049 = Data4_g170049.AlphaClip;
				Out_AlphaFade4_g170049 = Data4_g170049.AlphaFade;
				Out_Translucency4_g170049 = Data4_g170049.Translucency;
				Out_Transmission4_g170049 = Data4_g170049.Transmission;
				Out_Thickness4_g170049 = Data4_g170049.Thickness;
				Out_Diffusion4_g170049 = Data4_g170049.Diffusion;
				}
				half3 Visual_Albedo527_g170033 = Out_Albedo4_g170049;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170033 = _third_coord_value;
				float4 temp_output_37_0_g170034 = Local_LayerCoords790_g170033;
				half4 Coords276_g170034 = temp_output_37_0_g170034;
				half2 TexCoord276_g170034 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170034 = SampleMain( Texture276_g170034 , Sampler276_g170034 , Coords276_g170034 , TexCoord276_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170034 = temp_output_37_0_g170034;
				half2 TexCoord275_g170034 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170034 = SampleExtra( Texture275_g170034 , Sampler275_g170034 , Coords275_g170034 , TexCoord275_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170034 = temp_output_37_0_g170034;
				TVEModelData Data15_g170061 = Data16_g169262;
				float Out_Dummy15_g170061 = 0;
				float3 Out_PositionOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170061 = float3( 0,0,0 );
				float4 Out_VertexData15_g170061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170061 = Data15_g170061.Dummy;
				Out_PositionOS15_g170061 = Data15_g170061.PositionOS;
				Out_PositionWS15_g170061 = Data15_g170061.PositionWS;
				Out_PositionWO15_g170061 = Data15_g170061.PositionWO;
				Out_PositionRawOS15_g170061 = Data15_g170061.PositionRawOS;
				Out_PositionAddOS15_g170061 = Data15_g170061.PositionAddOS;
				Out_PivotOS15_g170061 = Data15_g170061.PivotOS;
				Out_PivotWS15_g170061 = Data15_g170061.PivotWS;
				Out_PivotWO15_g170061 = Data15_g170061.PivotWO;
				Out_NormalOS15_g170061 = Data15_g170061.NormalOS;
				Out_NormalWS15_g170061 = Data15_g170061.NormalWS;
				Out_NormalRawOS15_g170061 = Data15_g170061.NormalRawOS;
				Out_NormalRawWS15_g170061 = Data15_g170061.NormalRawWS;
				Out_TangentOS15_g170061 = Data15_g170061.TangentOS;
				Out_ViewDirWS15_g170061 = Data15_g170061.ViewDirWS;
				Out_VertexData15_g170061 = Data15_g170061.VertexData;
				Out_MotionData15_g170061 = Data15_g170061.MotionData;
				Out_BoundsData15_g170061 = Data15_g170061.BoundsData;
				Out_RotationData15_g170061 = Data15_g170061.RotationData;
				}
				half3 Model_PositionWO636_g170033 = Out_PositionWO15_g170061;
				float3 temp_output_279_0_g170034 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170034 = temp_output_279_0_g170034;
				half4 localSamplePlanar2D238_g170034 = SamplePlanar2D( Texture238_g170034 , Sampler238_g170034 , Coords238_g170034 , WorldPosition238_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition246_g170034 = temp_output_279_0_g170034;
				half3 Model_NormalWS869_g170033 = Out_NormalWS15_g170061;
				float3 temp_output_280_0_g170034 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170034 = temp_output_280_0_g170034;
				half4 localSamplePlanar3D246_g170034 = SamplePlanar3D( Texture246_g170034 , Sampler246_g170034 , Coords246_g170034 , WorldPosition246_g170034 , WorldNormal246_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170034 = temp_output_37_0_g170034;
				float3 WorldPosition234_g170034 = temp_output_279_0_g170034;
				float4 localSampleStochastic2D234_g170034 = SampleStochastic2D( Texture234_g170034 , Sampler234_g170034 , Coords234_g170034 , WorldPosition234_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition263_g170034 = temp_output_279_0_g170034;
				half3 WorldNormal263_g170034 = temp_output_280_0_g170034;
				half4 localSampleStochastic3D263_g170034 = SampleStochastic3D( Texture263_g170034 , Sampler263_g170034 , Coords263_g170034 , WorldPosition263_g170034 , WorldNormal263_g170034 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170033 = localSampleExtra275_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170033 = localSamplePlanar2D238_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170033 = localSamplePlanar3D246_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170033 = localSampleStochastic2D234_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170033 = localSampleStochastic3D263_g170034;
				#else
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#endif
				half4 Local_AlbedoTex777_g170033 = staticSwitch693_g170033;
				float3 lerpResult716_g170033 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170033).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170033 = lerpResult716_g170033;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170036) = _ThirdShaderTex;
				SamplerState Sampler276_g170036 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170036 = Local_LayerCoords790_g170033;
				half4 Coords276_g170036 = temp_output_37_0_g170036;
				half2 TexCoord276_g170036 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170036 = SampleMain( Texture276_g170036 , Sampler276_g170036 , Coords276_g170036 , TexCoord276_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170036) = _ThirdShaderTex;
				SamplerState Sampler275_g170036 = sampler_Linear_Repeat;
				half4 Coords275_g170036 = temp_output_37_0_g170036;
				half2 TexCoord275_g170036 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170036 = SampleExtra( Texture275_g170036 , Sampler275_g170036 , Coords275_g170036 , TexCoord275_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170036) = _ThirdShaderTex;
				SamplerState Sampler238_g170036 = sampler_Linear_Repeat;
				half4 Coords238_g170036 = temp_output_37_0_g170036;
				float3 temp_output_279_0_g170036 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170036 = temp_output_279_0_g170036;
				half4 localSamplePlanar2D238_g170036 = SamplePlanar2D( Texture238_g170036 , Sampler238_g170036 , Coords238_g170036 , WorldPosition238_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170036) = _ThirdShaderTex;
				SamplerState Sampler246_g170036 = sampler_Linear_Repeat;
				half4 Coords246_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition246_g170036 = temp_output_279_0_g170036;
				float3 temp_output_280_0_g170036 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170036 = temp_output_280_0_g170036;
				half4 localSamplePlanar3D246_g170036 = SamplePlanar3D( Texture246_g170036 , Sampler246_g170036 , Coords246_g170036 , WorldPosition246_g170036 , WorldNormal246_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170036) = _ThirdShaderTex;
				SamplerState Sampler234_g170036 = sampler_Linear_Repeat;
				float4 Coords234_g170036 = temp_output_37_0_g170036;
				float3 WorldPosition234_g170036 = temp_output_279_0_g170036;
				float4 localSampleStochastic2D234_g170036 = SampleStochastic2D( Texture234_g170036 , Sampler234_g170036 , Coords234_g170036 , WorldPosition234_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170036) = _ThirdShaderTex;
				SamplerState Sampler263_g170036 = sampler_Linear_Repeat;
				half4 Coords263_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition263_g170036 = temp_output_279_0_g170036;
				half3 WorldNormal263_g170036 = temp_output_280_0_g170036;
				half4 localSampleStochastic3D263_g170036 = SampleStochastic3D( Texture263_g170036 , Sampler263_g170036 , Coords263_g170036 , WorldPosition263_g170036 , WorldNormal263_g170036 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170033 = localSampleExtra275_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170033 = localSamplePlanar2D238_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170033 = localSamplePlanar3D246_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170033 = localSampleStochastic2D234_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170033 = localSampleStochastic3D263_g170036;
				#else
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#endif
				half4 Local_ShaderTex775_g170033 = staticSwitch722_g170033;
				float lerpResult739_g170033 = lerp( 1.0 , (Local_ShaderTex775_g170033).y , _ThirdOcclusionValue);
				float4 appendResult749_g170033 = (float4(( (Local_ShaderTex775_g170033).x * _ThirdMetallicValue ) , lerpResult739_g170033 , (Local_ShaderTex775_g170033).z , ( (Local_ShaderTex775_g170033).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170033 = appendResult749_g170033;
				float clampResult17_g170039 = clamp( (Local_Masks750_g170033).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170040 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170040 = ( _ThirdMultiRemap.y - temp_output_7_0_g170040 );
				float temp_output_765_0_g170033 = saturate( ( ( clampResult17_g170039 - temp_output_7_0_g170040 ) / ( temp_output_10_0_g170040 + 0.0001 ) ) );
				half Local_MultiMask767_g170033 = temp_output_765_0_g170033;
				float lerpResult705_g170033 = lerp( 1.0 , Local_MultiMask767_g170033 , _ThirdColorMode);
				float4 lerpResult706_g170033 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170033);
				half3 Local_ColorRGB774_g170033 = (lerpResult706_g170033).rgb;
				half3 Local_Albedo768_g170033 = ( Local_AlbedoRGB771_g170033 * Local_ColorRGB774_g170033 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170057 = 2.0;
				#else
				float staticSwitch1_g170057 = 4.594794;
				#endif
				float3 lerpResult985_g170033 = lerp( Local_Albedo768_g170033 , ( Visual_Albedo527_g170033 * Local_Albedo768_g170033 * staticSwitch1_g170057 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170060) = _ThirdMaskTex;
				SamplerState Sampler276_g170060 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170033 = _third_mask_coord_value;
				float4 temp_output_37_0_g170060 = Local_MaskCoords813_g170033;
				half4 Coords276_g170060 = temp_output_37_0_g170060;
				half2 TexCoord276_g170060 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170060 = SampleMain( Texture276_g170060 , Sampler276_g170060 , Coords276_g170060 , TexCoord276_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170060) = _ThirdMaskTex;
				SamplerState Sampler275_g170060 = sampler_Linear_Repeat;
				half4 Coords275_g170060 = temp_output_37_0_g170060;
				half2 TexCoord275_g170060 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170060 = SampleExtra( Texture275_g170060 , Sampler275_g170060 , Coords275_g170060 , TexCoord275_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170060) = _ThirdMaskTex;
				SamplerState Sampler238_g170060 = sampler_Linear_Repeat;
				half4 Coords238_g170060 = temp_output_37_0_g170060;
				float3 temp_output_279_0_g170060 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170060 = temp_output_279_0_g170060;
				half4 localSamplePlanar2D238_g170060 = SamplePlanar2D( Texture238_g170060 , Sampler238_g170060 , Coords238_g170060 , WorldPosition238_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170060) = _ThirdMaskTex;
				SamplerState Sampler246_g170060 = sampler_Linear_Repeat;
				half4 Coords246_g170060 = temp_output_37_0_g170060;
				half3 WorldPosition246_g170060 = temp_output_279_0_g170060;
				float3 temp_output_280_0_g170060 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170060 = temp_output_280_0_g170060;
				half4 localSamplePlanar3D246_g170060 = SamplePlanar3D( Texture246_g170060 , Sampler246_g170060 , Coords246_g170060 , WorldPosition246_g170060 , WorldNormal246_g170060 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170033 = localSampleExtra275_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170033 = localSamplePlanar2D238_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170033 = localSamplePlanar3D246_g170060;
				#else
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#endif
				half4 Local_MaskTex861_g170033 = staticSwitch817_g170033;
				float clampResult17_g170044 = clamp( (Local_MaskTex861_g170033).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170045 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170045 = ( _ThirdMaskRemap.y - temp_output_7_0_g170045 );
				float lerpResult1028_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170044 - temp_output_7_0_g170045 ) / ( temp_output_10_0_g170045 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170033 = lerpResult1028_g170033;
				half4 Model_VertexMasks960_g170033 = Out_VertexData15_g170061;
				float4 break961_g170033 = Model_VertexMasks960_g170033;
				float4 break33_g170048 = _third_vert_mode;
				float temp_output_30_0_g170048 = ( break961_g170033.x * break33_g170048.x );
				float temp_output_29_0_g170048 = ( break961_g170033.y * break33_g170048.y );
				float temp_output_31_0_g170048 = ( break961_g170033.z * break33_g170048.z );
				float temp_output_28_0_g170048 = ( temp_output_30_0_g170048 + temp_output_29_0_g170048 + temp_output_31_0_g170048 + ( break961_g170033.w * break33_g170048.w ) );
				float clampResult17_g170042 = clamp( temp_output_28_0_g170048 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170043 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170043 = ( _ThirdMeshRemap.y - temp_output_7_0_g170043 );
				float lerpResult1026_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170042 - temp_output_7_0_g170043 ) / ( temp_output_10_0_g170043 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170059 = lerpResult1026_g170033;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170059 = ( temp_output_6_0_g170059 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170059 = temp_output_6_0_g170059;
				#endif
				float temp_output_992_0_g170033 = staticSwitch14_g170059;
				half Blend_VertMask913_g170033 = temp_output_992_0_g170033;
				half3 Visual_NormalWS953_g170033 = Out_NormalWS4_g170049;
				float clampResult17_g170046 = clamp( saturate( (Visual_NormalWS953_g170033).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170047 = _ThirdProjRemap.x;
				float temp_output_10_0_g170047 = ( _ThirdProjRemap.y - temp_output_7_0_g170047 );
				float lerpResult1004_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170046 - temp_output_7_0_g170047 ) / ( temp_output_10_0_g170047 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170033 = lerpResult1004_g170033;
				TVEGlobalData Data15_g170051 = Data204_g169264;
				float Out_Dummy15_g170051 = 0;
				float4 Out_CoatParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170051 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170051 = Data15_g170051.Dummy;
				Out_CoatParams15_g170051 = Data15_g170051.CoatParams;
				Out_PaintParams15_g170051 = Data15_g170051.PaintParams;
				Out_GlowParams15_g170051 = Data15_g170051.GlowParams;
				Out_AtmoParams15_g170051= Data15_g170051.AtmoParams;
				Out_FadeParams15_g170051= Data15_g170051.FadeParams;
				Out_FormParams15_g170051 = Data15_g170051.FormParams;
				Out_LandParams15_g170051 = Data15_g170051.LandParams;
				Out_WindParams15_g170051 = Data15_g170051.WindParams;
				Out_PushParams15_g170051 = Data15_g170051.PushParams;
				}
				half4 Global_CoatParams972_g170033 = Out_CoatParams15_g170051;
				float lerpResult1023_g170033 = lerp( 1.0 , (Global_CoatParams972_g170033).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170033 = lerpResult1023_g170033;
				#else
				float staticSwitch965_g170033 = 1.0;
				#endif
				half Blend_GlobalMask968_g170033 = staticSwitch965_g170033;
				float temp_output_432_0_g170033 = ( _ThirdIntensityValue * Detail_TexMask429_g170033 * Blend_VertMask913_g170033 * Blend_ProjMask912_g170033 * Blend_GlobalMask968_g170033 );
				float clampResult17_g170053 = clamp( temp_output_432_0_g170033 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170052 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170052 = ( _ThirdBlendRemap.y - temp_output_7_0_g170052 );
				half Detail_Mask412_g170033 = ( saturate( ( ( clampResult17_g170053 - temp_output_7_0_g170052 ) / ( temp_output_10_0_g170052 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170033 = lerp( Visual_Albedo527_g170033 , lerpResult985_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170033 = lerpResult989_g170033;
				#else
				float3 staticSwitch415_g170033 = Visual_Albedo527_g170033;
				#endif
				half3 Final_Albedo601_g170033 = staticSwitch415_g170033;
				float3 In_Albedo3_g170050 = Final_Albedo601_g170033;
				half2 Visual_NormalTS529_g170033 = Out_NormalTS4_g170049;
				float2 lerpResult40_g170055 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170033 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170035) = _ThirdNormalTex;
				SamplerState Sampler276_g170035 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170035 = Local_LayerCoords790_g170033;
				half4 Coords276_g170035 = temp_output_37_0_g170035;
				half2 TexCoord276_g170035 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170035 = SampleMain( Texture276_g170035 , Sampler276_g170035 , Coords276_g170035 , TexCoord276_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170035) = _ThirdNormalTex;
				SamplerState Sampler275_g170035 = sampler_Linear_Repeat;
				half4 Coords275_g170035 = temp_output_37_0_g170035;
				half2 TexCoord275_g170035 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170035 = SampleExtra( Texture275_g170035 , Sampler275_g170035 , Coords275_g170035 , TexCoord275_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170035) = _ThirdNormalTex;
				SamplerState Sampler238_g170035 = sampler_Linear_Repeat;
				half4 Coords238_g170035 = temp_output_37_0_g170035;
				float3 temp_output_279_0_g170035 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170035 = temp_output_279_0_g170035;
				half4 localSamplePlanar2D238_g170035 = SamplePlanar2D( Texture238_g170035 , Sampler238_g170035 , Coords238_g170035 , WorldPosition238_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170035) = _ThirdNormalTex;
				SamplerState Sampler246_g170035 = sampler_Linear_Repeat;
				half4 Coords246_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition246_g170035 = temp_output_279_0_g170035;
				float3 temp_output_280_0_g170035 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170035 = temp_output_280_0_g170035;
				half4 localSamplePlanar3D246_g170035 = SamplePlanar3D( Texture246_g170035 , Sampler246_g170035 , Coords246_g170035 , WorldPosition246_g170035 , WorldNormal246_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170035) = _ThirdNormalTex;
				SamplerState Sampler234_g170035 = sampler_Linear_Repeat;
				float4 Coords234_g170035 = temp_output_37_0_g170035;
				float3 WorldPosition234_g170035 = temp_output_279_0_g170035;
				float4 localSampleStochastic2D234_g170035 = SampleStochastic2D( Texture234_g170035 , Sampler234_g170035 , Coords234_g170035 , WorldPosition234_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170035) = _ThirdNormalTex;
				SamplerState Sampler263_g170035 = sampler_Linear_Repeat;
				half4 Coords263_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition263_g170035 = temp_output_279_0_g170035;
				half3 WorldNormal263_g170035 = temp_output_280_0_g170035;
				half4 localSampleStochastic3D263_g170035 = SampleStochastic3D( Texture263_g170035 , Sampler263_g170035 , Coords263_g170035 , WorldPosition263_g170035 , WorldNormal263_g170035 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170033 = localSampleExtra275_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170033 = localSamplePlanar2D238_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170033 = localSamplePlanar3D246_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170033 = localSampleStochastic2D234_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170033 = localSampleStochastic3D263_g170035;
				#else
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#endif
				half4 Local_NormalTex776_g170033 = staticSwitch698_g170033;
				half4 Normal_Packed45_g170037 = Local_NormalTex776_g170033;
				float2 appendResult58_g170037 = (float2(( (Normal_Packed45_g170037).x * (Normal_Packed45_g170037).w ) , (Normal_Packed45_g170037).y));
				half2 Normal_Default50_g170037 = appendResult58_g170037;
				half2 Normal_ASTC41_g170037 = (Normal_Packed45_g170037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170037 = Normal_ASTC41_g170037;
				#else
				float2 staticSwitch38_g170037 = Normal_Default50_g170037;
				#endif
				half2 Normal_NO_DTX544_g170037 = (Normal_Packed45_g170037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170037 = Normal_NO_DTX544_g170037;
				#else
				float2 staticSwitch37_g170037 = staticSwitch38_g170037;
				#endif
				float2 temp_output_724_0_g170033 = ( (staticSwitch37_g170037*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170038 = temp_output_724_0_g170033;
				float2 break71_g170038 = Normal_Planar45_g170038;
				float3 appendResult72_g170038 = (float3(break71_g170038.x , 0.0 , break71_g170038.y));
				float2 temp_output_858_0_g170033 = (mul( ase_worldToTangent, appendResult72_g170038 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#else
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#endif
				half2 Local_NormalTS729_g170033 = staticSwitch727_g170033;
				float2 temp_output_36_0_g170055 = ( lerpResult40_g170055 + Local_NormalTS729_g170033 );
				float2 lerpResult405_g170033 = lerp( Visual_NormalTS529_g170033 , temp_output_36_0_g170055 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170033 = lerpResult405_g170033;
				#else
				float2 staticSwitch418_g170033 = Visual_NormalTS529_g170033;
				#endif
				half2 Final_NormalTS612_g170033 = staticSwitch418_g170033;
				float2 In_NormalTS3_g170050 = Final_NormalTS612_g170033;
				float3 appendResult68_g170056 = (float3(Final_NormalTS612_g170033 , 1.0));
				float3 tanNormal74_g170056 = appendResult68_g170056;
				float3 worldNormal74_g170056 = normalize( float3(dot(tanToWorld0,tanNormal74_g170056), dot(tanToWorld1,tanNormal74_g170056), dot(tanToWorld2,tanNormal74_g170056)) );
				half3 Final_NormalWS956_g170033 = worldNormal74_g170056;
				float3 In_NormalWS3_g170050 = Final_NormalWS956_g170033;
				half4 Visual_Shader531_g170033 = Out_Shader4_g170049;
				float4 lerpResult1000_g170033 = lerp( Local_Masks750_g170033 , ( Visual_Shader531_g170033 * Local_Masks750_g170033 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170033 = lerp( Visual_Shader531_g170033 , lerpResult1000_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170033 = lerpResult998_g170033;
				#else
				float4 staticSwitch451_g170033 = Visual_Shader531_g170033;
				#endif
				half4 Final_Masks613_g170033 = staticSwitch451_g170033;
				float4 In_Shader3_g170050 = Final_Masks613_g170033;
				float4 In_Emissive3_g170050 = Out_Emissive4_g170049;
				float3 temp_output_3_0_g170058 = Final_Albedo601_g170033;
				float dotResult20_g170058 = dot( temp_output_3_0_g170058 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170033 = dotResult20_g170058;
				float In_Grayscale3_g170050 = Final_Grayscale615_g170033;
				float clampResult651_g170033 = clamp( saturate( ( Final_Grayscale615_g170033 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170033 = clampResult651_g170033;
				float In_Luminosity3_g170050 = Final_Luminosity652_g170033;
				half Visual_MultiMask547_g170033 = Out_MultiMask4_g170049;
				float lerpResult477_g170033 = lerp( Visual_MultiMask547_g170033 , Local_MultiMask767_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch482_g170033 = lerpResult477_g170033;
				#else
				float staticSwitch482_g170033 = Visual_MultiMask547_g170033;
				#endif
				half Final_MultiMask572_g170033 = staticSwitch482_g170033;
				float In_MultiMask3_g170050 = Final_MultiMask572_g170033;
				half Visual_AlphaClip559_g170033 = Out_AlphaClip4_g170049;
				float temp_output_718_0_g170033 = (Local_AlbedoTex777_g170033).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170033 = ( temp_output_718_0_g170033 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170033 = temp_output_718_0_g170033;
				#endif
				half Local_AlphaClip772_g170033 = staticSwitch924_g170033;
				float lerpResult448_g170033 = lerp( Visual_AlphaClip559_g170033 , Local_AlphaClip772_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch564_g170033 = lerpResult448_g170033;
				#else
				float staticSwitch564_g170033 = Visual_AlphaClip559_g170033;
				#endif
				half Final_AlphaClip602_g170033 = staticSwitch564_g170033;
				float In_AlphaClip3_g170050 = Final_AlphaClip602_g170033;
				half Visual_AlphaFade588_g170033 = Out_AlphaFade4_g170049;
				half Local_AlphaFade773_g170033 = (lerpResult706_g170033).a;
				float lerpResult604_g170033 = lerp( Visual_AlphaFade588_g170033 , Local_AlphaFade773_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch608_g170033 = lerpResult604_g170033;
				#else
				float staticSwitch608_g170033 = Visual_AlphaFade588_g170033;
				#endif
				half Final_AlphaFade611_g170033 = staticSwitch608_g170033;
				float In_AlphaFade3_g170050 = Final_AlphaFade611_g170033;
				float3 In_Translucency3_g170050 = Out_Translucency4_g170049;
				float In_Transmission3_g170050 = Out_Transmission4_g170049;
				float In_Thickness3_g170050 = Out_Thickness4_g170049;
				float In_Diffusion3_g170050 = Out_Diffusion4_g170049;
				{
				Data3_g170050.Dummy = In_Dummy3_g170050;
				Data3_g170050.Albedo = In_Albedo3_g170050;
				Data3_g170050.NormalTS = In_NormalTS3_g170050;
				Data3_g170050.NormalWS = In_NormalWS3_g170050;
				Data3_g170050.Shader = In_Shader3_g170050;
				Data3_g170050.Emissive= In_Emissive3_g170050;
				Data3_g170050.MultiMask = In_MultiMask3_g170050;
				Data3_g170050.Grayscale = In_Grayscale3_g170050;
				Data3_g170050.Luminosity = In_Luminosity3_g170050;
				Data3_g170050.AlphaClip = In_AlphaClip3_g170050;
				Data3_g170050.AlphaFade = In_AlphaFade3_g170050;
				Data3_g170050.Translucency = In_Translucency3_g170050;
				Data3_g170050.Transmission = In_Transmission3_g170050;
				Data3_g170050.Thickness = In_Thickness3_g170050;
				Data3_g170050.Diffusion = In_Diffusion3_g170050;
				}
				TVEVisualData Data4_g170137 = Data3_g170050;
				float Out_Dummy4_g170137 = 0;
				float3 Out_Albedo4_g170137 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170137 = float2( 0,0 );
				float3 Out_NormalWS4_g170137 = float3( 0,0,0 );
				float4 Out_Shader4_g170137 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170137 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170137 = 0;
				float Out_Grayscale4_g170137 = 0;
				float Out_Luminosity4_g170137 = 0;
				float Out_AlphaClip4_g170137 = 0;
				float Out_AlphaFade4_g170137 = 0;
				float3 Out_Translucency4_g170137 = float3( 0,0,0 );
				float Out_Transmission4_g170137 = 0;
				float Out_Thickness4_g170137 = 0;
				float Out_Diffusion4_g170137 = 0;
				{
				Out_Dummy4_g170137 = Data4_g170137.Dummy;
				Out_Albedo4_g170137 = Data4_g170137.Albedo;
				Out_NormalTS4_g170137 = Data4_g170137.NormalTS;
				Out_NormalWS4_g170137 = Data4_g170137.NormalWS;
				Out_Shader4_g170137 = Data4_g170137.Shader;
				Out_Emissive4_g170137= Data4_g170137.Emissive;
				Out_MultiMask4_g170137 = Data4_g170137.MultiMask;
				Out_Grayscale4_g170137 = Data4_g170137.Grayscale;
				Out_Luminosity4_g170137= Data4_g170137.Luminosity;
				Out_AlphaClip4_g170137 = Data4_g170137.AlphaClip;
				Out_AlphaFade4_g170137 = Data4_g170137.AlphaFade;
				Out_Translucency4_g170137 = Data4_g170137.Translucency;
				Out_Transmission4_g170137 = Data4_g170137.Transmission;
				Out_Thickness4_g170137 = Data4_g170137.Thickness;
				Out_Diffusion4_g170137 = Data4_g170137.Diffusion;
				}
				half3 Visual_Albedo127_g170136 = Out_Albedo4_g170137;
				TVEModelData Data15_g170139 = Data16_g169262;
				float Out_Dummy15_g170139 = 0;
				float3 Out_PositionOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170139 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170139 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170139 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170139 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170139 = float3( 0,0,0 );
				float4 Out_VertexData15_g170139 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170139 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170139 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170139 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170139 = Data15_g170139.Dummy;
				Out_PositionOS15_g170139 = Data15_g170139.PositionOS;
				Out_PositionWS15_g170139 = Data15_g170139.PositionWS;
				Out_PositionWO15_g170139 = Data15_g170139.PositionWO;
				Out_PositionRawOS15_g170139 = Data15_g170139.PositionRawOS;
				Out_PositionAddOS15_g170139 = Data15_g170139.PositionAddOS;
				Out_PivotOS15_g170139 = Data15_g170139.PivotOS;
				Out_PivotWS15_g170139 = Data15_g170139.PivotWS;
				Out_PivotWO15_g170139 = Data15_g170139.PivotWO;
				Out_NormalOS15_g170139 = Data15_g170139.NormalOS;
				Out_NormalWS15_g170139 = Data15_g170139.NormalWS;
				Out_NormalRawOS15_g170139 = Data15_g170139.NormalRawOS;
				Out_NormalRawWS15_g170139 = Data15_g170139.NormalRawWS;
				Out_TangentOS15_g170139 = Data15_g170139.TangentOS;
				Out_ViewDirWS15_g170139 = Data15_g170139.ViewDirWS;
				Out_VertexData15_g170139 = Data15_g170139.VertexData;
				Out_MotionData15_g170139 = Data15_g170139.MotionData;
				Out_BoundsData15_g170139 = Data15_g170139.BoundsData;
				Out_RotationData15_g170139 = Data15_g170139.RotationData;
				}
				half4 Model_VertexData206_g170136 = Out_VertexData15_g170139;
				float4 break208_g170136 = Model_VertexData206_g170136;
				float4 break33_g170144 = _occlusion_vert_mode;
				float temp_output_30_0_g170144 = ( break208_g170136.x * break33_g170144.x );
				float temp_output_29_0_g170144 = ( break208_g170136.y * break33_g170144.y );
				float temp_output_31_0_g170144 = ( break208_g170136.z * break33_g170144.z );
				float temp_output_28_0_g170144 = ( temp_output_30_0_g170144 + temp_output_29_0_g170144 + temp_output_31_0_g170144 + ( break208_g170136.w * break33_g170144.w ) );
				float temp_output_194_0_g170136 = temp_output_28_0_g170144;
				float clampResult17_g170142 = clamp( temp_output_194_0_g170136 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170141 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170141 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170141 );
				float temp_output_6_0_g170143 = saturate( ( ( clampResult17_g170142 - temp_output_7_0_g170141 ) / ( temp_output_10_0_g170141 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170143 = ( temp_output_6_0_g170143 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170143 = temp_output_6_0_g170143;
				#endif
				half Occlusion_Mask82_g170136 = staticSwitch14_g170143;
				float3 lerpResult75_g170136 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170136);
				float3 lerpResult186_g170136 = lerp( Visual_Albedo127_g170136 , ( Visual_Albedo127_g170136 * lerpResult75_g170136 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170136 = lerpResult186_g170136;
				#else
				float3 staticSwitch171_g170136 = Visual_Albedo127_g170136;
				#endif
				half3 Final_Albedo160_g170136 = staticSwitch171_g170136;
				float3 In_Albedo3_g170138 = Final_Albedo160_g170136;
				float2 In_NormalTS3_g170138 = Out_NormalTS4_g170137;
				float3 In_NormalWS3_g170138 = Out_NormalWS4_g170137;
				float4 In_Shader3_g170138 = Out_Shader4_g170137;
				float4 In_Emissive3_g170138 = Out_Emissive4_g170137;
				float3 temp_output_3_0_g170140 = Final_Albedo160_g170136;
				float dotResult20_g170140 = dot( temp_output_3_0_g170140 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170136 = dotResult20_g170140;
				float In_Grayscale3_g170138 = Final_Grayscale164_g170136;
				float clampResult180_g170136 = clamp( saturate( ( Final_Grayscale164_g170136 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170136 = clampResult180_g170136;
				float In_Luminosity3_g170138 = Final_Shading181_g170136;
				float In_MultiMask3_g170138 = Out_MultiMask4_g170137;
				float In_AlphaClip3_g170138 = Out_AlphaClip4_g170137;
				float In_AlphaFade3_g170138 = Out_AlphaFade4_g170137;
				float3 In_Translucency3_g170138 = Out_Translucency4_g170137;
				float In_Transmission3_g170138 = Out_Transmission4_g170137;
				float In_Thickness3_g170138 = Out_Thickness4_g170137;
				float In_Diffusion3_g170138 = Out_Diffusion4_g170137;
				{
				Data3_g170138.Dummy = In_Dummy3_g170138;
				Data3_g170138.Albedo = In_Albedo3_g170138;
				Data3_g170138.NormalTS = In_NormalTS3_g170138;
				Data3_g170138.NormalWS = In_NormalWS3_g170138;
				Data3_g170138.Shader = In_Shader3_g170138;
				Data3_g170138.Emissive= In_Emissive3_g170138;
				Data3_g170138.MultiMask = In_MultiMask3_g170138;
				Data3_g170138.Grayscale = In_Grayscale3_g170138;
				Data3_g170138.Luminosity = In_Luminosity3_g170138;
				Data3_g170138.AlphaClip = In_AlphaClip3_g170138;
				Data3_g170138.AlphaFade = In_AlphaFade3_g170138;
				Data3_g170138.Translucency = In_Translucency3_g170138;
				Data3_g170138.Transmission = In_Transmission3_g170138;
				Data3_g170138.Thickness = In_Thickness3_g170138;
				Data3_g170138.Diffusion = In_Diffusion3_g170138;
				}
				TVEVisualData Data4_g170149 = Data3_g170138;
				float Out_Dummy4_g170149 = 0;
				float3 Out_Albedo4_g170149 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170149 = float2( 0,0 );
				float3 Out_NormalWS4_g170149 = float3( 0,0,0 );
				float4 Out_Shader4_g170149 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170149 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170149 = 0;
				float Out_Grayscale4_g170149 = 0;
				float Out_Luminosity4_g170149 = 0;
				float Out_AlphaClip4_g170149 = 0;
				float Out_AlphaFade4_g170149 = 0;
				float3 Out_Translucency4_g170149 = float3( 0,0,0 );
				float Out_Transmission4_g170149 = 0;
				float Out_Thickness4_g170149 = 0;
				float Out_Diffusion4_g170149 = 0;
				{
				Out_Dummy4_g170149 = Data4_g170149.Dummy;
				Out_Albedo4_g170149 = Data4_g170149.Albedo;
				Out_NormalTS4_g170149 = Data4_g170149.NormalTS;
				Out_NormalWS4_g170149 = Data4_g170149.NormalWS;
				Out_Shader4_g170149 = Data4_g170149.Shader;
				Out_Emissive4_g170149= Data4_g170149.Emissive;
				Out_MultiMask4_g170149 = Data4_g170149.MultiMask;
				Out_Grayscale4_g170149 = Data4_g170149.Grayscale;
				Out_Luminosity4_g170149= Data4_g170149.Luminosity;
				Out_AlphaClip4_g170149 = Data4_g170149.AlphaClip;
				Out_AlphaFade4_g170149 = Data4_g170149.AlphaFade;
				Out_Translucency4_g170149 = Data4_g170149.Translucency;
				Out_Transmission4_g170149 = Data4_g170149.Transmission;
				Out_Thickness4_g170149 = Data4_g170149.Thickness;
				Out_Diffusion4_g170149 = Data4_g170149.Diffusion;
				}
				half3 Visual_Albedo127_g170146 = Out_Albedo4_g170149;
				TVEModelData Data15_g170147 = Data16_g169262;
				float Out_Dummy15_g170147 = 0;
				float3 Out_PositionOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170147 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170147 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170147 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170147 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170147 = float3( 0,0,0 );
				float4 Out_VertexData15_g170147 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170147 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170147 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170147 = Data15_g170147.Dummy;
				Out_PositionOS15_g170147 = Data15_g170147.PositionOS;
				Out_PositionWS15_g170147 = Data15_g170147.PositionWS;
				Out_PositionWO15_g170147 = Data15_g170147.PositionWO;
				Out_PositionRawOS15_g170147 = Data15_g170147.PositionRawOS;
				Out_PositionAddOS15_g170147 = Data15_g170147.PositionAddOS;
				Out_PivotOS15_g170147 = Data15_g170147.PivotOS;
				Out_PivotWS15_g170147 = Data15_g170147.PivotWS;
				Out_PivotWO15_g170147 = Data15_g170147.PivotWO;
				Out_NormalOS15_g170147 = Data15_g170147.NormalOS;
				Out_NormalWS15_g170147 = Data15_g170147.NormalWS;
				Out_NormalRawOS15_g170147 = Data15_g170147.NormalRawOS;
				Out_NormalRawWS15_g170147 = Data15_g170147.NormalRawWS;
				Out_TangentOS15_g170147 = Data15_g170147.TangentOS;
				Out_ViewDirWS15_g170147 = Data15_g170147.ViewDirWS;
				Out_VertexData15_g170147 = Data15_g170147.VertexData;
				Out_MotionData15_g170147 = Data15_g170147.MotionData;
				Out_BoundsData15_g170147 = Data15_g170147.BoundsData;
				Out_RotationData15_g170147 = Data15_g170147.RotationData;
				}
				half4 Model_VertexData224_g170146 = Out_VertexData15_g170147;
				float4 break226_g170146 = Model_VertexData224_g170146;
				float4 break33_g170148 = _gradient_vert_mode;
				float temp_output_30_0_g170148 = ( break226_g170146.x * break33_g170148.x );
				float temp_output_29_0_g170148 = ( break226_g170146.y * break33_g170148.y );
				float temp_output_31_0_g170148 = ( break226_g170146.z * break33_g170148.z );
				float temp_output_28_0_g170148 = ( temp_output_30_0_g170148 + temp_output_29_0_g170148 + temp_output_31_0_g170148 + ( break226_g170146.w * break33_g170148.w ) );
				float temp_output_211_0_g170146 = temp_output_28_0_g170148;
				float clampResult17_g170153 = clamp( temp_output_211_0_g170146 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170154 = _GradientMeshRemap.x;
				float temp_output_10_0_g170154 = ( _GradientMeshRemap.y - temp_output_7_0_g170154 );
				float temp_output_6_0_g170155 = saturate( ( ( clampResult17_g170153 - temp_output_7_0_g170154 ) / ( temp_output_10_0_g170154 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170155 = ( temp_output_6_0_g170155 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170155 = temp_output_6_0_g170155;
				#endif
				half Gradient_VertMask82_g170146 = staticSwitch14_g170155;
				half Gradient_Mask200_g170146 = Gradient_VertMask82_g170146;
				float3 lerpResult75_g170146 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170146);
				float temp_output_162_11_g170146 = Out_MultiMask4_g170149;
				half Visual_MultiMask196_g170146 = temp_output_162_11_g170146;
				float lerpResult190_g170146 = lerp( 1.0 , Visual_MultiMask196_g170146 , _GradientMultiValue);
				half Gradient_MultiMask194_g170146 = lerpResult190_g170146;
				float3 lerpResult186_g170146 = lerp( Visual_Albedo127_g170146 , ( Visual_Albedo127_g170146 * lerpResult75_g170146 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170146 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170146 = lerpResult186_g170146;
				#else
				float3 staticSwitch171_g170146 = Visual_Albedo127_g170146;
				#endif
				half3 Final_Albedo160_g170146 = staticSwitch171_g170146;
				float3 In_Albedo3_g170150 = Final_Albedo160_g170146;
				float2 In_NormalTS3_g170150 = Out_NormalTS4_g170149;
				float3 In_NormalWS3_g170150 = Out_NormalWS4_g170149;
				float4 In_Shader3_g170150 = Out_Shader4_g170149;
				float4 In_Emissive3_g170150 = Out_Emissive4_g170149;
				float3 temp_output_3_0_g170151 = Final_Albedo160_g170146;
				float dotResult20_g170151 = dot( temp_output_3_0_g170151 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170146 = dotResult20_g170151;
				float In_Grayscale3_g170150 = Final_Grayscale164_g170146;
				float clampResult180_g170146 = clamp( saturate( ( Final_Grayscale164_g170146 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170146 = clampResult180_g170146;
				float In_Luminosity3_g170150 = Final_Luminosity181_g170146;
				float In_MultiMask3_g170150 = temp_output_162_11_g170146;
				float In_AlphaClip3_g170150 = Out_AlphaClip4_g170149;
				float In_AlphaFade3_g170150 = Out_AlphaFade4_g170149;
				float3 In_Translucency3_g170150 = Out_Translucency4_g170149;
				float In_Transmission3_g170150 = Out_Transmission4_g170149;
				float In_Thickness3_g170150 = Out_Thickness4_g170149;
				float In_Diffusion3_g170150 = Out_Diffusion4_g170149;
				{
				Data3_g170150.Dummy = In_Dummy3_g170150;
				Data3_g170150.Albedo = In_Albedo3_g170150;
				Data3_g170150.NormalTS = In_NormalTS3_g170150;
				Data3_g170150.NormalWS = In_NormalWS3_g170150;
				Data3_g170150.Shader = In_Shader3_g170150;
				Data3_g170150.Emissive= In_Emissive3_g170150;
				Data3_g170150.MultiMask = In_MultiMask3_g170150;
				Data3_g170150.Grayscale = In_Grayscale3_g170150;
				Data3_g170150.Luminosity = In_Luminosity3_g170150;
				Data3_g170150.AlphaClip = In_AlphaClip3_g170150;
				Data3_g170150.AlphaFade = In_AlphaFade3_g170150;
				Data3_g170150.Translucency = In_Translucency3_g170150;
				Data3_g170150.Transmission = In_Transmission3_g170150;
				Data3_g170150.Thickness = In_Thickness3_g170150;
				Data3_g170150.Diffusion = In_Diffusion3_g170150;
				}
				TVEVisualData Data4_g170158 = Data3_g170150;
				float Out_Dummy4_g170158 = 0;
				float3 Out_Albedo4_g170158 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170158 = float2( 0,0 );
				float3 Out_NormalWS4_g170158 = float3( 0,0,0 );
				float4 Out_Shader4_g170158 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170158 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170158 = 0;
				float Out_Grayscale4_g170158 = 0;
				float Out_Luminosity4_g170158 = 0;
				float Out_AlphaClip4_g170158 = 0;
				float Out_AlphaFade4_g170158 = 0;
				float3 Out_Translucency4_g170158 = float3( 0,0,0 );
				float Out_Transmission4_g170158 = 0;
				float Out_Thickness4_g170158 = 0;
				float Out_Diffusion4_g170158 = 0;
				{
				Out_Dummy4_g170158 = Data4_g170158.Dummy;
				Out_Albedo4_g170158 = Data4_g170158.Albedo;
				Out_NormalTS4_g170158 = Data4_g170158.NormalTS;
				Out_NormalWS4_g170158 = Data4_g170158.NormalWS;
				Out_Shader4_g170158 = Data4_g170158.Shader;
				Out_Emissive4_g170158= Data4_g170158.Emissive;
				Out_MultiMask4_g170158 = Data4_g170158.MultiMask;
				Out_Grayscale4_g170158 = Data4_g170158.Grayscale;
				Out_Luminosity4_g170158= Data4_g170158.Luminosity;
				Out_AlphaClip4_g170158 = Data4_g170158.AlphaClip;
				Out_AlphaFade4_g170158 = Data4_g170158.AlphaFade;
				Out_Translucency4_g170158 = Data4_g170158.Translucency;
				Out_Transmission4_g170158 = Data4_g170158.Transmission;
				Out_Thickness4_g170158 = Data4_g170158.Thickness;
				Out_Diffusion4_g170158 = Data4_g170158.Diffusion;
				}
				half3 Visual_Albedo127_g170156 = Out_Albedo4_g170158;
				TVEModelData Data15_g170159 = Data16_g169262;
				float Out_Dummy15_g170159 = 0;
				float3 Out_PositionOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170159 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170159 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170159 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170159 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170159 = float3( 0,0,0 );
				float4 Out_VertexData15_g170159 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170159 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170159 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170159 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170159 = Data15_g170159.Dummy;
				Out_PositionOS15_g170159 = Data15_g170159.PositionOS;
				Out_PositionWS15_g170159 = Data15_g170159.PositionWS;
				Out_PositionWO15_g170159 = Data15_g170159.PositionWO;
				Out_PositionRawOS15_g170159 = Data15_g170159.PositionRawOS;
				Out_PositionAddOS15_g170159 = Data15_g170159.PositionAddOS;
				Out_PivotOS15_g170159 = Data15_g170159.PivotOS;
				Out_PivotWS15_g170159 = Data15_g170159.PivotWS;
				Out_PivotWO15_g170159 = Data15_g170159.PivotWO;
				Out_NormalOS15_g170159 = Data15_g170159.NormalOS;
				Out_NormalWS15_g170159 = Data15_g170159.NormalWS;
				Out_NormalRawOS15_g170159 = Data15_g170159.NormalRawOS;
				Out_NormalRawWS15_g170159 = Data15_g170159.NormalRawWS;
				Out_TangentOS15_g170159 = Data15_g170159.TangentOS;
				Out_ViewDirWS15_g170159 = Data15_g170159.ViewDirWS;
				Out_VertexData15_g170159 = Data15_g170159.VertexData;
				Out_MotionData15_g170159 = Data15_g170159.MotionData;
				Out_BoundsData15_g170159 = Data15_g170159.BoundsData;
				Out_RotationData15_g170159 = Data15_g170159.RotationData;
				}
				half3 Model_PositionWO224_g170156 = Out_PositionWO15_g170159;
				half3 Model_PivotWO239_g170156 = Out_PivotWO15_g170159;
				float3 lerpResult242_g170156 = lerp( Model_PositionWO224_g170156 , Model_PivotWO239_g170156 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170161 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170156 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170163 = clamp( tex3DNode60_g170161.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170164 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170164 = ( _VariationNoiseRemap.y - temp_output_7_0_g170164 );
				float temp_output_238_0_g170156 = saturate( ( ( clampResult17_g170163 - temp_output_7_0_g170164 ) / ( temp_output_10_0_g170164 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170156 = temp_output_238_0_g170156;
				half Variaton_Mask200_g170156 = Variaton_NoiseMask82_g170156;
				float3 lerpResult75_g170156 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170156);
				float temp_output_162_11_g170156 = Out_MultiMask4_g170158;
				half Visual_MultiMask196_g170156 = temp_output_162_11_g170156;
				float lerpResult190_g170156 = lerp( 1.0 , Visual_MultiMask196_g170156 , _VariationMultiValue);
				half Variaton_MultiMask194_g170156 = lerpResult190_g170156;
				float3 lerpResult186_g170156 = lerp( Visual_Albedo127_g170156 , ( Visual_Albedo127_g170156 * lerpResult75_g170156 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170156 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170156 = lerpResult186_g170156;
				#else
				float3 staticSwitch171_g170156 = Visual_Albedo127_g170156;
				#endif
				half3 Final_Albedo160_g170156 = staticSwitch171_g170156;
				float3 In_Albedo3_g170160 = Final_Albedo160_g170156;
				float2 In_NormalTS3_g170160 = Out_NormalTS4_g170158;
				float3 In_NormalWS3_g170160 = Out_NormalWS4_g170158;
				float4 In_Shader3_g170160 = Out_Shader4_g170158;
				float4 In_Emissive3_g170160 = Out_Emissive4_g170158;
				float3 temp_output_3_0_g170157 = Final_Albedo160_g170156;
				float dotResult20_g170157 = dot( temp_output_3_0_g170157 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170156 = dotResult20_g170157;
				float In_Grayscale3_g170160 = Final_Grayscale164_g170156;
				float clampResult180_g170156 = clamp( saturate( ( Final_Grayscale164_g170156 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170156 = clampResult180_g170156;
				float In_Luminosity3_g170160 = Final_Luminosity181_g170156;
				float In_MultiMask3_g170160 = temp_output_162_11_g170156;
				float In_AlphaClip3_g170160 = Out_AlphaClip4_g170158;
				float In_AlphaFade3_g170160 = Out_AlphaFade4_g170158;
				float3 In_Translucency3_g170160 = Out_Translucency4_g170158;
				float In_Transmission3_g170160 = Out_Transmission4_g170158;
				float In_Thickness3_g170160 = Out_Thickness4_g170158;
				float In_Diffusion3_g170160 = Out_Diffusion4_g170158;
				{
				Data3_g170160.Dummy = In_Dummy3_g170160;
				Data3_g170160.Albedo = In_Albedo3_g170160;
				Data3_g170160.NormalTS = In_NormalTS3_g170160;
				Data3_g170160.NormalWS = In_NormalWS3_g170160;
				Data3_g170160.Shader = In_Shader3_g170160;
				Data3_g170160.Emissive= In_Emissive3_g170160;
				Data3_g170160.MultiMask = In_MultiMask3_g170160;
				Data3_g170160.Grayscale = In_Grayscale3_g170160;
				Data3_g170160.Luminosity = In_Luminosity3_g170160;
				Data3_g170160.AlphaClip = In_AlphaClip3_g170160;
				Data3_g170160.AlphaFade = In_AlphaFade3_g170160;
				Data3_g170160.Translucency = In_Translucency3_g170160;
				Data3_g170160.Transmission = In_Transmission3_g170160;
				Data3_g170160.Thickness = In_Thickness3_g170160;
				Data3_g170160.Diffusion = In_Diffusion3_g170160;
				}
				TVEVisualData Data4_g170171 = Data3_g170160;
				float Out_Dummy4_g170171 = 0;
				float3 Out_Albedo4_g170171 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170171 = float2( 0,0 );
				float3 Out_NormalWS4_g170171 = float3( 0,0,0 );
				float4 Out_Shader4_g170171 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170171 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170171 = 0;
				float Out_Grayscale4_g170171 = 0;
				float Out_Luminosity4_g170171 = 0;
				float Out_AlphaClip4_g170171 = 0;
				float Out_AlphaFade4_g170171 = 0;
				float3 Out_Translucency4_g170171 = float3( 0,0,0 );
				float Out_Transmission4_g170171 = 0;
				float Out_Thickness4_g170171 = 0;
				float Out_Diffusion4_g170171 = 0;
				{
				Out_Dummy4_g170171 = Data4_g170171.Dummy;
				Out_Albedo4_g170171 = Data4_g170171.Albedo;
				Out_NormalTS4_g170171 = Data4_g170171.NormalTS;
				Out_NormalWS4_g170171 = Data4_g170171.NormalWS;
				Out_Shader4_g170171 = Data4_g170171.Shader;
				Out_Emissive4_g170171= Data4_g170171.Emissive;
				Out_MultiMask4_g170171 = Data4_g170171.MultiMask;
				Out_Grayscale4_g170171 = Data4_g170171.Grayscale;
				Out_Luminosity4_g170171= Data4_g170171.Luminosity;
				Out_AlphaClip4_g170171 = Data4_g170171.AlphaClip;
				Out_AlphaFade4_g170171 = Data4_g170171.AlphaFade;
				Out_Translucency4_g170171 = Data4_g170171.Translucency;
				Out_Transmission4_g170171 = Data4_g170171.Transmission;
				Out_Thickness4_g170171 = Data4_g170171.Thickness;
				Out_Diffusion4_g170171 = Data4_g170171.Diffusion;
				}
				half3 Visual_Albedo139_g170166 = Out_Albedo4_g170171;
				float temp_output_200_12_g170166 = Out_Grayscale4_g170171;
				half Visual_Grayscale150_g170166 = temp_output_200_12_g170166;
				float3 temp_cast_37 = (Visual_Grayscale150_g170166).xxx;
				TVEGlobalData Data15_g170168 = Data204_g169264;
				float Out_Dummy15_g170168 = 0;
				float4 Out_CoatParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170168 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170168 = Data15_g170168.Dummy;
				Out_CoatParams15_g170168 = Data15_g170168.CoatParams;
				Out_PaintParams15_g170168 = Data15_g170168.PaintParams;
				Out_GlowParams15_g170168 = Data15_g170168.GlowParams;
				Out_AtmoParams15_g170168= Data15_g170168.AtmoParams;
				Out_FadeParams15_g170168= Data15_g170168.FadeParams;
				Out_FormParams15_g170168 = Data15_g170168.FormParams;
				Out_LandParams15_g170168 = Data15_g170168.LandParams;
				Out_WindParams15_g170168 = Data15_g170168.WindParams;
				Out_PushParams15_g170168 = Data15_g170168.PushParams;
				}
				half4 Global_PaintParams209_g170166 = Out_PaintParams15_g170168;
				float temp_output_6_0_g170170 = ( saturate( (Global_PaintParams209_g170166).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170170 = ( temp_output_6_0_g170170 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170170 = temp_output_6_0_g170170;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170166 = staticSwitch14_g170170;
				#else
				float staticSwitch283_g170166 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170166 = staticSwitch283_g170166;
				float3 lerpResult368_g170166 = lerp( Visual_Albedo139_g170166 , temp_cast_37 , ( Tinting_GlobalValue285_g170166 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170189 = 2.0;
				#else
				float staticSwitch1_g170189 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170166 = (Global_PaintParams209_g170166).xyz;
				#else
				float3 staticSwitch288_g170166 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170166 = staticSwitch288_g170166;
				float temp_output_200_11_g170166 = Out_MultiMask4_g170171;
				half Visual_MultiMask181_g170166 = temp_output_200_11_g170166;
				float lerpResult147_g170166 = lerp( 1.0 , Visual_MultiMask181_g170166 , _TintingMultiValue);
				half Tinting_MutiMask121_g170166 = lerpResult147_g170166;
				half Tinting_TexMask385_g170166 = 1.0;
				float temp_output_200_15_g170166 = Out_Luminosity4_g170171;
				half Visual_Luminosity257_g170166 = temp_output_200_15_g170166;
				float clampResult17_g170183 = clamp( Visual_Luminosity257_g170166 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170182 = _TintingLumaRemap.x;
				float temp_output_10_0_g170182 = ( _TintingLumaRemap.y - temp_output_7_0_g170182 );
				float lerpResult228_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170183 - temp_output_7_0_g170182 ) / ( temp_output_10_0_g170182 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170166 = lerpResult228_g170166;
				TVEModelData Data15_g170167 = Data16_g169262;
				float Out_Dummy15_g170167 = 0;
				float3 Out_PositionOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170167 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170167 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170167 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170167 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170167 = float3( 0,0,0 );
				float4 Out_VertexData15_g170167 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170167 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170167 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170167 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170167 = Data15_g170167.Dummy;
				Out_PositionOS15_g170167 = Data15_g170167.PositionOS;
				Out_PositionWS15_g170167 = Data15_g170167.PositionWS;
				Out_PositionWO15_g170167 = Data15_g170167.PositionWO;
				Out_PositionRawOS15_g170167 = Data15_g170167.PositionRawOS;
				Out_PositionAddOS15_g170167 = Data15_g170167.PositionAddOS;
				Out_PivotOS15_g170167 = Data15_g170167.PivotOS;
				Out_PivotWS15_g170167 = Data15_g170167.PivotWS;
				Out_PivotWO15_g170167 = Data15_g170167.PivotWO;
				Out_NormalOS15_g170167 = Data15_g170167.NormalOS;
				Out_NormalWS15_g170167 = Data15_g170167.NormalWS;
				Out_NormalRawOS15_g170167 = Data15_g170167.NormalRawOS;
				Out_NormalRawWS15_g170167 = Data15_g170167.NormalRawWS;
				Out_TangentOS15_g170167 = Data15_g170167.TangentOS;
				Out_ViewDirWS15_g170167 = Data15_g170167.ViewDirWS;
				Out_VertexData15_g170167 = Data15_g170167.VertexData;
				Out_MotionData15_g170167 = Data15_g170167.MotionData;
				Out_BoundsData15_g170167 = Data15_g170167.BoundsData;
				Out_RotationData15_g170167 = Data15_g170167.RotationData;
				}
				half4 Model_VertexMasks307_g170166 = Out_VertexData15_g170167;
				float4 break311_g170166 = Model_VertexMasks307_g170166;
				float4 break33_g170175 = _tinting_vert_mode;
				float temp_output_30_0_g170175 = ( break311_g170166.x * break33_g170175.x );
				float temp_output_29_0_g170175 = ( break311_g170166.y * break33_g170175.y );
				float temp_output_31_0_g170175 = ( break311_g170166.z * break33_g170175.z );
				float temp_output_28_0_g170175 = ( temp_output_30_0_g170175 + temp_output_29_0_g170175 + temp_output_31_0_g170175 + ( break311_g170166.w * break33_g170175.w ) );
				float clampResult17_g170181 = clamp( temp_output_28_0_g170175 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170180 = _TintingMeshRemap.x;
				float temp_output_10_0_g170180 = ( _TintingMeshRemap.y - temp_output_7_0_g170180 );
				float lerpResult370_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170181 - temp_output_7_0_g170180 ) / ( temp_output_10_0_g170180 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170184 = lerpResult370_g170166;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170184 = ( temp_output_6_0_g170184 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170184 = temp_output_6_0_g170184;
				#endif
				float temp_output_333_0_g170166 = staticSwitch14_g170184;
				half Tinting_VertMask309_g170166 = temp_output_333_0_g170166;
				half Tinting_NoiseMask213_g170166 = 1.0;
				half Custom_Mask345_g170166 = 1.0;
				float temp_output_7_0_g170178 = _TintingBlendRemap.x;
				float temp_output_10_0_g170178 = ( _TintingBlendRemap.y - temp_output_7_0_g170178 );
				half Tinting_Mask242_g170166 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170166 * Tinting_TexMask385_g170166 * Tinting_LumaMask153_g170166 * Tinting_VertMask309_g170166 * Tinting_NoiseMask213_g170166 * Tinting_GlobalValue285_g170166 * Custom_Mask345_g170166 ) - temp_output_7_0_g170178 ) / ( temp_output_10_0_g170178 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170166 = lerp( Visual_Albedo139_g170166 , ( lerpResult368_g170166 * staticSwitch1_g170189 * Tinting_ColorGlobal290_g170166 * (_TintingColor).rgb ) , Tinting_Mask242_g170166);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170166 = lerpResult90_g170166;
				#else
				float3 staticSwitch286_g170166 = Visual_Albedo139_g170166;
				#endif
				half3 Final_Albedo97_g170166 = staticSwitch286_g170166;
				float3 In_Albedo3_g170169 = Final_Albedo97_g170166;
				float2 In_NormalTS3_g170169 = Out_NormalTS4_g170171;
				float3 In_NormalWS3_g170169 = Out_NormalWS4_g170171;
				float4 In_Shader3_g170169 = Out_Shader4_g170171;
				float4 In_Emissive3_g170169 = Out_Emissive4_g170171;
				float In_Grayscale3_g170169 = temp_output_200_12_g170166;
				float In_Luminosity3_g170169 = temp_output_200_15_g170166;
				float In_MultiMask3_g170169 = temp_output_200_11_g170166;
				float In_AlphaClip3_g170169 = Out_AlphaClip4_g170171;
				float In_AlphaFade3_g170169 = Out_AlphaFade4_g170171;
				float3 In_Translucency3_g170169 = Out_Translucency4_g170171;
				float In_Transmission3_g170169 = Out_Transmission4_g170171;
				float In_Thickness3_g170169 = Out_Thickness4_g170171;
				float In_Diffusion3_g170169 = Out_Diffusion4_g170171;
				{
				Data3_g170169.Dummy = In_Dummy3_g170169;
				Data3_g170169.Albedo = In_Albedo3_g170169;
				Data3_g170169.NormalTS = In_NormalTS3_g170169;
				Data3_g170169.NormalWS = In_NormalWS3_g170169;
				Data3_g170169.Shader = In_Shader3_g170169;
				Data3_g170169.Emissive= In_Emissive3_g170169;
				Data3_g170169.MultiMask = In_MultiMask3_g170169;
				Data3_g170169.Grayscale = In_Grayscale3_g170169;
				Data3_g170169.Luminosity = In_Luminosity3_g170169;
				Data3_g170169.AlphaClip = In_AlphaClip3_g170169;
				Data3_g170169.AlphaFade = In_AlphaFade3_g170169;
				Data3_g170169.Translucency = In_Translucency3_g170169;
				Data3_g170169.Transmission = In_Transmission3_g170169;
				Data3_g170169.Thickness = In_Thickness3_g170169;
				Data3_g170169.Diffusion = In_Diffusion3_g170169;
				}
				TVEVisualData Data4_g170192 = Data3_g170169;
				float Out_Dummy4_g170192 = 0;
				float3 Out_Albedo4_g170192 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170192 = float2( 0,0 );
				float3 Out_NormalWS4_g170192 = float3( 0,0,0 );
				float4 Out_Shader4_g170192 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170192 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170192 = 0;
				float Out_Grayscale4_g170192 = 0;
				float Out_Luminosity4_g170192 = 0;
				float Out_AlphaClip4_g170192 = 0;
				float Out_AlphaFade4_g170192 = 0;
				float3 Out_Translucency4_g170192 = float3( 0,0,0 );
				float Out_Transmission4_g170192 = 0;
				float Out_Thickness4_g170192 = 0;
				float Out_Diffusion4_g170192 = 0;
				{
				Out_Dummy4_g170192 = Data4_g170192.Dummy;
				Out_Albedo4_g170192 = Data4_g170192.Albedo;
				Out_NormalTS4_g170192 = Data4_g170192.NormalTS;
				Out_NormalWS4_g170192 = Data4_g170192.NormalWS;
				Out_Shader4_g170192 = Data4_g170192.Shader;
				Out_Emissive4_g170192= Data4_g170192.Emissive;
				Out_MultiMask4_g170192 = Data4_g170192.MultiMask;
				Out_Grayscale4_g170192 = Data4_g170192.Grayscale;
				Out_Luminosity4_g170192= Data4_g170192.Luminosity;
				Out_AlphaClip4_g170192 = Data4_g170192.AlphaClip;
				Out_AlphaFade4_g170192 = Data4_g170192.AlphaFade;
				Out_Translucency4_g170192 = Data4_g170192.Translucency;
				Out_Transmission4_g170192 = Data4_g170192.Transmission;
				Out_Thickness4_g170192 = Data4_g170192.Thickness;
				Out_Diffusion4_g170192 = Data4_g170192.Diffusion;
				}
				half3 Visual_Albedo292_g170190 = Out_Albedo4_g170192;
				float temp_output_280_12_g170190 = Out_Grayscale4_g170192;
				half Visual_Grayscale308_g170190 = temp_output_280_12_g170190;
				float3 temp_cast_39 = (Visual_Grayscale308_g170190).xxx;
				TVEGlobalData Data15_g170191 = Data204_g169264;
				float Out_Dummy15_g170191 = 0;
				float4 Out_CoatParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170191 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170191 = Data15_g170191.Dummy;
				Out_CoatParams15_g170191 = Data15_g170191.CoatParams;
				Out_PaintParams15_g170191 = Data15_g170191.PaintParams;
				Out_GlowParams15_g170191 = Data15_g170191.GlowParams;
				Out_AtmoParams15_g170191= Data15_g170191.AtmoParams;
				Out_FadeParams15_g170191= Data15_g170191.FadeParams;
				Out_FormParams15_g170191 = Data15_g170191.FormParams;
				Out_LandParams15_g170191 = Data15_g170191.LandParams;
				Out_WindParams15_g170191 = Data15_g170191.WindParams;
				Out_PushParams15_g170191 = Data15_g170191.PushParams;
				}
				half4 Global_AtmoParams314_g170190 = Out_AtmoParams15_g170191;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170190 = ( (Global_AtmoParams314_g170190).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170190 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170190 = staticSwitch351_g170190;
				float3 lerpResult485_g170190 = lerp( Visual_Albedo292_g170190 , temp_cast_39 , ( Dryness_GlobalMask352_g170190 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170212 = RGBToHSV( lerpResult485_g170190 );
				half3 hsvTorgb61_g170212 = HSVToRGB( half3(( hsvTorgb58_g170212.x + _DrynessShiftValue ),hsvTorgb58_g170212.y,hsvTorgb58_g170212.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170190 = hsvTorgb61_g170212;
				#else
				float3 staticSwitch499_g170190 = lerpResult485_g170190;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170211 = 2.0;
				#else
				float staticSwitch1_g170211 = 4.594794;
				#endif
				half Dryness_TexMask478_g170190 = 1.0;
				float temp_output_280_11_g170190 = Out_MultiMask4_g170192;
				half Visual_MultiMask310_g170190 = temp_output_280_11_g170190;
				float lerpResult283_g170190 = lerp( 1.0 , Visual_MultiMask310_g170190 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170190 = lerpResult283_g170190;
				float temp_output_280_15_g170190 = Out_Luminosity4_g170192;
				half Visual_Luminosity309_g170190 = temp_output_280_15_g170190;
				float clampResult17_g170207 = clamp( Visual_Luminosity309_g170190 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170206 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170206 = ( _DrynessLumaRemap.y - temp_output_7_0_g170206 );
				float lerpResult295_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170207 - temp_output_7_0_g170206 ) / ( temp_output_10_0_g170206 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170190 = lerpResult295_g170190;
				TVEModelData Data15_g170193 = Data16_g169262;
				float Out_Dummy15_g170193 = 0;
				float3 Out_PositionOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170193 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170193 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170193 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170193 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170193 = float3( 0,0,0 );
				float4 Out_VertexData15_g170193 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170193 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170193 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170193 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170193 = Data15_g170193.Dummy;
				Out_PositionOS15_g170193 = Data15_g170193.PositionOS;
				Out_PositionWS15_g170193 = Data15_g170193.PositionWS;
				Out_PositionWO15_g170193 = Data15_g170193.PositionWO;
				Out_PositionRawOS15_g170193 = Data15_g170193.PositionRawOS;
				Out_PositionAddOS15_g170193 = Data15_g170193.PositionAddOS;
				Out_PivotOS15_g170193 = Data15_g170193.PivotOS;
				Out_PivotWS15_g170193 = Data15_g170193.PivotWS;
				Out_PivotWO15_g170193 = Data15_g170193.PivotWO;
				Out_NormalOS15_g170193 = Data15_g170193.NormalOS;
				Out_NormalWS15_g170193 = Data15_g170193.NormalWS;
				Out_NormalRawOS15_g170193 = Data15_g170193.NormalRawOS;
				Out_NormalRawWS15_g170193 = Data15_g170193.NormalRawWS;
				Out_TangentOS15_g170193 = Data15_g170193.TangentOS;
				Out_ViewDirWS15_g170193 = Data15_g170193.ViewDirWS;
				Out_VertexData15_g170193 = Data15_g170193.VertexData;
				Out_MotionData15_g170193 = Data15_g170193.MotionData;
				Out_BoundsData15_g170193 = Data15_g170193.BoundsData;
				Out_RotationData15_g170193 = Data15_g170193.RotationData;
				}
				half4 Model_VertexMasks386_g170190 = Out_VertexData15_g170193;
				float4 break375_g170190 = Model_VertexMasks386_g170190;
				float4 break33_g170200 = _dryness_vert_mode;
				float temp_output_30_0_g170200 = ( break375_g170190.x * break33_g170200.x );
				float temp_output_29_0_g170200 = ( break375_g170190.y * break33_g170200.y );
				float temp_output_31_0_g170200 = ( break375_g170190.z * break33_g170200.z );
				float temp_output_28_0_g170200 = ( temp_output_30_0_g170200 + temp_output_29_0_g170200 + temp_output_31_0_g170200 + ( break375_g170190.w * break33_g170200.w ) );
				float clampResult17_g170201 = clamp( temp_output_28_0_g170200 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170202 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170202 = ( _DrynessMeshRemap.y - temp_output_7_0_g170202 );
				float lerpResult452_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170201 - temp_output_7_0_g170202 ) / ( temp_output_10_0_g170202 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170208 = lerpResult452_g170190;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170208 = ( temp_output_6_0_g170208 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170208 = temp_output_6_0_g170208;
				#endif
				float temp_output_448_0_g170190 = staticSwitch14_g170208;
				half Dryness_VertMask378_g170190 = temp_output_448_0_g170190;
				half Dryness_MaskNoise291_g170190 = 1.0;
				half Custom_Mask411_g170190 = 1.0;
				float temp_output_7_0_g170205 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170205 = ( _DrynessBlendRemap.y - temp_output_7_0_g170205 );
				half Dryness_Mask329_g170190 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170190 * Dryness_MultiMask302_g170190 * Dryness_LumaMask301_g170190 * Dryness_VertMask378_g170190 * Dryness_MaskNoise291_g170190 * Dryness_GlobalMask352_g170190 * Custom_Mask411_g170190 ) - temp_output_7_0_g170205 ) / ( temp_output_10_0_g170205 + 0.0001 ) ) );
				float3 lerpResult336_g170190 = lerp( Visual_Albedo292_g170190 , ( staticSwitch499_g170190 * staticSwitch1_g170211 * (_DrynessColor).rgb ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170190 = lerpResult336_g170190;
				#else
				float3 staticSwitch356_g170190 = Visual_Albedo292_g170190;
				#endif
				half3 Final_Albedo331_g170190 = staticSwitch356_g170190;
				float3 In_Albedo3_g170194 = Final_Albedo331_g170190;
				float2 In_NormalTS3_g170194 = Out_NormalTS4_g170192;
				float3 In_NormalWS3_g170194 = Out_NormalWS4_g170192;
				half4 Visual_Shader415_g170190 = Out_Shader4_g170192;
				float4 break438_g170190 = Visual_Shader415_g170190;
				float4 appendResult439_g170190 = (float4(break438_g170190.x , break438_g170190.y , break438_g170190.z , ( break438_g170190.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170190 = lerp( Visual_Shader415_g170190 , appendResult439_g170190 , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170190 = lerpResult427_g170190;
				#else
				float4 staticSwitch426_g170190 = Visual_Shader415_g170190;
				#endif
				half4 Final_Shader433_g170190 = staticSwitch426_g170190;
				float4 In_Shader3_g170194 = Final_Shader433_g170190;
				float4 In_Emissive3_g170194 = Out_Emissive4_g170192;
				float In_Grayscale3_g170194 = temp_output_280_12_g170190;
				float In_Luminosity3_g170194 = temp_output_280_15_g170190;
				float In_MultiMask3_g170194 = temp_output_280_11_g170190;
				float In_AlphaClip3_g170194 = Out_AlphaClip4_g170192;
				float In_AlphaFade3_g170194 = Out_AlphaFade4_g170192;
				float3 In_Translucency3_g170194 = Out_Translucency4_g170192;
				half Visual_Transmission416_g170190 = Out_Transmission4_g170192;
				float lerpResult421_g170190 = lerp( Visual_Transmission416_g170190 , ( Visual_Transmission416_g170190 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170190 = lerpResult421_g170190;
				#else
				float staticSwitch418_g170190 = Visual_Transmission416_g170190;
				#endif
				half Final_Transmission425_g170190 = staticSwitch418_g170190;
				float In_Transmission3_g170194 = Final_Transmission425_g170190;
				float In_Thickness3_g170194 = Out_Thickness4_g170192;
				float In_Diffusion3_g170194 = Out_Diffusion4_g170192;
				{
				Data3_g170194.Dummy = In_Dummy3_g170194;
				Data3_g170194.Albedo = In_Albedo3_g170194;
				Data3_g170194.NormalTS = In_NormalTS3_g170194;
				Data3_g170194.NormalWS = In_NormalWS3_g170194;
				Data3_g170194.Shader = In_Shader3_g170194;
				Data3_g170194.Emissive= In_Emissive3_g170194;
				Data3_g170194.MultiMask = In_MultiMask3_g170194;
				Data3_g170194.Grayscale = In_Grayscale3_g170194;
				Data3_g170194.Luminosity = In_Luminosity3_g170194;
				Data3_g170194.AlphaClip = In_AlphaClip3_g170194;
				Data3_g170194.AlphaFade = In_AlphaFade3_g170194;
				Data3_g170194.Translucency = In_Translucency3_g170194;
				Data3_g170194.Transmission = In_Transmission3_g170194;
				Data3_g170194.Thickness = In_Thickness3_g170194;
				Data3_g170194.Diffusion = In_Diffusion3_g170194;
				}
				TVEVisualData Data4_g170320 = Data3_g170194;
				float Out_Dummy4_g170320 = 0;
				float3 Out_Albedo4_g170320 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170320 = float2( 0,0 );
				float3 Out_NormalWS4_g170320 = float3( 0,0,0 );
				float4 Out_Shader4_g170320 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170320 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170320 = 0;
				float Out_Grayscale4_g170320 = 0;
				float Out_Luminosity4_g170320 = 0;
				float Out_AlphaClip4_g170320 = 0;
				float Out_AlphaFade4_g170320 = 0;
				float3 Out_Translucency4_g170320 = float3( 0,0,0 );
				float Out_Transmission4_g170320 = 0;
				float Out_Thickness4_g170320 = 0;
				float Out_Diffusion4_g170320 = 0;
				{
				Out_Dummy4_g170320 = Data4_g170320.Dummy;
				Out_Albedo4_g170320 = Data4_g170320.Albedo;
				Out_NormalTS4_g170320 = Data4_g170320.NormalTS;
				Out_NormalWS4_g170320 = Data4_g170320.NormalWS;
				Out_Shader4_g170320 = Data4_g170320.Shader;
				Out_Emissive4_g170320= Data4_g170320.Emissive;
				Out_MultiMask4_g170320 = Data4_g170320.MultiMask;
				Out_Grayscale4_g170320 = Data4_g170320.Grayscale;
				Out_Luminosity4_g170320= Data4_g170320.Luminosity;
				Out_AlphaClip4_g170320 = Data4_g170320.AlphaClip;
				Out_AlphaFade4_g170320 = Data4_g170320.AlphaFade;
				Out_Translucency4_g170320 = Data4_g170320.Translucency;
				Out_Transmission4_g170320 = Data4_g170320.Transmission;
				Out_Thickness4_g170320 = Data4_g170320.Thickness;
				Out_Diffusion4_g170320 = Data4_g170320.Diffusion;
				}
				half3 Visual_Albedo127_g170319 = Out_Albedo4_g170320;
				float4 vertexToFrag24_g170165 = IN.ase_texcoord10;
				half4 Interp_Data1269 = vertexToFrag24_g170165;
				float clampResult208_g170319 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170319 = ( Visual_Albedo127_g170319 + ( ( Visual_Albedo127_g170319 * Visual_Albedo127_g170319 * 200.0 * _motion_highlight_color ) * clampResult208_g170319 ) );
				#else
				float3 staticSwitch209_g170319 = Visual_Albedo127_g170319;
				#endif
				half3 Final_Albedo160_g170319 = staticSwitch209_g170319;
				float3 In_Albedo3_g170321 = Final_Albedo160_g170319;
				float2 In_NormalTS3_g170321 = Out_NormalTS4_g170320;
				float3 In_NormalWS3_g170321 = Out_NormalWS4_g170320;
				float4 In_Shader3_g170321 = Out_Shader4_g170320;
				float4 In_Emissive3_g170321 = Out_Emissive4_g170320;
				float In_Grayscale3_g170321 = Out_Grayscale4_g170320;
				float In_Luminosity3_g170321 = Out_Luminosity4_g170320;
				float In_MultiMask3_g170321 = Out_MultiMask4_g170320;
				float In_AlphaClip3_g170321 = Out_AlphaClip4_g170320;
				float In_AlphaFade3_g170321 = Out_AlphaFade4_g170320;
				float3 In_Translucency3_g170321 = Out_Translucency4_g170320;
				float In_Transmission3_g170321 = Out_Transmission4_g170320;
				float In_Thickness3_g170321 = Out_Thickness4_g170320;
				float In_Diffusion3_g170321 = Out_Diffusion4_g170320;
				{
				Data3_g170321.Dummy = In_Dummy3_g170321;
				Data3_g170321.Albedo = In_Albedo3_g170321;
				Data3_g170321.NormalTS = In_NormalTS3_g170321;
				Data3_g170321.NormalWS = In_NormalWS3_g170321;
				Data3_g170321.Shader = In_Shader3_g170321;
				Data3_g170321.Emissive= In_Emissive3_g170321;
				Data3_g170321.MultiMask = In_MultiMask3_g170321;
				Data3_g170321.Grayscale = In_Grayscale3_g170321;
				Data3_g170321.Luminosity = In_Luminosity3_g170321;
				Data3_g170321.AlphaClip = In_AlphaClip3_g170321;
				Data3_g170321.AlphaFade = In_AlphaFade3_g170321;
				Data3_g170321.Translucency = In_Translucency3_g170321;
				Data3_g170321.Transmission = In_Transmission3_g170321;
				Data3_g170321.Thickness = In_Thickness3_g170321;
				Data3_g170321.Diffusion = In_Diffusion3_g170321;
				}
				TVEVisualData Data4_g170323 = Data3_g170321;
				float Out_Dummy4_g170323 = 0;
				float3 Out_Albedo4_g170323 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170323 = float2( 0,0 );
				float3 Out_NormalWS4_g170323 = float3( 0,0,0 );
				float4 Out_Shader4_g170323 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170323 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170323 = 0;
				float Out_Grayscale4_g170323 = 0;
				float Out_Luminosity4_g170323 = 0;
				float Out_AlphaClip4_g170323 = 0;
				float Out_AlphaFade4_g170323 = 0;
				float3 Out_Translucency4_g170323 = float3( 0,0,0 );
				float Out_Transmission4_g170323 = 0;
				float Out_Thickness4_g170323 = 0;
				float Out_Diffusion4_g170323 = 0;
				{
				Out_Dummy4_g170323 = Data4_g170323.Dummy;
				Out_Albedo4_g170323 = Data4_g170323.Albedo;
				Out_NormalTS4_g170323 = Data4_g170323.NormalTS;
				Out_NormalWS4_g170323 = Data4_g170323.NormalWS;
				Out_Shader4_g170323 = Data4_g170323.Shader;
				Out_Emissive4_g170323= Data4_g170323.Emissive;
				Out_MultiMask4_g170323 = Data4_g170323.MultiMask;
				Out_Grayscale4_g170323 = Data4_g170323.Grayscale;
				Out_Luminosity4_g170323= Data4_g170323.Luminosity;
				Out_AlphaClip4_g170323 = Data4_g170323.AlphaClip;
				Out_AlphaFade4_g170323 = Data4_g170323.AlphaFade;
				Out_Translucency4_g170323 = Data4_g170323.Translucency;
				Out_Transmission4_g170323 = Data4_g170323.Transmission;
				Out_Thickness4_g170323 = Data4_g170323.Thickness;
				Out_Diffusion4_g170323 = Data4_g170323.Diffusion;
				}
				half3 Visual_Albedo127_g170322 = Out_Albedo4_g170323;
				float3 temp_output_622_0_g170322 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170326 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170327 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170327 = ( temp_output_6_0_g170327 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170327 = temp_output_6_0_g170327;
				#endif
				half4 Overlay_Coords639_g170322 = staticSwitch14_g170327;
				float4 temp_output_37_0_g170326 = Overlay_Coords639_g170322;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				TVEModelData Data15_g170328 = Data16_g169262;
				float Out_Dummy15_g170328 = 0;
				float3 Out_PositionOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170328 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170328 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170328 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170328 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170328 = float3( 0,0,0 );
				float4 Out_VertexData15_g170328 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170328 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170328 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170328 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170328 = Data15_g170328.Dummy;
				Out_PositionOS15_g170328 = Data15_g170328.PositionOS;
				Out_PositionWS15_g170328 = Data15_g170328.PositionWS;
				Out_PositionWO15_g170328 = Data15_g170328.PositionWO;
				Out_PositionRawOS15_g170328 = Data15_g170328.PositionRawOS;
				Out_PositionAddOS15_g170328 = Data15_g170328.PositionAddOS;
				Out_PivotOS15_g170328 = Data15_g170328.PivotOS;
				Out_PivotWS15_g170328 = Data15_g170328.PivotWS;
				Out_PivotWO15_g170328 = Data15_g170328.PivotWO;
				Out_NormalOS15_g170328 = Data15_g170328.NormalOS;
				Out_NormalWS15_g170328 = Data15_g170328.NormalWS;
				Out_NormalRawOS15_g170328 = Data15_g170328.NormalRawOS;
				Out_NormalRawWS15_g170328 = Data15_g170328.NormalRawWS;
				Out_TangentOS15_g170328 = Data15_g170328.TangentOS;
				Out_ViewDirWS15_g170328 = Data15_g170328.ViewDirWS;
				Out_VertexData15_g170328 = Data15_g170328.VertexData;
				Out_MotionData15_g170328 = Data15_g170328.MotionData;
				Out_BoundsData15_g170328 = Data15_g170328.BoundsData;
				Out_RotationData15_g170328 = Data15_g170328.RotationData;
				}
				half3 Model_PositionWO602_g170322 = Out_PositionWO15_g170328;
				float3 temp_output_279_0_g170326 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170326 = sampler_Linear_Repeat;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				half3 Model_NormalWS712_g170322 = Out_NormalWS15_g170328;
				float3 temp_output_280_0_g170326 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170326 = sampler_Linear_Repeat;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170326 = sampler_Linear_Repeat;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170322 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170322 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170322 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#endif
				half3 Overlay_Albedo526_g170322 = (staticSwitch676_g170322).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170322 = ( temp_output_622_0_g170322 * Overlay_Albedo526_g170322 );
				#else
				float3 staticSwitch578_g170322 = temp_output_622_0_g170322;
				#endif
				float3 temp_output_6_0_g170334 = staticSwitch578_g170322;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170334 = ( temp_output_6_0_g170334 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170334 = temp_output_6_0_g170334;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170331) = _OverlayGlitterTex;
				SamplerState Sampler246_g170331 = sampler_Linear_Repeat;
				float4 appendResult863_g170322 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170331 = appendResult863_g170322;
				half4 Coords246_g170331 = temp_output_37_0_g170331;
				float3 temp_output_279_0_g170331 = Model_PositionWO602_g170322;
				half3 WorldPosition246_g170331 = temp_output_279_0_g170331;
				float3 temp_output_280_0_g170331 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170331 = temp_output_280_0_g170331;
				half4 localSamplePlanar3D246_g170331 = SamplePlanar3D( Texture246_g170331 , Sampler246_g170331 , Coords246_g170331 , WorldPosition246_g170331 , WorldNormal246_g170331 );
				half Overlay_GlitterTex854_g170322 = (localSamplePlanar3D246_g170331).x;
				half3 Model_PositionWS879_g170322 = Out_PositionWS15_g170328;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170322 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170322 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170322 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170322 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170322 = staticSwitch868_g170322;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170348) = _OverlayMaskTex;
				SamplerState Sampler276_g170348 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170349 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170349 = ( temp_output_6_0_g170349 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170349 = temp_output_6_0_g170349;
				#endif
				half4 Local_MaskCoords888_g170322 = staticSwitch14_g170349;
				float4 temp_output_37_0_g170348 = Local_MaskCoords888_g170322;
				half4 Coords276_g170348 = temp_output_37_0_g170348;
				half2 TexCoord276_g170348 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170348 = SampleMain( Texture276_g170348 , Sampler276_g170348 , Coords276_g170348 , TexCoord276_g170348 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170348) = _OverlayMaskTex;
				SamplerState Sampler275_g170348 = sampler_Linear_Repeat;
				half4 Coords275_g170348 = temp_output_37_0_g170348;
				half2 TexCoord275_g170348 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170348 = SampleExtra( Texture275_g170348 , Sampler275_g170348 , Coords275_g170348 , TexCoord275_g170348 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170322 = localSampleExtra275_g170348;
				#else
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#endif
				half4 Local_MaskTex887_g170322 = staticSwitch894_g170322;
				float clampResult17_g170350 = clamp( (Local_MaskTex887_g170322).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170351 = ( _OverlayMaskRemap.y - temp_output_7_0_g170351 );
				float lerpResult900_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170322 = lerpResult900_g170322;
				float3 temp_output_739_21_g170322 = Out_NormalWS4_g170323;
				half3 Visual_NormalWS749_g170322 = temp_output_739_21_g170322;
				float clampResult17_g170344 = clamp( saturate( (Visual_NormalWS749_g170322).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170343 = _OverlayProjRemap.x;
				float temp_output_10_0_g170343 = ( _OverlayProjRemap.y - temp_output_7_0_g170343 );
				float lerpResult842_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170344 - temp_output_7_0_g170343 ) / ( temp_output_10_0_g170343 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170322 = lerpResult842_g170322;
				float temp_output_739_15_g170322 = Out_Luminosity4_g170323;
				half Visual_Luminosity654_g170322 = temp_output_739_15_g170322;
				float clampResult17_g170346 = clamp( Visual_Luminosity654_g170322 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170345 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170345 = ( _OverlayLumaRemap.y - temp_output_7_0_g170345 );
				float lerpResult587_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170345 ) / ( temp_output_10_0_g170345 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170322 = lerpResult587_g170322;
				half4 Model_VertexMasks791_g170322 = Out_VertexData15_g170328;
				float4 break792_g170322 = Model_VertexMasks791_g170322;
				float4 break33_g170336 = _overlay_vert_mode;
				float temp_output_30_0_g170336 = ( break792_g170322.x * break33_g170336.x );
				float temp_output_29_0_g170336 = ( break792_g170322.y * break33_g170336.y );
				float temp_output_31_0_g170336 = ( break792_g170322.z * break33_g170336.z );
				float temp_output_28_0_g170336 = ( temp_output_30_0_g170336 + temp_output_29_0_g170336 + temp_output_31_0_g170336 + ( break792_g170322.w * break33_g170336.w ) );
				float clampResult17_g170337 = clamp( temp_output_28_0_g170336 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170340 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170340 = ( _OverlayMeshRemap.y - temp_output_7_0_g170340 );
				float lerpResult881_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170337 - temp_output_7_0_g170340 ) / ( temp_output_10_0_g170340 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170347 = lerpResult881_g170322;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170347 = ( temp_output_6_0_g170347 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170347 = temp_output_6_0_g170347;
				#endif
				float temp_output_831_0_g170322 = staticSwitch14_g170347;
				half Overlay_VertMask801_g170322 = temp_output_831_0_g170322;
				half Overlay_MaskNoise427_g170322 = 1.0;
				TVEGlobalData Data15_g170324 = Data204_g169264;
				float Out_Dummy15_g170324 = 0;
				float4 Out_CoatParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170324 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170324 = Data15_g170324.Dummy;
				Out_CoatParams15_g170324 = Data15_g170324.CoatParams;
				Out_PaintParams15_g170324 = Data15_g170324.PaintParams;
				Out_GlowParams15_g170324 = Data15_g170324.GlowParams;
				Out_AtmoParams15_g170324= Data15_g170324.AtmoParams;
				Out_FadeParams15_g170324= Data15_g170324.FadeParams;
				Out_FormParams15_g170324 = Data15_g170324.FormParams;
				Out_LandParams15_g170324 = Data15_g170324.LandParams;
				Out_WindParams15_g170324 = Data15_g170324.WindParams;
				Out_PushParams15_g170324 = Data15_g170324.PushParams;
				}
				half4 Global_AtmoParams516_g170322 = Out_AtmoParams15_g170324;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170322 = ( (Global_AtmoParams516_g170322).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170322 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170322 = staticSwitch705_g170322;
				half Custom_Mask646_g170322 = 1.0;
				float temp_output_7_0_g170352 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170352 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170352 );
				half Overlay_Mask494_g170322 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170322 * Overlay_MaskProj457_g170322 * Overlay_MaskLuma438_g170322 * Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 * Custom_Mask646_g170322 ) - temp_output_7_0_g170352 ) / ( temp_output_10_0_g170352 + 0.0001 ) ) );
				float3 lerpResult467_g170322 = lerp( Visual_Albedo127_g170322 , ( staticSwitch14_g170334 + Overlay_GlitterColor865_g170322 ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170322 = lerpResult467_g170322;
				#else
				float3 staticSwitch577_g170322 = Visual_Albedo127_g170322;
				#endif
				half3 Final_Albedo493_g170322 = staticSwitch577_g170322;
				float3 In_Albedo3_g170325 = Final_Albedo493_g170322;
				half2 Visual_NormalTS535_g170322 = Out_NormalTS4_g170323;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170329) = _OverlayNormalTex;
				SamplerState Sampler238_g170329 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170329 = Overlay_Coords639_g170322;
				half4 Coords238_g170329 = temp_output_37_0_g170329;
				float3 temp_output_279_0_g170329 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170329 = temp_output_279_0_g170329;
				half4 localSamplePlanar2D238_g170329 = SamplePlanar2D( Texture238_g170329 , Sampler238_g170329 , Coords238_g170329 , WorldPosition238_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170329) = _OverlayNormalTex;
				SamplerState Sampler246_g170329 = sampler_Linear_Repeat;
				half4 Coords246_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition246_g170329 = temp_output_279_0_g170329;
				float3 temp_output_280_0_g170329 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170329 = temp_output_280_0_g170329;
				half4 localSamplePlanar3D246_g170329 = SamplePlanar3D( Texture246_g170329 , Sampler246_g170329 , Coords246_g170329 , WorldPosition246_g170329 , WorldNormal246_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170329) = _OverlayNormalTex;
				SamplerState Sampler234_g170329 = sampler_Linear_Repeat;
				float4 Coords234_g170329 = temp_output_37_0_g170329;
				float3 WorldPosition234_g170329 = temp_output_279_0_g170329;
				float4 localSampleStochastic2D234_g170329 = SampleStochastic2D( Texture234_g170329 , Sampler234_g170329 , Coords234_g170329 , WorldPosition234_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170329) = _OverlayNormalTex;
				SamplerState Sampler263_g170329 = sampler_Linear_Repeat;
				half4 Coords263_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition263_g170329 = temp_output_279_0_g170329;
				half3 WorldNormal263_g170329 = temp_output_280_0_g170329;
				half4 localSampleStochastic3D263_g170329 = SampleStochastic3D( Texture263_g170329 , Sampler263_g170329 , Coords263_g170329 , WorldPosition263_g170329 , WorldNormal263_g170329 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170322 = localSamplePlanar3D246_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170322 = localSampleStochastic2D234_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170322 = localSampleStochastic3D263_g170329;
				#else
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#endif
				half4 Normal_Packed45_g170333 = staticSwitch686_g170322;
				float2 appendResult58_g170333 = (float2(( (Normal_Packed45_g170333).x * (Normal_Packed45_g170333).w ) , (Normal_Packed45_g170333).y));
				half2 Normal_Default50_g170333 = appendResult58_g170333;
				half2 Normal_ASTC41_g170333 = (Normal_Packed45_g170333).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170333 = Normal_ASTC41_g170333;
				#else
				float2 staticSwitch38_g170333 = Normal_Default50_g170333;
				#endif
				half2 Normal_NO_DTX544_g170333 = (Normal_Packed45_g170333).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170333 = Normal_NO_DTX544_g170333;
				#else
				float2 staticSwitch37_g170333 = staticSwitch38_g170333;
				#endif
				half2 Normal_Planar45_g170332 = (staticSwitch37_g170333*2.0 + -1.0);
				float2 break71_g170332 = Normal_Planar45_g170332;
				float3 appendResult72_g170332 = (float3(break71_g170332.x , 0.0 , break71_g170332.y));
				half2 Overlay_Normal528_g170322 = (mul( ase_worldToTangent, appendResult72_g170332 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170322 = Overlay_Normal528_g170322;
				#else
				float2 staticSwitch579_g170322 = Visual_NormalTS535_g170322;
				#endif
				float2 lerpResult551_g170322 = lerp( Visual_NormalTS535_g170322 , ( staticSwitch579_g170322 * _OverlayNormalValue ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170322 = lerpResult551_g170322;
				#else
				float2 staticSwitch583_g170322 = Visual_NormalTS535_g170322;
				#endif
				half2 Final_NormalTS499_g170322 = staticSwitch583_g170322;
				float2 In_NormalTS3_g170325 = Final_NormalTS499_g170322;
				float3 In_NormalWS3_g170325 = temp_output_739_21_g170322;
				half4 Visual_Masks536_g170322 = Out_Shader4_g170323;
				float4 appendResult585_g170322 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170322 = lerp( Visual_Masks536_g170322 , appendResult585_g170322 , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170322 = lerpResult584_g170322;
				#else
				float4 staticSwitch586_g170322 = Visual_Masks536_g170322;
				#endif
				half4 Final_Masks482_g170322 = staticSwitch586_g170322;
				float4 In_Shader3_g170325 = Final_Masks482_g170322;
				float4 In_Emissive3_g170325 = Out_Emissive4_g170323;
				float temp_output_739_12_g170322 = Out_Grayscale4_g170323;
				float In_Grayscale3_g170325 = temp_output_739_12_g170322;
				float In_Luminosity3_g170325 = temp_output_739_15_g170322;
				float In_MultiMask3_g170325 = Out_MultiMask4_g170323;
				float In_AlphaClip3_g170325 = Out_AlphaClip4_g170323;
				float In_AlphaFade3_g170325 = Out_AlphaFade4_g170323;
				float3 In_Translucency3_g170325 = Out_Translucency4_g170323;
				half Visual_Transmission699_g170322 = Out_Transmission4_g170323;
				float lerpResult746_g170322 = lerp( Visual_Transmission699_g170322 , ( Visual_Transmission699_g170322 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170322 = lerpResult746_g170322;
				#else
				float staticSwitch703_g170322 = Visual_Transmission699_g170322;
				#endif
				half Final_Transmission702_g170322 = staticSwitch703_g170322;
				float In_Transmission3_g170325 = Final_Transmission702_g170322;
				float In_Thickness3_g170325 = Out_Thickness4_g170323;
				float In_Diffusion3_g170325 = Out_Diffusion4_g170323;
				{
				Data3_g170325.Dummy = In_Dummy3_g170325;
				Data3_g170325.Albedo = In_Albedo3_g170325;
				Data3_g170325.NormalTS = In_NormalTS3_g170325;
				Data3_g170325.NormalWS = In_NormalWS3_g170325;
				Data3_g170325.Shader = In_Shader3_g170325;
				Data3_g170325.Emissive= In_Emissive3_g170325;
				Data3_g170325.MultiMask = In_MultiMask3_g170325;
				Data3_g170325.Grayscale = In_Grayscale3_g170325;
				Data3_g170325.Luminosity = In_Luminosity3_g170325;
				Data3_g170325.AlphaClip = In_AlphaClip3_g170325;
				Data3_g170325.AlphaFade = In_AlphaFade3_g170325;
				Data3_g170325.Translucency = In_Translucency3_g170325;
				Data3_g170325.Transmission = In_Transmission3_g170325;
				Data3_g170325.Thickness = In_Thickness3_g170325;
				Data3_g170325.Diffusion = In_Diffusion3_g170325;
				}
				TVEVisualData Data4_g170359 = Data3_g170325;
				float Out_Dummy4_g170359 = 0;
				float3 Out_Albedo4_g170359 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170359 = float2( 0,0 );
				float3 Out_NormalWS4_g170359 = float3( 0,0,0 );
				float4 Out_Shader4_g170359 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170359 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170359 = 0;
				float Out_Grayscale4_g170359 = 0;
				float Out_Luminosity4_g170359 = 0;
				float Out_AlphaClip4_g170359 = 0;
				float Out_AlphaFade4_g170359 = 0;
				float3 Out_Translucency4_g170359 = float3( 0,0,0 );
				float Out_Transmission4_g170359 = 0;
				float Out_Thickness4_g170359 = 0;
				float Out_Diffusion4_g170359 = 0;
				{
				Out_Dummy4_g170359 = Data4_g170359.Dummy;
				Out_Albedo4_g170359 = Data4_g170359.Albedo;
				Out_NormalTS4_g170359 = Data4_g170359.NormalTS;
				Out_NormalWS4_g170359 = Data4_g170359.NormalWS;
				Out_Shader4_g170359 = Data4_g170359.Shader;
				Out_Emissive4_g170359= Data4_g170359.Emissive;
				Out_MultiMask4_g170359 = Data4_g170359.MultiMask;
				Out_Grayscale4_g170359 = Data4_g170359.Grayscale;
				Out_Luminosity4_g170359= Data4_g170359.Luminosity;
				Out_AlphaClip4_g170359 = Data4_g170359.AlphaClip;
				Out_AlphaFade4_g170359 = Data4_g170359.AlphaFade;
				Out_Translucency4_g170359 = Data4_g170359.Translucency;
				Out_Transmission4_g170359 = Data4_g170359.Transmission;
				Out_Thickness4_g170359 = Data4_g170359.Thickness;
				Out_Diffusion4_g170359 = Data4_g170359.Diffusion;
				}
				half3 Visual_Albedo127_g170358 = Out_Albedo4_g170359;
				TVEGlobalData Data15_g170371 = Data204_g169264;
				float Out_Dummy15_g170371 = 0;
				float4 Out_CoatParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_CoatParams15_g170371 = Data15_g170371.CoatParams;
				Out_PaintParams15_g170371 = Data15_g170371.PaintParams;
				Out_GlowParams15_g170371 = Data15_g170371.GlowParams;
				Out_AtmoParams15_g170371= Data15_g170371.AtmoParams;
				Out_FadeParams15_g170371= Data15_g170371.FadeParams;
				Out_FormParams15_g170371 = Data15_g170371.FormParams;
				Out_LandParams15_g170371 = Data15_g170371.LandParams;
				Out_WindParams15_g170371 = Data15_g170371.WindParams;
				Out_PushParams15_g170371 = Data15_g170371.PushParams;
				}
				half4 Global_AtmoParams516_g170358 = Out_AtmoParams15_g170371;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170358 = ( (Global_AtmoParams516_g170358).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170358 = 1.0;
				#endif
				half Global_Wetness429_g170358 = staticSwitch663_g170358;
				half Wetness_Value866_g170358 = ( _WetnessIntensityValue * Global_Wetness429_g170358 );
				half4 Visual_Masks536_g170358 = Out_Shader4_g170359;
				float temp_output_757_0_g170358 = (Visual_Masks536_g170358).z;
				half Water_HeightMask782_g170358 = temp_output_757_0_g170358;
				float clampResult17_g170369 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170358 ) - Water_HeightMask782_g170358 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170370 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170370 );
				TVEModelData Data15_g170361 = Data16_g169262;
				float Out_Dummy15_g170361 = 0;
				float3 Out_PositionOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170361 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170361 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170361 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170361 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170361 = float3( 0,0,0 );
				float4 Out_VertexData15_g170361 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170361 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170361 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170361 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170361 = Data15_g170361.Dummy;
				Out_PositionOS15_g170361 = Data15_g170361.PositionOS;
				Out_PositionWS15_g170361 = Data15_g170361.PositionWS;
				Out_PositionWO15_g170361 = Data15_g170361.PositionWO;
				Out_PositionRawOS15_g170361 = Data15_g170361.PositionRawOS;
				Out_PositionAddOS15_g170361 = Data15_g170361.PositionAddOS;
				Out_PivotOS15_g170361 = Data15_g170361.PivotOS;
				Out_PivotWS15_g170361 = Data15_g170361.PivotWS;
				Out_PivotWO15_g170361 = Data15_g170361.PivotWO;
				Out_NormalOS15_g170361 = Data15_g170361.NormalOS;
				Out_NormalWS15_g170361 = Data15_g170361.NormalWS;
				Out_NormalRawOS15_g170361 = Data15_g170361.NormalRawOS;
				Out_NormalRawWS15_g170361 = Data15_g170361.NormalRawWS;
				Out_TangentOS15_g170361 = Data15_g170361.TangentOS;
				Out_ViewDirWS15_g170361 = Data15_g170361.ViewDirWS;
				Out_VertexData15_g170361 = Data15_g170361.VertexData;
				Out_MotionData15_g170361 = Data15_g170361.MotionData;
				Out_BoundsData15_g170361 = Data15_g170361.BoundsData;
				Out_RotationData15_g170361 = Data15_g170361.RotationData;
				}
				half3 Model_NormalWS798_g170358 = Out_NormalWS15_g170361;
				float temp_output_786_0_g170358 = saturate( (Model_NormalWS798_g170358).y );
				half Wetness_ProjMask790_g170358 = temp_output_786_0_g170358;
				half Water_Mask760_g170358 = ( saturate( ( ( clampResult17_g170369 - temp_output_7_0_g170370 ) / ( temp_output_10_0_g170370 + 0.0001 ) ) ) * Wetness_ProjMask790_g170358 );
				float3 lerpResult918_g170358 = lerp( Visual_Albedo127_g170358 , ( Visual_Albedo127_g170358 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170358 = lerpResult918_g170358;
				#else
				float3 staticSwitch946_g170358 = Visual_Albedo127_g170358;
				#endif
				float3 lerpResult768_g170358 = lerp( staticSwitch946_g170358 , ( staticSwitch946_g170358 * staticSwitch946_g170358 ) , _WetnessContrastValue);
				float3 lerpResult651_g170358 = lerp( Visual_Albedo127_g170358 , lerpResult768_g170358 , Wetness_Value866_g170358);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170358 = lerpResult651_g170358;
				#else
				float3 staticSwitch577_g170358 = Visual_Albedo127_g170358;
				#endif
				half3 Final_Albedo493_g170358 = staticSwitch577_g170358;
				float3 In_Albedo3_g170360 = Final_Albedo493_g170358;
				half2 Visual_Normal535_g170358 = Out_NormalTS4_g170359;
				float lerpResult877_g170358 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170358 = ( Visual_Normal535_g170358 * lerpResult877_g170358 );
				#else
				float2 staticSwitch957_g170358 = Visual_Normal535_g170358;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170363) = _WetnessDropsTex;
				SamplerState Sampler238_g170363 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170358 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170363 = appendResult924_g170358;
				half4 Coords238_g170363 = temp_output_37_0_g170363;
				half3 Model_PositionWO602_g170358 = Out_PositionWO15_g170361;
				float3 temp_output_279_0_g170363 = Model_PositionWO602_g170358;
				half3 WorldPosition238_g170363 = temp_output_279_0_g170363;
				half4 localSamplePlanar2D238_g170363 = SamplePlanar2D( Texture238_g170363 , Sampler238_g170363 , Coords238_g170363 , WorldPosition238_g170363 );
				float4 temp_output_676_0_g170358 = localSamplePlanar2D238_g170363;
				half2 Rain_DropsNormal919_g170358 = (temp_output_676_0_g170358).zw;
				float2 temp_output_903_0_g170358 = (Rain_DropsNormal919_g170358*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170358 = (temp_output_676_0_g170358).xy;
				float2 lerpResult904_g170358 = lerp( temp_output_903_0_g170358 , (Rain_RingsNormal713_g170358*2.0 + -1.0) , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170358 = lerpResult904_g170358;
				#else
				float2 staticSwitch960_g170358 = temp_output_903_0_g170358;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170358 = ( (Global_AtmoParams516_g170358).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170358 = 1.0;
				#endif
				half Global_Rain955_g170358 = staticSwitch949_g170358;
				half3 Model_PositionWS823_g170358 = Out_PositionWS15_g170361;
				half2 Normal_Planar45_g170374 = ( staticSwitch960_g170358 * Global_Rain955_g170358 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170358 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				half2 Wetness_Normal526_g170358 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170358 = ( staticSwitch957_g170358 + ( Wetness_ProjMask790_g170358 * Wetness_Normal526_g170358 ) );
				#else
				float2 staticSwitch583_g170358 = Visual_Normal535_g170358;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170358 = staticSwitch583_g170358;
				#else
				float2 staticSwitch774_g170358 = Visual_Normal535_g170358;
				#endif
				half2 Final_Normal499_g170358 = staticSwitch774_g170358;
				float2 In_NormalTS3_g170360 = Final_Normal499_g170358;
				float3 In_NormalWS3_g170360 = Out_NormalWS4_g170359;
				float4 break658_g170358 = Visual_Masks536_g170358;
				float temp_output_935_0_g170358 = ( Wetness_Value866_g170358 * _WetnessSmoothnessValue );
				float lerpResult941_g170358 = lerp( temp_output_935_0_g170358 , 2.0 , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170358 = lerpResult941_g170358;
				#else
				float staticSwitch959_g170358 = temp_output_935_0_g170358;
				#endif
				float4 appendResult661_g170358 = (float4(break658_g170358.x , break658_g170358.y , break658_g170358.z , saturate( ( break658_g170358.w + staticSwitch959_g170358 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170358 = appendResult661_g170358;
				#else
				float4 staticSwitch586_g170358 = Visual_Masks536_g170358;
				#endif
				half4 Final_Masks482_g170358 = staticSwitch586_g170358;
				float4 In_Shader3_g170360 = Final_Masks482_g170358;
				float4 In_Emissive3_g170360 = Out_Emissive4_g170359;
				float In_Grayscale3_g170360 = Out_Grayscale4_g170359;
				float In_Luminosity3_g170360 = Out_Luminosity4_g170359;
				float In_MultiMask3_g170360 = Out_MultiMask4_g170359;
				float In_AlphaClip3_g170360 = Out_AlphaClip4_g170359;
				float In_AlphaFade3_g170360 = Out_AlphaFade4_g170359;
				float3 In_Translucency3_g170360 = Out_Translucency4_g170359;
				float In_Transmission3_g170360 = Out_Transmission4_g170359;
				float In_Thickness3_g170360 = Out_Thickness4_g170359;
				float In_Diffusion3_g170360 = Out_Diffusion4_g170359;
				{
				Data3_g170360.Dummy = In_Dummy3_g170360;
				Data3_g170360.Albedo = In_Albedo3_g170360;
				Data3_g170360.NormalTS = In_NormalTS3_g170360;
				Data3_g170360.NormalWS = In_NormalWS3_g170360;
				Data3_g170360.Shader = In_Shader3_g170360;
				Data3_g170360.Emissive= In_Emissive3_g170360;
				Data3_g170360.MultiMask = In_MultiMask3_g170360;
				Data3_g170360.Grayscale = In_Grayscale3_g170360;
				Data3_g170360.Luminosity = In_Luminosity3_g170360;
				Data3_g170360.AlphaClip = In_AlphaClip3_g170360;
				Data3_g170360.AlphaFade = In_AlphaFade3_g170360;
				Data3_g170360.Translucency = In_Translucency3_g170360;
				Data3_g170360.Transmission = In_Transmission3_g170360;
				Data3_g170360.Thickness = In_Thickness3_g170360;
				Data3_g170360.Diffusion = In_Diffusion3_g170360;
				}
				TVEVisualData Data4_g170377 = Data3_g170360;
				float Out_Dummy4_g170377 = 0;
				float3 Out_Albedo4_g170377 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170377 = float2( 0,0 );
				float3 Out_NormalWS4_g170377 = float3( 0,0,0 );
				float4 Out_Shader4_g170377 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170377 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170377 = 0;
				float Out_Grayscale4_g170377 = 0;
				float Out_Luminosity4_g170377 = 0;
				float Out_AlphaClip4_g170377 = 0;
				float Out_AlphaFade4_g170377 = 0;
				float3 Out_Translucency4_g170377 = float3( 0,0,0 );
				float Out_Transmission4_g170377 = 0;
				float Out_Thickness4_g170377 = 0;
				float Out_Diffusion4_g170377 = 0;
				{
				Out_Dummy4_g170377 = Data4_g170377.Dummy;
				Out_Albedo4_g170377 = Data4_g170377.Albedo;
				Out_NormalTS4_g170377 = Data4_g170377.NormalTS;
				Out_NormalWS4_g170377 = Data4_g170377.NormalWS;
				Out_Shader4_g170377 = Data4_g170377.Shader;
				Out_Emissive4_g170377= Data4_g170377.Emissive;
				Out_MultiMask4_g170377 = Data4_g170377.MultiMask;
				Out_Grayscale4_g170377 = Data4_g170377.Grayscale;
				Out_Luminosity4_g170377= Data4_g170377.Luminosity;
				Out_AlphaClip4_g170377 = Data4_g170377.AlphaClip;
				Out_AlphaFade4_g170377 = Data4_g170377.AlphaFade;
				Out_Translucency4_g170377 = Data4_g170377.Translucency;
				Out_Transmission4_g170377 = Data4_g170377.Transmission;
				Out_Thickness4_g170377 = Data4_g170377.Thickness;
				Out_Diffusion4_g170377 = Data4_g170377.Diffusion;
				}
				float3 In_Albedo3_g170378 = Out_Albedo4_g170377;
				float2 In_NormalTS3_g170378 = Out_NormalTS4_g170377;
				float3 In_NormalWS3_g170378 = Out_NormalWS4_g170377;
				float4 In_Shader3_g170378 = Out_Shader4_g170377;
				float4 In_Emissive3_g170378 = Out_Emissive4_g170377;
				float In_Grayscale3_g170378 = Out_Grayscale4_g170377;
				float In_Luminosity3_g170378 = Out_Luminosity4_g170377;
				float temp_output_571_11_g170376 = Out_MultiMask4_g170377;
				float In_MultiMask3_g170378 = temp_output_571_11_g170376;
				half Visual_AlphaClip667_g170376 = Out_AlphaClip4_g170377;
				TVEGlobalData Data15_g170388 = Data204_g169264;
				float Out_Dummy15_g170388 = 0;
				float4 Out_CoatParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170388 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170388 = Data15_g170388.Dummy;
				Out_CoatParams15_g170388 = Data15_g170388.CoatParams;
				Out_PaintParams15_g170388 = Data15_g170388.PaintParams;
				Out_GlowParams15_g170388 = Data15_g170388.GlowParams;
				Out_AtmoParams15_g170388= Data15_g170388.AtmoParams;
				Out_FadeParams15_g170388= Data15_g170388.FadeParams;
				Out_FormParams15_g170388 = Data15_g170388.FormParams;
				Out_LandParams15_g170388 = Data15_g170388.LandParams;
				Out_WindParams15_g170388 = Data15_g170388.WindParams;
				Out_PushParams15_g170388 = Data15_g170388.PushParams;
				}
				half4 Global_FadeParams516_g170376 = Out_FadeParams15_g170388;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170376 = saturate( (Global_FadeParams516_g170376).w );
				#else
				float staticSwitch663_g170376 = 1.0;
				#endif
				half Local_GlobalMask429_g170376 = staticSwitch663_g170376;
				float lerpResult811_g170376 = lerp( 1.0 , Visual_AlphaClip667_g170376 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170376 = lerpResult811_g170376;
				TVEModelData Data15_g170379 = Data16_g169262;
				float Out_Dummy15_g170379 = 0;
				float3 Out_PositionOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170379 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170379 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170379 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170379 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170379 = float3( 0,0,0 );
				float4 Out_VertexData15_g170379 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170379 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170379 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170379 = Data15_g170379.Dummy;
				Out_PositionOS15_g170379 = Data15_g170379.PositionOS;
				Out_PositionWS15_g170379 = Data15_g170379.PositionWS;
				Out_PositionWO15_g170379 = Data15_g170379.PositionWO;
				Out_PositionRawOS15_g170379 = Data15_g170379.PositionRawOS;
				Out_PositionAddOS15_g170379 = Data15_g170379.PositionAddOS;
				Out_PivotOS15_g170379 = Data15_g170379.PivotOS;
				Out_PivotWS15_g170379 = Data15_g170379.PivotWS;
				Out_PivotWO15_g170379 = Data15_g170379.PivotWO;
				Out_NormalOS15_g170379 = Data15_g170379.NormalOS;
				Out_NormalWS15_g170379 = Data15_g170379.NormalWS;
				Out_NormalRawOS15_g170379 = Data15_g170379.NormalRawOS;
				Out_NormalRawWS15_g170379 = Data15_g170379.NormalRawWS;
				Out_TangentOS15_g170379 = Data15_g170379.TangentOS;
				Out_ViewDirWS15_g170379 = Data15_g170379.ViewDirWS;
				Out_VertexData15_g170379 = Data15_g170379.VertexData;
				Out_MotionData15_g170379 = Data15_g170379.MotionData;
				Out_BoundsData15_g170379 = Data15_g170379.BoundsData;
				Out_RotationData15_g170379 = Data15_g170379.RotationData;
				}
				half3 Model_PositionWO602_g170376 = Out_PositionWO15_g170379;
				float4 tex3DNode60_g170382 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170376 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170376 = lerp( 1.0 , tex3DNode60_g170382.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170376 = lerpResult673_g170376;
				half4 Model_VertexMasks752_g170376 = Out_VertexData15_g170379;
				float4 break755_g170376 = Model_VertexMasks752_g170376;
				float4 break33_g170380 = _cutout_vert_mode;
				float temp_output_30_0_g170380 = ( break755_g170376.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break755_g170376.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break755_g170376.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break755_g170376.w * break33_g170380.w ) );
				float clampResult17_g170381 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170384 = ( _CutoutMeshRemap.y - temp_output_7_0_g170384 );
				float lerpResult820_g170376 = lerp( 1.0 , saturate( ( ( clampResult17_g170381 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170385 = lerpResult820_g170376;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170385 = ( temp_output_6_0_g170385 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170385 = temp_output_6_0_g170385;
				#endif
				float temp_output_801_0_g170376 = staticSwitch14_g170385;
				half Local_VertMask766_g170376 = temp_output_801_0_g170376;
				half Visual_MultiMask671_g170376 = temp_output_571_11_g170376;
				float lerpResult683_g170376 = lerp( 1.0 , Visual_MultiMask671_g170376 , _CutoutMultiValue);
				half Local_MultiMask685_g170376 = lerpResult683_g170376;
				float lerpResult728_g170376 = lerp( Visual_AlphaClip667_g170376 , min( Visual_AlphaClip667_g170376 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170376 ) - ( Local_AlphaMask814_g170376 * Local_NoiseMask678_g170376 * Local_VertMask766_g170376 ) ) ) ) , Local_MultiMask685_g170376);
				half Local_AlphaClip784_g170376 = lerpResult728_g170376;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170376 = Local_AlphaClip784_g170376;
				#else
				float staticSwitch577_g170376 = Visual_AlphaClip667_g170376;
				#endif
				half Final_AlphaClip795_g170376 = staticSwitch577_g170376;
				float In_AlphaClip3_g170378 = Final_AlphaClip795_g170376;
				float In_AlphaFade3_g170378 = Out_AlphaFade4_g170377;
				float3 In_Translucency3_g170378 = Out_Translucency4_g170377;
				float In_Transmission3_g170378 = Out_Transmission4_g170377;
				float In_Thickness3_g170378 = Out_Thickness4_g170377;
				float In_Diffusion3_g170378 = Out_Diffusion4_g170377;
				{
				Data3_g170378.Dummy = In_Dummy3_g170378;
				Data3_g170378.Albedo = In_Albedo3_g170378;
				Data3_g170378.NormalTS = In_NormalTS3_g170378;
				Data3_g170378.NormalWS = In_NormalWS3_g170378;
				Data3_g170378.Shader = In_Shader3_g170378;
				Data3_g170378.Emissive= In_Emissive3_g170378;
				Data3_g170378.MultiMask = In_MultiMask3_g170378;
				Data3_g170378.Grayscale = In_Grayscale3_g170378;
				Data3_g170378.Luminosity = In_Luminosity3_g170378;
				Data3_g170378.AlphaClip = In_AlphaClip3_g170378;
				Data3_g170378.AlphaFade = In_AlphaFade3_g170378;
				Data3_g170378.Translucency = In_Translucency3_g170378;
				Data3_g170378.Transmission = In_Transmission3_g170378;
				Data3_g170378.Thickness = In_Thickness3_g170378;
				Data3_g170378.Diffusion = In_Diffusion3_g170378;
				}
				TVEVisualData Data4_g170392 = Data3_g170378;
				float Out_Dummy4_g170392 = 0;
				float3 Out_Albedo4_g170392 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170392 = float2( 0,0 );
				float3 Out_NormalWS4_g170392 = float3( 0,0,0 );
				float4 Out_Shader4_g170392 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170392 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170392 = 0;
				float Out_Grayscale4_g170392 = 0;
				float Out_Luminosity4_g170392 = 0;
				float Out_AlphaClip4_g170392 = 0;
				float Out_AlphaFade4_g170392 = 0;
				float3 Out_Translucency4_g170392 = float3( 0,0,0 );
				float Out_Transmission4_g170392 = 0;
				float Out_Thickness4_g170392 = 0;
				float Out_Diffusion4_g170392 = 0;
				{
				Out_Dummy4_g170392 = Data4_g170392.Dummy;
				Out_Albedo4_g170392 = Data4_g170392.Albedo;
				Out_NormalTS4_g170392 = Data4_g170392.NormalTS;
				Out_NormalWS4_g170392 = Data4_g170392.NormalWS;
				Out_Shader4_g170392 = Data4_g170392.Shader;
				Out_Emissive4_g170392= Data4_g170392.Emissive;
				Out_MultiMask4_g170392 = Data4_g170392.MultiMask;
				Out_Grayscale4_g170392 = Data4_g170392.Grayscale;
				Out_Luminosity4_g170392= Data4_g170392.Luminosity;
				Out_AlphaClip4_g170392 = Data4_g170392.AlphaClip;
				Out_AlphaFade4_g170392 = Data4_g170392.AlphaFade;
				Out_Translucency4_g170392 = Data4_g170392.Translucency;
				Out_Transmission4_g170392 = Data4_g170392.Transmission;
				Out_Thickness4_g170392 = Data4_g170392.Thickness;
				Out_Diffusion4_g170392 = Data4_g170392.Diffusion;
				}
				float3 In_Albedo3_g170393 = Out_Albedo4_g170392;
				float2 In_NormalTS3_g170393 = Out_NormalTS4_g170392;
				float3 In_NormalWS3_g170393 = Out_NormalWS4_g170392;
				float4 In_Shader3_g170393 = Out_Shader4_g170392;
				float4 In_Emissive3_g170393 = Out_Emissive4_g170392;
				float In_Grayscale3_g170393 = Out_Grayscale4_g170392;
				float In_Luminosity3_g170393 = Out_Luminosity4_g170392;
				float temp_output_821_11_g170389 = Out_MultiMask4_g170392;
				float In_MultiMask3_g170393 = temp_output_821_11_g170389;
				half Visual_AlphaClip754_g170389 = Out_AlphaClip4_g170392;
				half Dither_Constant768_g170389 = _DitherConstantValue;
				float3 ase_worldPos = IN.ase_texcoord11.xyz;
				float temp_output_756_0_g170389 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170389 = ( ( 1.0 - saturate( ( temp_output_756_0_g170389 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170391 = Data16_g169262;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionWS776_g170389 = Out_PositionWS15_g170391;
				float temp_output_7_0_g170398 = _DitherDistanceMinValue;
				float temp_output_10_0_g170398 = ( _DitherDistanceMaxValue - temp_output_7_0_g170398 );
				half Dither_Distance856_g170389 = ( saturate( ( ( distance( Model_PositionWS776_g170389 , _WorldSpaceCameraPos ) - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170389 = Out_ViewDirWS15_g170391;
				float3 normalizeResult792_g170389 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170389 = dot( Model_ViewDirWS845_g170389 , normalizeResult792_g170389 );
				half Dither_Glancing784_g170389 = ( saturate( ( ( 1.0 - abs( dotResult778_g170389 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170389 = max( max( max( Dither_Constant768_g170389 , Dither_Proximity767_g170389 ) , Dither_Distance856_g170389 ) , Dither_Glancing784_g170389 );
				half3 Model_PositionWO602_g170389 = Out_PositionWO15_g170391;
				float4 tex3DNode60_g170396 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170389 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170389 = tex3DNode60_g170396.r;
				half Visual_MultiMask671_g170389 = temp_output_821_11_g170389;
				float lerpResult683_g170389 = lerp( 1.0 , Visual_MultiMask671_g170389 , _DitherMultiValue);
				half Local_MaskMulti685_g170389 = lerpResult683_g170389;
				float lerpResult728_g170389 = lerp( Visual_AlphaClip754_g170389 , min( Visual_AlphaClip754_g170389 , ( -0.001 - ( Dither_Value429_g170389 - Local_MaskNoise678_g170389 ) ) ) , Local_MaskMulti685_g170389);
				half Local_AlphaClip834_g170389 = lerpResult728_g170389;
				#ifdef TVE_DITHER
				float staticSwitch577_g170389 = Local_AlphaClip834_g170389;
				#else
				float staticSwitch577_g170389 = Visual_AlphaClip754_g170389;
				#endif
				half Final_AlphaClip493_g170389 = staticSwitch577_g170389;
				float In_AlphaClip3_g170393 = Final_AlphaClip493_g170389;
				float In_AlphaFade3_g170393 = Out_AlphaFade4_g170392;
				float3 In_Translucency3_g170393 = Out_Translucency4_g170392;
				float In_Transmission3_g170393 = Out_Transmission4_g170392;
				float In_Thickness3_g170393 = Out_Thickness4_g170392;
				float In_Diffusion3_g170393 = Out_Diffusion4_g170392;
				{
				Data3_g170393.Dummy = In_Dummy3_g170393;
				Data3_g170393.Albedo = In_Albedo3_g170393;
				Data3_g170393.NormalTS = In_NormalTS3_g170393;
				Data3_g170393.NormalWS = In_NormalWS3_g170393;
				Data3_g170393.Shader = In_Shader3_g170393;
				Data3_g170393.Emissive= In_Emissive3_g170393;
				Data3_g170393.MultiMask = In_MultiMask3_g170393;
				Data3_g170393.Grayscale = In_Grayscale3_g170393;
				Data3_g170393.Luminosity = In_Luminosity3_g170393;
				Data3_g170393.AlphaClip = In_AlphaClip3_g170393;
				Data3_g170393.AlphaFade = In_AlphaFade3_g170393;
				Data3_g170393.Translucency = In_Translucency3_g170393;
				Data3_g170393.Transmission = In_Transmission3_g170393;
				Data3_g170393.Thickness = In_Thickness3_g170393;
				Data3_g170393.Diffusion = In_Diffusion3_g170393;
				}
				TVEVisualData Data4_g170418 = Data3_g170393;
				float Out_Dummy4_g170418 = 0;
				float3 Out_Albedo4_g170418 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170418 = float2( 0,0 );
				float3 Out_NormalWS4_g170418 = float3( 0,0,0 );
				float4 Out_Shader4_g170418 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170418 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170418 = 0;
				float Out_Grayscale4_g170418 = 0;
				float Out_Luminosity4_g170418 = 0;
				float Out_AlphaClip4_g170418 = 0;
				float Out_AlphaFade4_g170418 = 0;
				float3 Out_Translucency4_g170418 = float3( 0,0,0 );
				float Out_Transmission4_g170418 = 0;
				float Out_Thickness4_g170418 = 0;
				float Out_Diffusion4_g170418 = 0;
				{
				Out_Dummy4_g170418 = Data4_g170418.Dummy;
				Out_Albedo4_g170418 = Data4_g170418.Albedo;
				Out_NormalTS4_g170418 = Data4_g170418.NormalTS;
				Out_NormalWS4_g170418 = Data4_g170418.NormalWS;
				Out_Shader4_g170418 = Data4_g170418.Shader;
				Out_Emissive4_g170418= Data4_g170418.Emissive;
				Out_MultiMask4_g170418 = Data4_g170418.MultiMask;
				Out_Grayscale4_g170418 = Data4_g170418.Grayscale;
				Out_Luminosity4_g170418= Data4_g170418.Luminosity;
				Out_AlphaClip4_g170418 = Data4_g170418.AlphaClip;
				Out_AlphaFade4_g170418 = Data4_g170418.AlphaFade;
				Out_Translucency4_g170418 = Data4_g170418.Translucency;
				Out_Transmission4_g170418 = Data4_g170418.Transmission;
				Out_Thickness4_g170418 = Data4_g170418.Thickness;
				Out_Diffusion4_g170418 = Data4_g170418.Diffusion;
				}
				float3 temp_output_297_0_g170407 = Out_Albedo4_g170418;
				float3 In_Albedo3_g170419 = temp_output_297_0_g170407;
				float2 In_NormalTS3_g170419 = Out_NormalTS4_g170418;
				float3 In_NormalWS3_g170419 = Out_NormalWS4_g170418;
				float4 In_Shader3_g170419 = Out_Shader4_g170418;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170407 = Out_Emissive4_g170418;
				TVEModelData Data15_g170408 = Data16_g169262;
				float Out_Dummy15_g170408 = 0;
				float3 Out_PositionOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170408 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170408 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170408 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170408 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170408 = float3( 0,0,0 );
				float4 Out_VertexData15_g170408 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170408 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170408 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170408 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170408 = Data15_g170408.Dummy;
				Out_PositionOS15_g170408 = Data15_g170408.PositionOS;
				Out_PositionWS15_g170408 = Data15_g170408.PositionWS;
				Out_PositionWO15_g170408 = Data15_g170408.PositionWO;
				Out_PositionRawOS15_g170408 = Data15_g170408.PositionRawOS;
				Out_PositionAddOS15_g170408 = Data15_g170408.PositionAddOS;
				Out_PivotOS15_g170408 = Data15_g170408.PivotOS;
				Out_PivotWS15_g170408 = Data15_g170408.PivotWS;
				Out_PivotWO15_g170408 = Data15_g170408.PivotWO;
				Out_NormalOS15_g170408 = Data15_g170408.NormalOS;
				Out_NormalWS15_g170408 = Data15_g170408.NormalWS;
				Out_NormalRawOS15_g170408 = Data15_g170408.NormalRawOS;
				Out_NormalRawWS15_g170408 = Data15_g170408.NormalRawWS;
				Out_TangentOS15_g170408 = Data15_g170408.TangentOS;
				Out_ViewDirWS15_g170408 = Data15_g170408.ViewDirWS;
				Out_VertexData15_g170408 = Data15_g170408.VertexData;
				Out_MotionData15_g170408 = Data15_g170408.MotionData;
				Out_BoundsData15_g170408 = Data15_g170408.BoundsData;
				Out_RotationData15_g170408 = Data15_g170408.RotationData;
				}
				half4 Model_VertexMasks216_g170407 = Out_VertexData15_g170408;
				float4 break251_g170407 = Model_VertexMasks216_g170407;
				float4 break33_g170412 = _emissive_vert_mode;
				float temp_output_30_0_g170412 = ( break251_g170407.x * break33_g170412.x );
				float temp_output_29_0_g170412 = ( break251_g170407.y * break33_g170412.y );
				float temp_output_31_0_g170412 = ( break251_g170407.z * break33_g170412.z );
				float temp_output_28_0_g170412 = ( temp_output_30_0_g170412 + temp_output_29_0_g170412 + temp_output_31_0_g170412 + ( break251_g170407.w * break33_g170412.w ) );
				float clampResult17_g170411 = clamp( temp_output_28_0_g170412 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170415 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170415 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170415 );
				float lerpResult303_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170415 ) / ( temp_output_10_0_g170415 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170421 = lerpResult303_g170407;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_263_0_g170407 = staticSwitch14_g170421;
				half Emissive_MeshMask221_g170407 = temp_output_263_0_g170407;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170410) = _EmissiveMaskTex;
				SamplerState Sampler276_g170410 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170416 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170416 = ( temp_output_6_0_g170416 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170416 = temp_output_6_0_g170416;
				#endif
				half4 Emissive_Coords167_g170407 = staticSwitch14_g170416;
				float4 temp_output_37_0_g170410 = Emissive_Coords167_g170407;
				half4 Coords276_g170410 = temp_output_37_0_g170410;
				half2 TexCoord276_g170410 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170410 = SampleMain( Texture276_g170410 , Sampler276_g170410 , Coords276_g170410 , TexCoord276_g170410 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170410) = _EmissiveMaskTex;
				SamplerState Sampler275_g170410 = sampler_Linear_Repeat;
				half4 Coords275_g170410 = temp_output_37_0_g170410;
				half2 TexCoord275_g170410 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170410 = SampleExtra( Texture275_g170410 , Sampler275_g170410 , Coords275_g170410 , TexCoord275_g170410 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170407 = localSampleExtra275_g170410;
				#else
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#endif
				half4 Emissive_MaskTex201_g170407 = staticSwitch176_g170407;
				float clampResult17_g170414 = clamp( (Emissive_MaskTex201_g170407).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170413 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170413 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170413 );
				float lerpResult302_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170414 - temp_output_7_0_g170413 ) / ( temp_output_10_0_g170413 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170407 = lerpResult302_g170407;
				float temp_output_279_0_g170407 = ( Emissive_MeshMask221_g170407 * Emissive_Mask103_g170407 );
				float3 appendResult293_g170407 = (float3(temp_output_279_0_g170407 , temp_output_279_0_g170407 , temp_output_279_0_g170407));
				half3 Local_EmissiveColor278_g170407 = appendResult293_g170407;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170409 = Data204_g169264;
				float Out_Dummy15_g170409 = 0;
				float4 Out_CoatParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170409 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170409 = Data15_g170409.Dummy;
				Out_CoatParams15_g170409 = Data15_g170409.CoatParams;
				Out_PaintParams15_g170409 = Data15_g170409.PaintParams;
				Out_GlowParams15_g170409 = Data15_g170409.GlowParams;
				Out_AtmoParams15_g170409= Data15_g170409.AtmoParams;
				Out_FadeParams15_g170409= Data15_g170409.FadeParams;
				Out_FormParams15_g170409 = Data15_g170409.FormParams;
				Out_LandParams15_g170409 = Data15_g170409.LandParams;
				Out_WindParams15_g170409 = Data15_g170409.WindParams;
				Out_PushParams15_g170409 = Data15_g170409.PushParams;
				}
				half4 Global_GlowParams179_g170407 = Out_GlowParams15_g170409;
				float3 lerpResult299_g170407 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170407).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170407 = lerpResult299_g170407;
				#else
				float3 staticSwitch228_g170407 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170407 = staticSwitch228_g170407;
				half3 Local_EmissiveValue88_g170407 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170407 );
				half3 Emissive_Blend260_g170407 = ( ( (Visual_Emissive255_g170407).xyz * Local_EmissiveColor278_g170407 ) * Local_EmissiveValue88_g170407 );
				float3 temp_output_3_0_g170417 = Emissive_Blend260_g170407;
				float temp_output_15_0_g170417 = _emissive_power_value;
				float3 temp_output_23_0_g170417 = ( temp_output_3_0_g170417 * temp_output_15_0_g170417 );
				float4 appendResult295_g170407 = (float4(temp_output_23_0_g170417 , Emissive_Mask103_g170407));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170407 = appendResult295_g170407;
				#else
				float4 staticSwitch129_g170407 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170407 = staticSwitch129_g170407;
				float4 In_Emissive3_g170419 = Final_Emissive184_g170407;
				float In_Grayscale3_g170419 = Out_Grayscale4_g170418;
				float In_Luminosity3_g170419 = Out_Luminosity4_g170418;
				float temp_output_297_11_g170407 = Out_MultiMask4_g170418;
				float In_MultiMask3_g170419 = temp_output_297_11_g170407;
				float In_AlphaClip3_g170419 = Out_AlphaClip4_g170418;
				float In_AlphaFade3_g170419 = Out_AlphaFade4_g170418;
				float3 In_Translucency3_g170419 = Out_Translucency4_g170418;
				float In_Transmission3_g170419 = Out_Transmission4_g170418;
				float In_Thickness3_g170419 = Out_Thickness4_g170418;
				float In_Diffusion3_g170419 = Out_Diffusion4_g170418;
				{
				Data3_g170419.Dummy = In_Dummy3_g170419;
				Data3_g170419.Albedo = In_Albedo3_g170419;
				Data3_g170419.NormalTS = In_NormalTS3_g170419;
				Data3_g170419.NormalWS = In_NormalWS3_g170419;
				Data3_g170419.Shader = In_Shader3_g170419;
				Data3_g170419.Emissive= In_Emissive3_g170419;
				Data3_g170419.MultiMask = In_MultiMask3_g170419;
				Data3_g170419.Grayscale = In_Grayscale3_g170419;
				Data3_g170419.Luminosity = In_Luminosity3_g170419;
				Data3_g170419.AlphaClip = In_AlphaClip3_g170419;
				Data3_g170419.AlphaFade = In_AlphaFade3_g170419;
				Data3_g170419.Translucency = In_Translucency3_g170419;
				Data3_g170419.Transmission = In_Transmission3_g170419;
				Data3_g170419.Thickness = In_Thickness3_g170419;
				Data3_g170419.Diffusion = In_Diffusion3_g170419;
				}
				TVEVisualData Data4_g170439 = Data3_g170419;
				float Out_Dummy4_g170439 = 0;
				float3 Out_Albedo4_g170439 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170439 = float2( 0,0 );
				float3 Out_NormalWS4_g170439 = float3( 0,0,0 );
				float4 Out_Shader4_g170439 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170439 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170439 = 0;
				float Out_Grayscale4_g170439 = 0;
				float Out_Luminosity4_g170439 = 0;
				float Out_AlphaClip4_g170439 = 0;
				float Out_AlphaFade4_g170439 = 0;
				float3 Out_Translucency4_g170439 = float3( 0,0,0 );
				float Out_Transmission4_g170439 = 0;
				float Out_Thickness4_g170439 = 0;
				float Out_Diffusion4_g170439 = 0;
				{
				Out_Dummy4_g170439 = Data4_g170439.Dummy;
				Out_Albedo4_g170439 = Data4_g170439.Albedo;
				Out_NormalTS4_g170439 = Data4_g170439.NormalTS;
				Out_NormalWS4_g170439 = Data4_g170439.NormalWS;
				Out_Shader4_g170439 = Data4_g170439.Shader;
				Out_Emissive4_g170439= Data4_g170439.Emissive;
				Out_MultiMask4_g170439 = Data4_g170439.MultiMask;
				Out_Grayscale4_g170439 = Data4_g170439.Grayscale;
				Out_Luminosity4_g170439= Data4_g170439.Luminosity;
				Out_AlphaClip4_g170439 = Data4_g170439.AlphaClip;
				Out_AlphaFade4_g170439 = Data4_g170439.AlphaFade;
				Out_Translucency4_g170439 = Data4_g170439.Translucency;
				Out_Transmission4_g170439 = Data4_g170439.Transmission;
				Out_Thickness4_g170439 = Data4_g170439.Thickness;
				Out_Diffusion4_g170439 = Data4_g170439.Diffusion;
				}
				half3 Visual_Albedo199_g170438 = Out_Albedo4_g170439;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170438 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170438 );
				half Visual_Transmission138_g170438 = Out_Transmission4_g170439;
				half Subsurface_Value268_g170438 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170442 = Data204_g169264;
				float Out_Dummy15_g170442 = 0;
				float4 Out_CoatParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170442 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170442 = Data15_g170442.Dummy;
				Out_CoatParams15_g170442 = Data15_g170442.CoatParams;
				Out_PaintParams15_g170442 = Data15_g170442.PaintParams;
				Out_GlowParams15_g170442 = Data15_g170442.GlowParams;
				Out_AtmoParams15_g170442= Data15_g170442.AtmoParams;
				Out_FadeParams15_g170442= Data15_g170442.FadeParams;
				Out_FormParams15_g170442 = Data15_g170442.FormParams;
				Out_LandParams15_g170442 = Data15_g170442.LandParams;
				Out_WindParams15_g170442 = Data15_g170442.WindParams;
				Out_PushParams15_g170442 = Data15_g170442.PushParams;
				}
				half4 Global_GlowParams373_g170438 = Out_GlowParams15_g170442;
				float lerpResult403_g170438 = lerp( 1.0 , saturate( (Global_GlowParams373_g170438).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170438 = lerpResult403_g170438;
				#else
				float staticSwitch367_g170438 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170438 = staticSwitch367_g170438;
				float temp_output_301_11_g170438 = Out_MultiMask4_g170439;
				half Visual_MultiMask292_g170438 = temp_output_301_11_g170438;
				float lerpResult293_g170438 = lerp( 1.0 , Visual_MultiMask292_g170438 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170438 = lerpResult293_g170438;
				half Custom_Mask363_g170438 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170438 = ( Visual_Transmission138_g170438 * Subsurface_Value268_g170438 * Subsurface_GlobalMask369_g170438 * Subsurface_MultiMask296_g170438 * Custom_Mask363_g170438 );
				#else
				float staticSwitch345_g170438 = 0.0;
				#endif
				half Final_Transmission269_g170438 = staticSwitch345_g170438;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170438 = ( Subsurface_Color264_g170438 * Final_Transmission269_g170438 * 10.0 );
				#else
				float3 staticSwitch348_g170438 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170438 = staticSwitch348_g170438;
				TVEModelData Data15_g170441 = Data16_g169262;
				float Out_Dummy15_g170441 = 0;
				float3 Out_PositionOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170441 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170441 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170441 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170441 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170441 = float3( 0,0,0 );
				float4 Out_VertexData15_g170441 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170441 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170441 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_PositionOS15_g170441 = Data15_g170441.PositionOS;
				Out_PositionWS15_g170441 = Data15_g170441.PositionWS;
				Out_PositionWO15_g170441 = Data15_g170441.PositionWO;
				Out_PositionRawOS15_g170441 = Data15_g170441.PositionRawOS;
				Out_PositionAddOS15_g170441 = Data15_g170441.PositionAddOS;
				Out_PivotOS15_g170441 = Data15_g170441.PivotOS;
				Out_PivotWS15_g170441 = Data15_g170441.PivotWS;
				Out_PivotWO15_g170441 = Data15_g170441.PivotWO;
				Out_NormalOS15_g170441 = Data15_g170441.NormalOS;
				Out_NormalWS15_g170441 = Data15_g170441.NormalWS;
				Out_NormalRawOS15_g170441 = Data15_g170441.NormalRawOS;
				Out_NormalRawWS15_g170441 = Data15_g170441.NormalRawWS;
				Out_TangentOS15_g170441 = Data15_g170441.TangentOS;
				Out_ViewDirWS15_g170441 = Data15_g170441.ViewDirWS;
				Out_VertexData15_g170441 = Data15_g170441.VertexData;
				Out_MotionData15_g170441 = Data15_g170441.MotionData;
				Out_BoundsData15_g170441 = Data15_g170441.BoundsData;
				Out_RotationData15_g170441 = Data15_g170441.RotationData;
				}
				half3 Model_ViewDirWS392_g170438 = Out_ViewDirWS15_g170441;
				float dotResult324_g170438 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170438 );
				float saferPower323_g170438 = abs( saturate( dotResult324_g170438 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170438 = 0.0;
				#else
				float staticSwitch330_g170438 = ( pow( saferPower323_g170438 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170438 = staticSwitch330_g170438;
				float3 temp_output_6_0_g170443 = ( Final_Translucency254_g170438 * Mask_Subsurface_View320_g170438 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170443 = ( temp_output_6_0_g170443 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170443 = temp_output_6_0_g170443;
				#endif
				half3 Subsurface_Approximation333_g170438 = staticSwitch14_g170443;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170438 = ( Visual_Albedo199_g170438 + Subsurface_Approximation333_g170438 );
				#else
				float3 staticSwitch353_g170438 = Visual_Albedo199_g170438;
				#endif
				half3 Final_Albedo312_g170438 = staticSwitch353_g170438;
				float3 In_Albedo3_g170440 = Final_Albedo312_g170438;
				float2 In_NormalTS3_g170440 = Out_NormalTS4_g170439;
				float3 In_NormalWS3_g170440 = Out_NormalWS4_g170439;
				float4 In_Shader3_g170440 = Out_Shader4_g170439;
				float4 In_Emissive3_g170440 = Out_Emissive4_g170439;
				float In_Grayscale3_g170440 = Out_Grayscale4_g170439;
				float In_Luminosity3_g170440 = Out_Luminosity4_g170439;
				float In_MultiMask3_g170440 = temp_output_301_11_g170438;
				float In_AlphaClip3_g170440 = Out_AlphaClip4_g170439;
				float In_AlphaFade3_g170440 = Out_AlphaFade4_g170439;
				float3 In_Translucency3_g170440 = Final_Translucency254_g170438;
				float In_Transmission3_g170440 = Final_Transmission269_g170438;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170438 = 0.0;
				#else
				float staticSwitch351_g170438 = 1.0;
				#endif
				half Final_Thickness275_g170438 = staticSwitch351_g170438;
				float In_Thickness3_g170440 = Final_Thickness275_g170438;
				float Final_Diffusion340_g170438 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170440 = Final_Diffusion340_g170438;
				{
				Data3_g170440.Dummy = In_Dummy3_g170440;
				Data3_g170440.Albedo = In_Albedo3_g170440;
				Data3_g170440.NormalTS = In_NormalTS3_g170440;
				Data3_g170440.NormalWS = In_NormalWS3_g170440;
				Data3_g170440.Shader = In_Shader3_g170440;
				Data3_g170440.Emissive= In_Emissive3_g170440;
				Data3_g170440.MultiMask = In_MultiMask3_g170440;
				Data3_g170440.Grayscale = In_Grayscale3_g170440;
				Data3_g170440.Luminosity = In_Luminosity3_g170440;
				Data3_g170440.AlphaClip = In_AlphaClip3_g170440;
				Data3_g170440.AlphaFade = In_AlphaFade3_g170440;
				Data3_g170440.Translucency = In_Translucency3_g170440;
				Data3_g170440.Transmission = In_Transmission3_g170440;
				Data3_g170440.Thickness = In_Thickness3_g170440;
				Data3_g170440.Diffusion = In_Diffusion3_g170440;
				}
				TVEVisualData Data4_g170455 = Data3_g170440;
				float Out_Dummy4_g170455 = 0;
				float3 Out_Albedo4_g170455 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170455 = float2( 0,0 );
				float3 Out_NormalWS4_g170455 = float3( 0,0,0 );
				float4 Out_Shader4_g170455 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170455 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170455 = 0;
				float Out_Grayscale4_g170455 = 0;
				float Out_Luminosity4_g170455 = 0;
				float Out_AlphaClip4_g170455 = 0;
				float Out_AlphaFade4_g170455 = 0;
				float3 Out_Translucency4_g170455 = float3( 0,0,0 );
				float Out_Transmission4_g170455 = 0;
				float Out_Thickness4_g170455 = 0;
				float Out_Diffusion4_g170455 = 0;
				{
				Out_Dummy4_g170455 = Data4_g170455.Dummy;
				Out_Albedo4_g170455 = Data4_g170455.Albedo;
				Out_NormalTS4_g170455 = Data4_g170455.NormalTS;
				Out_NormalWS4_g170455 = Data4_g170455.NormalWS;
				Out_Shader4_g170455 = Data4_g170455.Shader;
				Out_Emissive4_g170455= Data4_g170455.Emissive;
				Out_MultiMask4_g170455 = Data4_g170455.MultiMask;
				Out_Grayscale4_g170455 = Data4_g170455.Grayscale;
				Out_Luminosity4_g170455= Data4_g170455.Luminosity;
				Out_AlphaClip4_g170455 = Data4_g170455.AlphaClip;
				Out_AlphaFade4_g170455 = Data4_g170455.AlphaFade;
				Out_Translucency4_g170455 = Data4_g170455.Translucency;
				Out_Transmission4_g170455 = Data4_g170455.Transmission;
				Out_Thickness4_g170455 = Data4_g170455.Thickness;
				Out_Diffusion4_g170455 = Data4_g170455.Diffusion;
				}
				half3 Input_Albedo24_g170454 = Out_Albedo4_g170455;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170454 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170454 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170454 = staticSwitch22_g170454;
				float4 break24_g170449 = Out_Shader4_g170455;
				half Metallic95_g170449 = break24_g170449.x;
				half Input_Metallic25_g170454 = Metallic95_g170449;
				half OneMinusReflectivity31_g170454 = ( (ColorSpaceDielectricSpec23_g170454).w - ( (ColorSpaceDielectricSpec23_g170454).w * Input_Metallic25_g170454 ) );
				
				float localCustomAlphaClip19_g170456 = ( 0.0 );
				float temp_output_3_0_g170456 = Out_AlphaClip4_g170455;
				float Alpha19_g170456 = temp_output_3_0_g170456;
				float temp_output_15_0_g170456 = 0.0;
				float Treshold19_g170456 = temp_output_15_0_g170456;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#else
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g170454 * OneMinusReflectivity31_g170454 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g170455).xyz;
				o.Alpha = saturate( ( Alpha19_g170456 * Out_AlphaFade4_g170455 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_PUSH_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_NORMAL_COMPUTE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_SHIFT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionPushElementMode;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half4 TVE_FormParams;
			uniform half4 TVE_LandParams;
			uniform half _GlobalWindLayerValue;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_WindParams;
			uniform half _GlobalPushLayerValue;
			uniform float TVE_PushLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushBaseTex);
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PushNearTex);
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform half _global_push_layer_value;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half4 _motion_push_vert_mode;
			uniform half4 _motion_push_proc_mode;
			uniform half _motion_push_mask_mode;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half3 HSVToRGB( half3 c )
			{
				half4 K = half4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				half3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			half3 RGBToHSV(half3 c)
			{
				half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				half4 p = lerp( half4( c.bg, K.wz ), half4( c.gb, K.xy ), step( c.b, c.g ) );
				half4 q = lerp( half4( p.xyw, c.r ), half4( c.r, p.yzx ), step( p.x, c.r ) );
				half d = q.x - min( q.w, q.y );
				half e = 1.0e-10;
				return half3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170447 = (TVEModelData)0;
				float In_Dummy16_g170447 = 0.0;
				TVEModelData Data16_g170424 = (TVEModelData)0;
				half Dummy1575_g170422 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170424 = Dummy1575_g170422;
				TVEModelData Data16_g170402 = (TVEModelData)0;
				float In_Dummy16_g170402 = 0.0;
				TVEModelData Data16_g170082 = (TVEModelData)0;
				half Dummy181_g170066 = ( ( _MotionWindCategory + _MotionWindEnd ) + ( _MotionInteractionCategory + _MotionInteractionEnd ) + _MotionWindElementMode + _MotionPushElementMode );
				float In_Dummy16_g170082 = Dummy181_g170066;
				TVEModelData Data16_g170030 = (TVEModelData)0;
				half Dummy181_g170027 = ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode );
				float In_Dummy16_g170030 = Dummy181_g170027;
				TVEModelData Data16_g169992 = (TVEModelData)0;
				half Dummy181_g169989 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g169992 = Dummy181_g169989;
				TVEModelData Data16_g169969 = (TVEModelData)0;
				float In_Dummy16_g169969 = 0.0;
				TVEModelData Data16_g169263 = (TVEModelData)0;
				half Dummy207_g169248 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g169263 = Dummy207_g169248;
				half3 PositionOS131_g169248 = v.vertex.xyz;
				float3 In_PositionOS16_g169263 = PositionOS131_g169248;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g169248 = ase_worldPos;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169263 = PositionWS122_g169248;
				float4x4 break19_g169250 = unity_ObjectToWorld;
				float3 appendResult20_g169250 = (float3(break19_g169250[ 0 ][ 3 ] , break19_g169250[ 1 ][ 3 ] , break19_g169250[ 2 ][ 3 ]));
				half3 ObjectData20_g169252 = appendResult20_g169250;
				half3 WorldData19_g169252 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169252 = WorldData19_g169252;
				#else
				float3 staticSwitch14_g169252 = ObjectData20_g169252;
				#endif
				float3 temp_output_124_0_g169250 = staticSwitch14_g169252;
				float3 temp_output_239_7_g169248 = temp_output_124_0_g169250;
				float4x4 break19_g169254 = unity_ObjectToWorld;
				float3 appendResult20_g169254 = (float3(break19_g169254[ 0 ][ 3 ] , break19_g169254[ 1 ][ 3 ] , break19_g169254[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g169258 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g169248 = PositionOS131_g169248;
				float3 appendResult234_g169248 = (float3(break233_g169248.x , 0.0 , break233_g169248.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g169248 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g169248 = appendResult60_g169258;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g169248 = appendResult234_g169248;
				#else
				float3 staticSwitch229_g169248 = _Vector0;
				#endif
				half3 PivotOS149_g169248 = staticSwitch229_g169248;
				float3 temp_output_122_0_g169254 = PivotOS149_g169248;
				float3 PivotsOnly105_g169254 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g169254 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g169256 = ( appendResult20_g169254 + PivotsOnly105_g169254 );
				half3 WorldData19_g169256 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g169256 = WorldData19_g169256;
				#else
				float3 staticSwitch14_g169256 = ObjectData20_g169256;
				#endif
				float3 temp_output_124_0_g169254 = staticSwitch14_g169256;
				float3 temp_output_237_7_g169248 = temp_output_124_0_g169254;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g169248 = temp_output_237_7_g169248;
				#else
				float3 staticSwitch236_g169248 = temp_output_239_7_g169248;
				#endif
				float3 vertexToFrag76_g169248 = staticSwitch236_g169248;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169263 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169263 = PositionOS131_g169248;
				float3 In_PositionAddOS16_g169263 = float3( 0,0,0 );
				float3 In_PivotOS16_g169263 = PivotOS149_g169248;
				float3 In_PivotWS16_g169263 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169263 = PivotWO133_g169248;
				half3 NormalOS134_g169248 = v.normal;
				float3 In_NormalOS16_g169263 = NormalOS134_g169248;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169263 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169263 = NormalOS134_g169248;
				float3 objToWorldDir298_g169248 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g169248 = objToWorldDir298_g169248;
				float3 In_NormalRawWS16_g169263 = Normal_RawWS136_g169248;
				half4 TangentlOS153_g169248 = v.tangent;
				float4 In_TangentOS16_g169263 = TangentlOS153_g169248;
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169263 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = v.ase_color;
				float4 In_VertexData16_g169263 = VertexMasks171_g169248;
				float4 break33_g169261 = _object_phase_mode;
				float temp_output_30_0_g169261 = ( v.ase_color.r * break33_g169261.x );
				float temp_output_29_0_g169261 = ( v.ase_color.g * break33_g169261.y );
				float temp_output_31_0_g169261 = ( v.ase_color.b * break33_g169261.z );
				float temp_output_28_0_g169261 = ( temp_output_30_0_g169261 + temp_output_29_0_g169261 + temp_output_31_0_g169261 + ( v.ase_color.a * break33_g169261.w ) );
				float3 break243_g169248 = PivotWO133_g169248;
				float4 appendResult177_g169248 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g169261 + ( break243_g169248.x + break243_g169248.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g169248 = appendResult177_g169248;
				float4 In_MotionData16_g169263 = MotionMasks176_g169248;
				half Object_HeightValue267_g169248 = _ObjectHeightValue;
				half Object_RadiusValue268_g169248 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g169248 = saturate( ( (PositionOS131_g169248).y / Object_HeightValue267_g169248 ) );
				half Bounds_SphereMask282_g169248 = saturate( ( length( PositionOS131_g169248 ) / max( Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 ) ) );
				float4 appendResult253_g169248 = (float4(Object_HeightValue267_g169248 , Object_RadiusValue268_g169248 , Bounds_HeightMask274_g169248 , Bounds_SphereMask282_g169248));
				half4 BoundsData254_g169248 = appendResult253_g169248;
				float4 In_BoundsData16_g169263 = BoundsData254_g169248;
				float4 In_RotationData16_g169263 = float4( 0,0,0,0 );
				{
				Data16_g169263.Dummy = In_Dummy16_g169263;
				Data16_g169263.PositionOS = In_PositionOS16_g169263;
				Data16_g169263.PositionWS = In_PositionWS16_g169263;
				Data16_g169263.PositionWO = In_PositionWO16_g169263;
				Data16_g169263.PositionRawOS = In_PositionRawOS16_g169263;
				Data16_g169263.PositionAddOS = In_PositionAddOS16_g169263;
				Data16_g169263.PivotOS = In_PivotOS16_g169263;
				Data16_g169263.PivotWS = In_PivotWS16_g169263;
				Data16_g169263.PivotWO = In_PivotWO16_g169263;
				Data16_g169263.NormalOS = In_NormalOS16_g169263;
				Data16_g169263.NormalWS = In_NormalWS16_g169263;
				Data16_g169263.NormalRawOS = In_NormalRawOS16_g169263;
				Data16_g169263.NormalRawWS = In_NormalRawWS16_g169263;
				Data16_g169263.TangentOS = In_TangentOS16_g169263;
				Data16_g169263.ViewDirWS = In_ViewDirWS16_g169263;
				Data16_g169263.VertexData = In_VertexData16_g169263;
				Data16_g169263.MotionData = In_MotionData16_g169263;
				Data16_g169263.BoundsData = In_BoundsData16_g169263;
				Data16_g169263.RotationData = In_RotationData16_g169263;
				}
				TVEModelData Data15_g169970 = Data16_g169263;
				float Out_Dummy15_g169970 = 0;
				float3 Out_PositionOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169970 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169970 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169970 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169970 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169970 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169970 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169970 = float3( 0,0,0 );
				float4 Out_VertexData15_g169970 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169970 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169970 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169970 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169970 = Data15_g169970.Dummy;
				Out_PositionOS15_g169970 = Data15_g169970.PositionOS;
				Out_PositionWS15_g169970 = Data15_g169970.PositionWS;
				Out_PositionWO15_g169970 = Data15_g169970.PositionWO;
				Out_PositionRawOS15_g169970 = Data15_g169970.PositionRawOS;
				Out_PositionAddOS15_g169970 = Data15_g169970.PositionAddOS;
				Out_PivotOS15_g169970 = Data15_g169970.PivotOS;
				Out_PivotWS15_g169970 = Data15_g169970.PivotWS;
				Out_PivotWO15_g169970 = Data15_g169970.PivotWO;
				Out_NormalOS15_g169970 = Data15_g169970.NormalOS;
				Out_NormalWS15_g169970 = Data15_g169970.NormalWS;
				Out_NormalRawOS15_g169970 = Data15_g169970.NormalRawOS;
				Out_NormalRawWS15_g169970 = Data15_g169970.NormalRawWS;
				Out_TangentOS15_g169970 = Data15_g169970.TangentOS;
				Out_ViewDirWS15_g169970 = Data15_g169970.ViewDirWS;
				Out_VertexData15_g169970 = Data15_g169970.VertexData;
				Out_MotionData15_g169970 = Data15_g169970.MotionData;
				Out_BoundsData15_g169970 = Data15_g169970.BoundsData;
				Out_RotationData15_g169970 = Data15_g169970.RotationData;
				}
				float3 temp_output_218_24_g169968 = Out_PivotOS15_g169970;
				float3 In_PositionOS16_g169969 = ( Out_PositionOS15_g169970 - temp_output_218_24_g169968 );
				float3 In_PositionWS16_g169969 = Out_PositionWS15_g169970;
				float3 In_PositionWO16_g169969 = Out_PositionWO15_g169970;
				float3 In_PositionRawOS16_g169969 = Out_PositionRawOS15_g169970;
				float3 In_PositionAddOS16_g169969 = Out_PositionAddOS15_g169970;
				float3 In_PivotOS16_g169969 = temp_output_218_24_g169968;
				float3 In_PivotWS16_g169969 = Out_PivotWS15_g169970;
				float3 In_PivotWO16_g169969 = Out_PivotWO15_g169970;
				float3 In_NormalOS16_g169969 = Out_NormalOS15_g169970;
				float3 In_NormalWS16_g169969 = Out_NormalWS15_g169970;
				float3 In_NormalRawOS16_g169969 = Out_NormalRawOS15_g169970;
				float3 In_NormalRawWS16_g169969 = Out_NormalRawWS15_g169970;
				float4 In_TangentOS16_g169969 = Out_TangentOS15_g169970;
				float3 In_ViewDirWS16_g169969 = Out_ViewDirWS15_g169970;
				float4 In_VertexData16_g169969 = Out_VertexData15_g169970;
				float4 In_MotionData16_g169969 = Out_MotionData15_g169970;
				float4 In_BoundsData16_g169969 = Out_BoundsData15_g169970;
				float4 In_RotationData16_g169969 = Out_RotationData15_g169970;
				{
				Data16_g169969.Dummy = In_Dummy16_g169969;
				Data16_g169969.PositionOS = In_PositionOS16_g169969;
				Data16_g169969.PositionWS = In_PositionWS16_g169969;
				Data16_g169969.PositionWO = In_PositionWO16_g169969;
				Data16_g169969.PositionRawOS = In_PositionRawOS16_g169969;
				Data16_g169969.PositionAddOS = In_PositionAddOS16_g169969;
				Data16_g169969.PivotOS = In_PivotOS16_g169969;
				Data16_g169969.PivotWS = In_PivotWS16_g169969;
				Data16_g169969.PivotWO = In_PivotWO16_g169969;
				Data16_g169969.NormalOS = In_NormalOS16_g169969;
				Data16_g169969.NormalWS = In_NormalWS16_g169969;
				Data16_g169969.NormalRawOS = In_NormalRawOS16_g169969;
				Data16_g169969.NormalRawWS = In_NormalRawWS16_g169969;
				Data16_g169969.TangentOS = In_TangentOS16_g169969;
				Data16_g169969.ViewDirWS = In_ViewDirWS16_g169969;
				Data16_g169969.VertexData = In_VertexData16_g169969;
				Data16_g169969.MotionData = In_MotionData16_g169969;
				Data16_g169969.BoundsData = In_BoundsData16_g169969;
				Data16_g169969.RotationData = In_RotationData16_g169969;
				}
				TVEModelData Data15_g169990 = Data16_g169969;
				float Out_Dummy15_g169990 = 0;
				float3 Out_PositionOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169990 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169990 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169990 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169990 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169990 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169990 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169990 = float3( 0,0,0 );
				float4 Out_VertexData15_g169990 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169990 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169990 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169990 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169990 = Data15_g169990.Dummy;
				Out_PositionOS15_g169990 = Data15_g169990.PositionOS;
				Out_PositionWS15_g169990 = Data15_g169990.PositionWS;
				Out_PositionWO15_g169990 = Data15_g169990.PositionWO;
				Out_PositionRawOS15_g169990 = Data15_g169990.PositionRawOS;
				Out_PositionAddOS15_g169990 = Data15_g169990.PositionAddOS;
				Out_PivotOS15_g169990 = Data15_g169990.PivotOS;
				Out_PivotWS15_g169990 = Data15_g169990.PivotWS;
				Out_PivotWO15_g169990 = Data15_g169990.PivotWO;
				Out_NormalOS15_g169990 = Data15_g169990.NormalOS;
				Out_NormalWS15_g169990 = Data15_g169990.NormalWS;
				Out_NormalRawOS15_g169990 = Data15_g169990.NormalRawOS;
				Out_NormalRawWS15_g169990 = Data15_g169990.NormalRawWS;
				Out_TangentOS15_g169990 = Data15_g169990.TangentOS;
				Out_ViewDirWS15_g169990 = Data15_g169990.ViewDirWS;
				Out_VertexData15_g169990 = Data15_g169990.VertexData;
				Out_MotionData15_g169990 = Data15_g169990.MotionData;
				Out_BoundsData15_g169990 = Data15_g169990.BoundsData;
				Out_RotationData15_g169990 = Data15_g169990.RotationData;
				}
				half3 Model_PositionOS147_g169989 = Out_PositionOS15_g169990;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = Unity_SafeNormalize( ase_worldViewDir );
				float4x4 break117_g169991 = unity_CameraToWorld;
				float3 appendResult118_g169991 = (float3(break117_g169991[ 0 ][ 2 ] , break117_g169991[ 1 ][ 2 ] , break117_g169991[ 2 ][ 2 ]));
				float3 lerpResult209_g169989 = lerp( ase_worldViewDir , -appendResult118_g169991 , unity_OrthoParams.w);
				float3 break201_g169989 = cross( lerpResult209_g169989 , half3(0,1,0) );
				float3 appendResult196_g169989 = (float3(-break201_g169989.z , 0.0 , break201_g169989.x));
				float dotResult189_g169989 = dot( ase_worldViewDir , float3(0,1,0) );
				float saferPower192_g169989 = abs( dotResult189_g169989 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g169989 = ( Model_PositionOS147_g169989 + ( mul( unity_WorldToObject, float4( appendResult196_g169989 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g169989 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g169989).y ) ) );
				#else
				float3 staticSwitch211_g169989 = Model_PositionOS147_g169989;
				#endif
				half3 Final_Position178_g169989 = staticSwitch211_g169989;
				float3 In_PositionOS16_g169992 = Final_Position178_g169989;
				float3 In_PositionWS16_g169992 = Out_PositionWS15_g169990;
				float3 In_PositionWO16_g169992 = Out_PositionWO15_g169990;
				float3 In_PositionRawOS16_g169992 = Out_PositionRawOS15_g169990;
				float3 In_PositionAddOS16_g169992 = Out_PositionAddOS15_g169990;
				float3 In_PivotOS16_g169992 = Out_PivotOS15_g169990;
				float3 In_PivotWS16_g169992 = Out_PivotWS15_g169990;
				float3 In_PivotWO16_g169992 = Out_PivotWO15_g169990;
				float3 In_NormalOS16_g169992 = Out_NormalOS15_g169990;
				float3 In_NormalWS16_g169992 = Out_NormalWS15_g169990;
				float3 In_NormalRawOS16_g169992 = Out_NormalRawOS15_g169990;
				float3 In_NormalRawWS16_g169992 = Out_NormalRawWS15_g169990;
				float4 In_TangentOS16_g169992 = Out_TangentOS15_g169990;
				float3 In_ViewDirWS16_g169992 = Out_ViewDirWS15_g169990;
				float4 In_VertexData16_g169992 = Out_VertexData15_g169990;
				float4 In_MotionData16_g169992 = Out_MotionData15_g169990;
				float4 In_BoundsData16_g169992 = Out_BoundsData15_g169990;
				float4 In_RotationData16_g169992 = Out_RotationData15_g169990;
				{
				Data16_g169992.Dummy = In_Dummy16_g169992;
				Data16_g169992.PositionOS = In_PositionOS16_g169992;
				Data16_g169992.PositionWS = In_PositionWS16_g169992;
				Data16_g169992.PositionWO = In_PositionWO16_g169992;
				Data16_g169992.PositionRawOS = In_PositionRawOS16_g169992;
				Data16_g169992.PositionAddOS = In_PositionAddOS16_g169992;
				Data16_g169992.PivotOS = In_PivotOS16_g169992;
				Data16_g169992.PivotWS = In_PivotWS16_g169992;
				Data16_g169992.PivotWO = In_PivotWO16_g169992;
				Data16_g169992.NormalOS = In_NormalOS16_g169992;
				Data16_g169992.NormalWS = In_NormalWS16_g169992;
				Data16_g169992.NormalRawOS = In_NormalRawOS16_g169992;
				Data16_g169992.NormalRawWS = In_NormalRawWS16_g169992;
				Data16_g169992.TangentOS = In_TangentOS16_g169992;
				Data16_g169992.ViewDirWS = In_ViewDirWS16_g169992;
				Data16_g169992.VertexData = In_VertexData16_g169992;
				Data16_g169992.MotionData = In_MotionData16_g169992;
				Data16_g169992.BoundsData = In_BoundsData16_g169992;
				Data16_g169992.RotationData = In_RotationData16_g169992;
				}
				TVEModelData Data15_g170029 = Data16_g169992;
				float Out_Dummy15_g170029 = 0;
				float3 Out_PositionOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170029 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170029 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170029 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170029 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170029 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170029 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170029 = float3( 0,0,0 );
				float4 Out_VertexData15_g170029 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170029 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170029 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170029 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170029 = Data15_g170029.Dummy;
				Out_PositionOS15_g170029 = Data15_g170029.PositionOS;
				Out_PositionWS15_g170029 = Data15_g170029.PositionWS;
				Out_PositionWO15_g170029 = Data15_g170029.PositionWO;
				Out_PositionRawOS15_g170029 = Data15_g170029.PositionRawOS;
				Out_PositionAddOS15_g170029 = Data15_g170029.PositionAddOS;
				Out_PivotOS15_g170029 = Data15_g170029.PivotOS;
				Out_PivotWS15_g170029 = Data15_g170029.PivotWS;
				Out_PivotWO15_g170029 = Data15_g170029.PivotWO;
				Out_NormalOS15_g170029 = Data15_g170029.NormalOS;
				Out_NormalWS15_g170029 = Data15_g170029.NormalWS;
				Out_NormalRawOS15_g170029 = Data15_g170029.NormalRawOS;
				Out_NormalRawWS15_g170029 = Data15_g170029.NormalRawWS;
				Out_TangentOS15_g170029 = Data15_g170029.TangentOS;
				Out_ViewDirWS15_g170029 = Data15_g170029.ViewDirWS;
				Out_VertexData15_g170029 = Data15_g170029.VertexData;
				Out_MotionData15_g170029 = Data15_g170029.MotionData;
				Out_BoundsData15_g170029 = Data15_g170029.BoundsData;
				Out_RotationData15_g170029 = Data15_g170029.RotationData;
				}
				half3 Model_PositionOS147_g170027 = Out_PositionOS15_g170029;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170027 = Out_PivotWO15_g170029;
				half3 Model_PivotWO162_g170027 = temp_output_210_19_g170027;
				float temp_output_7_0_g170028 = _SizeFadeDistMaxValue;
				float temp_output_10_0_g170028 = ( _SizeFadeDistMinValue - temp_output_7_0_g170028 );
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170031 = Data204_g169264;
				float Out_Dummy15_g170031 = 0;
				float4 Out_CoatParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170031 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170031 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170031 = Data15_g170031.Dummy;
				Out_CoatParams15_g170031 = Data15_g170031.CoatParams;
				Out_PaintParams15_g170031 = Data15_g170031.PaintParams;
				Out_GlowParams15_g170031 = Data15_g170031.GlowParams;
				Out_AtmoParams15_g170031= Data15_g170031.AtmoParams;
				Out_FadeParams15_g170031= Data15_g170031.FadeParams;
				Out_FormParams15_g170031 = Data15_g170031.FormParams;
				Out_LandParams15_g170031 = Data15_g170031.LandParams;
				Out_WindParams15_g170031 = Data15_g170031.WindParams;
				Out_PushParams15_g170031 = Data15_g170031.PushParams;
				}
				half4 Input_FormParams188_g170027 = Out_FormParams15_g170031;
				float lerpResult213_g170027 = lerp( 1.0 , (Input_FormParams188_g170027).w , TVE_IsEnabled);
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170027 = lerpResult213_g170027;
				#else
				float staticSwitch194_g170027 = 1.0;
				#endif
				half SizeFade_MaskGlobal192_g170027 = staticSwitch194_g170027;
				float temp_output_189_0_g170027 = ( saturate( ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170027 ) - temp_output_7_0_g170028 ) / ( temp_output_10_0_g170028 + 0.0001 ) ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170027 );
				float3 appendResult200_g170027 = (float3(temp_output_189_0_g170027 , temp_output_189_0_g170027 , temp_output_189_0_g170027));
				float3 appendResult201_g170027 = (float3(1.0 , temp_output_189_0_g170027 , 1.0));
				float3 lerpResult202_g170027 = lerp( appendResult200_g170027 , appendResult201_g170027 , _SizeFadeScaleMode);
				float3 lerpResult184_g170027 = lerp( temp_cast_5 , lerpResult202_g170027 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170027 = ( lerpResult184_g170027 * Model_PositionOS147_g170027 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170027 = temp_output_167_0_g170027;
				#else
				float3 staticSwitch199_g170027 = Model_PositionOS147_g170027;
				#endif
				half3 Final_Position178_g170027 = staticSwitch199_g170027;
				float3 In_PositionOS16_g170030 = Final_Position178_g170027;
				float3 In_PositionWS16_g170030 = Out_PositionWS15_g170029;
				float3 In_PositionWO16_g170030 = Out_PositionWO15_g170029;
				float3 In_PositionRawOS16_g170030 = Out_PositionRawOS15_g170029;
				float3 In_PositionAddOS16_g170030 = Out_PositionAddOS15_g170029;
				float3 temp_output_210_24_g170027 = Out_PivotOS15_g170029;
				float3 In_PivotOS16_g170030 = temp_output_210_24_g170027;
				float3 In_PivotWS16_g170030 = Out_PivotWS15_g170029;
				float3 In_PivotWO16_g170030 = temp_output_210_19_g170027;
				float3 In_NormalOS16_g170030 = Out_NormalOS15_g170029;
				float3 In_NormalWS16_g170030 = Out_NormalWS15_g170029;
				float3 In_NormalRawOS16_g170030 = Out_NormalRawOS15_g170029;
				float3 In_NormalRawWS16_g170030 = Out_NormalRawWS15_g170029;
				float4 In_TangentOS16_g170030 = Out_TangentOS15_g170029;
				float3 In_ViewDirWS16_g170030 = Out_ViewDirWS15_g170029;
				float4 In_VertexData16_g170030 = Out_VertexData15_g170029;
				float4 In_MotionData16_g170030 = Out_MotionData15_g170029;
				float4 In_BoundsData16_g170030 = Out_BoundsData15_g170029;
				float4 In_RotationData16_g170030 = Out_RotationData15_g170029;
				{
				Data16_g170030.Dummy = In_Dummy16_g170030;
				Data16_g170030.PositionOS = In_PositionOS16_g170030;
				Data16_g170030.PositionWS = In_PositionWS16_g170030;
				Data16_g170030.PositionWO = In_PositionWO16_g170030;
				Data16_g170030.PositionRawOS = In_PositionRawOS16_g170030;
				Data16_g170030.PositionAddOS = In_PositionAddOS16_g170030;
				Data16_g170030.PivotOS = In_PivotOS16_g170030;
				Data16_g170030.PivotWS = In_PivotWS16_g170030;
				Data16_g170030.PivotWO = In_PivotWO16_g170030;
				Data16_g170030.NormalOS = In_NormalOS16_g170030;
				Data16_g170030.NormalWS = In_NormalWS16_g170030;
				Data16_g170030.NormalRawOS = In_NormalRawOS16_g170030;
				Data16_g170030.NormalRawWS = In_NormalRawWS16_g170030;
				Data16_g170030.TangentOS = In_TangentOS16_g170030;
				Data16_g170030.ViewDirWS = In_ViewDirWS16_g170030;
				Data16_g170030.VertexData = In_VertexData16_g170030;
				Data16_g170030.MotionData = In_MotionData16_g170030;
				Data16_g170030.BoundsData = In_BoundsData16_g170030;
				Data16_g170030.RotationData = In_RotationData16_g170030;
				}
				TVEModelData Data15_g170078 = Data16_g170030;
				float Out_Dummy15_g170078 = 0;
				float3 Out_PositionOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170078 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170078 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170078 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170078 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170078 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170078 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170078 = float3( 0,0,0 );
				float4 Out_VertexData15_g170078 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170078 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170078 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170078 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170078 = Data15_g170078.Dummy;
				Out_PositionOS15_g170078 = Data15_g170078.PositionOS;
				Out_PositionWS15_g170078 = Data15_g170078.PositionWS;
				Out_PositionWO15_g170078 = Data15_g170078.PositionWO;
				Out_PositionRawOS15_g170078 = Data15_g170078.PositionRawOS;
				Out_PositionAddOS15_g170078 = Data15_g170078.PositionAddOS;
				Out_PivotOS15_g170078 = Data15_g170078.PivotOS;
				Out_PivotWS15_g170078 = Data15_g170078.PivotWS;
				Out_PivotWO15_g170078 = Data15_g170078.PivotWO;
				Out_NormalOS15_g170078 = Data15_g170078.NormalOS;
				Out_NormalWS15_g170078 = Data15_g170078.NormalWS;
				Out_NormalRawOS15_g170078 = Data15_g170078.NormalRawOS;
				Out_NormalRawWS15_g170078 = Data15_g170078.NormalRawWS;
				Out_TangentOS15_g170078 = Data15_g170078.TangentOS;
				Out_ViewDirWS15_g170078 = Data15_g170078.ViewDirWS;
				Out_VertexData15_g170078 = Data15_g170078.VertexData;
				Out_MotionData15_g170078 = Data15_g170078.MotionData;
				Out_BoundsData15_g170078 = Data15_g170078.BoundsData;
				Out_RotationData15_g170078 = Data15_g170078.RotationData;
				}
				float3 temp_output_1567_0_g170066 = Out_PositionOS15_g170078;
				float3 In_PositionOS16_g170082 = temp_output_1567_0_g170066;
				float3 temp_output_1567_16_g170066 = Out_PositionWS15_g170078;
				float3 In_PositionWS16_g170082 = temp_output_1567_16_g170066;
				float3 temp_output_1567_17_g170066 = Out_PositionWO15_g170078;
				float3 In_PositionWO16_g170082 = temp_output_1567_17_g170066;
				float3 In_PositionRawOS16_g170082 = Out_PositionRawOS15_g170078;
				float3 temp_cast_39 = (0.0).xxx;
				float4 temp_output_1567_29_g170066 = Out_VertexData15_g170078;
				half4 Model_VertexMasks518_g170066 = temp_output_1567_29_g170066;
				float4 break1689_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170080 = _motion_small_vert_mode;
				float temp_output_30_0_g170080 = ( break1689_g170066.x * break33_g170080.x );
				float temp_output_29_0_g170080 = ( break1689_g170066.y * break33_g170080.y );
				float temp_output_31_0_g170080 = ( break1689_g170066.z * break33_g170080.z );
				float temp_output_28_0_g170080 = ( temp_output_30_0_g170080 + temp_output_29_0_g170080 + temp_output_31_0_g170080 + ( break1689_g170066.w * break33_g170080.w ) );
				float temp_output_1727_0_g170066 = temp_output_28_0_g170080;
				float4 temp_output_1567_30_g170066 = Out_BoundsData15_g170078;
				half4 Model_BoundsData1322_g170066 = temp_output_1567_30_g170066;
				float4 break33_g170083 = _motion_small_proc_mode;
				float temp_output_30_0_g170083 = ( (Model_BoundsData1322_g170066).z * break33_g170083.x );
				float temp_output_29_0_g170083 = ( (Model_BoundsData1322_g170066).w * break33_g170083.y );
				float temp_output_1734_0_g170066 = ( temp_output_30_0_g170083 + temp_output_29_0_g170083 );
				float lerpResult1906_g170066 = lerp( temp_output_1727_0_g170066 , temp_output_1734_0_g170066 , _motion_small_mask_mode);
				float enc1805_g170066 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170066 = DecodeFloatToVector2( enc1805_g170066 );
				float2 break1804_g170066 = localDecodeFloatToVector21805_g170066;
				half Small_Mask_Legacy1806_g170066 = break1804_g170066.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170066 = Small_Mask_Legacy1806_g170066;
				#else
				float staticSwitch1800_g170066 = lerpResult1906_g170066;
				#endif
				float clampResult17_g170085 = clamp( staticSwitch1800_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170086 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170086 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170086 );
				float temp_output_6_0_g170087 = saturate( ( ( clampResult17_g170085 - temp_output_7_0_g170086 ) / ( temp_output_10_0_g170086 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170087 = ( temp_output_6_0_g170087 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170087 = temp_output_6_0_g170087;
				#endif
				half Small_Mask640_g170066 = staticSwitch14_g170087;
				half3 Model_PositionOS147_g170066 = temp_output_1567_0_g170066;
				float3 normalizeResult1832_g170066 = normalize( Model_PositionOS147_g170066 );
				float4 lerpResult627_g170120 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170120 = (lerpResult627_g170120).xy;
				half3 Model_PositionWO162_g170066 = temp_output_1567_17_g170066;
				float3 temp_output_1567_19_g170066 = Out_PivotWO15_g170078;
				half3 Model_PivotWO402_g170066 = temp_output_1567_19_g170066;
				float3 lerpResult829_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170066 = Out_MotionData15_g170078;
				half4 Model_MotionMasks489_g170066 = temp_output_1567_27_g170066;
				half3 Base_Position1394_g170066 = ( lerpResult829_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170120 = Base_Position1394_g170066;
				half Flow_Tillling1397_g170066 = _MotionTillingValue;
				half Input_MotionTilling321_g170120 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170120 = ( -(Input_PositionWO419_g170120).xz * Input_MotionTilling321_g170120 * 0.005 );
				float2 temp_output_3_0_g170133 = Noise_Coord515_g170120;
				float2 temp_output_606_0_g170120 = (Global_WindDirection593_g170120*2.0 + -1.0);
				float2 temp_output_21_0_g170133 = temp_output_606_0_g170120;
				float lerpResult128_g170121 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g170066 = _MotionSpeedValue;
				half Input_MotionSpeed62_g170120 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170120 = ( lerpResult128_g170121 * Input_MotionSpeed62_g170120 );
				half Noise_Speed516_g170120 = ( temp_output_505_0_g170120 * 0.02 );
				float temp_output_15_0_g170133 = Noise_Speed516_g170120;
				float temp_output_23_0_g170133 = frac( temp_output_15_0_g170133 );
				float4 lerpResult39_g170133 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * temp_output_23_0_g170133 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170133 + ( temp_output_21_0_g170133 * frac( ( temp_output_15_0_g170133 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170133 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170120 = lerpResult39_g170133;
				half Flow_Noise1843_g170066 = _MotionNoiseValue;
				half Input_MotionNoise552_g170120 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170120 = lerp( Global_WindDirection593_g170120 , (Noise_Params535_g170120).rg , Input_MotionNoise552_g170120);
				half Global_WindIntensity576_g170120 = (lerpResult627_g170120).z;
				half Flow_Value1855_g170066 = _MotionIntensityValue;
				half Input_MotionValue629_g170120 = Flow_Value1855_g170066;
				float2 lerpResult574_g170120 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170120 , ( Global_WindIntensity576_g170120 * Input_MotionValue629_g170120 ));
				float3 appendResult566_g170120 = (float3(lerpResult574_g170120 , (Noise_Params535_g170120).b));
				float temp_output_136_0_g170122 = _global_wind_layer_value;
				float temp_output_19_0_g170124 = TVE_WindLayers[(int)temp_output_136_0_g170122];
				half3 Input_Position180_g170125 = Input_PositionWO419_g170120;
				float2 temp_output_75_0_g170125 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_82_0_g170125 = temp_output_136_0_g170122;
				float2 temp_output_119_0_g170125 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170125).xz ) );
				float temp_output_7_0_g170130 = 1.0;
				float temp_output_10_0_g170130 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170130 );
				float4 lerpResult131_g170125 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170125,temp_output_82_0_g170125), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170125,temp_output_82_0_g170125), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170125 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170130 ) / temp_output_10_0_g170130 ) ));
				float4 temp_output_17_0_g170124 = lerpResult131_g170125;
				float4 temp_output_3_0_g170124 = TVE_WindParams;
				float4 ifLocalVar18_g170124 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170124 >= 0.5 )
				ifLocalVar18_g170124 = temp_output_17_0_g170124;
				else
				ifLocalVar18_g170124 = temp_output_3_0_g170124;
				float4 lerpResult22_g170124 = lerp( temp_output_3_0_g170124 , temp_output_17_0_g170124 , temp_output_19_0_g170124);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170124 = lerpResult22_g170124;
				#else
				float4 staticSwitch24_g170124 = ifLocalVar18_g170124;
				#endif
				float4 temp_output_610_0_g170120 = staticSwitch24_g170124;
				float3 lerpResult623_g170120 = lerp( appendResult566_g170120 , (temp_output_610_0_g170120).rgb , (temp_output_610_0_g170120).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170120 = lerpResult623_g170120;
				#else
				float3 staticSwitch612_g170120 = appendResult566_g170120;
				#endif
				float3 temp_output_1902_567_g170066 = staticSwitch612_g170120;
				float2 temp_output_1403_0_g170066 = (temp_output_1902_567_g170066).xy;
				float temp_output_136_0_g170067 = _global_push_layer_value;
				float temp_output_19_0_g170068 = TVE_PushLayers[(int)temp_output_136_0_g170067];
				float3 lerpResult1547_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionPushPivotValue);
				half3 Bend_Position1549_g170066 = ( lerpResult1547_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionPushPhaseValue ) );
				half3 Input_Position180_g170069 = Bend_Position1549_g170066;
				float2 temp_output_75_0_g170069 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_82_0_g170069 = temp_output_136_0_g170067;
				float2 temp_output_119_0_g170069 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170069).xz ) );
				float temp_output_7_0_g170074 = 1.0;
				float temp_output_10_0_g170074 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170074 );
				float4 lerpResult131_g170069 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170069,temp_output_82_0_g170069), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170069,temp_output_82_0_g170069), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170069 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170074 ) / temp_output_10_0_g170074 ) ));
				float4 temp_output_17_0_g170068 = lerpResult131_g170069;
				float4 temp_output_3_0_g170068 = TVE_PushParams;
				float4 ifLocalVar18_g170068 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170068 >= 0.5 )
				ifLocalVar18_g170068 = temp_output_17_0_g170068;
				else
				ifLocalVar18_g170068 = temp_output_3_0_g170068;
				float4 lerpResult22_g170068 = lerp( temp_output_3_0_g170068 , temp_output_17_0_g170068 , temp_output_19_0_g170068);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170068 = lerpResult22_g170068;
				#else
				float4 staticSwitch24_g170068 = ifLocalVar18_g170068;
				#endif
				half4 Global_BendParams214_g170066 = staticSwitch24_g170068;
				half Bend_Intensity1501_g170066 = _MotionPushIntensityValue;
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1527_g170066 = saturate( ( (Global_BendParams214_g170066).a * Bend_Intensity1501_g170066 ) );
				#else
				float staticSwitch1527_g170066 = 0.0;
				#endif
				half Bend_Influence1504_g170066 = staticSwitch1527_g170066;
				float2 lerpResult1507_g170066 = lerp( temp_output_1403_0_g170066 , (Global_BendParams214_g170066).rg , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float2 staticSwitch1506_g170066 = lerpResult1507_g170066;
				#else
				float2 staticSwitch1506_g170066 = temp_output_1403_0_g170066;
				#endif
				float2 break83_g170076 = (staticSwitch1506_g170066*2.0 + -1.0);
				float3 appendResult79_g170076 = (float3(break83_g170076.x , 0.0 , break83_g170076.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170076 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g170105 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g170105 = (lerpResult627_g170105).xy;
				float3 lerpResult1411_g170066 = lerp( Model_PositionWO162_g170066 , Model_PivotWO402_g170066 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170066 = ( lerpResult1411_g170066 + ( (Model_MotionMasks489_g170066).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170105 = Small_Position1421_g170066;
				half Input_MotionTilling321_g170105 = ( Flow_Tillling1397_g170066 + 0.2 );
				half2 Noise_Coord515_g170105 = ( -(Input_PositionWO419_g170105).xz * Input_MotionTilling321_g170105 * 0.005 );
				float2 temp_output_3_0_g170118 = Noise_Coord515_g170105;
				float2 temp_output_606_0_g170105 = (Global_WindDirection593_g170105*2.0 + -1.0);
				float2 temp_output_21_0_g170118 = temp_output_606_0_g170105;
				float lerpResult128_g170106 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170105 = Flow_Speed1398_g170066;
				float temp_output_505_0_g170105 = ( lerpResult128_g170106 * Input_MotionSpeed62_g170105 );
				half Noise_Speed516_g170105 = ( temp_output_505_0_g170105 * 0.02 );
				float temp_output_15_0_g170118 = Noise_Speed516_g170105;
				float temp_output_23_0_g170118 = frac( temp_output_15_0_g170118 );
				float4 lerpResult39_g170118 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * temp_output_23_0_g170118 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170118 + ( temp_output_21_0_g170118 * frac( ( temp_output_15_0_g170118 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170118 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g170105 = lerpResult39_g170118;
				half Input_MotionNoise552_g170105 = Flow_Noise1843_g170066;
				float2 lerpResult560_g170105 = lerp( Global_WindDirection593_g170105 , (Noise_Params535_g170105).rg , Input_MotionNoise552_g170105);
				half Global_WindIntensity576_g170105 = (lerpResult627_g170105).z;
				half Input_MotionValue629_g170105 = Flow_Value1855_g170066;
				float2 lerpResult574_g170105 = lerp( float2( 0.5,0.5 ) , lerpResult560_g170105 , ( Global_WindIntensity576_g170105 * Input_MotionValue629_g170105 ));
				float3 appendResult566_g170105 = (float3(lerpResult574_g170105 , (Noise_Params535_g170105).b));
				float temp_output_136_0_g170107 = _global_wind_layer_value;
				float temp_output_19_0_g170109 = TVE_WindLayers[(int)temp_output_136_0_g170107];
				half3 Input_Position180_g170110 = Input_PositionWO419_g170105;
				float2 temp_output_75_0_g170110 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_82_0_g170110 = temp_output_136_0_g170107;
				float2 temp_output_119_0_g170110 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170110).xz ) );
				float temp_output_7_0_g170115 = 1.0;
				float temp_output_10_0_g170115 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170115 );
				float4 lerpResult131_g170110 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170110,temp_output_82_0_g170110), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170110,temp_output_82_0_g170110), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170110 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170115 ) / temp_output_10_0_g170115 ) ));
				float4 temp_output_17_0_g170109 = lerpResult131_g170110;
				float4 temp_output_3_0_g170109 = TVE_WindParams;
				float4 ifLocalVar18_g170109 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170109 >= 0.5 )
				ifLocalVar18_g170109 = temp_output_17_0_g170109;
				else
				ifLocalVar18_g170109 = temp_output_3_0_g170109;
				float4 lerpResult22_g170109 = lerp( temp_output_3_0_g170109 , temp_output_17_0_g170109 , temp_output_19_0_g170109);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170109 = lerpResult22_g170109;
				#else
				float4 staticSwitch24_g170109 = ifLocalVar18_g170109;
				#endif
				float4 temp_output_610_0_g170105 = staticSwitch24_g170109;
				float3 lerpResult623_g170105 = lerp( appendResult566_g170105 , (temp_output_610_0_g170105).rgb , (temp_output_610_0_g170105).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170105 = lerpResult623_g170105;
				#else
				float3 staticSwitch612_g170105 = appendResult566_g170105;
				#endif
				float3 temp_output_1901_567_g170066 = staticSwitch612_g170105;
				float2 break83_g170077 = ((temp_output_1901_567_g170066).xy*2.0 + -1.0);
				float3 appendResult79_g170077 = (float3(break83_g170077.x , 0.0 , break83_g170077.y));
				half2 Small_Direction1489_g170066 = (( mul( unity_WorldToObject, float4( appendResult79_g170077 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170066 = Small_Direction1489_g170066;
				#else
				float2 staticSwitch1485_g170066 = Base_Direction893_g170066;
				#endif
				half2 Wind_Direction1486_g170066 = staticSwitch1485_g170066;
				float2 break1828_g170066 = -Wind_Direction1486_g170066;
				float3 appendResult1830_g170066 = (float3(break1828_g170066.x , 0.0 , break1828_g170066.y));
				float dotResult1831_g170066 = dot( normalizeResult1832_g170066 , appendResult1830_g170066 );
				float lerpResult1826_g170066 = lerp( 1.0 , (dotResult1831_g170066*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170066 = lerpResult1826_g170066;
				float2 break1433_g170066 = Small_Direction1489_g170066;
				float3 appendResult1434_g170066 = (float3(break1433_g170066.x , length( Small_Direction1489_g170066 ) , break1433_g170066.y));
				half Small_Noise1427_g170066 = abs( (temp_output_1901_567_g170066).z );
				float3 appendResult1786_g170066 = (float3(Small_Noise1427_g170066 , (Small_Noise1427_g170066*0.4 + -0.2) , Small_Noise1427_g170066));
				half3 Small_Squash789_g170066 = ( _MotionSmallIntensityValue * Small_Mask640_g170066 * Motion_FrontMask1142_g170066 * appendResult1434_g170066 * appendResult1786_g170066 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170066 = Small_Squash789_g170066;
				#else
				float3 staticSwitch495_g170066 = temp_cast_39;
				#endif
				float3 temp_cast_53 = (0.0).xxx;
				float4 break1710_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170081 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170081 = ( break1710_g170066.x * break33_g170081.x );
				float temp_output_29_0_g170081 = ( break1710_g170066.y * break33_g170081.y );
				float temp_output_31_0_g170081 = ( break1710_g170066.z * break33_g170081.z );
				float temp_output_28_0_g170081 = ( temp_output_30_0_g170081 + temp_output_29_0_g170081 + temp_output_31_0_g170081 + ( break1710_g170066.w * break33_g170081.w ) );
				float temp_output_1729_0_g170066 = temp_output_28_0_g170081;
				float4 break33_g170084 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170084 = ( (Model_BoundsData1322_g170066).z * break33_g170084.x );
				float temp_output_29_0_g170084 = ( (Model_BoundsData1322_g170066).w * break33_g170084.y );
				float temp_output_1735_0_g170066 = ( temp_output_30_0_g170084 + temp_output_29_0_g170084 );
				float lerpResult1908_g170066 = lerp( temp_output_1729_0_g170066 , temp_output_1735_0_g170066 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170066 = break1804_g170066.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170066 = Tiny_Mask_Legacy1807_g170066;
				#else
				float staticSwitch1810_g170066 = lerpResult1908_g170066;
				#endif
				float clampResult17_g170088 = clamp( staticSwitch1810_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170089 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170089 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170089 );
				float temp_output_6_0_g170090 = saturate( ( ( clampResult17_g170088 - temp_output_7_0_g170089 ) / ( temp_output_10_0_g170089 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170090 = ( temp_output_6_0_g170090 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170090 = temp_output_6_0_g170090;
				#endif
				half Tiny_Mask218_g170066 = staticSwitch14_g170090;
				half3 Input_Position500_g170091 = Model_PositionWO162_g170066;
				half Input_MotionTilling321_g170091 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g170091 = 0.0;
				float lerpResult128_g170093 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170091 = _MotionTinySpeedValue;
				float4 tex2DNode460_g170091 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g170091).xz * Input_MotionTilling321_g170091 * 0.03 ) + Input_MotionPhase330_g170091 + ( lerpResult128_g170093 * Input_MotionSpeed62_g170091 * 0.01 ) ), 0.0 );
				float3 appendResult462_g170091 = (float3(tex2DNode460_g170091.r , tex2DNode460_g170091.g , tex2DNode460_g170091.b));
				half3 Flutter_Texture489_g170091 = (appendResult462_g170091*2.0 + -1.0);
				half3 Tiny_Direction859_g170066 = Flutter_Texture489_g170091;
				half Base_Noise1159_g170066 = abs( (temp_output_1902_567_g170066).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170066 = Small_Noise1427_g170066;
				#else
				float staticSwitch1453_g170066 = Base_Noise1159_g170066;
				#endif
				half Wind_Noise1475_g170066 = staticSwitch1453_g170066;
				half3 Model_PositionWS1819_g170066 = temp_output_1567_16_g170066;
				half Motion_FadeMask1820_g170066 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170066 ) / _MotionDistValue ) ) );
				half3 Tiny_Flutter1451_g170066 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170066 * Tiny_Direction859_g170066 * length( Wind_Direction1486_g170066 ) * Wind_Noise1475_g170066 * Motion_FrontMask1142_g170066 * Motion_FadeMask1820_g170066 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170066 = Tiny_Flutter1451_g170066;
				#else
				float3 staticSwitch414_g170066 = temp_cast_53;
				#endif
				half3 Final_PositionADD1569_g170066 = ( staticSwitch495_g170066 + staticSwitch414_g170066 );
				float3 In_PositionAddOS16_g170082 = Final_PositionADD1569_g170066;
				float3 temp_output_1567_24_g170066 = Out_PivotOS15_g170078;
				float3 In_PivotOS16_g170082 = temp_output_1567_24_g170066;
				float3 In_PivotWS16_g170082 = Out_PivotWS15_g170078;
				float3 In_PivotWO16_g170082 = temp_output_1567_19_g170066;
				float3 temp_output_1567_20_g170066 = Out_NormalOS15_g170078;
				float3 In_NormalOS16_g170082 = temp_output_1567_20_g170066;
				float3 In_NormalWS16_g170082 = Out_NormalWS15_g170078;
				float3 In_NormalRawOS16_g170082 = Out_NormalRawOS15_g170078;
				float3 In_NormalRawWS16_g170082 = Out_NormalRawWS15_g170078;
				float4 In_TangentOS16_g170082 = Out_TangentOS15_g170078;
				float3 In_ViewDirWS16_g170082 = Out_ViewDirWS15_g170078;
				float4 In_VertexData16_g170082 = temp_output_1567_29_g170066;
				float4 In_MotionData16_g170082 = temp_output_1567_27_g170066;
				float4 In_BoundsData16_g170082 = temp_output_1567_30_g170066;
				half Base_Intensity1883_g170066 = _MotionBaseIntensityValue;
				float4 break748_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170098 = _motion_base_vert_mode;
				float temp_output_30_0_g170098 = ( break748_g170066.x * break33_g170098.x );
				float temp_output_29_0_g170098 = ( break748_g170066.y * break33_g170098.y );
				float temp_output_31_0_g170098 = ( break748_g170066.z * break33_g170098.z );
				float temp_output_28_0_g170098 = ( temp_output_30_0_g170098 + temp_output_29_0_g170098 + temp_output_31_0_g170098 + ( break748_g170066.w * break33_g170098.w ) );
				float temp_output_1731_0_g170066 = temp_output_28_0_g170098;
				float4 break33_g170099 = _motion_base_proc_mode;
				float temp_output_30_0_g170099 = ( (Model_BoundsData1322_g170066).z * break33_g170099.x );
				float temp_output_29_0_g170099 = ( (Model_BoundsData1322_g170066).w * break33_g170099.y );
				float temp_output_1733_0_g170066 = ( temp_output_30_0_g170099 + temp_output_29_0_g170099 );
				float lerpResult1904_g170066 = lerp( temp_output_1731_0_g170066 , temp_output_1733_0_g170066 , _motion_base_mask_mode);
				float clampResult17_g170095 = clamp( lerpResult1904_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170096 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170096 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170096 );
				float temp_output_6_0_g170097 = saturate( ( ( clampResult17_g170095 - temp_output_7_0_g170096 ) / ( temp_output_10_0_g170096 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170097 = ( temp_output_6_0_g170097 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170097 = temp_output_6_0_g170097;
				#endif
				half Base_Mask217_g170066 = staticSwitch14_g170097;
				float lerpResult1768_g170066 = lerp( (Base_Noise1159_g170066*2.0 + -1.0) , Base_Noise1159_g170066 , length( Base_Direction893_g170066 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float staticSwitch1573_g170066 = ( Base_Intensity1883_g170066 * Base_Mask217_g170066 * lerpResult1768_g170066 );
				#else
				float staticSwitch1573_g170066 = 0.0;
				#endif
				float4 break1864_g170066 = Model_VertexMasks518_g170066;
				float4 break33_g170103 = _motion_push_vert_mode;
				float temp_output_30_0_g170103 = ( break1864_g170066.x * break33_g170103.x );
				float temp_output_29_0_g170103 = ( break1864_g170066.y * break33_g170103.y );
				float temp_output_31_0_g170103 = ( break1864_g170066.z * break33_g170103.z );
				float temp_output_28_0_g170103 = ( temp_output_30_0_g170103 + temp_output_29_0_g170103 + temp_output_31_0_g170103 + ( break1864_g170066.w * break33_g170103.w ) );
				float temp_output_1867_0_g170066 = temp_output_28_0_g170103;
				float4 break33_g170104 = _motion_push_proc_mode;
				float temp_output_30_0_g170104 = ( (Model_BoundsData1322_g170066).z * break33_g170104.x );
				float temp_output_29_0_g170104 = ( (Model_BoundsData1322_g170066).w * break33_g170104.y );
				float temp_output_1868_0_g170066 = ( temp_output_30_0_g170104 + temp_output_29_0_g170104 );
				float lerpResult1910_g170066 = lerp( temp_output_1867_0_g170066 , temp_output_1868_0_g170066 , _motion_push_mask_mode);
				float clampResult17_g170101 = clamp( lerpResult1910_g170066 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170102 = _MotionPushMaskRemap.x;
				float temp_output_10_0_g170102 = ( _MotionPushMaskRemap.y - temp_output_7_0_g170102 );
				float temp_output_6_0_g170135 = saturate( ( ( clampResult17_g170101 - temp_output_7_0_g170102 ) / ( temp_output_10_0_g170102 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170135 = ( temp_output_6_0_g170135 + ( _MotionPushMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170135 = temp_output_6_0_g170135;
				#endif
				half Push_Mask1877_g170066 = staticSwitch14_g170135;
				float lerpResult1496_g170066 = lerp( staticSwitch1573_g170066 , ( Bend_Intensity1501_g170066 * Push_Mask1877_g170066 ) , Bend_Influence1504_g170066);
				#ifdef TVE_MOTION_PUSH_BENDING
				float staticSwitch1517_g170066 = lerpResult1496_g170066;
				#else
				float staticSwitch1517_g170066 = staticSwitch1573_g170066;
				#endif
				half2 Base_Bending1440_g170066 = ( staticSwitch1517_g170066 * Base_Direction893_g170066 );
				half2 Final_VertexBend1570_g170066 = Base_Bending1440_g170066;
				float4 In_RotationData16_g170082 = float4( Final_VertexBend1570_g170066, 0.0 , 0.0 );
				{
				Data16_g170082.Dummy = In_Dummy16_g170082;
				Data16_g170082.PositionOS = In_PositionOS16_g170082;
				Data16_g170082.PositionWS = In_PositionWS16_g170082;
				Data16_g170082.PositionWO = In_PositionWO16_g170082;
				Data16_g170082.PositionRawOS = In_PositionRawOS16_g170082;
				Data16_g170082.PositionAddOS = In_PositionAddOS16_g170082;
				Data16_g170082.PivotOS = In_PivotOS16_g170082;
				Data16_g170082.PivotWS = In_PivotWS16_g170082;
				Data16_g170082.PivotWO = In_PivotWO16_g170082;
				Data16_g170082.NormalOS = In_NormalOS16_g170082;
				Data16_g170082.NormalWS = In_NormalWS16_g170082;
				Data16_g170082.NormalRawOS = In_NormalRawOS16_g170082;
				Data16_g170082.NormalRawWS = In_NormalRawWS16_g170082;
				Data16_g170082.TangentOS = In_TangentOS16_g170082;
				Data16_g170082.ViewDirWS = In_ViewDirWS16_g170082;
				Data16_g170082.VertexData = In_VertexData16_g170082;
				Data16_g170082.MotionData = In_MotionData16_g170082;
				Data16_g170082.BoundsData = In_BoundsData16_g170082;
				Data16_g170082.RotationData = In_RotationData16_g170082;
				}
				TVEModelData Data15_g170401 = Data16_g170082;
				float Out_Dummy15_g170401 = 0;
				float3 Out_PositionOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170401 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170401 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170401 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170401 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170401 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170401 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170401 = float3( 0,0,0 );
				float4 Out_VertexData15_g170401 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170401 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170401 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170401 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170401 = Data15_g170401.Dummy;
				Out_PositionOS15_g170401 = Data15_g170401.PositionOS;
				Out_PositionWS15_g170401 = Data15_g170401.PositionWS;
				Out_PositionWO15_g170401 = Data15_g170401.PositionWO;
				Out_PositionRawOS15_g170401 = Data15_g170401.PositionRawOS;
				Out_PositionAddOS15_g170401 = Data15_g170401.PositionAddOS;
				Out_PivotOS15_g170401 = Data15_g170401.PivotOS;
				Out_PivotWS15_g170401 = Data15_g170401.PivotWS;
				Out_PivotWO15_g170401 = Data15_g170401.PivotWO;
				Out_NormalOS15_g170401 = Data15_g170401.NormalOS;
				Out_NormalWS15_g170401 = Data15_g170401.NormalWS;
				Out_NormalRawOS15_g170401 = Data15_g170401.NormalRawOS;
				Out_NormalRawWS15_g170401 = Data15_g170401.NormalRawWS;
				Out_TangentOS15_g170401 = Data15_g170401.TangentOS;
				Out_ViewDirWS15_g170401 = Data15_g170401.ViewDirWS;
				Out_VertexData15_g170401 = Data15_g170401.VertexData;
				Out_MotionData15_g170401 = Data15_g170401.MotionData;
				Out_BoundsData15_g170401 = Data15_g170401.BoundsData;
				Out_RotationData15_g170401 = Data15_g170401.RotationData;
				}
				half3 Model_PositionOS147_g170400 = Out_PositionOS15_g170401;
				half3 Input_False58_g170406 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170403 = Model_PositionOS147_g170400;
				half3 VertexPos40_g170404 = VertexPos40_g170403;
				float3 appendResult74_g170404 = (float3(VertexPos40_g170404.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170404 = appendResult74_g170404;
				float3 break84_g170404 = VertexPos40_g170404;
				float3 appendResult81_g170404 = (float3(0.0 , break84_g170404.y , break84_g170404.z));
				half3 VertexPosOtherAxis82_g170404 = appendResult81_g170404;
				float4 temp_output_1567_33_g170400 = Out_RotationData15_g170401;
				half4 Model_VertexBend1569_g170400 = temp_output_1567_33_g170400;
				half2 Angle44_g170403 = (Model_VertexBend1569_g170400).xy;
				half Angle44_g170404 = (Angle44_g170403).y;
				half3 VertexPos40_g170405 = ( VertexPosRotationAxis50_g170404 + ( VertexPosOtherAxis82_g170404 * cos( Angle44_g170404 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170404 ) * sin( Angle44_g170404 ) ) );
				float3 appendResult74_g170405 = (float3(0.0 , 0.0 , VertexPos40_g170405.z));
				half3 VertexPosRotationAxis50_g170405 = appendResult74_g170405;
				float3 break84_g170405 = VertexPos40_g170405;
				float3 appendResult81_g170405 = (float3(break84_g170405.x , break84_g170405.y , 0.0));
				half3 VertexPosOtherAxis82_g170405 = appendResult81_g170405;
				half Angle44_g170405 = -(Angle44_g170403).x;
				half3 Input_True57_g170406 = ( VertexPosRotationAxis50_g170405 + ( VertexPosOtherAxis82_g170405 * cos( Angle44_g170405 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170405 ) * sin( Angle44_g170405 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch65_g170406 = Input_False58_g170406;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch67_g170406 = staticSwitch65_g170406;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170406 = Input_True57_g170406;
				#else
				float3 staticSwitch69_g170406 = staticSwitch67_g170406;
				#endif
				float3 temp_output_1567_31_g170400 = Out_PositionAddOS15_g170401;
				half3 Model_PositionADD1568_g170400 = temp_output_1567_31_g170400;
				half3 Final_PositionOS178_g170400 = ( staticSwitch69_g170406 + Model_PositionADD1568_g170400 );
				float3 In_PositionOS16_g170402 = Final_PositionOS178_g170400;
				float3 In_PositionWS16_g170402 = Out_PositionWS15_g170401;
				float3 In_PositionWO16_g170402 = Out_PositionWO15_g170401;
				float3 In_PositionRawOS16_g170402 = Out_PositionRawOS15_g170401;
				float3 In_PositionAddOS16_g170402 = temp_output_1567_31_g170400;
				float3 In_PivotOS16_g170402 = Out_PivotOS15_g170401;
				float3 In_PivotWS16_g170402 = Out_PivotWS15_g170401;
				float3 In_PivotWO16_g170402 = Out_PivotWO15_g170401;
				float3 In_NormalOS16_g170402 = Out_NormalOS15_g170401;
				float3 In_NormalWS16_g170402 = Out_NormalWS15_g170401;
				float3 In_NormalRawOS16_g170402 = Out_NormalRawOS15_g170401;
				float3 In_NormalRawWS16_g170402 = Out_NormalRawWS15_g170401;
				float4 In_TangentOS16_g170402 = Out_TangentOS15_g170401;
				float3 In_ViewDirWS16_g170402 = Out_ViewDirWS15_g170401;
				float4 In_VertexData16_g170402 = Out_VertexData15_g170401;
				float4 In_MotionData16_g170402 = Out_MotionData15_g170401;
				float4 In_BoundsData16_g170402 = Out_BoundsData15_g170401;
				float4 In_RotationData16_g170402 = temp_output_1567_33_g170400;
				{
				Data16_g170402.Dummy = In_Dummy16_g170402;
				Data16_g170402.PositionOS = In_PositionOS16_g170402;
				Data16_g170402.PositionWS = In_PositionWS16_g170402;
				Data16_g170402.PositionWO = In_PositionWO16_g170402;
				Data16_g170402.PositionRawOS = In_PositionRawOS16_g170402;
				Data16_g170402.PositionAddOS = In_PositionAddOS16_g170402;
				Data16_g170402.PivotOS = In_PivotOS16_g170402;
				Data16_g170402.PivotWS = In_PivotWS16_g170402;
				Data16_g170402.PivotWO = In_PivotWO16_g170402;
				Data16_g170402.NormalOS = In_NormalOS16_g170402;
				Data16_g170402.NormalWS = In_NormalWS16_g170402;
				Data16_g170402.NormalRawOS = In_NormalRawOS16_g170402;
				Data16_g170402.NormalRawWS = In_NormalRawWS16_g170402;
				Data16_g170402.TangentOS = In_TangentOS16_g170402;
				Data16_g170402.ViewDirWS = In_ViewDirWS16_g170402;
				Data16_g170402.VertexData = In_VertexData16_g170402;
				Data16_g170402.MotionData = In_MotionData16_g170402;
				Data16_g170402.BoundsData = In_BoundsData16_g170402;
				Data16_g170402.RotationData = In_RotationData16_g170402;
				}
				TVEModelData Data15_g170423 = Data16_g170402;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				}
				float3 In_PositionOS16_g170424 = Out_PositionOS15_g170423;
				float3 In_PositionWS16_g170424 = Out_PositionWS15_g170423;
				float3 temp_output_1567_17_g170422 = Out_PositionWO15_g170423;
				float3 In_PositionWO16_g170424 = temp_output_1567_17_g170422;
				float3 temp_output_1567_26_g170422 = Out_PositionRawOS15_g170423;
				float3 In_PositionRawOS16_g170424 = temp_output_1567_26_g170422;
				float3 In_PositionAddOS16_g170424 = Out_PositionAddOS15_g170423;
				float3 In_PivotOS16_g170424 = Out_PivotOS15_g170423;
				float3 In_PivotWS16_g170424 = Out_PivotWS15_g170423;
				float3 In_PivotWO16_g170424 = Out_PivotWO15_g170423;
				half3 Model_NormalOS1568_g170422 = Out_NormalOS15_g170423;
				float3 lerpResult1589_g170422 = lerp( Model_NormalOS1568_g170422 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170422 = temp_output_1567_26_g170422;
				float3 normalizeResult1594_g170422 = ASESafeNormalize( ( Model_PositionRAW1592_g170422 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170422 = lerp( lerpResult1589_g170422 , normalizeResult1594_g170422 , _NormalSphereValue);
				half3 Input_False58_g170437 = lerpResult1585_g170422;
				half3 VertexPos40_g170426 = lerpResult1585_g170422;
				half3 VertexPos40_g170427 = VertexPos40_g170426;
				float3 appendResult74_g170427 = (float3(VertexPos40_g170427.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170427 = appendResult74_g170427;
				float3 break84_g170427 = VertexPos40_g170427;
				float3 appendResult81_g170427 = (float3(0.0 , break84_g170427.y , break84_g170427.z));
				half3 VertexPosOtherAxis82_g170427 = appendResult81_g170427;
				float4 temp_output_1567_33_g170422 = Out_RotationData15_g170423;
				half4 Model_RotationData1583_g170422 = temp_output_1567_33_g170422;
				half2 Angle44_g170426 = Model_RotationData1583_g170422.xy;
				half Angle44_g170427 = (Angle44_g170426).y;
				half3 VertexPos40_g170428 = ( VertexPosRotationAxis50_g170427 + ( VertexPosOtherAxis82_g170427 * cos( Angle44_g170427 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170427 ) * sin( Angle44_g170427 ) ) );
				float3 appendResult74_g170428 = (float3(0.0 , 0.0 , VertexPos40_g170428.z));
				half3 VertexPosRotationAxis50_g170428 = appendResult74_g170428;
				float3 break84_g170428 = VertexPos40_g170428;
				float3 appendResult81_g170428 = (float3(break84_g170428.x , break84_g170428.y , 0.0));
				half3 VertexPosOtherAxis82_g170428 = appendResult81_g170428;
				half Angle44_g170428 = -(Angle44_g170426).x;
				float3 lerpResult1591_g170422 = lerp( lerpResult1585_g170422 , ( VertexPosRotationAxis50_g170428 + ( VertexPosOtherAxis82_g170428 * cos( Angle44_g170428 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170428 ) * sin( Angle44_g170428 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170437 = lerpResult1591_g170422;
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch65_g170437 = Input_False58_g170437;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch67_g170437 = staticSwitch65_g170437;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170437 = Input_True57_g170437;
				#else
				float3 staticSwitch69_g170437 = staticSwitch67_g170437;
				#endif
				#ifdef TVE_NORMAL_COMPUTE
				float3 staticSwitch1595_g170422 = staticSwitch69_g170437;
				#else
				float3 staticSwitch1595_g170422 = lerpResult1585_g170422;
				#endif
				float4 temp_output_1567_29_g170422 = Out_VertexData15_g170423;
				half4 Model_VertexData1608_g170422 = temp_output_1567_29_g170422;
				float4 break1683_g170422 = Model_VertexData1608_g170422;
				float4 break33_g170430 = _normal_vert_mode;
				float temp_output_30_0_g170430 = ( break1683_g170422.x * break33_g170430.x );
				float temp_output_29_0_g170430 = ( break1683_g170422.y * break33_g170430.y );
				float temp_output_31_0_g170430 = ( break1683_g170422.z * break33_g170430.z );
				float temp_output_28_0_g170430 = ( temp_output_30_0_g170430 + temp_output_29_0_g170430 + temp_output_31_0_g170430 + ( break1683_g170422.w * break33_g170430.w ) );
				float clampResult17_g170432 = clamp( temp_output_28_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170431 = _NormalMeshRemap.x;
				float temp_output_10_0_g170431 = ( _NormalMeshRemap.y - temp_output_7_0_g170431 );
				float lerpResult1695_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170432 - temp_output_7_0_g170431 ) / ( temp_output_10_0_g170431 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170433 = lerpResult1695_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				float temp_output_1690_0_g170422 = staticSwitch14_g170433;
				half Normal_MeskMask1691_g170422 = temp_output_1690_0_g170422;
				half Normal_Proj_Mask1647_g170422 = 1.0;
				float temp_output_1699_0_g170422 = ( Normal_MeskMask1691_g170422 * Normal_Proj_Mask1647_g170422 );
				float3 lerpResult1670_g170422 = lerp( Model_NormalOS1568_g170422 , staticSwitch1595_g170422 , temp_output_1699_0_g170422);
				half3 Final_NormalOS178_g170422 = lerpResult1670_g170422;
				float3 In_NormalOS16_g170424 = Final_NormalOS178_g170422;
				float3 temp_output_1567_21_g170422 = Out_NormalWS15_g170423;
				float3 In_NormalWS16_g170424 = temp_output_1567_21_g170422;
				float3 In_NormalRawOS16_g170424 = Out_NormalRawOS15_g170423;
				float3 In_NormalRawWS16_g170424 = Out_NormalRawWS15_g170423;
				float4 In_TangentOS16_g170424 = Out_TangentOS15_g170423;
				float3 In_ViewDirWS16_g170424 = Out_ViewDirWS15_g170423;
				float4 In_VertexData16_g170424 = temp_output_1567_29_g170422;
				float4 In_MotionData16_g170424 = Out_MotionData15_g170423;
				float4 In_BoundsData16_g170424 = Out_BoundsData15_g170423;
				float4 In_RotationData16_g170424 = temp_output_1567_33_g170422;
				{
				Data16_g170424.Dummy = In_Dummy16_g170424;
				Data16_g170424.PositionOS = In_PositionOS16_g170424;
				Data16_g170424.PositionWS = In_PositionWS16_g170424;
				Data16_g170424.PositionWO = In_PositionWO16_g170424;
				Data16_g170424.PositionRawOS = In_PositionRawOS16_g170424;
				Data16_g170424.PositionAddOS = In_PositionAddOS16_g170424;
				Data16_g170424.PivotOS = In_PivotOS16_g170424;
				Data16_g170424.PivotWS = In_PivotWS16_g170424;
				Data16_g170424.PivotWO = In_PivotWO16_g170424;
				Data16_g170424.NormalOS = In_NormalOS16_g170424;
				Data16_g170424.NormalWS = In_NormalWS16_g170424;
				Data16_g170424.NormalRawOS = In_NormalRawOS16_g170424;
				Data16_g170424.NormalRawWS = In_NormalRawWS16_g170424;
				Data16_g170424.TangentOS = In_TangentOS16_g170424;
				Data16_g170424.ViewDirWS = In_ViewDirWS16_g170424;
				Data16_g170424.VertexData = In_VertexData16_g170424;
				Data16_g170424.MotionData = In_MotionData16_g170424;
				Data16_g170424.BoundsData = In_BoundsData16_g170424;
				Data16_g170424.RotationData = In_RotationData16_g170424;
				}
				TVEModelData Data15_g170446 = Data16_g170424;
				float Out_Dummy15_g170446 = 0;
				float3 Out_PositionOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170446 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170446 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170446 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170446 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170446 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170446 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170446 = float3( 0,0,0 );
				float4 Out_VertexData15_g170446 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170446 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170446 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170446 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170446 = Data15_g170446.Dummy;
				Out_PositionOS15_g170446 = Data15_g170446.PositionOS;
				Out_PositionWS15_g170446 = Data15_g170446.PositionWS;
				Out_PositionWO15_g170446 = Data15_g170446.PositionWO;
				Out_PositionRawOS15_g170446 = Data15_g170446.PositionRawOS;
				Out_PositionAddOS15_g170446 = Data15_g170446.PositionAddOS;
				Out_PivotOS15_g170446 = Data15_g170446.PivotOS;
				Out_PivotWS15_g170446 = Data15_g170446.PivotWS;
				Out_PivotWO15_g170446 = Data15_g170446.PivotWO;
				Out_NormalOS15_g170446 = Data15_g170446.NormalOS;
				Out_NormalWS15_g170446 = Data15_g170446.NormalWS;
				Out_NormalRawOS15_g170446 = Data15_g170446.NormalRawOS;
				Out_NormalRawWS15_g170446 = Data15_g170446.NormalRawWS;
				Out_TangentOS15_g170446 = Data15_g170446.TangentOS;
				Out_ViewDirWS15_g170446 = Data15_g170446.ViewDirWS;
				Out_VertexData15_g170446 = Data15_g170446.VertexData;
				Out_MotionData15_g170446 = Data15_g170446.MotionData;
				Out_BoundsData15_g170446 = Data15_g170446.BoundsData;
				Out_RotationData15_g170446 = Data15_g170446.RotationData;
				}
				float3 temp_output_217_24_g170445 = Out_PivotOS15_g170446;
				float3 In_PositionOS16_g170447 = ( Out_PositionOS15_g170446 + temp_output_217_24_g170445 );
				float3 In_PositionWS16_g170447 = Out_PositionWS15_g170446;
				float3 In_PositionWO16_g170447 = Out_PositionWO15_g170446;
				float3 In_PositionRawOS16_g170447 = Out_PositionRawOS15_g170446;
				float3 In_PositionAddOS16_g170447 = Out_PositionAddOS15_g170446;
				float3 In_PivotOS16_g170447 = temp_output_217_24_g170445;
				float3 In_PivotWS16_g170447 = Out_PivotWS15_g170446;
				float3 In_PivotWO16_g170447 = Out_PivotWO15_g170446;
				float3 In_NormalOS16_g170447 = Out_NormalOS15_g170446;
				float3 In_NormalWS16_g170447 = Out_NormalWS15_g170446;
				float3 In_NormalRawOS16_g170447 = Out_NormalRawOS15_g170446;
				float3 In_NormalRawWS16_g170447 = Out_NormalRawWS15_g170446;
				float4 In_TangentOS16_g170447 = Out_TangentOS15_g170446;
				float3 In_ViewDirWS16_g170447 = Out_ViewDirWS15_g170446;
				float4 In_VertexData16_g170447 = Out_VertexData15_g170446;
				float4 In_MotionData16_g170447 = Out_MotionData15_g170446;
				float4 In_BoundsData16_g170447 = Out_BoundsData15_g170446;
				float4 In_RotationData16_g170447 = Out_RotationData15_g170446;
				{
				Data16_g170447.Dummy = In_Dummy16_g170447;
				Data16_g170447.PositionOS = In_PositionOS16_g170447;
				Data16_g170447.PositionWS = In_PositionWS16_g170447;
				Data16_g170447.PositionWO = In_PositionWO16_g170447;
				Data16_g170447.PositionRawOS = In_PositionRawOS16_g170447;
				Data16_g170447.PositionAddOS = In_PositionAddOS16_g170447;
				Data16_g170447.PivotOS = In_PivotOS16_g170447;
				Data16_g170447.PivotWS = In_PivotWS16_g170447;
				Data16_g170447.PivotWO = In_PivotWO16_g170447;
				Data16_g170447.NormalOS = In_NormalOS16_g170447;
				Data16_g170447.NormalWS = In_NormalWS16_g170447;
				Data16_g170447.NormalRawOS = In_NormalRawOS16_g170447;
				Data16_g170447.NormalRawWS = In_NormalRawWS16_g170447;
				Data16_g170447.TangentOS = In_TangentOS16_g170447;
				Data16_g170447.ViewDirWS = In_ViewDirWS16_g170447;
				Data16_g170447.VertexData = In_VertexData16_g170447;
				Data16_g170447.MotionData = In_MotionData16_g170447;
				Data16_g170447.BoundsData = In_BoundsData16_g170447;
				Data16_g170447.RotationData = In_RotationData16_g170447;
				}
				TVEModelData Data15_g170452 = Data16_g170447;
				float Out_Dummy15_g170452 = 0;
				float3 Out_PositionOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170452 = float3( 0,0,0 );
				float4 Out_VertexData15_g170452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170452 = Data15_g170452.Dummy;
				Out_PositionOS15_g170452 = Data15_g170452.PositionOS;
				Out_PositionWS15_g170452 = Data15_g170452.PositionWS;
				Out_PositionWO15_g170452 = Data15_g170452.PositionWO;
				Out_PositionRawOS15_g170452 = Data15_g170452.PositionRawOS;
				Out_PositionAddOS15_g170452 = Data15_g170452.PositionAddOS;
				Out_PivotOS15_g170452 = Data15_g170452.PivotOS;
				Out_PivotWS15_g170452 = Data15_g170452.PivotWS;
				Out_PivotWO15_g170452 = Data15_g170452.PivotWO;
				Out_NormalOS15_g170452 = Data15_g170452.NormalOS;
				Out_NormalWS15_g170452 = Data15_g170452.NormalWS;
				Out_NormalRawOS15_g170452 = Data15_g170452.NormalRawOS;
				Out_NormalRawWS15_g170452 = Data15_g170452.NormalRawWS;
				Out_TangentOS15_g170452 = Data15_g170452.TangentOS;
				Out_ViewDirWS15_g170452 = Data15_g170452.ViewDirWS;
				Out_VertexData15_g170452 = Data15_g170452.VertexData;
				Out_MotionData15_g170452 = Data15_g170452.MotionData;
				Out_BoundsData15_g170452 = Data15_g170452.BoundsData;
				Out_RotationData15_g170452 = Data15_g170452.RotationData;
				}
				float3 temp_output_31_0_g170449 = Out_PositionOS15_g170452;
				
				o.ase_texcoord4.xyz = vertexToFrag73_g169248;
				o.ase_texcoord5.xyz = vertexToFrag76_g169248;
				o.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170100 = ( _MotionHighlightValue * length( Wind_Direction1486_g170066 ) * Motion_FadeMask1820_g170066 * ( Base_Mask217_g170066 * Base_Mask217_g170066 ) * ( Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 * Wind_Noise1475_g170066 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170100 = ( temp_output_6_0_g170100 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170100 = temp_output_6_0_g170100;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170100;
				float4 appendResult23_g170165 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170165 = appendResult23_g170165;
				o.ase_texcoord9 = vertexToFrag24_g170165;
				o.ase_texcoord10.xyz = ase_worldPos;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;
				o.ase_texcoord4.w = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord10.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170449 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170452;
				v.tangent = Out_TangentOS15_g170452;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g170456 = ( 0.0 );
				float localBreakData4_g170455 = ( 0.0 );
				float localCompData3_g170440 = ( 0.0 );
				TVEVisualData Data3_g170440 = (TVEVisualData)0;
				half Dummy145_g170438 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170440 = Dummy145_g170438;
				float localBreakData4_g170439 = ( 0.0 );
				float localCompData3_g170419 = ( 0.0 );
				TVEVisualData Data3_g170419 = (TVEVisualData)0;
				half Dummy145_g170407 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170419 = Dummy145_g170407;
				float localBreakData4_g170418 = ( 0.0 );
				float localCompData3_g170393 = ( 0.0 );
				TVEVisualData Data3_g170393 = (TVEVisualData)0;
				half Dummy594_g170389 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170393 = Dummy594_g170389;
				float localBreakData4_g170392 = ( 0.0 );
				float localCompData3_g170378 = ( 0.0 );
				TVEVisualData Data3_g170378 = (TVEVisualData)0;
				half Dummy594_g170376 = ( _CutoutCategory + _CutoutEnd + _CutoutElementMode + _CutoutBakeMode );
				float In_Dummy3_g170378 = Dummy594_g170376;
				float localBreakData4_g170377 = ( 0.0 );
				float localCompData3_g170360 = ( 0.0 );
				TVEVisualData Data3_g170360 = (TVEVisualData)0;
				half Dummy594_g170358 = ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode );
				float In_Dummy3_g170360 = Dummy594_g170358;
				float localBreakData4_g170359 = ( 0.0 );
				float localCompData3_g170325 = ( 0.0 );
				TVEVisualData Data3_g170325 = (TVEVisualData)0;
				half Dummy594_g170322 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode );
				float In_Dummy3_g170325 = Dummy594_g170322;
				float localBreakData4_g170323 = ( 0.0 );
				float localCompData3_g170321 = ( 0.0 );
				TVEVisualData Data3_g170321 = (TVEVisualData)0;
				float In_Dummy3_g170321 = 0.0;
				float localBreakData4_g170320 = ( 0.0 );
				float localCompData3_g170194 = ( 0.0 );
				TVEVisualData Data3_g170194 = (TVEVisualData)0;
				half Dummy205_g170190 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode );
				float In_Dummy3_g170194 = Dummy205_g170190;
				float localBreakData4_g170192 = ( 0.0 );
				float localCompData3_g170169 = ( 0.0 );
				TVEVisualData Data3_g170169 = (TVEVisualData)0;
				half Dummy205_g170166 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170169 = Dummy205_g170166;
				float localBreakData4_g170171 = ( 0.0 );
				float localCompData3_g170160 = ( 0.0 );
				TVEVisualData Data3_g170160 = (TVEVisualData)0;
				half Dummy220_g170156 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170160 = Dummy220_g170156;
				float localBreakData4_g170158 = ( 0.0 );
				float localCompData3_g170150 = ( 0.0 );
				TVEVisualData Data3_g170150 = (TVEVisualData)0;
				half Dummy220_g170146 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170150 = Dummy220_g170146;
				float localBreakData4_g170149 = ( 0.0 );
				float localCompData3_g170138 = ( 0.0 );
				TVEVisualData Data3_g170138 = (TVEVisualData)0;
				half Dummy202_g170136 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170138 = Dummy202_g170136;
				float localBreakData4_g170137 = ( 0.0 );
				float localCompData3_g170050 = ( 0.0 );
				TVEVisualData Data3_g170050 = (TVEVisualData)0;
				half4 Dummy944_g170033 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170050 = Dummy944_g170033.x;
				float localBreakData4_g170049 = ( 0.0 );
				float localCompData3_g170004 = ( 0.0 );
				TVEVisualData Data3_g170004 = (TVEVisualData)0;
				half4 Dummy946_g169993 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170004 = Dummy946_g169993.x;
				float localBreakData4_g170007 = ( 0.0 );
				float localCompData3_g169981 = ( 0.0 );
				TVEVisualData Data3_g169981 = (TVEVisualData)0;
				half4 Dummy130_g169971 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g169981 = Dummy130_g169971.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169982) = _MainAlbedoTex;
				SamplerState Sampler276_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g169971 = _main_coord_value;
				float4 temp_output_37_0_g169982 = Local_Coords180_g169971;
				half4 Coords276_g169982 = temp_output_37_0_g169982;
				half2 TexCoord276_g169982 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169982 = SampleMain( Texture276_g169982 , Sampler276_g169982 , Coords276_g169982 , TexCoord276_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169982) = _MainAlbedoTex;
				SamplerState Sampler275_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169982 = temp_output_37_0_g169982;
				half2 TexCoord275_g169982 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169982 = SampleExtra( Texture275_g169982 , Sampler275_g169982 , Coords275_g169982 , TexCoord275_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169982) = _MainAlbedoTex;
				SamplerState Sampler238_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169982 = temp_output_37_0_g169982;
				TVEModelData Data16_g169262 = (TVEModelData)0;
				float In_Dummy16_g169262 = 0.0;
				float3 In_PositionOS16_g169262 = float3( 0,0,0 );
				float3 vertexToFrag73_g169248 = IN.ase_texcoord4.xyz;
				half3 PositionWS122_g169248 = vertexToFrag73_g169248;
				float3 In_PositionWS16_g169262 = PositionWS122_g169248;
				float3 vertexToFrag76_g169248 = IN.ase_texcoord5.xyz;
				half3 PivotWS121_g169248 = vertexToFrag76_g169248;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g169248 = ( PositionWS122_g169248 - PivotWS121_g169248 );
				#else
				float3 staticSwitch204_g169248 = PositionWS122_g169248;
				#endif
				half3 PositionWO132_g169248 = ( staticSwitch204_g169248 - TVE_WorldOrigin );
				float3 In_PositionWO16_g169262 = PositionWO132_g169248;
				float3 In_PositionRawOS16_g169262 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotOS16_g169262 = float3( 0,0,0 );
				float3 In_PivotWS16_g169262 = PivotWS121_g169248;
				half3 PivotWO133_g169248 = ( PivotWS121_g169248 - TVE_WorldOrigin );
				float3 In_PivotWO16_g169262 = PivotWO133_g169248;
				float3 In_NormalOS16_g169262 = float3( 0,0,0 );
				float3 ase_worldNormal = IN.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g169248 = normalizedWorldNormal;
				float3 In_NormalWS16_g169262 = Normal_WS95_g169248;
				float3 In_NormalRawOS16_g169262 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g169262 = float3( 0,0,0 );
				float4 In_TangentOS16_g169262 = float4( 0,1,0,1 );
				float3 normalizeResult296_g169248 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g169248 ) );
				half3 ViewDirWS169_g169248 = normalizeResult296_g169248;
				float3 In_ViewDirWS16_g169262 = ViewDirWS169_g169248;
				half4 VertexMasks171_g169248 = IN.ase_color;
				float4 In_VertexData16_g169262 = VertexMasks171_g169248;
				float4 In_MotionData16_g169262 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g169262 = float4( 1,1,1,1 );
				float4 In_RotationData16_g169262 = float4( 0,0,0,0 );
				{
				Data16_g169262.Dummy = In_Dummy16_g169262;
				Data16_g169262.PositionOS = In_PositionOS16_g169262;
				Data16_g169262.PositionWS = In_PositionWS16_g169262;
				Data16_g169262.PositionWO = In_PositionWO16_g169262;
				Data16_g169262.PositionRawOS = In_PositionRawOS16_g169262;
				Data16_g169262.PositionAddOS = In_PositionAddOS16_g169262;
				Data16_g169262.PivotOS = In_PivotOS16_g169262;
				Data16_g169262.PivotWS = In_PivotWS16_g169262;
				Data16_g169262.PivotWO = In_PivotWO16_g169262;
				Data16_g169262.NormalOS = In_NormalOS16_g169262;
				Data16_g169262.NormalWS = In_NormalWS16_g169262;
				Data16_g169262.NormalRawOS = In_NormalRawOS16_g169262;
				Data16_g169262.NormalRawWS = In_NormalRawWS16_g169262;
				Data16_g169262.TangentOS = In_TangentOS16_g169262;
				Data16_g169262.ViewDirWS = In_ViewDirWS16_g169262;
				Data16_g169262.VertexData = In_VertexData16_g169262;
				Data16_g169262.MotionData = In_MotionData16_g169262;
				Data16_g169262.BoundsData = In_BoundsData16_g169262;
				Data16_g169262.RotationData = In_RotationData16_g169262;
				}
				TVEModelData Data15_g169972 = Data16_g169262;
				float Out_Dummy15_g169972 = 0;
				float3 Out_PositionOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169972 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169972 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169972 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169972 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169972 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169972 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169972 = float3( 0,0,0 );
				float4 Out_VertexData15_g169972 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169972 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169972 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169972 = Data15_g169972.Dummy;
				Out_PositionOS15_g169972 = Data15_g169972.PositionOS;
				Out_PositionWS15_g169972 = Data15_g169972.PositionWS;
				Out_PositionWO15_g169972 = Data15_g169972.PositionWO;
				Out_PositionRawOS15_g169972 = Data15_g169972.PositionRawOS;
				Out_PositionAddOS15_g169972 = Data15_g169972.PositionAddOS;
				Out_PivotOS15_g169972 = Data15_g169972.PivotOS;
				Out_PivotWS15_g169972 = Data15_g169972.PivotWS;
				Out_PivotWO15_g169972 = Data15_g169972.PivotWO;
				Out_NormalOS15_g169972 = Data15_g169972.NormalOS;
				Out_NormalWS15_g169972 = Data15_g169972.NormalWS;
				Out_NormalRawOS15_g169972 = Data15_g169972.NormalRawOS;
				Out_NormalRawWS15_g169972 = Data15_g169972.NormalRawWS;
				Out_TangentOS15_g169972 = Data15_g169972.TangentOS;
				Out_ViewDirWS15_g169972 = Data15_g169972.ViewDirWS;
				Out_VertexData15_g169972 = Data15_g169972.VertexData;
				Out_MotionData15_g169972 = Data15_g169972.MotionData;
				Out_BoundsData15_g169972 = Data15_g169972.BoundsData;
				Out_RotationData15_g169972 = Data15_g169972.RotationData;
				}
				half3 Model_PositionWO222_g169971 = Out_PositionWO15_g169972;
				float3 temp_output_279_0_g169982 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169982 = temp_output_279_0_g169982;
				half4 localSamplePlanar2D238_g169982 = SamplePlanar2D( Texture238_g169982 , Sampler238_g169982 , Coords238_g169982 , WorldPosition238_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169982) = _MainAlbedoTex;
				SamplerState Sampler246_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition246_g169982 = temp_output_279_0_g169982;
				half3 Model_NormalWS226_g169971 = Out_NormalWS15_g169972;
				float3 temp_output_280_0_g169982 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169982 = temp_output_280_0_g169982;
				half4 localSamplePlanar3D246_g169982 = SamplePlanar3D( Texture246_g169982 , Sampler246_g169982 , Coords246_g169982 , WorldPosition246_g169982 , WorldNormal246_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169982) = _MainAlbedoTex;
				SamplerState Sampler234_g169982 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169982 = temp_output_37_0_g169982;
				float3 WorldPosition234_g169982 = temp_output_279_0_g169982;
				float4 localSampleStochastic2D234_g169982 = SampleStochastic2D( Texture234_g169982 , Sampler234_g169982 , Coords234_g169982 , WorldPosition234_g169982 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169982) = _MainAlbedoTex;
				SamplerState Sampler263_g169982 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169982 = temp_output_37_0_g169982;
				half3 WorldPosition263_g169982 = temp_output_279_0_g169982;
				half3 WorldNormal263_g169982 = temp_output_280_0_g169982;
				half4 localSampleStochastic3D263_g169982 = SampleStochastic3D( Texture263_g169982 , Sampler263_g169982 , Coords263_g169982 , WorldPosition263_g169982 , WorldNormal263_g169982 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g169971 = localSampleExtra275_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g169971 = localSamplePlanar2D238_g169982;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g169971 = localSamplePlanar3D246_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g169971 = localSampleStochastic2D234_g169982;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g169971 = localSampleStochastic3D263_g169982;
				#else
				float4 staticSwitch184_g169971 = localSampleMain276_g169982;
				#endif
				half4 Local_AlbedoTex185_g169971 = staticSwitch184_g169971;
				float3 lerpResult53_g169971 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g169971).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g169971 = lerpResult53_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169984) = _MainShaderTex;
				SamplerState Sampler276_g169984 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169984 = Local_Coords180_g169971;
				half4 Coords276_g169984 = temp_output_37_0_g169984;
				half2 TexCoord276_g169984 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169984 = SampleMain( Texture276_g169984 , Sampler276_g169984 , Coords276_g169984 , TexCoord276_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169984) = _MainShaderTex;
				SamplerState Sampler275_g169984 = sampler_Linear_Repeat;
				half4 Coords275_g169984 = temp_output_37_0_g169984;
				half2 TexCoord275_g169984 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169984 = SampleExtra( Texture275_g169984 , Sampler275_g169984 , Coords275_g169984 , TexCoord275_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169984) = _MainShaderTex;
				SamplerState Sampler238_g169984 = sampler_Linear_Repeat;
				half4 Coords238_g169984 = temp_output_37_0_g169984;
				float3 temp_output_279_0_g169984 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169984 = temp_output_279_0_g169984;
				half4 localSamplePlanar2D238_g169984 = SamplePlanar2D( Texture238_g169984 , Sampler238_g169984 , Coords238_g169984 , WorldPosition238_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169984) = _MainShaderTex;
				SamplerState Sampler246_g169984 = sampler_Linear_Repeat;
				half4 Coords246_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition246_g169984 = temp_output_279_0_g169984;
				float3 temp_output_280_0_g169984 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169984 = temp_output_280_0_g169984;
				half4 localSamplePlanar3D246_g169984 = SamplePlanar3D( Texture246_g169984 , Sampler246_g169984 , Coords246_g169984 , WorldPosition246_g169984 , WorldNormal246_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169984) = _MainShaderTex;
				SamplerState Sampler234_g169984 = sampler_Linear_Repeat;
				float4 Coords234_g169984 = temp_output_37_0_g169984;
				float3 WorldPosition234_g169984 = temp_output_279_0_g169984;
				float4 localSampleStochastic2D234_g169984 = SampleStochastic2D( Texture234_g169984 , Sampler234_g169984 , Coords234_g169984 , WorldPosition234_g169984 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169984) = _MainShaderTex;
				SamplerState Sampler263_g169984 = sampler_Linear_Repeat;
				half4 Coords263_g169984 = temp_output_37_0_g169984;
				half3 WorldPosition263_g169984 = temp_output_279_0_g169984;
				half3 WorldNormal263_g169984 = temp_output_280_0_g169984;
				half4 localSampleStochastic3D263_g169984 = SampleStochastic3D( Texture263_g169984 , Sampler263_g169984 , Coords263_g169984 , WorldPosition263_g169984 , WorldNormal263_g169984 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g169971 = localSampleExtra275_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g169971 = localSamplePlanar2D238_g169984;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g169971 = localSamplePlanar3D246_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g169971 = localSampleStochastic2D234_g169984;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g169971 = localSampleStochastic3D263_g169984;
				#else
				float4 staticSwitch198_g169971 = localSampleMain276_g169984;
				#endif
				half4 Local_MasksTex199_g169971 = staticSwitch198_g169971;
				float lerpResult23_g169971 = lerp( 1.0 , (Local_MasksTex199_g169971).y , _MainOcclusionValue);
				float4 appendResult73_g169971 = (float4(( (Local_MasksTex199_g169971).x * _MainMetallicValue ) , lerpResult23_g169971 , (Local_MasksTex199_g169971).z , ( (Local_MasksTex199_g169971).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g169971 = appendResult73_g169971;
				float clampResult17_g169977 = clamp( (Local_Masks109_g169971).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g169978 = _MainMultiRemap.x;
				float temp_output_10_0_g169978 = ( _MainMultiRemap.y - temp_output_7_0_g169978 );
				half Local_MultiMask78_g169971 = saturate( ( ( clampResult17_g169977 - temp_output_7_0_g169978 ) / ( temp_output_10_0_g169978 + 0.0001 ) ) );
				float lerpResult58_g169971 = lerp( 1.0 , Local_MultiMask78_g169971 , _MainColorMode);
				float4 lerpResult62_g169971 = lerp( _MainColorTwo , _MainColor , lerpResult58_g169971);
				half3 Local_ColorRGB93_g169971 = (lerpResult62_g169971).rgb;
				half3 Local_Albedo139_g169971 = ( Local_AlbedoRGB107_g169971 * Local_ColorRGB93_g169971 );
				float3 In_Albedo3_g169981 = Local_Albedo139_g169971;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169983) = _MainNormalTex;
				SamplerState Sampler276_g169983 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169983 = Local_Coords180_g169971;
				half4 Coords276_g169983 = temp_output_37_0_g169983;
				half2 TexCoord276_g169983 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169983 = SampleMain( Texture276_g169983 , Sampler276_g169983 , Coords276_g169983 , TexCoord276_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169983) = _MainNormalTex;
				SamplerState Sampler275_g169983 = sampler_Linear_Repeat;
				half4 Coords275_g169983 = temp_output_37_0_g169983;
				half2 TexCoord275_g169983 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169983 = SampleExtra( Texture275_g169983 , Sampler275_g169983 , Coords275_g169983 , TexCoord275_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169983) = _MainNormalTex;
				SamplerState Sampler238_g169983 = sampler_Linear_Repeat;
				half4 Coords238_g169983 = temp_output_37_0_g169983;
				float3 temp_output_279_0_g169983 = Model_PositionWO222_g169971;
				half3 WorldPosition238_g169983 = temp_output_279_0_g169983;
				half4 localSamplePlanar2D238_g169983 = SamplePlanar2D( Texture238_g169983 , Sampler238_g169983 , Coords238_g169983 , WorldPosition238_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169983) = _MainNormalTex;
				SamplerState Sampler246_g169983 = sampler_Linear_Repeat;
				half4 Coords246_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition246_g169983 = temp_output_279_0_g169983;
				float3 temp_output_280_0_g169983 = Model_NormalWS226_g169971;
				half3 WorldNormal246_g169983 = temp_output_280_0_g169983;
				half4 localSamplePlanar3D246_g169983 = SamplePlanar3D( Texture246_g169983 , Sampler246_g169983 , Coords246_g169983 , WorldPosition246_g169983 , WorldNormal246_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169983) = _MainNormalTex;
				SamplerState Sampler234_g169983 = sampler_Linear_Repeat;
				float4 Coords234_g169983 = temp_output_37_0_g169983;
				float3 WorldPosition234_g169983 = temp_output_279_0_g169983;
				float4 localSampleStochastic2D234_g169983 = SampleStochastic2D( Texture234_g169983 , Sampler234_g169983 , Coords234_g169983 , WorldPosition234_g169983 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169983) = _MainNormalTex;
				SamplerState Sampler263_g169983 = sampler_Linear_Repeat;
				half4 Coords263_g169983 = temp_output_37_0_g169983;
				half3 WorldPosition263_g169983 = temp_output_279_0_g169983;
				half3 WorldNormal263_g169983 = temp_output_280_0_g169983;
				half4 localSampleStochastic3D263_g169983 = SampleStochastic3D( Texture263_g169983 , Sampler263_g169983 , Coords263_g169983 , WorldPosition263_g169983 , WorldNormal263_g169983 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g169971 = localSampleExtra275_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g169971 = localSamplePlanar2D238_g169983;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g169971 = localSamplePlanar3D246_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g169971 = localSampleStochastic2D234_g169983;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g169971 = localSampleStochastic3D263_g169983;
				#else
				float4 staticSwitch193_g169971 = localSampleMain276_g169983;
				#endif
				half4 Local_NormaTex191_g169971 = staticSwitch193_g169971;
				half4 Normal_Packed45_g169973 = Local_NormaTex191_g169971;
				float2 appendResult58_g169973 = (float2(( (Normal_Packed45_g169973).x * (Normal_Packed45_g169973).w ) , (Normal_Packed45_g169973).y));
				half2 Normal_Default50_g169973 = appendResult58_g169973;
				half2 Normal_ASTC41_g169973 = (Normal_Packed45_g169973).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169973 = Normal_ASTC41_g169973;
				#else
				float2 staticSwitch38_g169973 = Normal_Default50_g169973;
				#endif
				half2 Normal_NO_DTX544_g169973 = (Normal_Packed45_g169973).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169973 = Normal_NO_DTX544_g169973;
				#else
				float2 staticSwitch37_g169973 = staticSwitch38_g169973;
				#endif
				float2 temp_output_26_0_g169971 = ( (staticSwitch37_g169973*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord7.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g169974 = temp_output_26_0_g169971;
				float2 break71_g169974 = Normal_Planar45_g169974;
				float3 appendResult72_g169974 = (float3(break71_g169974.x , 0.0 , break71_g169974.y));
				float2 temp_output_205_0_g169971 = (mul( ase_worldToTangent, appendResult72_g169974 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g169971 = temp_output_205_0_g169971;
				#else
				float2 staticSwitch204_g169971 = temp_output_26_0_g169971;
				#endif
				half2 Local_NormalTS108_g169971 = staticSwitch204_g169971;
				float2 In_NormalTS3_g169981 = Local_NormalTS108_g169971;
				float3 appendResult68_g169975 = (float3(Local_NormalTS108_g169971 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g169975 = appendResult68_g169975;
				float3 worldNormal74_g169975 = normalize( float3(dot(tanToWorld0,tanNormal74_g169975), dot(tanToWorld1,tanNormal74_g169975), dot(tanToWorld2,tanNormal74_g169975)) );
				half3 Local_NormalWS250_g169971 = worldNormal74_g169975;
				float3 In_NormalWS3_g169981 = Local_NormalWS250_g169971;
				float4 In_Shader3_g169981 = Local_Masks109_g169971;
				float4 In_Emissive3_g169981 = half4(1,1,1,1);
				float3 temp_output_3_0_g169976 = Local_Albedo139_g169971;
				float dotResult20_g169976 = dot( temp_output_3_0_g169976 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g169971 = dotResult20_g169976;
				float In_Grayscale3_g169981 = Local_Grayscale110_g169971;
				float clampResult144_g169971 = clamp( saturate( ( Local_Grayscale110_g169971 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g169971 = clampResult144_g169971;
				float In_Luminosity3_g169981 = Local_Luminosity145_g169971;
				float In_MultiMask3_g169981 = Local_MultiMask78_g169971;
				float temp_output_187_0_g169971 = (Local_AlbedoTex185_g169971).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g169971 = ( temp_output_187_0_g169971 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g169971 = temp_output_187_0_g169971;
				#endif
				half Local_AlphaClip111_g169971 = staticSwitch236_g169971;
				float In_AlphaClip3_g169981 = Local_AlphaClip111_g169971;
				half Local_AlphaFade246_g169971 = (lerpResult62_g169971).a;
				float In_AlphaFade3_g169981 = Local_AlphaFade246_g169971;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g169981 = temp_cast_4;
				float In_Transmission3_g169981 = 1.0;
				float In_Thickness3_g169981 = 0.0;
				float In_Diffusion3_g169981 = 0.0;
				{
				Data3_g169981.Dummy = In_Dummy3_g169981;
				Data3_g169981.Albedo = In_Albedo3_g169981;
				Data3_g169981.NormalTS = In_NormalTS3_g169981;
				Data3_g169981.NormalWS = In_NormalWS3_g169981;
				Data3_g169981.Shader = In_Shader3_g169981;
				Data3_g169981.Emissive= In_Emissive3_g169981;
				Data3_g169981.MultiMask = In_MultiMask3_g169981;
				Data3_g169981.Grayscale = In_Grayscale3_g169981;
				Data3_g169981.Luminosity = In_Luminosity3_g169981;
				Data3_g169981.AlphaClip = In_AlphaClip3_g169981;
				Data3_g169981.AlphaFade = In_AlphaFade3_g169981;
				Data3_g169981.Translucency = In_Translucency3_g169981;
				Data3_g169981.Transmission = In_Transmission3_g169981;
				Data3_g169981.Thickness = In_Thickness3_g169981;
				Data3_g169981.Diffusion = In_Diffusion3_g169981;
				}
				TVEVisualData Data4_g170007 = Data3_g169981;
				float Out_Dummy4_g170007 = 0;
				float3 Out_Albedo4_g170007 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170007 = float2( 0,0 );
				float3 Out_NormalWS4_g170007 = float3( 0,0,0 );
				float4 Out_Shader4_g170007 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170007 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170007 = 0;
				float Out_Grayscale4_g170007 = 0;
				float Out_Luminosity4_g170007 = 0;
				float Out_AlphaClip4_g170007 = 0;
				float Out_AlphaFade4_g170007 = 0;
				float3 Out_Translucency4_g170007 = float3( 0,0,0 );
				float Out_Transmission4_g170007 = 0;
				float Out_Thickness4_g170007 = 0;
				float Out_Diffusion4_g170007 = 0;
				{
				Out_Dummy4_g170007 = Data4_g170007.Dummy;
				Out_Albedo4_g170007 = Data4_g170007.Albedo;
				Out_NormalTS4_g170007 = Data4_g170007.NormalTS;
				Out_NormalWS4_g170007 = Data4_g170007.NormalWS;
				Out_Shader4_g170007 = Data4_g170007.Shader;
				Out_Emissive4_g170007= Data4_g170007.Emissive;
				Out_MultiMask4_g170007 = Data4_g170007.MultiMask;
				Out_Grayscale4_g170007 = Data4_g170007.Grayscale;
				Out_Luminosity4_g170007= Data4_g170007.Luminosity;
				Out_AlphaClip4_g170007 = Data4_g170007.AlphaClip;
				Out_AlphaFade4_g170007 = Data4_g170007.AlphaFade;
				Out_Translucency4_g170007 = Data4_g170007.Translucency;
				Out_Transmission4_g170007 = Data4_g170007.Transmission;
				Out_Thickness4_g170007 = Data4_g170007.Thickness;
				Out_Diffusion4_g170007 = Data4_g170007.Diffusion;
				}
				half3 Visual_Albedo527_g169993 = Out_Albedo4_g170007;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169994) = _SecondAlbedoTex;
				SamplerState Sampler276_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g169993 = _second_coord_value;
				float4 temp_output_37_0_g169994 = Local_LayerCoords790_g169993;
				half4 Coords276_g169994 = temp_output_37_0_g169994;
				half2 TexCoord276_g169994 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169994 = SampleMain( Texture276_g169994 , Sampler276_g169994 , Coords276_g169994 , TexCoord276_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169994) = _SecondAlbedoTex;
				SamplerState Sampler275_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g169994 = temp_output_37_0_g169994;
				half2 TexCoord275_g169994 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169994 = SampleExtra( Texture275_g169994 , Sampler275_g169994 , Coords275_g169994 , TexCoord275_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169994) = _SecondAlbedoTex;
				SamplerState Sampler238_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g169994 = temp_output_37_0_g169994;
				TVEModelData Data15_g170005 = Data16_g169262;
				float Out_Dummy15_g170005 = 0;
				float3 Out_PositionOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170005 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170005 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170005 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170005 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170005 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170005 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170005 = float3( 0,0,0 );
				float4 Out_VertexData15_g170005 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170005 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170005 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170005 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170005 = Data15_g170005.Dummy;
				Out_PositionOS15_g170005 = Data15_g170005.PositionOS;
				Out_PositionWS15_g170005 = Data15_g170005.PositionWS;
				Out_PositionWO15_g170005 = Data15_g170005.PositionWO;
				Out_PositionRawOS15_g170005 = Data15_g170005.PositionRawOS;
				Out_PositionAddOS15_g170005 = Data15_g170005.PositionAddOS;
				Out_PivotOS15_g170005 = Data15_g170005.PivotOS;
				Out_PivotWS15_g170005 = Data15_g170005.PivotWS;
				Out_PivotWO15_g170005 = Data15_g170005.PivotWO;
				Out_NormalOS15_g170005 = Data15_g170005.NormalOS;
				Out_NormalWS15_g170005 = Data15_g170005.NormalWS;
				Out_NormalRawOS15_g170005 = Data15_g170005.NormalRawOS;
				Out_NormalRawWS15_g170005 = Data15_g170005.NormalRawWS;
				Out_TangentOS15_g170005 = Data15_g170005.TangentOS;
				Out_ViewDirWS15_g170005 = Data15_g170005.ViewDirWS;
				Out_VertexData15_g170005 = Data15_g170005.VertexData;
				Out_MotionData15_g170005 = Data15_g170005.MotionData;
				Out_BoundsData15_g170005 = Data15_g170005.BoundsData;
				Out_RotationData15_g170005 = Data15_g170005.RotationData;
				}
				half3 Model_PositionWO636_g169993 = Out_PositionWO15_g170005;
				float3 temp_output_279_0_g169994 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169994 = temp_output_279_0_g169994;
				half4 localSamplePlanar2D238_g169994 = SamplePlanar2D( Texture238_g169994 , Sampler238_g169994 , Coords238_g169994 , WorldPosition238_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169994) = _SecondAlbedoTex;
				SamplerState Sampler246_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition246_g169994 = temp_output_279_0_g169994;
				half3 Model_NormalWS869_g169993 = Out_NormalWS15_g170005;
				float3 temp_output_280_0_g169994 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169994 = temp_output_280_0_g169994;
				half4 localSamplePlanar3D246_g169994 = SamplePlanar3D( Texture246_g169994 , Sampler246_g169994 , Coords246_g169994 , WorldPosition246_g169994 , WorldNormal246_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169994) = _SecondAlbedoTex;
				SamplerState Sampler234_g169994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g169994 = temp_output_37_0_g169994;
				float3 WorldPosition234_g169994 = temp_output_279_0_g169994;
				float4 localSampleStochastic2D234_g169994 = SampleStochastic2D( Texture234_g169994 , Sampler234_g169994 , Coords234_g169994 , WorldPosition234_g169994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169994) = _SecondAlbedoTex;
				SamplerState Sampler263_g169994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g169994 = temp_output_37_0_g169994;
				half3 WorldPosition263_g169994 = temp_output_279_0_g169994;
				half3 WorldNormal263_g169994 = temp_output_280_0_g169994;
				half4 localSampleStochastic3D263_g169994 = SampleStochastic3D( Texture263_g169994 , Sampler263_g169994 , Coords263_g169994 , WorldPosition263_g169994 , WorldNormal263_g169994 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g169993 = localSampleExtra275_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g169993 = localSamplePlanar2D238_g169994;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g169993 = localSamplePlanar3D246_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g169993 = localSampleStochastic2D234_g169994;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g169993 = localSampleStochastic3D263_g169994;
				#else
				float4 staticSwitch693_g169993 = localSampleMain276_g169994;
				#endif
				half4 Local_AlbedoTex777_g169993 = staticSwitch693_g169993;
				float3 lerpResult716_g169993 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g169993).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g169993 = lerpResult716_g169993;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169996) = _SecondShaderTex;
				SamplerState Sampler276_g169996 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169996 = Local_LayerCoords790_g169993;
				half4 Coords276_g169996 = temp_output_37_0_g169996;
				half2 TexCoord276_g169996 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169996 = SampleMain( Texture276_g169996 , Sampler276_g169996 , Coords276_g169996 , TexCoord276_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169996) = _SecondShaderTex;
				SamplerState Sampler275_g169996 = sampler_Linear_Repeat;
				half4 Coords275_g169996 = temp_output_37_0_g169996;
				half2 TexCoord275_g169996 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169996 = SampleExtra( Texture275_g169996 , Sampler275_g169996 , Coords275_g169996 , TexCoord275_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169996) = _SecondShaderTex;
				SamplerState Sampler238_g169996 = sampler_Linear_Repeat;
				half4 Coords238_g169996 = temp_output_37_0_g169996;
				float3 temp_output_279_0_g169996 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169996 = temp_output_279_0_g169996;
				half4 localSamplePlanar2D238_g169996 = SamplePlanar2D( Texture238_g169996 , Sampler238_g169996 , Coords238_g169996 , WorldPosition238_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169996) = _SecondShaderTex;
				SamplerState Sampler246_g169996 = sampler_Linear_Repeat;
				half4 Coords246_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition246_g169996 = temp_output_279_0_g169996;
				float3 temp_output_280_0_g169996 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169996 = temp_output_280_0_g169996;
				half4 localSamplePlanar3D246_g169996 = SamplePlanar3D( Texture246_g169996 , Sampler246_g169996 , Coords246_g169996 , WorldPosition246_g169996 , WorldNormal246_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169996) = _SecondShaderTex;
				SamplerState Sampler234_g169996 = sampler_Linear_Repeat;
				float4 Coords234_g169996 = temp_output_37_0_g169996;
				float3 WorldPosition234_g169996 = temp_output_279_0_g169996;
				float4 localSampleStochastic2D234_g169996 = SampleStochastic2D( Texture234_g169996 , Sampler234_g169996 , Coords234_g169996 , WorldPosition234_g169996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169996) = _SecondShaderTex;
				SamplerState Sampler263_g169996 = sampler_Linear_Repeat;
				half4 Coords263_g169996 = temp_output_37_0_g169996;
				half3 WorldPosition263_g169996 = temp_output_279_0_g169996;
				half3 WorldNormal263_g169996 = temp_output_280_0_g169996;
				half4 localSampleStochastic3D263_g169996 = SampleStochastic3D( Texture263_g169996 , Sampler263_g169996 , Coords263_g169996 , WorldPosition263_g169996 , WorldNormal263_g169996 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g169993 = localSampleExtra275_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g169993 = localSamplePlanar2D238_g169996;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g169993 = localSamplePlanar3D246_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g169993 = localSampleStochastic2D234_g169996;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g169993 = localSampleStochastic3D263_g169996;
				#else
				float4 staticSwitch722_g169993 = localSampleMain276_g169996;
				#endif
				half4 Local_ShaderTex775_g169993 = staticSwitch722_g169993;
				float lerpResult739_g169993 = lerp( 1.0 , (Local_ShaderTex775_g169993).y , _SecondOcclusionValue);
				float4 appendResult749_g169993 = (float4(( (Local_ShaderTex775_g169993).x * _SecondMetallicValue ) , lerpResult739_g169993 , (Local_ShaderTex775_g169993).z , ( (Local_ShaderTex775_g169993).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g169993 = appendResult749_g169993;
				float clampResult17_g170000 = clamp( (Local_Masks750_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170001 = _SecondMultiRemap.x;
				float temp_output_10_0_g170001 = ( _SecondMultiRemap.y - temp_output_7_0_g170001 );
				float temp_output_765_0_g169993 = saturate( ( ( clampResult17_g170000 - temp_output_7_0_g170001 ) / ( temp_output_10_0_g170001 + 0.0001 ) ) );
				half Local_MultiMask767_g169993 = temp_output_765_0_g169993;
				float lerpResult705_g169993 = lerp( 1.0 , Local_MultiMask767_g169993 , _SecondColorMode);
				float4 lerpResult706_g169993 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g169993);
				half3 Local_ColorRGB774_g169993 = (lerpResult706_g169993).rgb;
				half3 Local_Albedo768_g169993 = ( Local_AlbedoRGB771_g169993 * Local_ColorRGB774_g169993 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170020 = 2.0;
				#else
				float staticSwitch1_g170020 = 4.594794;
				#endif
				float3 lerpResult985_g169993 = lerp( Local_Albedo768_g169993 , ( Visual_Albedo527_g169993 * Local_Albedo768_g169993 * staticSwitch1_g170020 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169997) = _SecondMaskTex;
				SamplerState Sampler276_g169997 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g169993 = _second_mask_coord_value;
				float4 temp_output_37_0_g169997 = Local_BlendCoords813_g169993;
				half4 Coords276_g169997 = temp_output_37_0_g169997;
				half2 TexCoord276_g169997 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169997 = SampleMain( Texture276_g169997 , Sampler276_g169997 , Coords276_g169997 , TexCoord276_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169997) = _SecondMaskTex;
				SamplerState Sampler275_g169997 = sampler_Linear_Repeat;
				half4 Coords275_g169997 = temp_output_37_0_g169997;
				half2 TexCoord275_g169997 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169997 = SampleExtra( Texture275_g169997 , Sampler275_g169997 , Coords275_g169997 , TexCoord275_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169997) = _SecondMaskTex;
				SamplerState Sampler238_g169997 = sampler_Linear_Repeat;
				half4 Coords238_g169997 = temp_output_37_0_g169997;
				float3 temp_output_279_0_g169997 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169997 = temp_output_279_0_g169997;
				half4 localSamplePlanar2D238_g169997 = SamplePlanar2D( Texture238_g169997 , Sampler238_g169997 , Coords238_g169997 , WorldPosition238_g169997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169997) = _SecondMaskTex;
				SamplerState Sampler246_g169997 = sampler_Linear_Repeat;
				half4 Coords246_g169997 = temp_output_37_0_g169997;
				half3 WorldPosition246_g169997 = temp_output_279_0_g169997;
				float3 temp_output_280_0_g169997 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169997 = temp_output_280_0_g169997;
				half4 localSamplePlanar3D246_g169997 = SamplePlanar3D( Texture246_g169997 , Sampler246_g169997 , Coords246_g169997 , WorldPosition246_g169997 , WorldNormal246_g169997 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g169993 = localSampleExtra275_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g169993 = localSamplePlanar2D238_g169997;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g169993 = localSamplePlanar3D246_g169997;
				#else
				float4 staticSwitch817_g169993 = localSampleMain276_g169997;
				#endif
				half4 Local_MaskTex861_g169993 = staticSwitch817_g169993;
				float clampResult17_g170011 = clamp( (Local_MaskTex861_g169993).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170010 = _SecondMaskRemap.x;
				float temp_output_10_0_g170010 = ( _SecondMaskRemap.y - temp_output_7_0_g170010 );
				float lerpResult1015_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170011 - temp_output_7_0_g170010 ) / ( temp_output_10_0_g170010 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g169993 = lerpResult1015_g169993;
				half3 Visual_NormalWS951_g169993 = Out_NormalWS4_g170007;
				float clampResult17_g170012 = clamp( saturate( (Visual_NormalWS951_g169993).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170013 = _SecondProjRemap.x;
				float temp_output_10_0_g170013 = ( _SecondProjRemap.y - temp_output_7_0_g170013 );
				float lerpResult996_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170012 - temp_output_7_0_g170013 ) / ( temp_output_10_0_g170013 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g169993 = lerpResult996_g169993;
				half4 Model_VertexMasks964_g169993 = Out_VertexData15_g170005;
				float4 break965_g169993 = Model_VertexMasks964_g169993;
				float4 break33_g170014 = _second_vert_mode;
				float temp_output_30_0_g170014 = ( break965_g169993.x * break33_g170014.x );
				float temp_output_29_0_g170014 = ( break965_g169993.y * break33_g170014.y );
				float temp_output_31_0_g170014 = ( break965_g169993.z * break33_g170014.z );
				float temp_output_28_0_g170014 = ( temp_output_30_0_g170014 + temp_output_29_0_g170014 + temp_output_31_0_g170014 + ( break965_g169993.w * break33_g170014.w ) );
				float clampResult17_g170008 = clamp( temp_output_28_0_g170014 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170009 = _SecondMeshRemap.x;
				float temp_output_10_0_g170009 = ( _SecondMeshRemap.y - temp_output_7_0_g170009 );
				float lerpResult1017_g169993 = lerp( 1.0 , saturate( ( ( clampResult17_g170008 - temp_output_7_0_g170009 ) / ( temp_output_10_0_g170009 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170022 = lerpResult1017_g169993;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170022 = ( temp_output_6_0_g170022 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170022 = temp_output_6_0_g170022;
				#endif
				float temp_output_987_0_g169993 = staticSwitch14_g170022;
				half Blend_VertMask918_g169993 = temp_output_987_0_g169993;
				float localBuildGlobalData204_g169264 = ( 0.0 );
				TVEGlobalData Data204_g169264 = (TVEGlobalData)0;
				half Dummy211_g169264 = ( _GlobalCategory + _GlobalEnd );
				float In_Dummy204_g169264 = Dummy211_g169264;
				float temp_output_82_0_g169275 = _GlobalCoatLayerValue;
				float temp_output_19_0_g169277 = TVE_CoatLayers[(int)temp_output_82_0_g169275];
				TVEModelData Data15_g169265 = Data16_g169262;
				float Out_Dummy15_g169265 = 0;
				float3 Out_PositionOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionWO15_g169265 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotOS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWS15_g169265 = float3( 0,0,0 );
				float3 Out_PivotWO15_g169265 = float3( 0,0,0 );
				float3 Out_NormalOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalWS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g169265 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g169265 = float3( 0,0,0 );
				float4 Out_TangentOS15_g169265 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g169265 = float3( 0,0,0 );
				float4 Out_VertexData15_g169265 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g169265 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g169265 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g169265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g169265 = Data15_g169265.Dummy;
				Out_PositionOS15_g169265 = Data15_g169265.PositionOS;
				Out_PositionWS15_g169265 = Data15_g169265.PositionWS;
				Out_PositionWO15_g169265 = Data15_g169265.PositionWO;
				Out_PositionRawOS15_g169265 = Data15_g169265.PositionRawOS;
				Out_PositionAddOS15_g169265 = Data15_g169265.PositionAddOS;
				Out_PivotOS15_g169265 = Data15_g169265.PivotOS;
				Out_PivotWS15_g169265 = Data15_g169265.PivotWS;
				Out_PivotWO15_g169265 = Data15_g169265.PivotWO;
				Out_NormalOS15_g169265 = Data15_g169265.NormalOS;
				Out_NormalWS15_g169265 = Data15_g169265.NormalWS;
				Out_NormalRawOS15_g169265 = Data15_g169265.NormalRawOS;
				Out_NormalRawWS15_g169265 = Data15_g169265.NormalRawWS;
				Out_TangentOS15_g169265 = Data15_g169265.TangentOS;
				Out_ViewDirWS15_g169265 = Data15_g169265.ViewDirWS;
				Out_VertexData15_g169265 = Data15_g169265.VertexData;
				Out_MotionData15_g169265 = Data15_g169265.MotionData;
				Out_BoundsData15_g169265 = Data15_g169265.BoundsData;
				Out_RotationData15_g169265 = Data15_g169265.RotationData;
				}
				half3 Model_PositionWS143_g169264 = Out_PositionWS15_g169265;
				half3 Model_PivotWS145_g169264 = Out_PivotWS15_g169265;
				float3 lerpResult300_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalCoatPivotValue);
				half3 Input_Position180_g169278 = lerpResult300_g169264;
				float2 temp_output_75_0_g169278 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_82_0_g169278 = temp_output_82_0_g169275;
				float2 temp_output_119_0_g169278 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169278).xz ) );
				float temp_output_7_0_g169283 = 1.0;
				float temp_output_10_0_g169283 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169283 );
				float4 lerpResult131_g169278 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169278,temp_output_82_0_g169278), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169278,temp_output_82_0_g169278), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169278 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169283 ) / temp_output_10_0_g169283 ) ));
				float4 temp_output_17_0_g169277 = lerpResult131_g169278;
				float4 temp_output_3_0_g169277 = TVE_CoatParams;
				float4 ifLocalVar18_g169277 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169277 >= 0.5 )
				ifLocalVar18_g169277 = temp_output_17_0_g169277;
				else
				ifLocalVar18_g169277 = temp_output_3_0_g169277;
				float4 lerpResult22_g169277 = lerp( temp_output_3_0_g169277 , temp_output_17_0_g169277 , temp_output_19_0_g169277);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169277 = lerpResult22_g169277;
				#else
				float4 staticSwitch24_g169277 = ifLocalVar18_g169277;
				#endif
				half4 Coat_Params302_g169264 = staticSwitch24_g169277;
				float4 In_CoatParams204_g169264 = Coat_Params302_g169264;
				float temp_output_82_0_g169266 = _GlobalPaintLayerValue;
				float temp_output_19_0_g169268 = TVE_PaintLayers[(int)temp_output_82_0_g169266];
				float3 lerpResult85_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalPaintPivotValue);
				half3 Input_Position180_g169269 = lerpResult85_g169264;
				float2 temp_output_75_0_g169269 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_82_0_g169269 = temp_output_82_0_g169266;
				float2 temp_output_119_0_g169269 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169269).xz ) );
				float temp_output_7_0_g169274 = 1.0;
				float temp_output_10_0_g169274 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169274 );
				float4 lerpResult131_g169269 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169269,temp_output_82_0_g169269), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169269,temp_output_82_0_g169269), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169269 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169274 ) / temp_output_10_0_g169274 ) ));
				float4 temp_output_17_0_g169268 = lerpResult131_g169269;
				float4 temp_output_3_0_g169268 = TVE_PaintParams;
				float4 ifLocalVar18_g169268 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169268 >= 0.5 )
				ifLocalVar18_g169268 = temp_output_17_0_g169268;
				else
				ifLocalVar18_g169268 = temp_output_3_0_g169268;
				float4 lerpResult22_g169268 = lerp( temp_output_3_0_g169268 , temp_output_17_0_g169268 , temp_output_19_0_g169268);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169268 = lerpResult22_g169268;
				#else
				float4 staticSwitch24_g169268 = ifLocalVar18_g169268;
				#endif
				half4 Paint_Params71_g169264 = staticSwitch24_g169268;
				float4 In_PaintParams204_g169264 = Paint_Params71_g169264;
				float temp_output_82_0_g169284 = _GlobalGlowLayerValue;
				float temp_output_19_0_g169286 = TVE_GlowLayers[(int)temp_output_82_0_g169284];
				float3 lerpResult247_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalGlowPivotValue);
				half3 Input_Position180_g169287 = lerpResult247_g169264;
				float2 temp_output_75_0_g169287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_82_0_g169287 = temp_output_82_0_g169284;
				float2 temp_output_119_0_g169287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169287).xz ) );
				float temp_output_7_0_g169292 = 1.0;
				float temp_output_10_0_g169292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169292 );
				float4 lerpResult131_g169287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169287,temp_output_82_0_g169287), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169287,temp_output_82_0_g169287), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169292 ) / temp_output_10_0_g169292 ) ));
				float4 temp_output_17_0_g169286 = lerpResult131_g169287;
				float4 temp_output_3_0_g169286 = TVE_GlowParams;
				float4 ifLocalVar18_g169286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169286 >= 0.5 )
				ifLocalVar18_g169286 = temp_output_17_0_g169286;
				else
				ifLocalVar18_g169286 = temp_output_3_0_g169286;
				float4 lerpResult22_g169286 = lerp( temp_output_3_0_g169286 , temp_output_17_0_g169286 , temp_output_19_0_g169286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169286 = lerpResult22_g169286;
				#else
				float4 staticSwitch24_g169286 = ifLocalVar18_g169286;
				#endif
				half4 Glow_Params248_g169264 = staticSwitch24_g169286;
				float4 In_GlowParams204_g169264 = Glow_Params248_g169264;
				float temp_output_132_0_g169329 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g169331 = TVE_AtmoLayers[(int)temp_output_132_0_g169329];
				float3 lerpResult104_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g169332 = lerpResult104_g169264;
				float2 temp_output_75_0_g169332 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_82_0_g169332 = temp_output_132_0_g169329;
				float2 temp_output_119_0_g169332 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169332).xz ) );
				float temp_output_7_0_g169337 = 1.0;
				float temp_output_10_0_g169337 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169337 );
				float4 lerpResult131_g169332 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169332,temp_output_82_0_g169332), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169332,temp_output_82_0_g169332), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169332 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169337 ) / temp_output_10_0_g169337 ) ));
				float4 temp_output_17_0_g169331 = lerpResult131_g169332;
				float4 temp_output_3_0_g169331 = TVE_AtmoParams;
				float4 ifLocalVar18_g169331 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169331 >= 0.5 )
				ifLocalVar18_g169331 = temp_output_17_0_g169331;
				else
				ifLocalVar18_g169331 = temp_output_3_0_g169331;
				float4 lerpResult22_g169331 = lerp( temp_output_3_0_g169331 , temp_output_17_0_g169331 , temp_output_19_0_g169331);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169331 = lerpResult22_g169331;
				#else
				float4 staticSwitch24_g169331 = ifLocalVar18_g169331;
				#endif
				half4 Atmo_Params80_g169264 = staticSwitch24_g169331;
				float4 In_AtmoParams204_g169264 = Atmo_Params80_g169264;
				float temp_output_132_0_g169338 = _GlobalFadeLayerValue;
				float temp_output_19_0_g169340 = TVE_FadeLayers[(int)temp_output_132_0_g169338];
				float3 lerpResult382_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFadePivotValue);
				half3 Input_Position180_g169341 = lerpResult382_g169264;
				float2 temp_output_75_0_g169341 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_82_0_g169341 = temp_output_132_0_g169338;
				float2 temp_output_119_0_g169341 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169341).xz ) );
				float temp_output_7_0_g169346 = 1.0;
				float temp_output_10_0_g169346 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169346 );
				float4 lerpResult131_g169341 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169341,temp_output_82_0_g169341), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169341,temp_output_82_0_g169341), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169341 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169346 ) / temp_output_10_0_g169346 ) ));
				float4 temp_output_17_0_g169340 = lerpResult131_g169341;
				float4 temp_output_3_0_g169340 = TVE_FadeParams;
				float4 ifLocalVar18_g169340 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169340 >= 0.5 )
				ifLocalVar18_g169340 = temp_output_17_0_g169340;
				else
				ifLocalVar18_g169340 = temp_output_3_0_g169340;
				float4 lerpResult22_g169340 = lerp( temp_output_3_0_g169340 , temp_output_17_0_g169340 , temp_output_19_0_g169340);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169340 = lerpResult22_g169340;
				#else
				float4 staticSwitch24_g169340 = ifLocalVar18_g169340;
				#endif
				half4 Fade_Params387_g169264 = staticSwitch24_g169340;
				float4 In_FadeParams204_g169264 = Fade_Params387_g169264;
				float temp_output_130_0_g169320 = _GlobalFormLayerValue;
				float temp_output_19_0_g169322 = TVE_FormLayers[(int)temp_output_130_0_g169320];
				float3 lerpResult168_g169264 = lerp( Model_PositionWS143_g169264 , Model_PivotWS145_g169264 , _GlobalFormPivotValue);
				half3 Input_Position180_g169323 = lerpResult168_g169264;
				float2 temp_output_75_0_g169323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_82_0_g169323 = temp_output_130_0_g169320;
				float2 temp_output_119_0_g169323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169323).xz ) );
				float temp_output_7_0_g169328 = 1.0;
				float temp_output_10_0_g169328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169328 );
				float4 lerpResult131_g169323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169323,temp_output_82_0_g169323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169323,temp_output_82_0_g169323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169328 ) / temp_output_10_0_g169328 ) ));
				float4 temp_output_17_0_g169322 = lerpResult131_g169323;
				float4 temp_output_3_0_g169322 = TVE_FormParams;
				float4 ifLocalVar18_g169322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169322 >= 0.5 )
				ifLocalVar18_g169322 = temp_output_17_0_g169322;
				else
				ifLocalVar18_g169322 = temp_output_3_0_g169322;
				float4 lerpResult22_g169322 = lerp( temp_output_3_0_g169322 , temp_output_17_0_g169322 , temp_output_19_0_g169322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169322 = lerpResult22_g169322;
				#else
				float4 staticSwitch24_g169322 = ifLocalVar18_g169322;
				#endif
				half4 Form_Params112_g169264 = staticSwitch24_g169322;
				float4 In_FormParams204_g169264 = Form_Params112_g169264;
				half4 Land_Params375_g169264 = TVE_LandParams;
				float4 In_LandParams204_g169264 = Land_Params375_g169264;
				float temp_output_136_0_g169311 = _GlobalWindLayerValue;
				float temp_output_19_0_g169313 = TVE_WindLayers[(int)temp_output_136_0_g169311];
				half3 Input_Position180_g169314 = Model_PositionWS143_g169264;
				float2 temp_output_75_0_g169314 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_82_0_g169314 = temp_output_136_0_g169311;
				float2 temp_output_119_0_g169314 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169314).xz ) );
				float temp_output_7_0_g169319 = 1.0;
				float temp_output_10_0_g169319 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169319 );
				float4 lerpResult131_g169314 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169314,temp_output_82_0_g169314), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169314,temp_output_82_0_g169314), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169314 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169319 ) / temp_output_10_0_g169319 ) ));
				float4 temp_output_17_0_g169313 = lerpResult131_g169314;
				float4 temp_output_3_0_g169313 = TVE_WindParams;
				float4 ifLocalVar18_g169313 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169313 >= 0.5 )
				ifLocalVar18_g169313 = temp_output_17_0_g169313;
				else
				ifLocalVar18_g169313 = temp_output_3_0_g169313;
				float4 lerpResult22_g169313 = lerp( temp_output_3_0_g169313 , temp_output_17_0_g169313 , temp_output_19_0_g169313);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169313 = lerpResult22_g169313;
				#else
				float4 staticSwitch24_g169313 = ifLocalVar18_g169313;
				#endif
				half4 Wind_Params88_g169264 = staticSwitch24_g169313;
				float4 In_WindParams204_g169264 = Wind_Params88_g169264;
				float temp_output_136_0_g169293 = _GlobalPushLayerValue;
				float temp_output_19_0_g169294 = TVE_PushLayers[(int)temp_output_136_0_g169293];
				half3 Input_Position180_g169295 = Model_PivotWS145_g169264;
				float2 temp_output_75_0_g169295 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_82_0_g169295 = temp_output_136_0_g169293;
				float2 temp_output_119_0_g169295 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g169295).xz ) );
				float temp_output_7_0_g169300 = 1.0;
				float temp_output_10_0_g169300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g169300 );
				float4 lerpResult131_g169295 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g169295,temp_output_82_0_g169295), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PushNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g169295,temp_output_82_0_g169295), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g169295 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g169300 ) / temp_output_10_0_g169300 ) ));
				float4 temp_output_17_0_g169294 = lerpResult131_g169295;
				float4 temp_output_3_0_g169294 = TVE_PushParams;
				float4 ifLocalVar18_g169294 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g169294 >= 0.5 )
				ifLocalVar18_g169294 = temp_output_17_0_g169294;
				else
				ifLocalVar18_g169294 = temp_output_3_0_g169294;
				float4 lerpResult22_g169294 = lerp( temp_output_3_0_g169294 , temp_output_17_0_g169294 , temp_output_19_0_g169294);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g169294 = lerpResult22_g169294;
				#else
				float4 staticSwitch24_g169294 = ifLocalVar18_g169294;
				#endif
				half4 Push_Params335_g169264 = staticSwitch24_g169294;
				float4 In_PushParams204_g169264 = Push_Params335_g169264;
				{
				Data204_g169264.Dummy = In_Dummy204_g169264;
				Data204_g169264.CoatParams = In_CoatParams204_g169264;
				Data204_g169264.PaintParams = In_PaintParams204_g169264;
				Data204_g169264.GlowParams = In_GlowParams204_g169264;
				Data204_g169264.AtmoParams = In_AtmoParams204_g169264;
				Data204_g169264.FadeParams = In_FadeParams204_g169264;
				Data204_g169264.FormParams= In_FormParams204_g169264;
				Data204_g169264.LandParams = In_LandParams204_g169264;
				Data204_g169264.WindParams = In_WindParams204_g169264;
				Data204_g169264.PushParams = In_PushParams204_g169264;
				}
				TVEGlobalData Data15_g170006 = Data204_g169264;
				float Out_Dummy15_g170006 = 0;
				float4 Out_CoatParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170006 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170006 = Data15_g170006.Dummy;
				Out_CoatParams15_g170006 = Data15_g170006.CoatParams;
				Out_PaintParams15_g170006 = Data15_g170006.PaintParams;
				Out_GlowParams15_g170006 = Data15_g170006.GlowParams;
				Out_AtmoParams15_g170006= Data15_g170006.AtmoParams;
				Out_FadeParams15_g170006= Data15_g170006.FadeParams;
				Out_FormParams15_g170006 = Data15_g170006.FormParams;
				Out_LandParams15_g170006 = Data15_g170006.LandParams;
				Out_WindParams15_g170006 = Data15_g170006.WindParams;
				Out_PushParams15_g170006 = Data15_g170006.PushParams;
				}
				half4 Global_CoatParams975_g169993 = Out_CoatParams15_g170006;
				float lerpResult1013_g169993 = lerp( 1.0 , (Global_CoatParams975_g169993).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g169993 = lerpResult1013_g169993;
				#else
				float staticSwitch971_g169993 = 1.0;
				#endif
				half Blend_GlobalMask972_g169993 = staticSwitch971_g169993;
				float temp_output_432_0_g169993 = ( _SecondIntensityValue * Blend_TexMask429_g169993 * Blend_ProjMask434_g169993 * Blend_VertMask918_g169993 * Blend_GlobalMask972_g169993 );
				float clampResult17_g170016 = clamp( temp_output_432_0_g169993 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170015 = _SecondBlendRemap.x;
				float temp_output_10_0_g170015 = ( _SecondBlendRemap.y - temp_output_7_0_g170015 );
				half Blend_Mask412_g169993 = ( saturate( ( ( clampResult17_g170016 - temp_output_7_0_g170015 ) / ( temp_output_10_0_g170015 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g169993 = lerp( Visual_Albedo527_g169993 , lerpResult985_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g169993 = lerpResult403_g169993;
				#else
				float3 staticSwitch415_g169993 = Visual_Albedo527_g169993;
				#endif
				half3 Final_Albedo601_g169993 = staticSwitch415_g169993;
				float3 In_Albedo3_g170004 = Final_Albedo601_g169993;
				half2 Visual_NormalTS529_g169993 = Out_NormalTS4_g170007;
				float2 lerpResult40_g170018 = lerp( float2( 0,0 ) , Visual_NormalTS529_g169993 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g169995) = _SecondNormalTex;
				SamplerState Sampler276_g169995 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g169995 = Local_LayerCoords790_g169993;
				half4 Coords276_g169995 = temp_output_37_0_g169995;
				half2 TexCoord276_g169995 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g169995 = SampleMain( Texture276_g169995 , Sampler276_g169995 , Coords276_g169995 , TexCoord276_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g169995) = _SecondNormalTex;
				SamplerState Sampler275_g169995 = sampler_Linear_Repeat;
				half4 Coords275_g169995 = temp_output_37_0_g169995;
				half2 TexCoord275_g169995 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g169995 = SampleExtra( Texture275_g169995 , Sampler275_g169995 , Coords275_g169995 , TexCoord275_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g169995) = _SecondNormalTex;
				SamplerState Sampler238_g169995 = sampler_Linear_Repeat;
				half4 Coords238_g169995 = temp_output_37_0_g169995;
				float3 temp_output_279_0_g169995 = Model_PositionWO636_g169993;
				half3 WorldPosition238_g169995 = temp_output_279_0_g169995;
				half4 localSamplePlanar2D238_g169995 = SamplePlanar2D( Texture238_g169995 , Sampler238_g169995 , Coords238_g169995 , WorldPosition238_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g169995) = _SecondNormalTex;
				SamplerState Sampler246_g169995 = sampler_Linear_Repeat;
				half4 Coords246_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition246_g169995 = temp_output_279_0_g169995;
				float3 temp_output_280_0_g169995 = Model_NormalWS869_g169993;
				half3 WorldNormal246_g169995 = temp_output_280_0_g169995;
				half4 localSamplePlanar3D246_g169995 = SamplePlanar3D( Texture246_g169995 , Sampler246_g169995 , Coords246_g169995 , WorldPosition246_g169995 , WorldNormal246_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g169995) = _SecondNormalTex;
				SamplerState Sampler234_g169995 = sampler_Linear_Repeat;
				float4 Coords234_g169995 = temp_output_37_0_g169995;
				float3 WorldPosition234_g169995 = temp_output_279_0_g169995;
				float4 localSampleStochastic2D234_g169995 = SampleStochastic2D( Texture234_g169995 , Sampler234_g169995 , Coords234_g169995 , WorldPosition234_g169995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g169995) = _SecondNormalTex;
				SamplerState Sampler263_g169995 = sampler_Linear_Repeat;
				half4 Coords263_g169995 = temp_output_37_0_g169995;
				half3 WorldPosition263_g169995 = temp_output_279_0_g169995;
				half3 WorldNormal263_g169995 = temp_output_280_0_g169995;
				half4 localSampleStochastic3D263_g169995 = SampleStochastic3D( Texture263_g169995 , Sampler263_g169995 , Coords263_g169995 , WorldPosition263_g169995 , WorldNormal263_g169995 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g169993 = localSampleExtra275_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g169993 = localSamplePlanar2D238_g169995;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g169993 = localSamplePlanar3D246_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g169993 = localSampleStochastic2D234_g169995;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g169993 = localSampleStochastic3D263_g169995;
				#else
				float4 staticSwitch698_g169993 = localSampleMain276_g169995;
				#endif
				half4 Local_NormalTex776_g169993 = staticSwitch698_g169993;
				half4 Normal_Packed45_g169998 = Local_NormalTex776_g169993;
				float2 appendResult58_g169998 = (float2(( (Normal_Packed45_g169998).x * (Normal_Packed45_g169998).w ) , (Normal_Packed45_g169998).y));
				half2 Normal_Default50_g169998 = appendResult58_g169998;
				half2 Normal_ASTC41_g169998 = (Normal_Packed45_g169998).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g169998 = Normal_ASTC41_g169998;
				#else
				float2 staticSwitch38_g169998 = Normal_Default50_g169998;
				#endif
				half2 Normal_NO_DTX544_g169998 = (Normal_Packed45_g169998).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g169998 = Normal_NO_DTX544_g169998;
				#else
				float2 staticSwitch37_g169998 = staticSwitch38_g169998;
				#endif
				float2 temp_output_724_0_g169993 = ( (staticSwitch37_g169998*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g169999 = temp_output_724_0_g169993;
				float2 break71_g169999 = Normal_Planar45_g169999;
				float3 appendResult72_g169999 = (float3(break71_g169999.x , 0.0 , break71_g169999.y));
				float2 temp_output_858_0_g169993 = (mul( ase_worldToTangent, appendResult72_g169999 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g169993 = temp_output_858_0_g169993;
				#else
				float2 staticSwitch727_g169993 = temp_output_724_0_g169993;
				#endif
				half2 Local_NormalTS729_g169993 = staticSwitch727_g169993;
				float2 temp_output_36_0_g170018 = ( lerpResult40_g170018 + Local_NormalTS729_g169993 );
				float2 lerpResult405_g169993 = lerp( Visual_NormalTS529_g169993 , temp_output_36_0_g170018 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g169993 = lerpResult405_g169993;
				#else
				float2 staticSwitch418_g169993 = Visual_NormalTS529_g169993;
				#endif
				half2 Final_NormalTS612_g169993 = staticSwitch418_g169993;
				float2 In_NormalTS3_g170004 = Final_NormalTS612_g169993;
				float3 appendResult68_g170019 = (float3(Final_NormalTS612_g169993 , 1.0));
				float3 tanNormal74_g170019 = appendResult68_g170019;
				float3 worldNormal74_g170019 = normalize( float3(dot(tanToWorld0,tanNormal74_g170019), dot(tanToWorld1,tanNormal74_g170019), dot(tanToWorld2,tanNormal74_g170019)) );
				half3 Final_NormalWS950_g169993 = worldNormal74_g170019;
				float3 In_NormalWS3_g170004 = Final_NormalWS950_g169993;
				half4 Visual_Shader531_g169993 = Out_Shader4_g170007;
				float4 lerpResult994_g169993 = lerp( Local_Masks750_g169993 , ( Visual_Shader531_g169993 * Local_Masks750_g169993 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g169993 = lerp( Visual_Shader531_g169993 , lerpResult994_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g169993 = lerpResult440_g169993;
				#else
				float4 staticSwitch451_g169993 = Visual_Shader531_g169993;
				#endif
				half4 Final_Masks613_g169993 = staticSwitch451_g169993;
				float4 In_Shader3_g170004 = Final_Masks613_g169993;
				float4 In_Emissive3_g170004 = Out_Emissive4_g170007;
				float3 temp_output_3_0_g170021 = Final_Albedo601_g169993;
				float dotResult20_g170021 = dot( temp_output_3_0_g170021 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g169993 = dotResult20_g170021;
				float In_Grayscale3_g170004 = Final_Grayscale615_g169993;
				float clampResult651_g169993 = clamp( saturate( ( Final_Grayscale615_g169993 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g169993 = clampResult651_g169993;
				float In_Luminosity3_g170004 = Final_Luminosity652_g169993;
				half Visual_MultiMask547_g169993 = Out_MultiMask4_g170007;
				float lerpResult477_g169993 = lerp( Visual_MultiMask547_g169993 , Local_MultiMask767_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch482_g169993 = lerpResult477_g169993;
				#else
				float staticSwitch482_g169993 = Visual_MultiMask547_g169993;
				#endif
				half Final_MultiMask572_g169993 = staticSwitch482_g169993;
				float In_MultiMask3_g170004 = Final_MultiMask572_g169993;
				half Visual_AlphaClip559_g169993 = Out_AlphaClip4_g170007;
				float temp_output_718_0_g169993 = (Local_AlbedoTex777_g169993).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g169993 = ( temp_output_718_0_g169993 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g169993 = temp_output_718_0_g169993;
				#endif
				half Local_AlphaClip772_g169993 = staticSwitch932_g169993;
				float lerpResult448_g169993 = lerp( Visual_AlphaClip559_g169993 , Local_AlphaClip772_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch564_g169993 = lerpResult448_g169993;
				#else
				float staticSwitch564_g169993 = Visual_AlphaClip559_g169993;
				#endif
				half Final_AlphaClip602_g169993 = staticSwitch564_g169993;
				float In_AlphaClip3_g170004 = Final_AlphaClip602_g169993;
				half Visual_AlphaFade588_g169993 = Out_AlphaFade4_g170007;
				half Local_AlphaFade773_g169993 = (lerpResult706_g169993).a;
				float lerpResult604_g169993 = lerp( Visual_AlphaFade588_g169993 , Local_AlphaFade773_g169993 , Blend_Mask412_g169993);
				#ifdef TVE_SECOND
				float staticSwitch608_g169993 = lerpResult604_g169993;
				#else
				float staticSwitch608_g169993 = Visual_AlphaFade588_g169993;
				#endif
				half Final_AlphaFade611_g169993 = staticSwitch608_g169993;
				float In_AlphaFade3_g170004 = Final_AlphaFade611_g169993;
				float3 In_Translucency3_g170004 = Out_Translucency4_g170007;
				float In_Transmission3_g170004 = Out_Transmission4_g170007;
				float In_Thickness3_g170004 = Out_Thickness4_g170007;
				float In_Diffusion3_g170004 = Out_Diffusion4_g170007;
				{
				Data3_g170004.Dummy = In_Dummy3_g170004;
				Data3_g170004.Albedo = In_Albedo3_g170004;
				Data3_g170004.NormalTS = In_NormalTS3_g170004;
				Data3_g170004.NormalWS = In_NormalWS3_g170004;
				Data3_g170004.Shader = In_Shader3_g170004;
				Data3_g170004.Emissive= In_Emissive3_g170004;
				Data3_g170004.MultiMask = In_MultiMask3_g170004;
				Data3_g170004.Grayscale = In_Grayscale3_g170004;
				Data3_g170004.Luminosity = In_Luminosity3_g170004;
				Data3_g170004.AlphaClip = In_AlphaClip3_g170004;
				Data3_g170004.AlphaFade = In_AlphaFade3_g170004;
				Data3_g170004.Translucency = In_Translucency3_g170004;
				Data3_g170004.Transmission = In_Transmission3_g170004;
				Data3_g170004.Thickness = In_Thickness3_g170004;
				Data3_g170004.Diffusion = In_Diffusion3_g170004;
				}
				TVEVisualData Data4_g170049 = Data3_g170004;
				float Out_Dummy4_g170049 = 0;
				float3 Out_Albedo4_g170049 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170049 = float2( 0,0 );
				float3 Out_NormalWS4_g170049 = float3( 0,0,0 );
				float4 Out_Shader4_g170049 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170049 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170049 = 0;
				float Out_Grayscale4_g170049 = 0;
				float Out_Luminosity4_g170049 = 0;
				float Out_AlphaClip4_g170049 = 0;
				float Out_AlphaFade4_g170049 = 0;
				float3 Out_Translucency4_g170049 = float3( 0,0,0 );
				float Out_Transmission4_g170049 = 0;
				float Out_Thickness4_g170049 = 0;
				float Out_Diffusion4_g170049 = 0;
				{
				Out_Dummy4_g170049 = Data4_g170049.Dummy;
				Out_Albedo4_g170049 = Data4_g170049.Albedo;
				Out_NormalTS4_g170049 = Data4_g170049.NormalTS;
				Out_NormalWS4_g170049 = Data4_g170049.NormalWS;
				Out_Shader4_g170049 = Data4_g170049.Shader;
				Out_Emissive4_g170049= Data4_g170049.Emissive;
				Out_MultiMask4_g170049 = Data4_g170049.MultiMask;
				Out_Grayscale4_g170049 = Data4_g170049.Grayscale;
				Out_Luminosity4_g170049= Data4_g170049.Luminosity;
				Out_AlphaClip4_g170049 = Data4_g170049.AlphaClip;
				Out_AlphaFade4_g170049 = Data4_g170049.AlphaFade;
				Out_Translucency4_g170049 = Data4_g170049.Translucency;
				Out_Transmission4_g170049 = Data4_g170049.Transmission;
				Out_Thickness4_g170049 = Data4_g170049.Thickness;
				Out_Diffusion4_g170049 = Data4_g170049.Diffusion;
				}
				half3 Visual_Albedo527_g170033 = Out_Albedo4_g170049;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler276_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g170033 = _third_coord_value;
				float4 temp_output_37_0_g170034 = Local_LayerCoords790_g170033;
				half4 Coords276_g170034 = temp_output_37_0_g170034;
				half2 TexCoord276_g170034 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170034 = SampleMain( Texture276_g170034 , Sampler276_g170034 , Coords276_g170034 , TexCoord276_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g170034 = temp_output_37_0_g170034;
				half2 TexCoord275_g170034 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170034 = SampleExtra( Texture275_g170034 , Sampler275_g170034 , Coords275_g170034 , TexCoord275_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g170034 = temp_output_37_0_g170034;
				TVEModelData Data15_g170061 = Data16_g169262;
				float Out_Dummy15_g170061 = 0;
				float3 Out_PositionOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170061 = float3( 0,0,0 );
				float4 Out_VertexData15_g170061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170061 = Data15_g170061.Dummy;
				Out_PositionOS15_g170061 = Data15_g170061.PositionOS;
				Out_PositionWS15_g170061 = Data15_g170061.PositionWS;
				Out_PositionWO15_g170061 = Data15_g170061.PositionWO;
				Out_PositionRawOS15_g170061 = Data15_g170061.PositionRawOS;
				Out_PositionAddOS15_g170061 = Data15_g170061.PositionAddOS;
				Out_PivotOS15_g170061 = Data15_g170061.PivotOS;
				Out_PivotWS15_g170061 = Data15_g170061.PivotWS;
				Out_PivotWO15_g170061 = Data15_g170061.PivotWO;
				Out_NormalOS15_g170061 = Data15_g170061.NormalOS;
				Out_NormalWS15_g170061 = Data15_g170061.NormalWS;
				Out_NormalRawOS15_g170061 = Data15_g170061.NormalRawOS;
				Out_NormalRawWS15_g170061 = Data15_g170061.NormalRawWS;
				Out_TangentOS15_g170061 = Data15_g170061.TangentOS;
				Out_ViewDirWS15_g170061 = Data15_g170061.ViewDirWS;
				Out_VertexData15_g170061 = Data15_g170061.VertexData;
				Out_MotionData15_g170061 = Data15_g170061.MotionData;
				Out_BoundsData15_g170061 = Data15_g170061.BoundsData;
				Out_RotationData15_g170061 = Data15_g170061.RotationData;
				}
				half3 Model_PositionWO636_g170033 = Out_PositionWO15_g170061;
				float3 temp_output_279_0_g170034 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170034 = temp_output_279_0_g170034;
				half4 localSamplePlanar2D238_g170034 = SamplePlanar2D( Texture238_g170034 , Sampler238_g170034 , Coords238_g170034 , WorldPosition238_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition246_g170034 = temp_output_279_0_g170034;
				half3 Model_NormalWS869_g170033 = Out_NormalWS15_g170061;
				float3 temp_output_280_0_g170034 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170034 = temp_output_280_0_g170034;
				half4 localSamplePlanar3D246_g170034 = SamplePlanar3D( Texture246_g170034 , Sampler246_g170034 , Coords246_g170034 , WorldPosition246_g170034 , WorldNormal246_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g170034 = temp_output_37_0_g170034;
				float3 WorldPosition234_g170034 = temp_output_279_0_g170034;
				float4 localSampleStochastic2D234_g170034 = SampleStochastic2D( Texture234_g170034 , Sampler234_g170034 , Coords234_g170034 , WorldPosition234_g170034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170034) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g170034 = temp_output_37_0_g170034;
				half3 WorldPosition263_g170034 = temp_output_279_0_g170034;
				half3 WorldNormal263_g170034 = temp_output_280_0_g170034;
				half4 localSampleStochastic3D263_g170034 = SampleStochastic3D( Texture263_g170034 , Sampler263_g170034 , Coords263_g170034 , WorldPosition263_g170034 , WorldNormal263_g170034 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170033 = localSampleExtra275_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170033 = localSamplePlanar2D238_g170034;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170033 = localSamplePlanar3D246_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170033 = localSampleStochastic2D234_g170034;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170033 = localSampleStochastic3D263_g170034;
				#else
				float4 staticSwitch693_g170033 = localSampleMain276_g170034;
				#endif
				half4 Local_AlbedoTex777_g170033 = staticSwitch693_g170033;
				float3 lerpResult716_g170033 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170033).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170033 = lerpResult716_g170033;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170036) = _ThirdShaderTex;
				SamplerState Sampler276_g170036 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170036 = Local_LayerCoords790_g170033;
				half4 Coords276_g170036 = temp_output_37_0_g170036;
				half2 TexCoord276_g170036 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170036 = SampleMain( Texture276_g170036 , Sampler276_g170036 , Coords276_g170036 , TexCoord276_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170036) = _ThirdShaderTex;
				SamplerState Sampler275_g170036 = sampler_Linear_Repeat;
				half4 Coords275_g170036 = temp_output_37_0_g170036;
				half2 TexCoord275_g170036 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170036 = SampleExtra( Texture275_g170036 , Sampler275_g170036 , Coords275_g170036 , TexCoord275_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170036) = _ThirdShaderTex;
				SamplerState Sampler238_g170036 = sampler_Linear_Repeat;
				half4 Coords238_g170036 = temp_output_37_0_g170036;
				float3 temp_output_279_0_g170036 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170036 = temp_output_279_0_g170036;
				half4 localSamplePlanar2D238_g170036 = SamplePlanar2D( Texture238_g170036 , Sampler238_g170036 , Coords238_g170036 , WorldPosition238_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170036) = _ThirdShaderTex;
				SamplerState Sampler246_g170036 = sampler_Linear_Repeat;
				half4 Coords246_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition246_g170036 = temp_output_279_0_g170036;
				float3 temp_output_280_0_g170036 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170036 = temp_output_280_0_g170036;
				half4 localSamplePlanar3D246_g170036 = SamplePlanar3D( Texture246_g170036 , Sampler246_g170036 , Coords246_g170036 , WorldPosition246_g170036 , WorldNormal246_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170036) = _ThirdShaderTex;
				SamplerState Sampler234_g170036 = sampler_Linear_Repeat;
				float4 Coords234_g170036 = temp_output_37_0_g170036;
				float3 WorldPosition234_g170036 = temp_output_279_0_g170036;
				float4 localSampleStochastic2D234_g170036 = SampleStochastic2D( Texture234_g170036 , Sampler234_g170036 , Coords234_g170036 , WorldPosition234_g170036 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170036) = _ThirdShaderTex;
				SamplerState Sampler263_g170036 = sampler_Linear_Repeat;
				half4 Coords263_g170036 = temp_output_37_0_g170036;
				half3 WorldPosition263_g170036 = temp_output_279_0_g170036;
				half3 WorldNormal263_g170036 = temp_output_280_0_g170036;
				half4 localSampleStochastic3D263_g170036 = SampleStochastic3D( Texture263_g170036 , Sampler263_g170036 , Coords263_g170036 , WorldPosition263_g170036 , WorldNormal263_g170036 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170033 = localSampleExtra275_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170033 = localSamplePlanar2D238_g170036;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170033 = localSamplePlanar3D246_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170033 = localSampleStochastic2D234_g170036;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170033 = localSampleStochastic3D263_g170036;
				#else
				float4 staticSwitch722_g170033 = localSampleMain276_g170036;
				#endif
				half4 Local_ShaderTex775_g170033 = staticSwitch722_g170033;
				float lerpResult739_g170033 = lerp( 1.0 , (Local_ShaderTex775_g170033).y , _ThirdOcclusionValue);
				float4 appendResult749_g170033 = (float4(( (Local_ShaderTex775_g170033).x * _ThirdMetallicValue ) , lerpResult739_g170033 , (Local_ShaderTex775_g170033).z , ( (Local_ShaderTex775_g170033).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170033 = appendResult749_g170033;
				float clampResult17_g170039 = clamp( (Local_Masks750_g170033).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170040 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170040 = ( _ThirdMultiRemap.y - temp_output_7_0_g170040 );
				float temp_output_765_0_g170033 = saturate( ( ( clampResult17_g170039 - temp_output_7_0_g170040 ) / ( temp_output_10_0_g170040 + 0.0001 ) ) );
				half Local_MultiMask767_g170033 = temp_output_765_0_g170033;
				float lerpResult705_g170033 = lerp( 1.0 , Local_MultiMask767_g170033 , _ThirdColorMode);
				float4 lerpResult706_g170033 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170033);
				half3 Local_ColorRGB774_g170033 = (lerpResult706_g170033).rgb;
				half3 Local_Albedo768_g170033 = ( Local_AlbedoRGB771_g170033 * Local_ColorRGB774_g170033 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170057 = 2.0;
				#else
				float staticSwitch1_g170057 = 4.594794;
				#endif
				float3 lerpResult985_g170033 = lerp( Local_Albedo768_g170033 , ( Visual_Albedo527_g170033 * Local_Albedo768_g170033 * staticSwitch1_g170057 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170060) = _ThirdMaskTex;
				SamplerState Sampler276_g170060 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170033 = _third_mask_coord_value;
				float4 temp_output_37_0_g170060 = Local_MaskCoords813_g170033;
				half4 Coords276_g170060 = temp_output_37_0_g170060;
				half2 TexCoord276_g170060 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170060 = SampleMain( Texture276_g170060 , Sampler276_g170060 , Coords276_g170060 , TexCoord276_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170060) = _ThirdMaskTex;
				SamplerState Sampler275_g170060 = sampler_Linear_Repeat;
				half4 Coords275_g170060 = temp_output_37_0_g170060;
				half2 TexCoord275_g170060 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170060 = SampleExtra( Texture275_g170060 , Sampler275_g170060 , Coords275_g170060 , TexCoord275_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170060) = _ThirdMaskTex;
				SamplerState Sampler238_g170060 = sampler_Linear_Repeat;
				half4 Coords238_g170060 = temp_output_37_0_g170060;
				float3 temp_output_279_0_g170060 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170060 = temp_output_279_0_g170060;
				half4 localSamplePlanar2D238_g170060 = SamplePlanar2D( Texture238_g170060 , Sampler238_g170060 , Coords238_g170060 , WorldPosition238_g170060 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170060) = _ThirdMaskTex;
				SamplerState Sampler246_g170060 = sampler_Linear_Repeat;
				half4 Coords246_g170060 = temp_output_37_0_g170060;
				half3 WorldPosition246_g170060 = temp_output_279_0_g170060;
				float3 temp_output_280_0_g170060 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170060 = temp_output_280_0_g170060;
				half4 localSamplePlanar3D246_g170060 = SamplePlanar3D( Texture246_g170060 , Sampler246_g170060 , Coords246_g170060 , WorldPosition246_g170060 , WorldNormal246_g170060 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170033 = localSampleExtra275_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170033 = localSamplePlanar2D238_g170060;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170033 = localSamplePlanar3D246_g170060;
				#else
				float4 staticSwitch817_g170033 = localSampleMain276_g170060;
				#endif
				half4 Local_MaskTex861_g170033 = staticSwitch817_g170033;
				float clampResult17_g170044 = clamp( (Local_MaskTex861_g170033).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170045 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170045 = ( _ThirdMaskRemap.y - temp_output_7_0_g170045 );
				float lerpResult1028_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170044 - temp_output_7_0_g170045 ) / ( temp_output_10_0_g170045 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170033 = lerpResult1028_g170033;
				half4 Model_VertexMasks960_g170033 = Out_VertexData15_g170061;
				float4 break961_g170033 = Model_VertexMasks960_g170033;
				float4 break33_g170048 = _third_vert_mode;
				float temp_output_30_0_g170048 = ( break961_g170033.x * break33_g170048.x );
				float temp_output_29_0_g170048 = ( break961_g170033.y * break33_g170048.y );
				float temp_output_31_0_g170048 = ( break961_g170033.z * break33_g170048.z );
				float temp_output_28_0_g170048 = ( temp_output_30_0_g170048 + temp_output_29_0_g170048 + temp_output_31_0_g170048 + ( break961_g170033.w * break33_g170048.w ) );
				float clampResult17_g170042 = clamp( temp_output_28_0_g170048 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170043 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170043 = ( _ThirdMeshRemap.y - temp_output_7_0_g170043 );
				float lerpResult1026_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170042 - temp_output_7_0_g170043 ) / ( temp_output_10_0_g170043 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170059 = lerpResult1026_g170033;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170059 = ( temp_output_6_0_g170059 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170059 = temp_output_6_0_g170059;
				#endif
				float temp_output_992_0_g170033 = staticSwitch14_g170059;
				half Blend_VertMask913_g170033 = temp_output_992_0_g170033;
				half3 Visual_NormalWS953_g170033 = Out_NormalWS4_g170049;
				float clampResult17_g170046 = clamp( saturate( (Visual_NormalWS953_g170033).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170047 = _ThirdProjRemap.x;
				float temp_output_10_0_g170047 = ( _ThirdProjRemap.y - temp_output_7_0_g170047 );
				float lerpResult1004_g170033 = lerp( 1.0 , saturate( ( ( clampResult17_g170046 - temp_output_7_0_g170047 ) / ( temp_output_10_0_g170047 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170033 = lerpResult1004_g170033;
				TVEGlobalData Data15_g170051 = Data204_g169264;
				float Out_Dummy15_g170051 = 0;
				float4 Out_CoatParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170051 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170051 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170051 = Data15_g170051.Dummy;
				Out_CoatParams15_g170051 = Data15_g170051.CoatParams;
				Out_PaintParams15_g170051 = Data15_g170051.PaintParams;
				Out_GlowParams15_g170051 = Data15_g170051.GlowParams;
				Out_AtmoParams15_g170051= Data15_g170051.AtmoParams;
				Out_FadeParams15_g170051= Data15_g170051.FadeParams;
				Out_FormParams15_g170051 = Data15_g170051.FormParams;
				Out_LandParams15_g170051 = Data15_g170051.LandParams;
				Out_WindParams15_g170051 = Data15_g170051.WindParams;
				Out_PushParams15_g170051 = Data15_g170051.PushParams;
				}
				half4 Global_CoatParams972_g170033 = Out_CoatParams15_g170051;
				float lerpResult1023_g170033 = lerp( 1.0 , (Global_CoatParams972_g170033).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170033 = lerpResult1023_g170033;
				#else
				float staticSwitch965_g170033 = 1.0;
				#endif
				half Blend_GlobalMask968_g170033 = staticSwitch965_g170033;
				float temp_output_432_0_g170033 = ( _ThirdIntensityValue * Detail_TexMask429_g170033 * Blend_VertMask913_g170033 * Blend_ProjMask912_g170033 * Blend_GlobalMask968_g170033 );
				float clampResult17_g170053 = clamp( temp_output_432_0_g170033 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170052 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170052 = ( _ThirdBlendRemap.y - temp_output_7_0_g170052 );
				half Detail_Mask412_g170033 = ( saturate( ( ( clampResult17_g170053 - temp_output_7_0_g170052 ) / ( temp_output_10_0_g170052 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170033 = lerp( Visual_Albedo527_g170033 , lerpResult985_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170033 = lerpResult989_g170033;
				#else
				float3 staticSwitch415_g170033 = Visual_Albedo527_g170033;
				#endif
				half3 Final_Albedo601_g170033 = staticSwitch415_g170033;
				float3 In_Albedo3_g170050 = Final_Albedo601_g170033;
				half2 Visual_NormalTS529_g170033 = Out_NormalTS4_g170049;
				float2 lerpResult40_g170055 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170033 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170035) = _ThirdNormalTex;
				SamplerState Sampler276_g170035 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170035 = Local_LayerCoords790_g170033;
				half4 Coords276_g170035 = temp_output_37_0_g170035;
				half2 TexCoord276_g170035 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170035 = SampleMain( Texture276_g170035 , Sampler276_g170035 , Coords276_g170035 , TexCoord276_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170035) = _ThirdNormalTex;
				SamplerState Sampler275_g170035 = sampler_Linear_Repeat;
				half4 Coords275_g170035 = temp_output_37_0_g170035;
				half2 TexCoord275_g170035 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170035 = SampleExtra( Texture275_g170035 , Sampler275_g170035 , Coords275_g170035 , TexCoord275_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170035) = _ThirdNormalTex;
				SamplerState Sampler238_g170035 = sampler_Linear_Repeat;
				half4 Coords238_g170035 = temp_output_37_0_g170035;
				float3 temp_output_279_0_g170035 = Model_PositionWO636_g170033;
				half3 WorldPosition238_g170035 = temp_output_279_0_g170035;
				half4 localSamplePlanar2D238_g170035 = SamplePlanar2D( Texture238_g170035 , Sampler238_g170035 , Coords238_g170035 , WorldPosition238_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170035) = _ThirdNormalTex;
				SamplerState Sampler246_g170035 = sampler_Linear_Repeat;
				half4 Coords246_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition246_g170035 = temp_output_279_0_g170035;
				float3 temp_output_280_0_g170035 = Model_NormalWS869_g170033;
				half3 WorldNormal246_g170035 = temp_output_280_0_g170035;
				half4 localSamplePlanar3D246_g170035 = SamplePlanar3D( Texture246_g170035 , Sampler246_g170035 , Coords246_g170035 , WorldPosition246_g170035 , WorldNormal246_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170035) = _ThirdNormalTex;
				SamplerState Sampler234_g170035 = sampler_Linear_Repeat;
				float4 Coords234_g170035 = temp_output_37_0_g170035;
				float3 WorldPosition234_g170035 = temp_output_279_0_g170035;
				float4 localSampleStochastic2D234_g170035 = SampleStochastic2D( Texture234_g170035 , Sampler234_g170035 , Coords234_g170035 , WorldPosition234_g170035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170035) = _ThirdNormalTex;
				SamplerState Sampler263_g170035 = sampler_Linear_Repeat;
				half4 Coords263_g170035 = temp_output_37_0_g170035;
				half3 WorldPosition263_g170035 = temp_output_279_0_g170035;
				half3 WorldNormal263_g170035 = temp_output_280_0_g170035;
				half4 localSampleStochastic3D263_g170035 = SampleStochastic3D( Texture263_g170035 , Sampler263_g170035 , Coords263_g170035 , WorldPosition263_g170035 , WorldNormal263_g170035 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170033 = localSampleExtra275_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170033 = localSamplePlanar2D238_g170035;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170033 = localSamplePlanar3D246_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170033 = localSampleStochastic2D234_g170035;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170033 = localSampleStochastic3D263_g170035;
				#else
				float4 staticSwitch698_g170033 = localSampleMain276_g170035;
				#endif
				half4 Local_NormalTex776_g170033 = staticSwitch698_g170033;
				half4 Normal_Packed45_g170037 = Local_NormalTex776_g170033;
				float2 appendResult58_g170037 = (float2(( (Normal_Packed45_g170037).x * (Normal_Packed45_g170037).w ) , (Normal_Packed45_g170037).y));
				half2 Normal_Default50_g170037 = appendResult58_g170037;
				half2 Normal_ASTC41_g170037 = (Normal_Packed45_g170037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170037 = Normal_ASTC41_g170037;
				#else
				float2 staticSwitch38_g170037 = Normal_Default50_g170037;
				#endif
				half2 Normal_NO_DTX544_g170037 = (Normal_Packed45_g170037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170037 = Normal_NO_DTX544_g170037;
				#else
				float2 staticSwitch37_g170037 = staticSwitch38_g170037;
				#endif
				float2 temp_output_724_0_g170033 = ( (staticSwitch37_g170037*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170038 = temp_output_724_0_g170033;
				float2 break71_g170038 = Normal_Planar45_g170038;
				float3 appendResult72_g170038 = (float3(break71_g170038.x , 0.0 , break71_g170038.y));
				float2 temp_output_858_0_g170033 = (mul( ase_worldToTangent, appendResult72_g170038 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170033 = temp_output_858_0_g170033;
				#else
				float2 staticSwitch727_g170033 = temp_output_724_0_g170033;
				#endif
				half2 Local_NormalTS729_g170033 = staticSwitch727_g170033;
				float2 temp_output_36_0_g170055 = ( lerpResult40_g170055 + Local_NormalTS729_g170033 );
				float2 lerpResult405_g170033 = lerp( Visual_NormalTS529_g170033 , temp_output_36_0_g170055 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170033 = lerpResult405_g170033;
				#else
				float2 staticSwitch418_g170033 = Visual_NormalTS529_g170033;
				#endif
				half2 Final_NormalTS612_g170033 = staticSwitch418_g170033;
				float2 In_NormalTS3_g170050 = Final_NormalTS612_g170033;
				float3 appendResult68_g170056 = (float3(Final_NormalTS612_g170033 , 1.0));
				float3 tanNormal74_g170056 = appendResult68_g170056;
				float3 worldNormal74_g170056 = normalize( float3(dot(tanToWorld0,tanNormal74_g170056), dot(tanToWorld1,tanNormal74_g170056), dot(tanToWorld2,tanNormal74_g170056)) );
				half3 Final_NormalWS956_g170033 = worldNormal74_g170056;
				float3 In_NormalWS3_g170050 = Final_NormalWS956_g170033;
				half4 Visual_Shader531_g170033 = Out_Shader4_g170049;
				float4 lerpResult1000_g170033 = lerp( Local_Masks750_g170033 , ( Visual_Shader531_g170033 * Local_Masks750_g170033 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170033 = lerp( Visual_Shader531_g170033 , lerpResult1000_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170033 = lerpResult998_g170033;
				#else
				float4 staticSwitch451_g170033 = Visual_Shader531_g170033;
				#endif
				half4 Final_Masks613_g170033 = staticSwitch451_g170033;
				float4 In_Shader3_g170050 = Final_Masks613_g170033;
				float4 In_Emissive3_g170050 = Out_Emissive4_g170049;
				float3 temp_output_3_0_g170058 = Final_Albedo601_g170033;
				float dotResult20_g170058 = dot( temp_output_3_0_g170058 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170033 = dotResult20_g170058;
				float In_Grayscale3_g170050 = Final_Grayscale615_g170033;
				float clampResult651_g170033 = clamp( saturate( ( Final_Grayscale615_g170033 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170033 = clampResult651_g170033;
				float In_Luminosity3_g170050 = Final_Luminosity652_g170033;
				half Visual_MultiMask547_g170033 = Out_MultiMask4_g170049;
				float lerpResult477_g170033 = lerp( Visual_MultiMask547_g170033 , Local_MultiMask767_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch482_g170033 = lerpResult477_g170033;
				#else
				float staticSwitch482_g170033 = Visual_MultiMask547_g170033;
				#endif
				half Final_MultiMask572_g170033 = staticSwitch482_g170033;
				float In_MultiMask3_g170050 = Final_MultiMask572_g170033;
				half Visual_AlphaClip559_g170033 = Out_AlphaClip4_g170049;
				float temp_output_718_0_g170033 = (Local_AlbedoTex777_g170033).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170033 = ( temp_output_718_0_g170033 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170033 = temp_output_718_0_g170033;
				#endif
				half Local_AlphaClip772_g170033 = staticSwitch924_g170033;
				float lerpResult448_g170033 = lerp( Visual_AlphaClip559_g170033 , Local_AlphaClip772_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch564_g170033 = lerpResult448_g170033;
				#else
				float staticSwitch564_g170033 = Visual_AlphaClip559_g170033;
				#endif
				half Final_AlphaClip602_g170033 = staticSwitch564_g170033;
				float In_AlphaClip3_g170050 = Final_AlphaClip602_g170033;
				half Visual_AlphaFade588_g170033 = Out_AlphaFade4_g170049;
				half Local_AlphaFade773_g170033 = (lerpResult706_g170033).a;
				float lerpResult604_g170033 = lerp( Visual_AlphaFade588_g170033 , Local_AlphaFade773_g170033 , Detail_Mask412_g170033);
				#ifdef TVE_THIRD
				float staticSwitch608_g170033 = lerpResult604_g170033;
				#else
				float staticSwitch608_g170033 = Visual_AlphaFade588_g170033;
				#endif
				half Final_AlphaFade611_g170033 = staticSwitch608_g170033;
				float In_AlphaFade3_g170050 = Final_AlphaFade611_g170033;
				float3 In_Translucency3_g170050 = Out_Translucency4_g170049;
				float In_Transmission3_g170050 = Out_Transmission4_g170049;
				float In_Thickness3_g170050 = Out_Thickness4_g170049;
				float In_Diffusion3_g170050 = Out_Diffusion4_g170049;
				{
				Data3_g170050.Dummy = In_Dummy3_g170050;
				Data3_g170050.Albedo = In_Albedo3_g170050;
				Data3_g170050.NormalTS = In_NormalTS3_g170050;
				Data3_g170050.NormalWS = In_NormalWS3_g170050;
				Data3_g170050.Shader = In_Shader3_g170050;
				Data3_g170050.Emissive= In_Emissive3_g170050;
				Data3_g170050.MultiMask = In_MultiMask3_g170050;
				Data3_g170050.Grayscale = In_Grayscale3_g170050;
				Data3_g170050.Luminosity = In_Luminosity3_g170050;
				Data3_g170050.AlphaClip = In_AlphaClip3_g170050;
				Data3_g170050.AlphaFade = In_AlphaFade3_g170050;
				Data3_g170050.Translucency = In_Translucency3_g170050;
				Data3_g170050.Transmission = In_Transmission3_g170050;
				Data3_g170050.Thickness = In_Thickness3_g170050;
				Data3_g170050.Diffusion = In_Diffusion3_g170050;
				}
				TVEVisualData Data4_g170137 = Data3_g170050;
				float Out_Dummy4_g170137 = 0;
				float3 Out_Albedo4_g170137 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170137 = float2( 0,0 );
				float3 Out_NormalWS4_g170137 = float3( 0,0,0 );
				float4 Out_Shader4_g170137 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170137 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170137 = 0;
				float Out_Grayscale4_g170137 = 0;
				float Out_Luminosity4_g170137 = 0;
				float Out_AlphaClip4_g170137 = 0;
				float Out_AlphaFade4_g170137 = 0;
				float3 Out_Translucency4_g170137 = float3( 0,0,0 );
				float Out_Transmission4_g170137 = 0;
				float Out_Thickness4_g170137 = 0;
				float Out_Diffusion4_g170137 = 0;
				{
				Out_Dummy4_g170137 = Data4_g170137.Dummy;
				Out_Albedo4_g170137 = Data4_g170137.Albedo;
				Out_NormalTS4_g170137 = Data4_g170137.NormalTS;
				Out_NormalWS4_g170137 = Data4_g170137.NormalWS;
				Out_Shader4_g170137 = Data4_g170137.Shader;
				Out_Emissive4_g170137= Data4_g170137.Emissive;
				Out_MultiMask4_g170137 = Data4_g170137.MultiMask;
				Out_Grayscale4_g170137 = Data4_g170137.Grayscale;
				Out_Luminosity4_g170137= Data4_g170137.Luminosity;
				Out_AlphaClip4_g170137 = Data4_g170137.AlphaClip;
				Out_AlphaFade4_g170137 = Data4_g170137.AlphaFade;
				Out_Translucency4_g170137 = Data4_g170137.Translucency;
				Out_Transmission4_g170137 = Data4_g170137.Transmission;
				Out_Thickness4_g170137 = Data4_g170137.Thickness;
				Out_Diffusion4_g170137 = Data4_g170137.Diffusion;
				}
				half3 Visual_Albedo127_g170136 = Out_Albedo4_g170137;
				TVEModelData Data15_g170139 = Data16_g169262;
				float Out_Dummy15_g170139 = 0;
				float3 Out_PositionOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170139 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170139 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170139 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170139 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170139 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170139 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170139 = float3( 0,0,0 );
				float4 Out_VertexData15_g170139 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170139 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170139 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170139 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170139 = Data15_g170139.Dummy;
				Out_PositionOS15_g170139 = Data15_g170139.PositionOS;
				Out_PositionWS15_g170139 = Data15_g170139.PositionWS;
				Out_PositionWO15_g170139 = Data15_g170139.PositionWO;
				Out_PositionRawOS15_g170139 = Data15_g170139.PositionRawOS;
				Out_PositionAddOS15_g170139 = Data15_g170139.PositionAddOS;
				Out_PivotOS15_g170139 = Data15_g170139.PivotOS;
				Out_PivotWS15_g170139 = Data15_g170139.PivotWS;
				Out_PivotWO15_g170139 = Data15_g170139.PivotWO;
				Out_NormalOS15_g170139 = Data15_g170139.NormalOS;
				Out_NormalWS15_g170139 = Data15_g170139.NormalWS;
				Out_NormalRawOS15_g170139 = Data15_g170139.NormalRawOS;
				Out_NormalRawWS15_g170139 = Data15_g170139.NormalRawWS;
				Out_TangentOS15_g170139 = Data15_g170139.TangentOS;
				Out_ViewDirWS15_g170139 = Data15_g170139.ViewDirWS;
				Out_VertexData15_g170139 = Data15_g170139.VertexData;
				Out_MotionData15_g170139 = Data15_g170139.MotionData;
				Out_BoundsData15_g170139 = Data15_g170139.BoundsData;
				Out_RotationData15_g170139 = Data15_g170139.RotationData;
				}
				half4 Model_VertexData206_g170136 = Out_VertexData15_g170139;
				float4 break208_g170136 = Model_VertexData206_g170136;
				float4 break33_g170144 = _occlusion_vert_mode;
				float temp_output_30_0_g170144 = ( break208_g170136.x * break33_g170144.x );
				float temp_output_29_0_g170144 = ( break208_g170136.y * break33_g170144.y );
				float temp_output_31_0_g170144 = ( break208_g170136.z * break33_g170144.z );
				float temp_output_28_0_g170144 = ( temp_output_30_0_g170144 + temp_output_29_0_g170144 + temp_output_31_0_g170144 + ( break208_g170136.w * break33_g170144.w ) );
				float temp_output_194_0_g170136 = temp_output_28_0_g170144;
				float clampResult17_g170142 = clamp( temp_output_194_0_g170136 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170141 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170141 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170141 );
				float temp_output_6_0_g170143 = saturate( ( ( clampResult17_g170142 - temp_output_7_0_g170141 ) / ( temp_output_10_0_g170141 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170143 = ( temp_output_6_0_g170143 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170143 = temp_output_6_0_g170143;
				#endif
				half Occlusion_Mask82_g170136 = staticSwitch14_g170143;
				float3 lerpResult75_g170136 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170136);
				float3 lerpResult186_g170136 = lerp( Visual_Albedo127_g170136 , ( Visual_Albedo127_g170136 * lerpResult75_g170136 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170136 = lerpResult186_g170136;
				#else
				float3 staticSwitch171_g170136 = Visual_Albedo127_g170136;
				#endif
				half3 Final_Albedo160_g170136 = staticSwitch171_g170136;
				float3 In_Albedo3_g170138 = Final_Albedo160_g170136;
				float2 In_NormalTS3_g170138 = Out_NormalTS4_g170137;
				float3 In_NormalWS3_g170138 = Out_NormalWS4_g170137;
				float4 In_Shader3_g170138 = Out_Shader4_g170137;
				float4 In_Emissive3_g170138 = Out_Emissive4_g170137;
				float3 temp_output_3_0_g170140 = Final_Albedo160_g170136;
				float dotResult20_g170140 = dot( temp_output_3_0_g170140 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170136 = dotResult20_g170140;
				float In_Grayscale3_g170138 = Final_Grayscale164_g170136;
				float clampResult180_g170136 = clamp( saturate( ( Final_Grayscale164_g170136 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170136 = clampResult180_g170136;
				float In_Luminosity3_g170138 = Final_Shading181_g170136;
				float In_MultiMask3_g170138 = Out_MultiMask4_g170137;
				float In_AlphaClip3_g170138 = Out_AlphaClip4_g170137;
				float In_AlphaFade3_g170138 = Out_AlphaFade4_g170137;
				float3 In_Translucency3_g170138 = Out_Translucency4_g170137;
				float In_Transmission3_g170138 = Out_Transmission4_g170137;
				float In_Thickness3_g170138 = Out_Thickness4_g170137;
				float In_Diffusion3_g170138 = Out_Diffusion4_g170137;
				{
				Data3_g170138.Dummy = In_Dummy3_g170138;
				Data3_g170138.Albedo = In_Albedo3_g170138;
				Data3_g170138.NormalTS = In_NormalTS3_g170138;
				Data3_g170138.NormalWS = In_NormalWS3_g170138;
				Data3_g170138.Shader = In_Shader3_g170138;
				Data3_g170138.Emissive= In_Emissive3_g170138;
				Data3_g170138.MultiMask = In_MultiMask3_g170138;
				Data3_g170138.Grayscale = In_Grayscale3_g170138;
				Data3_g170138.Luminosity = In_Luminosity3_g170138;
				Data3_g170138.AlphaClip = In_AlphaClip3_g170138;
				Data3_g170138.AlphaFade = In_AlphaFade3_g170138;
				Data3_g170138.Translucency = In_Translucency3_g170138;
				Data3_g170138.Transmission = In_Transmission3_g170138;
				Data3_g170138.Thickness = In_Thickness3_g170138;
				Data3_g170138.Diffusion = In_Diffusion3_g170138;
				}
				TVEVisualData Data4_g170149 = Data3_g170138;
				float Out_Dummy4_g170149 = 0;
				float3 Out_Albedo4_g170149 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170149 = float2( 0,0 );
				float3 Out_NormalWS4_g170149 = float3( 0,0,0 );
				float4 Out_Shader4_g170149 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170149 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170149 = 0;
				float Out_Grayscale4_g170149 = 0;
				float Out_Luminosity4_g170149 = 0;
				float Out_AlphaClip4_g170149 = 0;
				float Out_AlphaFade4_g170149 = 0;
				float3 Out_Translucency4_g170149 = float3( 0,0,0 );
				float Out_Transmission4_g170149 = 0;
				float Out_Thickness4_g170149 = 0;
				float Out_Diffusion4_g170149 = 0;
				{
				Out_Dummy4_g170149 = Data4_g170149.Dummy;
				Out_Albedo4_g170149 = Data4_g170149.Albedo;
				Out_NormalTS4_g170149 = Data4_g170149.NormalTS;
				Out_NormalWS4_g170149 = Data4_g170149.NormalWS;
				Out_Shader4_g170149 = Data4_g170149.Shader;
				Out_Emissive4_g170149= Data4_g170149.Emissive;
				Out_MultiMask4_g170149 = Data4_g170149.MultiMask;
				Out_Grayscale4_g170149 = Data4_g170149.Grayscale;
				Out_Luminosity4_g170149= Data4_g170149.Luminosity;
				Out_AlphaClip4_g170149 = Data4_g170149.AlphaClip;
				Out_AlphaFade4_g170149 = Data4_g170149.AlphaFade;
				Out_Translucency4_g170149 = Data4_g170149.Translucency;
				Out_Transmission4_g170149 = Data4_g170149.Transmission;
				Out_Thickness4_g170149 = Data4_g170149.Thickness;
				Out_Diffusion4_g170149 = Data4_g170149.Diffusion;
				}
				half3 Visual_Albedo127_g170146 = Out_Albedo4_g170149;
				TVEModelData Data15_g170147 = Data16_g169262;
				float Out_Dummy15_g170147 = 0;
				float3 Out_PositionOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170147 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170147 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170147 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170147 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170147 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170147 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170147 = float3( 0,0,0 );
				float4 Out_VertexData15_g170147 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170147 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170147 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170147 = Data15_g170147.Dummy;
				Out_PositionOS15_g170147 = Data15_g170147.PositionOS;
				Out_PositionWS15_g170147 = Data15_g170147.PositionWS;
				Out_PositionWO15_g170147 = Data15_g170147.PositionWO;
				Out_PositionRawOS15_g170147 = Data15_g170147.PositionRawOS;
				Out_PositionAddOS15_g170147 = Data15_g170147.PositionAddOS;
				Out_PivotOS15_g170147 = Data15_g170147.PivotOS;
				Out_PivotWS15_g170147 = Data15_g170147.PivotWS;
				Out_PivotWO15_g170147 = Data15_g170147.PivotWO;
				Out_NormalOS15_g170147 = Data15_g170147.NormalOS;
				Out_NormalWS15_g170147 = Data15_g170147.NormalWS;
				Out_NormalRawOS15_g170147 = Data15_g170147.NormalRawOS;
				Out_NormalRawWS15_g170147 = Data15_g170147.NormalRawWS;
				Out_TangentOS15_g170147 = Data15_g170147.TangentOS;
				Out_ViewDirWS15_g170147 = Data15_g170147.ViewDirWS;
				Out_VertexData15_g170147 = Data15_g170147.VertexData;
				Out_MotionData15_g170147 = Data15_g170147.MotionData;
				Out_BoundsData15_g170147 = Data15_g170147.BoundsData;
				Out_RotationData15_g170147 = Data15_g170147.RotationData;
				}
				half4 Model_VertexData224_g170146 = Out_VertexData15_g170147;
				float4 break226_g170146 = Model_VertexData224_g170146;
				float4 break33_g170148 = _gradient_vert_mode;
				float temp_output_30_0_g170148 = ( break226_g170146.x * break33_g170148.x );
				float temp_output_29_0_g170148 = ( break226_g170146.y * break33_g170148.y );
				float temp_output_31_0_g170148 = ( break226_g170146.z * break33_g170148.z );
				float temp_output_28_0_g170148 = ( temp_output_30_0_g170148 + temp_output_29_0_g170148 + temp_output_31_0_g170148 + ( break226_g170146.w * break33_g170148.w ) );
				float temp_output_211_0_g170146 = temp_output_28_0_g170148;
				float clampResult17_g170153 = clamp( temp_output_211_0_g170146 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170154 = _GradientMeshRemap.x;
				float temp_output_10_0_g170154 = ( _GradientMeshRemap.y - temp_output_7_0_g170154 );
				float temp_output_6_0_g170155 = saturate( ( ( clampResult17_g170153 - temp_output_7_0_g170154 ) / ( temp_output_10_0_g170154 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170155 = ( temp_output_6_0_g170155 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170155 = temp_output_6_0_g170155;
				#endif
				half Gradient_VertMask82_g170146 = staticSwitch14_g170155;
				half Gradient_Mask200_g170146 = Gradient_VertMask82_g170146;
				float3 lerpResult75_g170146 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170146);
				float temp_output_162_11_g170146 = Out_MultiMask4_g170149;
				half Visual_MultiMask196_g170146 = temp_output_162_11_g170146;
				float lerpResult190_g170146 = lerp( 1.0 , Visual_MultiMask196_g170146 , _GradientMultiValue);
				half Gradient_MultiMask194_g170146 = lerpResult190_g170146;
				float3 lerpResult186_g170146 = lerp( Visual_Albedo127_g170146 , ( Visual_Albedo127_g170146 * lerpResult75_g170146 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170146 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170146 = lerpResult186_g170146;
				#else
				float3 staticSwitch171_g170146 = Visual_Albedo127_g170146;
				#endif
				half3 Final_Albedo160_g170146 = staticSwitch171_g170146;
				float3 In_Albedo3_g170150 = Final_Albedo160_g170146;
				float2 In_NormalTS3_g170150 = Out_NormalTS4_g170149;
				float3 In_NormalWS3_g170150 = Out_NormalWS4_g170149;
				float4 In_Shader3_g170150 = Out_Shader4_g170149;
				float4 In_Emissive3_g170150 = Out_Emissive4_g170149;
				float3 temp_output_3_0_g170151 = Final_Albedo160_g170146;
				float dotResult20_g170151 = dot( temp_output_3_0_g170151 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170146 = dotResult20_g170151;
				float In_Grayscale3_g170150 = Final_Grayscale164_g170146;
				float clampResult180_g170146 = clamp( saturate( ( Final_Grayscale164_g170146 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170146 = clampResult180_g170146;
				float In_Luminosity3_g170150 = Final_Luminosity181_g170146;
				float In_MultiMask3_g170150 = temp_output_162_11_g170146;
				float In_AlphaClip3_g170150 = Out_AlphaClip4_g170149;
				float In_AlphaFade3_g170150 = Out_AlphaFade4_g170149;
				float3 In_Translucency3_g170150 = Out_Translucency4_g170149;
				float In_Transmission3_g170150 = Out_Transmission4_g170149;
				float In_Thickness3_g170150 = Out_Thickness4_g170149;
				float In_Diffusion3_g170150 = Out_Diffusion4_g170149;
				{
				Data3_g170150.Dummy = In_Dummy3_g170150;
				Data3_g170150.Albedo = In_Albedo3_g170150;
				Data3_g170150.NormalTS = In_NormalTS3_g170150;
				Data3_g170150.NormalWS = In_NormalWS3_g170150;
				Data3_g170150.Shader = In_Shader3_g170150;
				Data3_g170150.Emissive= In_Emissive3_g170150;
				Data3_g170150.MultiMask = In_MultiMask3_g170150;
				Data3_g170150.Grayscale = In_Grayscale3_g170150;
				Data3_g170150.Luminosity = In_Luminosity3_g170150;
				Data3_g170150.AlphaClip = In_AlphaClip3_g170150;
				Data3_g170150.AlphaFade = In_AlphaFade3_g170150;
				Data3_g170150.Translucency = In_Translucency3_g170150;
				Data3_g170150.Transmission = In_Transmission3_g170150;
				Data3_g170150.Thickness = In_Thickness3_g170150;
				Data3_g170150.Diffusion = In_Diffusion3_g170150;
				}
				TVEVisualData Data4_g170158 = Data3_g170150;
				float Out_Dummy4_g170158 = 0;
				float3 Out_Albedo4_g170158 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170158 = float2( 0,0 );
				float3 Out_NormalWS4_g170158 = float3( 0,0,0 );
				float4 Out_Shader4_g170158 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170158 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170158 = 0;
				float Out_Grayscale4_g170158 = 0;
				float Out_Luminosity4_g170158 = 0;
				float Out_AlphaClip4_g170158 = 0;
				float Out_AlphaFade4_g170158 = 0;
				float3 Out_Translucency4_g170158 = float3( 0,0,0 );
				float Out_Transmission4_g170158 = 0;
				float Out_Thickness4_g170158 = 0;
				float Out_Diffusion4_g170158 = 0;
				{
				Out_Dummy4_g170158 = Data4_g170158.Dummy;
				Out_Albedo4_g170158 = Data4_g170158.Albedo;
				Out_NormalTS4_g170158 = Data4_g170158.NormalTS;
				Out_NormalWS4_g170158 = Data4_g170158.NormalWS;
				Out_Shader4_g170158 = Data4_g170158.Shader;
				Out_Emissive4_g170158= Data4_g170158.Emissive;
				Out_MultiMask4_g170158 = Data4_g170158.MultiMask;
				Out_Grayscale4_g170158 = Data4_g170158.Grayscale;
				Out_Luminosity4_g170158= Data4_g170158.Luminosity;
				Out_AlphaClip4_g170158 = Data4_g170158.AlphaClip;
				Out_AlphaFade4_g170158 = Data4_g170158.AlphaFade;
				Out_Translucency4_g170158 = Data4_g170158.Translucency;
				Out_Transmission4_g170158 = Data4_g170158.Transmission;
				Out_Thickness4_g170158 = Data4_g170158.Thickness;
				Out_Diffusion4_g170158 = Data4_g170158.Diffusion;
				}
				half3 Visual_Albedo127_g170156 = Out_Albedo4_g170158;
				TVEModelData Data15_g170159 = Data16_g169262;
				float Out_Dummy15_g170159 = 0;
				float3 Out_PositionOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170159 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170159 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170159 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170159 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170159 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170159 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170159 = float3( 0,0,0 );
				float4 Out_VertexData15_g170159 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170159 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170159 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170159 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170159 = Data15_g170159.Dummy;
				Out_PositionOS15_g170159 = Data15_g170159.PositionOS;
				Out_PositionWS15_g170159 = Data15_g170159.PositionWS;
				Out_PositionWO15_g170159 = Data15_g170159.PositionWO;
				Out_PositionRawOS15_g170159 = Data15_g170159.PositionRawOS;
				Out_PositionAddOS15_g170159 = Data15_g170159.PositionAddOS;
				Out_PivotOS15_g170159 = Data15_g170159.PivotOS;
				Out_PivotWS15_g170159 = Data15_g170159.PivotWS;
				Out_PivotWO15_g170159 = Data15_g170159.PivotWO;
				Out_NormalOS15_g170159 = Data15_g170159.NormalOS;
				Out_NormalWS15_g170159 = Data15_g170159.NormalWS;
				Out_NormalRawOS15_g170159 = Data15_g170159.NormalRawOS;
				Out_NormalRawWS15_g170159 = Data15_g170159.NormalRawWS;
				Out_TangentOS15_g170159 = Data15_g170159.TangentOS;
				Out_ViewDirWS15_g170159 = Data15_g170159.ViewDirWS;
				Out_VertexData15_g170159 = Data15_g170159.VertexData;
				Out_MotionData15_g170159 = Data15_g170159.MotionData;
				Out_BoundsData15_g170159 = Data15_g170159.BoundsData;
				Out_RotationData15_g170159 = Data15_g170159.RotationData;
				}
				half3 Model_PositionWO224_g170156 = Out_PositionWO15_g170159;
				half3 Model_PivotWO239_g170156 = Out_PivotWO15_g170159;
				float3 lerpResult242_g170156 = lerp( Model_PositionWO224_g170156 , Model_PivotWO239_g170156 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170161 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170156 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170163 = clamp( tex3DNode60_g170161.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170164 = _VariationNoiseRemap.x;
				float temp_output_10_0_g170164 = ( _VariationNoiseRemap.y - temp_output_7_0_g170164 );
				float temp_output_238_0_g170156 = saturate( ( ( clampResult17_g170163 - temp_output_7_0_g170164 ) / ( temp_output_10_0_g170164 + 0.0001 ) ) );
				half Variaton_NoiseMask82_g170156 = temp_output_238_0_g170156;
				half Variaton_Mask200_g170156 = Variaton_NoiseMask82_g170156;
				float3 lerpResult75_g170156 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170156);
				float temp_output_162_11_g170156 = Out_MultiMask4_g170158;
				half Visual_MultiMask196_g170156 = temp_output_162_11_g170156;
				float lerpResult190_g170156 = lerp( 1.0 , Visual_MultiMask196_g170156 , _VariationMultiValue);
				half Variaton_MultiMask194_g170156 = lerpResult190_g170156;
				float3 lerpResult186_g170156 = lerp( Visual_Albedo127_g170156 , ( Visual_Albedo127_g170156 * lerpResult75_g170156 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170156 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170156 = lerpResult186_g170156;
				#else
				float3 staticSwitch171_g170156 = Visual_Albedo127_g170156;
				#endif
				half3 Final_Albedo160_g170156 = staticSwitch171_g170156;
				float3 In_Albedo3_g170160 = Final_Albedo160_g170156;
				float2 In_NormalTS3_g170160 = Out_NormalTS4_g170158;
				float3 In_NormalWS3_g170160 = Out_NormalWS4_g170158;
				float4 In_Shader3_g170160 = Out_Shader4_g170158;
				float4 In_Emissive3_g170160 = Out_Emissive4_g170158;
				float3 temp_output_3_0_g170157 = Final_Albedo160_g170156;
				float dotResult20_g170157 = dot( temp_output_3_0_g170157 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170156 = dotResult20_g170157;
				float In_Grayscale3_g170160 = Final_Grayscale164_g170156;
				float clampResult180_g170156 = clamp( saturate( ( Final_Grayscale164_g170156 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170156 = clampResult180_g170156;
				float In_Luminosity3_g170160 = Final_Luminosity181_g170156;
				float In_MultiMask3_g170160 = temp_output_162_11_g170156;
				float In_AlphaClip3_g170160 = Out_AlphaClip4_g170158;
				float In_AlphaFade3_g170160 = Out_AlphaFade4_g170158;
				float3 In_Translucency3_g170160 = Out_Translucency4_g170158;
				float In_Transmission3_g170160 = Out_Transmission4_g170158;
				float In_Thickness3_g170160 = Out_Thickness4_g170158;
				float In_Diffusion3_g170160 = Out_Diffusion4_g170158;
				{
				Data3_g170160.Dummy = In_Dummy3_g170160;
				Data3_g170160.Albedo = In_Albedo3_g170160;
				Data3_g170160.NormalTS = In_NormalTS3_g170160;
				Data3_g170160.NormalWS = In_NormalWS3_g170160;
				Data3_g170160.Shader = In_Shader3_g170160;
				Data3_g170160.Emissive= In_Emissive3_g170160;
				Data3_g170160.MultiMask = In_MultiMask3_g170160;
				Data3_g170160.Grayscale = In_Grayscale3_g170160;
				Data3_g170160.Luminosity = In_Luminosity3_g170160;
				Data3_g170160.AlphaClip = In_AlphaClip3_g170160;
				Data3_g170160.AlphaFade = In_AlphaFade3_g170160;
				Data3_g170160.Translucency = In_Translucency3_g170160;
				Data3_g170160.Transmission = In_Transmission3_g170160;
				Data3_g170160.Thickness = In_Thickness3_g170160;
				Data3_g170160.Diffusion = In_Diffusion3_g170160;
				}
				TVEVisualData Data4_g170171 = Data3_g170160;
				float Out_Dummy4_g170171 = 0;
				float3 Out_Albedo4_g170171 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170171 = float2( 0,0 );
				float3 Out_NormalWS4_g170171 = float3( 0,0,0 );
				float4 Out_Shader4_g170171 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170171 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170171 = 0;
				float Out_Grayscale4_g170171 = 0;
				float Out_Luminosity4_g170171 = 0;
				float Out_AlphaClip4_g170171 = 0;
				float Out_AlphaFade4_g170171 = 0;
				float3 Out_Translucency4_g170171 = float3( 0,0,0 );
				float Out_Transmission4_g170171 = 0;
				float Out_Thickness4_g170171 = 0;
				float Out_Diffusion4_g170171 = 0;
				{
				Out_Dummy4_g170171 = Data4_g170171.Dummy;
				Out_Albedo4_g170171 = Data4_g170171.Albedo;
				Out_NormalTS4_g170171 = Data4_g170171.NormalTS;
				Out_NormalWS4_g170171 = Data4_g170171.NormalWS;
				Out_Shader4_g170171 = Data4_g170171.Shader;
				Out_Emissive4_g170171= Data4_g170171.Emissive;
				Out_MultiMask4_g170171 = Data4_g170171.MultiMask;
				Out_Grayscale4_g170171 = Data4_g170171.Grayscale;
				Out_Luminosity4_g170171= Data4_g170171.Luminosity;
				Out_AlphaClip4_g170171 = Data4_g170171.AlphaClip;
				Out_AlphaFade4_g170171 = Data4_g170171.AlphaFade;
				Out_Translucency4_g170171 = Data4_g170171.Translucency;
				Out_Transmission4_g170171 = Data4_g170171.Transmission;
				Out_Thickness4_g170171 = Data4_g170171.Thickness;
				Out_Diffusion4_g170171 = Data4_g170171.Diffusion;
				}
				half3 Visual_Albedo139_g170166 = Out_Albedo4_g170171;
				float temp_output_200_12_g170166 = Out_Grayscale4_g170171;
				half Visual_Grayscale150_g170166 = temp_output_200_12_g170166;
				float3 temp_cast_37 = (Visual_Grayscale150_g170166).xxx;
				TVEGlobalData Data15_g170168 = Data204_g169264;
				float Out_Dummy15_g170168 = 0;
				float4 Out_CoatParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170168 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170168 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170168 = Data15_g170168.Dummy;
				Out_CoatParams15_g170168 = Data15_g170168.CoatParams;
				Out_PaintParams15_g170168 = Data15_g170168.PaintParams;
				Out_GlowParams15_g170168 = Data15_g170168.GlowParams;
				Out_AtmoParams15_g170168= Data15_g170168.AtmoParams;
				Out_FadeParams15_g170168= Data15_g170168.FadeParams;
				Out_FormParams15_g170168 = Data15_g170168.FormParams;
				Out_LandParams15_g170168 = Data15_g170168.LandParams;
				Out_WindParams15_g170168 = Data15_g170168.WindParams;
				Out_PushParams15_g170168 = Data15_g170168.PushParams;
				}
				half4 Global_PaintParams209_g170166 = Out_PaintParams15_g170168;
				float temp_output_6_0_g170170 = ( saturate( (Global_PaintParams209_g170166).w ) * TVE_IsEnabled );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170170 = ( temp_output_6_0_g170170 + ( _TintingElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170170 = temp_output_6_0_g170170;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float staticSwitch283_g170166 = staticSwitch14_g170170;
				#else
				float staticSwitch283_g170166 = 1.0;
				#endif
				half Tinting_GlobalValue285_g170166 = staticSwitch283_g170166;
				float3 lerpResult368_g170166 = lerp( Visual_Albedo139_g170166 , temp_cast_37 , ( Tinting_GlobalValue285_g170166 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170189 = 2.0;
				#else
				float staticSwitch1_g170189 = 4.594794;
				#endif
				float3 temp_cast_38 = (1.0).xxx;
				#ifdef TVE_TINTING_ELEMENT
				float3 staticSwitch288_g170166 = (Global_PaintParams209_g170166).xyz;
				#else
				float3 staticSwitch288_g170166 = temp_cast_38;
				#endif
				half3 Tinting_ColorGlobal290_g170166 = staticSwitch288_g170166;
				float temp_output_200_11_g170166 = Out_MultiMask4_g170171;
				half Visual_MultiMask181_g170166 = temp_output_200_11_g170166;
				float lerpResult147_g170166 = lerp( 1.0 , Visual_MultiMask181_g170166 , _TintingMultiValue);
				half Tinting_MutiMask121_g170166 = lerpResult147_g170166;
				half Tinting_TexMask385_g170166 = 1.0;
				float temp_output_200_15_g170166 = Out_Luminosity4_g170171;
				half Visual_Luminosity257_g170166 = temp_output_200_15_g170166;
				float clampResult17_g170183 = clamp( Visual_Luminosity257_g170166 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170182 = _TintingLumaRemap.x;
				float temp_output_10_0_g170182 = ( _TintingLumaRemap.y - temp_output_7_0_g170182 );
				float lerpResult228_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170183 - temp_output_7_0_g170182 ) / ( temp_output_10_0_g170182 + 0.0001 ) ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170166 = lerpResult228_g170166;
				TVEModelData Data15_g170167 = Data16_g169262;
				float Out_Dummy15_g170167 = 0;
				float3 Out_PositionOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170167 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170167 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170167 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170167 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170167 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170167 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170167 = float3( 0,0,0 );
				float4 Out_VertexData15_g170167 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170167 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170167 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170167 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170167 = Data15_g170167.Dummy;
				Out_PositionOS15_g170167 = Data15_g170167.PositionOS;
				Out_PositionWS15_g170167 = Data15_g170167.PositionWS;
				Out_PositionWO15_g170167 = Data15_g170167.PositionWO;
				Out_PositionRawOS15_g170167 = Data15_g170167.PositionRawOS;
				Out_PositionAddOS15_g170167 = Data15_g170167.PositionAddOS;
				Out_PivotOS15_g170167 = Data15_g170167.PivotOS;
				Out_PivotWS15_g170167 = Data15_g170167.PivotWS;
				Out_PivotWO15_g170167 = Data15_g170167.PivotWO;
				Out_NormalOS15_g170167 = Data15_g170167.NormalOS;
				Out_NormalWS15_g170167 = Data15_g170167.NormalWS;
				Out_NormalRawOS15_g170167 = Data15_g170167.NormalRawOS;
				Out_NormalRawWS15_g170167 = Data15_g170167.NormalRawWS;
				Out_TangentOS15_g170167 = Data15_g170167.TangentOS;
				Out_ViewDirWS15_g170167 = Data15_g170167.ViewDirWS;
				Out_VertexData15_g170167 = Data15_g170167.VertexData;
				Out_MotionData15_g170167 = Data15_g170167.MotionData;
				Out_BoundsData15_g170167 = Data15_g170167.BoundsData;
				Out_RotationData15_g170167 = Data15_g170167.RotationData;
				}
				half4 Model_VertexMasks307_g170166 = Out_VertexData15_g170167;
				float4 break311_g170166 = Model_VertexMasks307_g170166;
				float4 break33_g170175 = _tinting_vert_mode;
				float temp_output_30_0_g170175 = ( break311_g170166.x * break33_g170175.x );
				float temp_output_29_0_g170175 = ( break311_g170166.y * break33_g170175.y );
				float temp_output_31_0_g170175 = ( break311_g170166.z * break33_g170175.z );
				float temp_output_28_0_g170175 = ( temp_output_30_0_g170175 + temp_output_29_0_g170175 + temp_output_31_0_g170175 + ( break311_g170166.w * break33_g170175.w ) );
				float clampResult17_g170181 = clamp( temp_output_28_0_g170175 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170180 = _TintingMeshRemap.x;
				float temp_output_10_0_g170180 = ( _TintingMeshRemap.y - temp_output_7_0_g170180 );
				float lerpResult370_g170166 = lerp( 1.0 , saturate( ( ( clampResult17_g170181 - temp_output_7_0_g170180 ) / ( temp_output_10_0_g170180 + 0.0001 ) ) ) , _TintingMeshValue);
				float temp_output_6_0_g170184 = lerpResult370_g170166;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170184 = ( temp_output_6_0_g170184 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170184 = temp_output_6_0_g170184;
				#endif
				float temp_output_333_0_g170166 = staticSwitch14_g170184;
				half Tinting_VertMask309_g170166 = temp_output_333_0_g170166;
				half Tinting_NoiseMask213_g170166 = 1.0;
				half Custom_Mask345_g170166 = 1.0;
				float temp_output_7_0_g170178 = _TintingBlendRemap.x;
				float temp_output_10_0_g170178 = ( _TintingBlendRemap.y - temp_output_7_0_g170178 );
				half Tinting_Mask242_g170166 = ( saturate( ( ( ( _TintingIntensityValue * Tinting_MutiMask121_g170166 * Tinting_TexMask385_g170166 * Tinting_LumaMask153_g170166 * Tinting_VertMask309_g170166 * Tinting_NoiseMask213_g170166 * Tinting_GlobalValue285_g170166 * Custom_Mask345_g170166 ) - temp_output_7_0_g170178 ) / ( temp_output_10_0_g170178 + 0.0001 ) ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170166 = lerp( Visual_Albedo139_g170166 , ( lerpResult368_g170166 * staticSwitch1_g170189 * Tinting_ColorGlobal290_g170166 * (_TintingColor).rgb ) , Tinting_Mask242_g170166);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170166 = lerpResult90_g170166;
				#else
				float3 staticSwitch286_g170166 = Visual_Albedo139_g170166;
				#endif
				half3 Final_Albedo97_g170166 = staticSwitch286_g170166;
				float3 In_Albedo3_g170169 = Final_Albedo97_g170166;
				float2 In_NormalTS3_g170169 = Out_NormalTS4_g170171;
				float3 In_NormalWS3_g170169 = Out_NormalWS4_g170171;
				float4 In_Shader3_g170169 = Out_Shader4_g170171;
				float4 In_Emissive3_g170169 = Out_Emissive4_g170171;
				float In_Grayscale3_g170169 = temp_output_200_12_g170166;
				float In_Luminosity3_g170169 = temp_output_200_15_g170166;
				float In_MultiMask3_g170169 = temp_output_200_11_g170166;
				float In_AlphaClip3_g170169 = Out_AlphaClip4_g170171;
				float In_AlphaFade3_g170169 = Out_AlphaFade4_g170171;
				float3 In_Translucency3_g170169 = Out_Translucency4_g170171;
				float In_Transmission3_g170169 = Out_Transmission4_g170171;
				float In_Thickness3_g170169 = Out_Thickness4_g170171;
				float In_Diffusion3_g170169 = Out_Diffusion4_g170171;
				{
				Data3_g170169.Dummy = In_Dummy3_g170169;
				Data3_g170169.Albedo = In_Albedo3_g170169;
				Data3_g170169.NormalTS = In_NormalTS3_g170169;
				Data3_g170169.NormalWS = In_NormalWS3_g170169;
				Data3_g170169.Shader = In_Shader3_g170169;
				Data3_g170169.Emissive= In_Emissive3_g170169;
				Data3_g170169.MultiMask = In_MultiMask3_g170169;
				Data3_g170169.Grayscale = In_Grayscale3_g170169;
				Data3_g170169.Luminosity = In_Luminosity3_g170169;
				Data3_g170169.AlphaClip = In_AlphaClip3_g170169;
				Data3_g170169.AlphaFade = In_AlphaFade3_g170169;
				Data3_g170169.Translucency = In_Translucency3_g170169;
				Data3_g170169.Transmission = In_Transmission3_g170169;
				Data3_g170169.Thickness = In_Thickness3_g170169;
				Data3_g170169.Diffusion = In_Diffusion3_g170169;
				}
				TVEVisualData Data4_g170192 = Data3_g170169;
				float Out_Dummy4_g170192 = 0;
				float3 Out_Albedo4_g170192 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170192 = float2( 0,0 );
				float3 Out_NormalWS4_g170192 = float3( 0,0,0 );
				float4 Out_Shader4_g170192 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170192 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170192 = 0;
				float Out_Grayscale4_g170192 = 0;
				float Out_Luminosity4_g170192 = 0;
				float Out_AlphaClip4_g170192 = 0;
				float Out_AlphaFade4_g170192 = 0;
				float3 Out_Translucency4_g170192 = float3( 0,0,0 );
				float Out_Transmission4_g170192 = 0;
				float Out_Thickness4_g170192 = 0;
				float Out_Diffusion4_g170192 = 0;
				{
				Out_Dummy4_g170192 = Data4_g170192.Dummy;
				Out_Albedo4_g170192 = Data4_g170192.Albedo;
				Out_NormalTS4_g170192 = Data4_g170192.NormalTS;
				Out_NormalWS4_g170192 = Data4_g170192.NormalWS;
				Out_Shader4_g170192 = Data4_g170192.Shader;
				Out_Emissive4_g170192= Data4_g170192.Emissive;
				Out_MultiMask4_g170192 = Data4_g170192.MultiMask;
				Out_Grayscale4_g170192 = Data4_g170192.Grayscale;
				Out_Luminosity4_g170192= Data4_g170192.Luminosity;
				Out_AlphaClip4_g170192 = Data4_g170192.AlphaClip;
				Out_AlphaFade4_g170192 = Data4_g170192.AlphaFade;
				Out_Translucency4_g170192 = Data4_g170192.Translucency;
				Out_Transmission4_g170192 = Data4_g170192.Transmission;
				Out_Thickness4_g170192 = Data4_g170192.Thickness;
				Out_Diffusion4_g170192 = Data4_g170192.Diffusion;
				}
				half3 Visual_Albedo292_g170190 = Out_Albedo4_g170192;
				float temp_output_280_12_g170190 = Out_Grayscale4_g170192;
				half Visual_Grayscale308_g170190 = temp_output_280_12_g170190;
				float3 temp_cast_39 = (Visual_Grayscale308_g170190).xxx;
				TVEGlobalData Data15_g170191 = Data204_g169264;
				float Out_Dummy15_g170191 = 0;
				float4 Out_CoatParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170191 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170191 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170191 = Data15_g170191.Dummy;
				Out_CoatParams15_g170191 = Data15_g170191.CoatParams;
				Out_PaintParams15_g170191 = Data15_g170191.PaintParams;
				Out_GlowParams15_g170191 = Data15_g170191.GlowParams;
				Out_AtmoParams15_g170191= Data15_g170191.AtmoParams;
				Out_FadeParams15_g170191= Data15_g170191.FadeParams;
				Out_FormParams15_g170191 = Data15_g170191.FormParams;
				Out_LandParams15_g170191 = Data15_g170191.LandParams;
				Out_WindParams15_g170191 = Data15_g170191.WindParams;
				Out_PushParams15_g170191 = Data15_g170191.PushParams;
				}
				half4 Global_AtmoParams314_g170190 = Out_AtmoParams15_g170191;
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170190 = ( (Global_AtmoParams314_g170190).x * TVE_IsEnabled );
				#else
				float staticSwitch351_g170190 = 1.0;
				#endif
				half Dryness_GlobalMask352_g170190 = staticSwitch351_g170190;
				float3 lerpResult485_g170190 = lerp( Visual_Albedo292_g170190 , temp_cast_39 , ( Dryness_GlobalMask352_g170190 * _DrynessGrayValue ));
				half3 hsvTorgb58_g170212 = RGBToHSV( lerpResult485_g170190 );
				half3 hsvTorgb61_g170212 = HSVToRGB( half3(( hsvTorgb58_g170212.x + _DrynessShiftValue ),hsvTorgb58_g170212.y,hsvTorgb58_g170212.z) );
				#ifdef TVE_DRYNESS_SHIFT
				float3 staticSwitch499_g170190 = hsvTorgb61_g170212;
				#else
				float3 staticSwitch499_g170190 = lerpResult485_g170190;
				#endif
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170211 = 2.0;
				#else
				float staticSwitch1_g170211 = 4.594794;
				#endif
				half Dryness_TexMask478_g170190 = 1.0;
				float temp_output_280_11_g170190 = Out_MultiMask4_g170192;
				half Visual_MultiMask310_g170190 = temp_output_280_11_g170190;
				float lerpResult283_g170190 = lerp( 1.0 , Visual_MultiMask310_g170190 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170190 = lerpResult283_g170190;
				float temp_output_280_15_g170190 = Out_Luminosity4_g170192;
				half Visual_Luminosity309_g170190 = temp_output_280_15_g170190;
				float clampResult17_g170207 = clamp( Visual_Luminosity309_g170190 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170206 = _DrynessLumaRemap.x;
				float temp_output_10_0_g170206 = ( _DrynessLumaRemap.y - temp_output_7_0_g170206 );
				float lerpResult295_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170207 - temp_output_7_0_g170206 ) / ( temp_output_10_0_g170206 + 0.0001 ) ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170190 = lerpResult295_g170190;
				TVEModelData Data15_g170193 = Data16_g169262;
				float Out_Dummy15_g170193 = 0;
				float3 Out_PositionOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170193 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170193 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170193 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170193 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170193 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170193 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170193 = float3( 0,0,0 );
				float4 Out_VertexData15_g170193 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170193 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170193 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170193 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170193 = Data15_g170193.Dummy;
				Out_PositionOS15_g170193 = Data15_g170193.PositionOS;
				Out_PositionWS15_g170193 = Data15_g170193.PositionWS;
				Out_PositionWO15_g170193 = Data15_g170193.PositionWO;
				Out_PositionRawOS15_g170193 = Data15_g170193.PositionRawOS;
				Out_PositionAddOS15_g170193 = Data15_g170193.PositionAddOS;
				Out_PivotOS15_g170193 = Data15_g170193.PivotOS;
				Out_PivotWS15_g170193 = Data15_g170193.PivotWS;
				Out_PivotWO15_g170193 = Data15_g170193.PivotWO;
				Out_NormalOS15_g170193 = Data15_g170193.NormalOS;
				Out_NormalWS15_g170193 = Data15_g170193.NormalWS;
				Out_NormalRawOS15_g170193 = Data15_g170193.NormalRawOS;
				Out_NormalRawWS15_g170193 = Data15_g170193.NormalRawWS;
				Out_TangentOS15_g170193 = Data15_g170193.TangentOS;
				Out_ViewDirWS15_g170193 = Data15_g170193.ViewDirWS;
				Out_VertexData15_g170193 = Data15_g170193.VertexData;
				Out_MotionData15_g170193 = Data15_g170193.MotionData;
				Out_BoundsData15_g170193 = Data15_g170193.BoundsData;
				Out_RotationData15_g170193 = Data15_g170193.RotationData;
				}
				half4 Model_VertexMasks386_g170190 = Out_VertexData15_g170193;
				float4 break375_g170190 = Model_VertexMasks386_g170190;
				float4 break33_g170200 = _dryness_vert_mode;
				float temp_output_30_0_g170200 = ( break375_g170190.x * break33_g170200.x );
				float temp_output_29_0_g170200 = ( break375_g170190.y * break33_g170200.y );
				float temp_output_31_0_g170200 = ( break375_g170190.z * break33_g170200.z );
				float temp_output_28_0_g170200 = ( temp_output_30_0_g170200 + temp_output_29_0_g170200 + temp_output_31_0_g170200 + ( break375_g170190.w * break33_g170200.w ) );
				float clampResult17_g170201 = clamp( temp_output_28_0_g170200 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170202 = _DrynessMeshRemap.x;
				float temp_output_10_0_g170202 = ( _DrynessMeshRemap.y - temp_output_7_0_g170202 );
				float lerpResult452_g170190 = lerp( 1.0 , saturate( ( ( clampResult17_g170201 - temp_output_7_0_g170202 ) / ( temp_output_10_0_g170202 + 0.0001 ) ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170208 = lerpResult452_g170190;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170208 = ( temp_output_6_0_g170208 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170208 = temp_output_6_0_g170208;
				#endif
				float temp_output_448_0_g170190 = staticSwitch14_g170208;
				half Dryness_VertMask378_g170190 = temp_output_448_0_g170190;
				half Dryness_MaskNoise291_g170190 = 1.0;
				half Custom_Mask411_g170190 = 1.0;
				float temp_output_7_0_g170205 = _DrynessBlendRemap.x;
				float temp_output_10_0_g170205 = ( _DrynessBlendRemap.y - temp_output_7_0_g170205 );
				half Dryness_Mask329_g170190 = saturate( ( ( ( _DrynessIntensityValue * Dryness_TexMask478_g170190 * Dryness_MultiMask302_g170190 * Dryness_LumaMask301_g170190 * Dryness_VertMask378_g170190 * Dryness_MaskNoise291_g170190 * Dryness_GlobalMask352_g170190 * Custom_Mask411_g170190 ) - temp_output_7_0_g170205 ) / ( temp_output_10_0_g170205 + 0.0001 ) ) );
				float3 lerpResult336_g170190 = lerp( Visual_Albedo292_g170190 , ( staticSwitch499_g170190 * staticSwitch1_g170211 * (_DrynessColor).rgb ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170190 = lerpResult336_g170190;
				#else
				float3 staticSwitch356_g170190 = Visual_Albedo292_g170190;
				#endif
				half3 Final_Albedo331_g170190 = staticSwitch356_g170190;
				float3 In_Albedo3_g170194 = Final_Albedo331_g170190;
				float2 In_NormalTS3_g170194 = Out_NormalTS4_g170192;
				float3 In_NormalWS3_g170194 = Out_NormalWS4_g170192;
				half4 Visual_Shader415_g170190 = Out_Shader4_g170192;
				float4 break438_g170190 = Visual_Shader415_g170190;
				float4 appendResult439_g170190 = (float4(break438_g170190.x , break438_g170190.y , break438_g170190.z , ( break438_g170190.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170190 = lerp( Visual_Shader415_g170190 , appendResult439_g170190 , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170190 = lerpResult427_g170190;
				#else
				float4 staticSwitch426_g170190 = Visual_Shader415_g170190;
				#endif
				half4 Final_Shader433_g170190 = staticSwitch426_g170190;
				float4 In_Shader3_g170194 = Final_Shader433_g170190;
				float4 In_Emissive3_g170194 = Out_Emissive4_g170192;
				float In_Grayscale3_g170194 = temp_output_280_12_g170190;
				float In_Luminosity3_g170194 = temp_output_280_15_g170190;
				float In_MultiMask3_g170194 = temp_output_280_11_g170190;
				float In_AlphaClip3_g170194 = Out_AlphaClip4_g170192;
				float In_AlphaFade3_g170194 = Out_AlphaFade4_g170192;
				float3 In_Translucency3_g170194 = Out_Translucency4_g170192;
				half Visual_Transmission416_g170190 = Out_Transmission4_g170192;
				float lerpResult421_g170190 = lerp( Visual_Transmission416_g170190 , ( Visual_Transmission416_g170190 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170190);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170190 = lerpResult421_g170190;
				#else
				float staticSwitch418_g170190 = Visual_Transmission416_g170190;
				#endif
				half Final_Transmission425_g170190 = staticSwitch418_g170190;
				float In_Transmission3_g170194 = Final_Transmission425_g170190;
				float In_Thickness3_g170194 = Out_Thickness4_g170192;
				float In_Diffusion3_g170194 = Out_Diffusion4_g170192;
				{
				Data3_g170194.Dummy = In_Dummy3_g170194;
				Data3_g170194.Albedo = In_Albedo3_g170194;
				Data3_g170194.NormalTS = In_NormalTS3_g170194;
				Data3_g170194.NormalWS = In_NormalWS3_g170194;
				Data3_g170194.Shader = In_Shader3_g170194;
				Data3_g170194.Emissive= In_Emissive3_g170194;
				Data3_g170194.MultiMask = In_MultiMask3_g170194;
				Data3_g170194.Grayscale = In_Grayscale3_g170194;
				Data3_g170194.Luminosity = In_Luminosity3_g170194;
				Data3_g170194.AlphaClip = In_AlphaClip3_g170194;
				Data3_g170194.AlphaFade = In_AlphaFade3_g170194;
				Data3_g170194.Translucency = In_Translucency3_g170194;
				Data3_g170194.Transmission = In_Transmission3_g170194;
				Data3_g170194.Thickness = In_Thickness3_g170194;
				Data3_g170194.Diffusion = In_Diffusion3_g170194;
				}
				TVEVisualData Data4_g170320 = Data3_g170194;
				float Out_Dummy4_g170320 = 0;
				float3 Out_Albedo4_g170320 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170320 = float2( 0,0 );
				float3 Out_NormalWS4_g170320 = float3( 0,0,0 );
				float4 Out_Shader4_g170320 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170320 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170320 = 0;
				float Out_Grayscale4_g170320 = 0;
				float Out_Luminosity4_g170320 = 0;
				float Out_AlphaClip4_g170320 = 0;
				float Out_AlphaFade4_g170320 = 0;
				float3 Out_Translucency4_g170320 = float3( 0,0,0 );
				float Out_Transmission4_g170320 = 0;
				float Out_Thickness4_g170320 = 0;
				float Out_Diffusion4_g170320 = 0;
				{
				Out_Dummy4_g170320 = Data4_g170320.Dummy;
				Out_Albedo4_g170320 = Data4_g170320.Albedo;
				Out_NormalTS4_g170320 = Data4_g170320.NormalTS;
				Out_NormalWS4_g170320 = Data4_g170320.NormalWS;
				Out_Shader4_g170320 = Data4_g170320.Shader;
				Out_Emissive4_g170320= Data4_g170320.Emissive;
				Out_MultiMask4_g170320 = Data4_g170320.MultiMask;
				Out_Grayscale4_g170320 = Data4_g170320.Grayscale;
				Out_Luminosity4_g170320= Data4_g170320.Luminosity;
				Out_AlphaClip4_g170320 = Data4_g170320.AlphaClip;
				Out_AlphaFade4_g170320 = Data4_g170320.AlphaFade;
				Out_Translucency4_g170320 = Data4_g170320.Translucency;
				Out_Transmission4_g170320 = Data4_g170320.Transmission;
				Out_Thickness4_g170320 = Data4_g170320.Thickness;
				Out_Diffusion4_g170320 = Data4_g170320.Diffusion;
				}
				half3 Visual_Albedo127_g170319 = Out_Albedo4_g170320;
				float4 vertexToFrag24_g170165 = IN.ase_texcoord9;
				half4 Interp_Data1269 = vertexToFrag24_g170165;
				float clampResult208_g170319 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g170319 = ( Visual_Albedo127_g170319 + ( ( Visual_Albedo127_g170319 * Visual_Albedo127_g170319 * 200.0 * _motion_highlight_color ) * clampResult208_g170319 ) );
				#else
				float3 staticSwitch209_g170319 = Visual_Albedo127_g170319;
				#endif
				half3 Final_Albedo160_g170319 = staticSwitch209_g170319;
				float3 In_Albedo3_g170321 = Final_Albedo160_g170319;
				float2 In_NormalTS3_g170321 = Out_NormalTS4_g170320;
				float3 In_NormalWS3_g170321 = Out_NormalWS4_g170320;
				float4 In_Shader3_g170321 = Out_Shader4_g170320;
				float4 In_Emissive3_g170321 = Out_Emissive4_g170320;
				float In_Grayscale3_g170321 = Out_Grayscale4_g170320;
				float In_Luminosity3_g170321 = Out_Luminosity4_g170320;
				float In_MultiMask3_g170321 = Out_MultiMask4_g170320;
				float In_AlphaClip3_g170321 = Out_AlphaClip4_g170320;
				float In_AlphaFade3_g170321 = Out_AlphaFade4_g170320;
				float3 In_Translucency3_g170321 = Out_Translucency4_g170320;
				float In_Transmission3_g170321 = Out_Transmission4_g170320;
				float In_Thickness3_g170321 = Out_Thickness4_g170320;
				float In_Diffusion3_g170321 = Out_Diffusion4_g170320;
				{
				Data3_g170321.Dummy = In_Dummy3_g170321;
				Data3_g170321.Albedo = In_Albedo3_g170321;
				Data3_g170321.NormalTS = In_NormalTS3_g170321;
				Data3_g170321.NormalWS = In_NormalWS3_g170321;
				Data3_g170321.Shader = In_Shader3_g170321;
				Data3_g170321.Emissive= In_Emissive3_g170321;
				Data3_g170321.MultiMask = In_MultiMask3_g170321;
				Data3_g170321.Grayscale = In_Grayscale3_g170321;
				Data3_g170321.Luminosity = In_Luminosity3_g170321;
				Data3_g170321.AlphaClip = In_AlphaClip3_g170321;
				Data3_g170321.AlphaFade = In_AlphaFade3_g170321;
				Data3_g170321.Translucency = In_Translucency3_g170321;
				Data3_g170321.Transmission = In_Transmission3_g170321;
				Data3_g170321.Thickness = In_Thickness3_g170321;
				Data3_g170321.Diffusion = In_Diffusion3_g170321;
				}
				TVEVisualData Data4_g170323 = Data3_g170321;
				float Out_Dummy4_g170323 = 0;
				float3 Out_Albedo4_g170323 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170323 = float2( 0,0 );
				float3 Out_NormalWS4_g170323 = float3( 0,0,0 );
				float4 Out_Shader4_g170323 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170323 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170323 = 0;
				float Out_Grayscale4_g170323 = 0;
				float Out_Luminosity4_g170323 = 0;
				float Out_AlphaClip4_g170323 = 0;
				float Out_AlphaFade4_g170323 = 0;
				float3 Out_Translucency4_g170323 = float3( 0,0,0 );
				float Out_Transmission4_g170323 = 0;
				float Out_Thickness4_g170323 = 0;
				float Out_Diffusion4_g170323 = 0;
				{
				Out_Dummy4_g170323 = Data4_g170323.Dummy;
				Out_Albedo4_g170323 = Data4_g170323.Albedo;
				Out_NormalTS4_g170323 = Data4_g170323.NormalTS;
				Out_NormalWS4_g170323 = Data4_g170323.NormalWS;
				Out_Shader4_g170323 = Data4_g170323.Shader;
				Out_Emissive4_g170323= Data4_g170323.Emissive;
				Out_MultiMask4_g170323 = Data4_g170323.MultiMask;
				Out_Grayscale4_g170323 = Data4_g170323.Grayscale;
				Out_Luminosity4_g170323= Data4_g170323.Luminosity;
				Out_AlphaClip4_g170323 = Data4_g170323.AlphaClip;
				Out_AlphaFade4_g170323 = Data4_g170323.AlphaFade;
				Out_Translucency4_g170323 = Data4_g170323.Translucency;
				Out_Transmission4_g170323 = Data4_g170323.Transmission;
				Out_Thickness4_g170323 = Data4_g170323.Thickness;
				Out_Diffusion4_g170323 = Data4_g170323.Diffusion;
				}
				half3 Visual_Albedo127_g170322 = Out_Albedo4_g170323;
				float3 temp_output_622_0_g170322 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler238_g170326 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170327 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170327 = ( temp_output_6_0_g170327 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170327 = temp_output_6_0_g170327;
				#endif
				half4 Overlay_Coords639_g170322 = staticSwitch14_g170327;
				float4 temp_output_37_0_g170326 = Overlay_Coords639_g170322;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				TVEModelData Data15_g170328 = Data16_g169262;
				float Out_Dummy15_g170328 = 0;
				float3 Out_PositionOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170328 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170328 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170328 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170328 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170328 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170328 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170328 = float3( 0,0,0 );
				float4 Out_VertexData15_g170328 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170328 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170328 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170328 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170328 = Data15_g170328.Dummy;
				Out_PositionOS15_g170328 = Data15_g170328.PositionOS;
				Out_PositionWS15_g170328 = Data15_g170328.PositionWS;
				Out_PositionWO15_g170328 = Data15_g170328.PositionWO;
				Out_PositionRawOS15_g170328 = Data15_g170328.PositionRawOS;
				Out_PositionAddOS15_g170328 = Data15_g170328.PositionAddOS;
				Out_PivotOS15_g170328 = Data15_g170328.PivotOS;
				Out_PivotWS15_g170328 = Data15_g170328.PivotWS;
				Out_PivotWO15_g170328 = Data15_g170328.PivotWO;
				Out_NormalOS15_g170328 = Data15_g170328.NormalOS;
				Out_NormalWS15_g170328 = Data15_g170328.NormalWS;
				Out_NormalRawOS15_g170328 = Data15_g170328.NormalRawOS;
				Out_NormalRawWS15_g170328 = Data15_g170328.NormalRawWS;
				Out_TangentOS15_g170328 = Data15_g170328.TangentOS;
				Out_ViewDirWS15_g170328 = Data15_g170328.ViewDirWS;
				Out_VertexData15_g170328 = Data15_g170328.VertexData;
				Out_MotionData15_g170328 = Data15_g170328.MotionData;
				Out_BoundsData15_g170328 = Data15_g170328.BoundsData;
				Out_RotationData15_g170328 = Data15_g170328.RotationData;
				}
				half3 Model_PositionWO602_g170322 = Out_PositionWO15_g170328;
				float3 temp_output_279_0_g170326 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170326 = sampler_Linear_Repeat;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				half3 Model_NormalWS712_g170322 = Out_NormalWS15_g170328;
				float3 temp_output_280_0_g170326 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170326 = sampler_Linear_Repeat;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170326) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170326 = sampler_Linear_Repeat;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170322 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170322 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170322 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch676_g170322 = localSamplePlanar2D238_g170326;
				#endif
				half3 Overlay_Albedo526_g170322 = (staticSwitch676_g170322).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170322 = ( temp_output_622_0_g170322 * Overlay_Albedo526_g170322 );
				#else
				float3 staticSwitch578_g170322 = temp_output_622_0_g170322;
				#endif
				float3 temp_output_6_0_g170334 = staticSwitch578_g170322;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170334 = ( temp_output_6_0_g170334 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170334 = temp_output_6_0_g170334;
				#endif
				float3 temp_cast_40 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170331) = _OverlayGlitterTex;
				SamplerState Sampler246_g170331 = sampler_Linear_Repeat;
				float4 appendResult863_g170322 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170331 = appendResult863_g170322;
				half4 Coords246_g170331 = temp_output_37_0_g170331;
				float3 temp_output_279_0_g170331 = Model_PositionWO602_g170322;
				half3 WorldPosition246_g170331 = temp_output_279_0_g170331;
				float3 temp_output_280_0_g170331 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170331 = temp_output_280_0_g170331;
				half4 localSamplePlanar3D246_g170331 = SamplePlanar3D( Texture246_g170331 , Sampler246_g170331 , Coords246_g170331 , WorldPosition246_g170331 , WorldNormal246_g170331 );
				half Overlay_GlitterTex854_g170322 = (localSamplePlanar3D246_g170331).x;
				half3 Model_PositionWS879_g170322 = Out_PositionWS15_g170328;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170322 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170322 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170322 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170322 = temp_cast_40;
				#endif
				half3 Overlay_GlitterColor865_g170322 = staticSwitch868_g170322;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170348) = _OverlayMaskTex;
				SamplerState Sampler276_g170348 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170349 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170349 = ( temp_output_6_0_g170349 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170349 = temp_output_6_0_g170349;
				#endif
				half4 Local_MaskCoords888_g170322 = staticSwitch14_g170349;
				float4 temp_output_37_0_g170348 = Local_MaskCoords888_g170322;
				half4 Coords276_g170348 = temp_output_37_0_g170348;
				half2 TexCoord276_g170348 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170348 = SampleMain( Texture276_g170348 , Sampler276_g170348 , Coords276_g170348 , TexCoord276_g170348 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170348) = _OverlayMaskTex;
				SamplerState Sampler275_g170348 = sampler_Linear_Repeat;
				half4 Coords275_g170348 = temp_output_37_0_g170348;
				half2 TexCoord275_g170348 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170348 = SampleExtra( Texture275_g170348 , Sampler275_g170348 , Coords275_g170348 , TexCoord275_g170348 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170322 = localSampleExtra275_g170348;
				#else
				float4 staticSwitch894_g170322 = localSampleMain276_g170348;
				#endif
				half4 Local_MaskTex887_g170322 = staticSwitch894_g170322;
				float clampResult17_g170350 = clamp( (Local_MaskTex887_g170322).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170351 = ( _OverlayMaskRemap.y - temp_output_7_0_g170351 );
				float lerpResult900_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask908_g170322 = lerpResult900_g170322;
				float3 temp_output_739_21_g170322 = Out_NormalWS4_g170323;
				half3 Visual_NormalWS749_g170322 = temp_output_739_21_g170322;
				float clampResult17_g170344 = clamp( saturate( (Visual_NormalWS749_g170322).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170343 = _OverlayProjRemap.x;
				float temp_output_10_0_g170343 = ( _OverlayProjRemap.y - temp_output_7_0_g170343 );
				float lerpResult842_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170344 - temp_output_7_0_g170343 ) / ( temp_output_10_0_g170343 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170322 = lerpResult842_g170322;
				float temp_output_739_15_g170322 = Out_Luminosity4_g170323;
				half Visual_Luminosity654_g170322 = temp_output_739_15_g170322;
				float clampResult17_g170346 = clamp( Visual_Luminosity654_g170322 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170345 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170345 = ( _OverlayLumaRemap.y - temp_output_7_0_g170345 );
				float lerpResult587_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170345 ) / ( temp_output_10_0_g170345 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170322 = lerpResult587_g170322;
				half4 Model_VertexMasks791_g170322 = Out_VertexData15_g170328;
				float4 break792_g170322 = Model_VertexMasks791_g170322;
				float4 break33_g170336 = _overlay_vert_mode;
				float temp_output_30_0_g170336 = ( break792_g170322.x * break33_g170336.x );
				float temp_output_29_0_g170336 = ( break792_g170322.y * break33_g170336.y );
				float temp_output_31_0_g170336 = ( break792_g170322.z * break33_g170336.z );
				float temp_output_28_0_g170336 = ( temp_output_30_0_g170336 + temp_output_29_0_g170336 + temp_output_31_0_g170336 + ( break792_g170322.w * break33_g170336.w ) );
				float clampResult17_g170337 = clamp( temp_output_28_0_g170336 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170340 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170340 = ( _OverlayMeshRemap.y - temp_output_7_0_g170340 );
				float lerpResult881_g170322 = lerp( 1.0 , saturate( ( ( clampResult17_g170337 - temp_output_7_0_g170340 ) / ( temp_output_10_0_g170340 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170347 = lerpResult881_g170322;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170347 = ( temp_output_6_0_g170347 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170347 = temp_output_6_0_g170347;
				#endif
				float temp_output_831_0_g170322 = staticSwitch14_g170347;
				half Overlay_VertMask801_g170322 = temp_output_831_0_g170322;
				half Overlay_MaskNoise427_g170322 = 1.0;
				TVEGlobalData Data15_g170324 = Data204_g169264;
				float Out_Dummy15_g170324 = 0;
				float4 Out_CoatParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170324 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170324 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170324 = Data15_g170324.Dummy;
				Out_CoatParams15_g170324 = Data15_g170324.CoatParams;
				Out_PaintParams15_g170324 = Data15_g170324.PaintParams;
				Out_GlowParams15_g170324 = Data15_g170324.GlowParams;
				Out_AtmoParams15_g170324= Data15_g170324.AtmoParams;
				Out_FadeParams15_g170324= Data15_g170324.FadeParams;
				Out_FormParams15_g170324 = Data15_g170324.FormParams;
				Out_LandParams15_g170324 = Data15_g170324.LandParams;
				Out_WindParams15_g170324 = Data15_g170324.WindParams;
				Out_PushParams15_g170324 = Data15_g170324.PushParams;
				}
				half4 Global_AtmoParams516_g170322 = Out_AtmoParams15_g170324;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170322 = ( (Global_AtmoParams516_g170322).z * TVE_IsEnabled );
				#else
				float staticSwitch705_g170322 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170322 = staticSwitch705_g170322;
				half Custom_Mask646_g170322 = 1.0;
				float temp_output_7_0_g170352 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170352 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170352 );
				half Overlay_Mask494_g170322 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask908_g170322 * Overlay_MaskProj457_g170322 * Overlay_MaskLuma438_g170322 * Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 * Custom_Mask646_g170322 ) - temp_output_7_0_g170352 ) / ( temp_output_10_0_g170352 + 0.0001 ) ) );
				float3 lerpResult467_g170322 = lerp( Visual_Albedo127_g170322 , ( staticSwitch14_g170334 + Overlay_GlitterColor865_g170322 ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170322 = lerpResult467_g170322;
				#else
				float3 staticSwitch577_g170322 = Visual_Albedo127_g170322;
				#endif
				half3 Final_Albedo493_g170322 = staticSwitch577_g170322;
				float3 In_Albedo3_g170325 = Final_Albedo493_g170322;
				half2 Visual_NormalTS535_g170322 = Out_NormalTS4_g170323;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170329) = _OverlayNormalTex;
				SamplerState Sampler238_g170329 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g170329 = Overlay_Coords639_g170322;
				half4 Coords238_g170329 = temp_output_37_0_g170329;
				float3 temp_output_279_0_g170329 = Model_PositionWO602_g170322;
				half3 WorldPosition238_g170329 = temp_output_279_0_g170329;
				half4 localSamplePlanar2D238_g170329 = SamplePlanar2D( Texture238_g170329 , Sampler238_g170329 , Coords238_g170329 , WorldPosition238_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170329) = _OverlayNormalTex;
				SamplerState Sampler246_g170329 = sampler_Linear_Repeat;
				half4 Coords246_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition246_g170329 = temp_output_279_0_g170329;
				float3 temp_output_280_0_g170329 = Model_NormalWS712_g170322;
				half3 WorldNormal246_g170329 = temp_output_280_0_g170329;
				half4 localSamplePlanar3D246_g170329 = SamplePlanar3D( Texture246_g170329 , Sampler246_g170329 , Coords246_g170329 , WorldPosition246_g170329 , WorldNormal246_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170329) = _OverlayNormalTex;
				SamplerState Sampler234_g170329 = sampler_Linear_Repeat;
				float4 Coords234_g170329 = temp_output_37_0_g170329;
				float3 WorldPosition234_g170329 = temp_output_279_0_g170329;
				float4 localSampleStochastic2D234_g170329 = SampleStochastic2D( Texture234_g170329 , Sampler234_g170329 , Coords234_g170329 , WorldPosition234_g170329 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170329) = _OverlayNormalTex;
				SamplerState Sampler263_g170329 = sampler_Linear_Repeat;
				half4 Coords263_g170329 = temp_output_37_0_g170329;
				half3 WorldPosition263_g170329 = temp_output_279_0_g170329;
				half3 WorldNormal263_g170329 = temp_output_280_0_g170329;
				half4 localSampleStochastic3D263_g170329 = SampleStochastic3D( Texture263_g170329 , Sampler263_g170329 , Coords263_g170329 , WorldPosition263_g170329 , WorldNormal263_g170329 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170322 = localSamplePlanar3D246_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170322 = localSampleStochastic2D234_g170329;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170322 = localSampleStochastic3D263_g170329;
				#else
				float4 staticSwitch686_g170322 = localSamplePlanar2D238_g170329;
				#endif
				half4 Normal_Packed45_g170333 = staticSwitch686_g170322;
				float2 appendResult58_g170333 = (float2(( (Normal_Packed45_g170333).x * (Normal_Packed45_g170333).w ) , (Normal_Packed45_g170333).y));
				half2 Normal_Default50_g170333 = appendResult58_g170333;
				half2 Normal_ASTC41_g170333 = (Normal_Packed45_g170333).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170333 = Normal_ASTC41_g170333;
				#else
				float2 staticSwitch38_g170333 = Normal_Default50_g170333;
				#endif
				half2 Normal_NO_DTX544_g170333 = (Normal_Packed45_g170333).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170333 = Normal_NO_DTX544_g170333;
				#else
				float2 staticSwitch37_g170333 = staticSwitch38_g170333;
				#endif
				half2 Normal_Planar45_g170332 = (staticSwitch37_g170333*2.0 + -1.0);
				float2 break71_g170332 = Normal_Planar45_g170332;
				float3 appendResult72_g170332 = (float3(break71_g170332.x , 0.0 , break71_g170332.y));
				half2 Overlay_Normal528_g170322 = (mul( ase_worldToTangent, appendResult72_g170332 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170322 = Overlay_Normal528_g170322;
				#else
				float2 staticSwitch579_g170322 = Visual_NormalTS535_g170322;
				#endif
				float2 lerpResult551_g170322 = lerp( Visual_NormalTS535_g170322 , ( staticSwitch579_g170322 * _OverlayNormalValue ) , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170322 = lerpResult551_g170322;
				#else
				float2 staticSwitch583_g170322 = Visual_NormalTS535_g170322;
				#endif
				half2 Final_NormalTS499_g170322 = staticSwitch583_g170322;
				float2 In_NormalTS3_g170325 = Final_NormalTS499_g170322;
				float3 In_NormalWS3_g170325 = temp_output_739_21_g170322;
				half4 Visual_Masks536_g170322 = Out_Shader4_g170323;
				float4 appendResult585_g170322 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170322 = lerp( Visual_Masks536_g170322 , appendResult585_g170322 , Overlay_Mask494_g170322);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170322 = lerpResult584_g170322;
				#else
				float4 staticSwitch586_g170322 = Visual_Masks536_g170322;
				#endif
				half4 Final_Masks482_g170322 = staticSwitch586_g170322;
				float4 In_Shader3_g170325 = Final_Masks482_g170322;
				float4 In_Emissive3_g170325 = Out_Emissive4_g170323;
				float temp_output_739_12_g170322 = Out_Grayscale4_g170323;
				float In_Grayscale3_g170325 = temp_output_739_12_g170322;
				float In_Luminosity3_g170325 = temp_output_739_15_g170322;
				float In_MultiMask3_g170325 = Out_MultiMask4_g170323;
				float In_AlphaClip3_g170325 = Out_AlphaClip4_g170323;
				float In_AlphaFade3_g170325 = Out_AlphaFade4_g170323;
				float3 In_Translucency3_g170325 = Out_Translucency4_g170323;
				half Visual_Transmission699_g170322 = Out_Transmission4_g170323;
				float lerpResult746_g170322 = lerp( Visual_Transmission699_g170322 , ( Visual_Transmission699_g170322 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170322 * Overlay_MaskNoise427_g170322 * Overlay_MaskGlobal429_g170322 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170322 = lerpResult746_g170322;
				#else
				float staticSwitch703_g170322 = Visual_Transmission699_g170322;
				#endif
				half Final_Transmission702_g170322 = staticSwitch703_g170322;
				float In_Transmission3_g170325 = Final_Transmission702_g170322;
				float In_Thickness3_g170325 = Out_Thickness4_g170323;
				float In_Diffusion3_g170325 = Out_Diffusion4_g170323;
				{
				Data3_g170325.Dummy = In_Dummy3_g170325;
				Data3_g170325.Albedo = In_Albedo3_g170325;
				Data3_g170325.NormalTS = In_NormalTS3_g170325;
				Data3_g170325.NormalWS = In_NormalWS3_g170325;
				Data3_g170325.Shader = In_Shader3_g170325;
				Data3_g170325.Emissive= In_Emissive3_g170325;
				Data3_g170325.MultiMask = In_MultiMask3_g170325;
				Data3_g170325.Grayscale = In_Grayscale3_g170325;
				Data3_g170325.Luminosity = In_Luminosity3_g170325;
				Data3_g170325.AlphaClip = In_AlphaClip3_g170325;
				Data3_g170325.AlphaFade = In_AlphaFade3_g170325;
				Data3_g170325.Translucency = In_Translucency3_g170325;
				Data3_g170325.Transmission = In_Transmission3_g170325;
				Data3_g170325.Thickness = In_Thickness3_g170325;
				Data3_g170325.Diffusion = In_Diffusion3_g170325;
				}
				TVEVisualData Data4_g170359 = Data3_g170325;
				float Out_Dummy4_g170359 = 0;
				float3 Out_Albedo4_g170359 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170359 = float2( 0,0 );
				float3 Out_NormalWS4_g170359 = float3( 0,0,0 );
				float4 Out_Shader4_g170359 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170359 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170359 = 0;
				float Out_Grayscale4_g170359 = 0;
				float Out_Luminosity4_g170359 = 0;
				float Out_AlphaClip4_g170359 = 0;
				float Out_AlphaFade4_g170359 = 0;
				float3 Out_Translucency4_g170359 = float3( 0,0,0 );
				float Out_Transmission4_g170359 = 0;
				float Out_Thickness4_g170359 = 0;
				float Out_Diffusion4_g170359 = 0;
				{
				Out_Dummy4_g170359 = Data4_g170359.Dummy;
				Out_Albedo4_g170359 = Data4_g170359.Albedo;
				Out_NormalTS4_g170359 = Data4_g170359.NormalTS;
				Out_NormalWS4_g170359 = Data4_g170359.NormalWS;
				Out_Shader4_g170359 = Data4_g170359.Shader;
				Out_Emissive4_g170359= Data4_g170359.Emissive;
				Out_MultiMask4_g170359 = Data4_g170359.MultiMask;
				Out_Grayscale4_g170359 = Data4_g170359.Grayscale;
				Out_Luminosity4_g170359= Data4_g170359.Luminosity;
				Out_AlphaClip4_g170359 = Data4_g170359.AlphaClip;
				Out_AlphaFade4_g170359 = Data4_g170359.AlphaFade;
				Out_Translucency4_g170359 = Data4_g170359.Translucency;
				Out_Transmission4_g170359 = Data4_g170359.Transmission;
				Out_Thickness4_g170359 = Data4_g170359.Thickness;
				Out_Diffusion4_g170359 = Data4_g170359.Diffusion;
				}
				half3 Visual_Albedo127_g170358 = Out_Albedo4_g170359;
				TVEGlobalData Data15_g170371 = Data204_g169264;
				float Out_Dummy15_g170371 = 0;
				float4 Out_CoatParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170371 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_CoatParams15_g170371 = Data15_g170371.CoatParams;
				Out_PaintParams15_g170371 = Data15_g170371.PaintParams;
				Out_GlowParams15_g170371 = Data15_g170371.GlowParams;
				Out_AtmoParams15_g170371= Data15_g170371.AtmoParams;
				Out_FadeParams15_g170371= Data15_g170371.FadeParams;
				Out_FormParams15_g170371 = Data15_g170371.FormParams;
				Out_LandParams15_g170371 = Data15_g170371.LandParams;
				Out_WindParams15_g170371 = Data15_g170371.WindParams;
				Out_PushParams15_g170371 = Data15_g170371.PushParams;
				}
				half4 Global_AtmoParams516_g170358 = Out_AtmoParams15_g170371;
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch663_g170358 = ( (Global_AtmoParams516_g170358).y * TVE_IsEnabled );
				#else
				float staticSwitch663_g170358 = 1.0;
				#endif
				half Global_Wetness429_g170358 = staticSwitch663_g170358;
				half Wetness_Value866_g170358 = ( _WetnessIntensityValue * Global_Wetness429_g170358 );
				half4 Visual_Masks536_g170358 = Out_Shader4_g170359;
				float temp_output_757_0_g170358 = (Visual_Masks536_g170358).z;
				half Water_HeightMask782_g170358 = temp_output_757_0_g170358;
				float clampResult17_g170369 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Value866_g170358 ) - Water_HeightMask782_g170358 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170370 = _WetnessWaterBlendRemap.x;
				float temp_output_10_0_g170370 = ( _WetnessWaterBlendRemap.y - temp_output_7_0_g170370 );
				TVEModelData Data15_g170361 = Data16_g169262;
				float Out_Dummy15_g170361 = 0;
				float3 Out_PositionOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170361 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170361 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170361 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170361 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170361 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170361 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170361 = float3( 0,0,0 );
				float4 Out_VertexData15_g170361 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170361 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170361 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170361 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170361 = Data15_g170361.Dummy;
				Out_PositionOS15_g170361 = Data15_g170361.PositionOS;
				Out_PositionWS15_g170361 = Data15_g170361.PositionWS;
				Out_PositionWO15_g170361 = Data15_g170361.PositionWO;
				Out_PositionRawOS15_g170361 = Data15_g170361.PositionRawOS;
				Out_PositionAddOS15_g170361 = Data15_g170361.PositionAddOS;
				Out_PivotOS15_g170361 = Data15_g170361.PivotOS;
				Out_PivotWS15_g170361 = Data15_g170361.PivotWS;
				Out_PivotWO15_g170361 = Data15_g170361.PivotWO;
				Out_NormalOS15_g170361 = Data15_g170361.NormalOS;
				Out_NormalWS15_g170361 = Data15_g170361.NormalWS;
				Out_NormalRawOS15_g170361 = Data15_g170361.NormalRawOS;
				Out_NormalRawWS15_g170361 = Data15_g170361.NormalRawWS;
				Out_TangentOS15_g170361 = Data15_g170361.TangentOS;
				Out_ViewDirWS15_g170361 = Data15_g170361.ViewDirWS;
				Out_VertexData15_g170361 = Data15_g170361.VertexData;
				Out_MotionData15_g170361 = Data15_g170361.MotionData;
				Out_BoundsData15_g170361 = Data15_g170361.BoundsData;
				Out_RotationData15_g170361 = Data15_g170361.RotationData;
				}
				half3 Model_NormalWS798_g170358 = Out_NormalWS15_g170361;
				float temp_output_786_0_g170358 = saturate( (Model_NormalWS798_g170358).y );
				half Wetness_ProjMask790_g170358 = temp_output_786_0_g170358;
				half Water_Mask760_g170358 = ( saturate( ( ( clampResult17_g170369 - temp_output_7_0_g170370 ) / ( temp_output_10_0_g170370 + 0.0001 ) ) ) * Wetness_ProjMask790_g170358 );
				float3 lerpResult918_g170358 = lerp( Visual_Albedo127_g170358 , ( Visual_Albedo127_g170358 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170358 = lerpResult918_g170358;
				#else
				float3 staticSwitch946_g170358 = Visual_Albedo127_g170358;
				#endif
				float3 lerpResult768_g170358 = lerp( staticSwitch946_g170358 , ( staticSwitch946_g170358 * staticSwitch946_g170358 ) , _WetnessContrastValue);
				float3 lerpResult651_g170358 = lerp( Visual_Albedo127_g170358 , lerpResult768_g170358 , Wetness_Value866_g170358);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170358 = lerpResult651_g170358;
				#else
				float3 staticSwitch577_g170358 = Visual_Albedo127_g170358;
				#endif
				half3 Final_Albedo493_g170358 = staticSwitch577_g170358;
				float3 In_Albedo3_g170360 = Final_Albedo493_g170358;
				half2 Visual_Normal535_g170358 = Out_NormalTS4_g170359;
				float lerpResult877_g170358 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170358 = ( Visual_Normal535_g170358 * lerpResult877_g170358 );
				#else
				float2 staticSwitch957_g170358 = Visual_Normal535_g170358;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170363) = _WetnessDropsTex;
				SamplerState Sampler238_g170363 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170358 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170363 = appendResult924_g170358;
				half4 Coords238_g170363 = temp_output_37_0_g170363;
				half3 Model_PositionWO602_g170358 = Out_PositionWO15_g170361;
				float3 temp_output_279_0_g170363 = Model_PositionWO602_g170358;
				half3 WorldPosition238_g170363 = temp_output_279_0_g170363;
				half4 localSamplePlanar2D238_g170363 = SamplePlanar2D( Texture238_g170363 , Sampler238_g170363 , Coords238_g170363 , WorldPosition238_g170363 );
				float4 temp_output_676_0_g170358 = localSamplePlanar2D238_g170363;
				half2 Rain_DropsNormal919_g170358 = (temp_output_676_0_g170358).zw;
				float2 temp_output_903_0_g170358 = (Rain_DropsNormal919_g170358*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170358 = (temp_output_676_0_g170358).xy;
				float2 lerpResult904_g170358 = lerp( temp_output_903_0_g170358 , (Rain_RingsNormal713_g170358*2.0 + -1.0) , ( Water_Mask760_g170358 * Water_Mask760_g170358 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170358 = lerpResult904_g170358;
				#else
				float2 staticSwitch960_g170358 = temp_output_903_0_g170358;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float staticSwitch949_g170358 = ( (Global_AtmoParams516_g170358).w * TVE_IsEnabled );
				#else
				float staticSwitch949_g170358 = 1.0;
				#endif
				half Global_Rain955_g170358 = staticSwitch949_g170358;
				half3 Model_PositionWS823_g170358 = Out_PositionWS15_g170361;
				half2 Normal_Planar45_g170374 = ( staticSwitch960_g170358 * Global_Rain955_g170358 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170358 ) / _WetnessDropsDistValue ) ) ) );
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				half2 Wetness_Normal526_g170358 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170358 = ( staticSwitch957_g170358 + ( Wetness_ProjMask790_g170358 * Wetness_Normal526_g170358 ) );
				#else
				float2 staticSwitch583_g170358 = Visual_Normal535_g170358;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170358 = staticSwitch583_g170358;
				#else
				float2 staticSwitch774_g170358 = Visual_Normal535_g170358;
				#endif
				half2 Final_Normal499_g170358 = staticSwitch774_g170358;
				float2 In_NormalTS3_g170360 = Final_Normal499_g170358;
				float3 In_NormalWS3_g170360 = Out_NormalWS4_g170359;
				float4 break658_g170358 = Visual_Masks536_g170358;
				float temp_output_935_0_g170358 = ( Wetness_Value866_g170358 * _WetnessSmoothnessValue );
				float lerpResult941_g170358 = lerp( temp_output_935_0_g170358 , 2.0 , Water_Mask760_g170358);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170358 = lerpResult941_g170358;
				#else
				float staticSwitch959_g170358 = temp_output_935_0_g170358;
				#endif
				float4 appendResult661_g170358 = (float4(break658_g170358.x , break658_g170358.y , break658_g170358.z , saturate( ( break658_g170358.w + staticSwitch959_g170358 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170358 = appendResult661_g170358;
				#else
				float4 staticSwitch586_g170358 = Visual_Masks536_g170358;
				#endif
				half4 Final_Masks482_g170358 = staticSwitch586_g170358;
				float4 In_Shader3_g170360 = Final_Masks482_g170358;
				float4 In_Emissive3_g170360 = Out_Emissive4_g170359;
				float In_Grayscale3_g170360 = Out_Grayscale4_g170359;
				float In_Luminosity3_g170360 = Out_Luminosity4_g170359;
				float In_MultiMask3_g170360 = Out_MultiMask4_g170359;
				float In_AlphaClip3_g170360 = Out_AlphaClip4_g170359;
				float In_AlphaFade3_g170360 = Out_AlphaFade4_g170359;
				float3 In_Translucency3_g170360 = Out_Translucency4_g170359;
				float In_Transmission3_g170360 = Out_Transmission4_g170359;
				float In_Thickness3_g170360 = Out_Thickness4_g170359;
				float In_Diffusion3_g170360 = Out_Diffusion4_g170359;
				{
				Data3_g170360.Dummy = In_Dummy3_g170360;
				Data3_g170360.Albedo = In_Albedo3_g170360;
				Data3_g170360.NormalTS = In_NormalTS3_g170360;
				Data3_g170360.NormalWS = In_NormalWS3_g170360;
				Data3_g170360.Shader = In_Shader3_g170360;
				Data3_g170360.Emissive= In_Emissive3_g170360;
				Data3_g170360.MultiMask = In_MultiMask3_g170360;
				Data3_g170360.Grayscale = In_Grayscale3_g170360;
				Data3_g170360.Luminosity = In_Luminosity3_g170360;
				Data3_g170360.AlphaClip = In_AlphaClip3_g170360;
				Data3_g170360.AlphaFade = In_AlphaFade3_g170360;
				Data3_g170360.Translucency = In_Translucency3_g170360;
				Data3_g170360.Transmission = In_Transmission3_g170360;
				Data3_g170360.Thickness = In_Thickness3_g170360;
				Data3_g170360.Diffusion = In_Diffusion3_g170360;
				}
				TVEVisualData Data4_g170377 = Data3_g170360;
				float Out_Dummy4_g170377 = 0;
				float3 Out_Albedo4_g170377 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170377 = float2( 0,0 );
				float3 Out_NormalWS4_g170377 = float3( 0,0,0 );
				float4 Out_Shader4_g170377 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170377 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170377 = 0;
				float Out_Grayscale4_g170377 = 0;
				float Out_Luminosity4_g170377 = 0;
				float Out_AlphaClip4_g170377 = 0;
				float Out_AlphaFade4_g170377 = 0;
				float3 Out_Translucency4_g170377 = float3( 0,0,0 );
				float Out_Transmission4_g170377 = 0;
				float Out_Thickness4_g170377 = 0;
				float Out_Diffusion4_g170377 = 0;
				{
				Out_Dummy4_g170377 = Data4_g170377.Dummy;
				Out_Albedo4_g170377 = Data4_g170377.Albedo;
				Out_NormalTS4_g170377 = Data4_g170377.NormalTS;
				Out_NormalWS4_g170377 = Data4_g170377.NormalWS;
				Out_Shader4_g170377 = Data4_g170377.Shader;
				Out_Emissive4_g170377= Data4_g170377.Emissive;
				Out_MultiMask4_g170377 = Data4_g170377.MultiMask;
				Out_Grayscale4_g170377 = Data4_g170377.Grayscale;
				Out_Luminosity4_g170377= Data4_g170377.Luminosity;
				Out_AlphaClip4_g170377 = Data4_g170377.AlphaClip;
				Out_AlphaFade4_g170377 = Data4_g170377.AlphaFade;
				Out_Translucency4_g170377 = Data4_g170377.Translucency;
				Out_Transmission4_g170377 = Data4_g170377.Transmission;
				Out_Thickness4_g170377 = Data4_g170377.Thickness;
				Out_Diffusion4_g170377 = Data4_g170377.Diffusion;
				}
				float3 In_Albedo3_g170378 = Out_Albedo4_g170377;
				float2 In_NormalTS3_g170378 = Out_NormalTS4_g170377;
				float3 In_NormalWS3_g170378 = Out_NormalWS4_g170377;
				float4 In_Shader3_g170378 = Out_Shader4_g170377;
				float4 In_Emissive3_g170378 = Out_Emissive4_g170377;
				float In_Grayscale3_g170378 = Out_Grayscale4_g170377;
				float In_Luminosity3_g170378 = Out_Luminosity4_g170377;
				float temp_output_571_11_g170376 = Out_MultiMask4_g170377;
				float In_MultiMask3_g170378 = temp_output_571_11_g170376;
				half Visual_AlphaClip667_g170376 = Out_AlphaClip4_g170377;
				TVEGlobalData Data15_g170388 = Data204_g169264;
				float Out_Dummy15_g170388 = 0;
				float4 Out_CoatParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170388 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170388 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170388 = Data15_g170388.Dummy;
				Out_CoatParams15_g170388 = Data15_g170388.CoatParams;
				Out_PaintParams15_g170388 = Data15_g170388.PaintParams;
				Out_GlowParams15_g170388 = Data15_g170388.GlowParams;
				Out_AtmoParams15_g170388= Data15_g170388.AtmoParams;
				Out_FadeParams15_g170388= Data15_g170388.FadeParams;
				Out_FormParams15_g170388 = Data15_g170388.FormParams;
				Out_LandParams15_g170388 = Data15_g170388.LandParams;
				Out_WindParams15_g170388 = Data15_g170388.WindParams;
				Out_PushParams15_g170388 = Data15_g170388.PushParams;
				}
				half4 Global_FadeParams516_g170376 = Out_FadeParams15_g170388;
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170376 = saturate( (Global_FadeParams516_g170376).w );
				#else
				float staticSwitch663_g170376 = 1.0;
				#endif
				half Local_GlobalMask429_g170376 = staticSwitch663_g170376;
				float lerpResult811_g170376 = lerp( 1.0 , Visual_AlphaClip667_g170376 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170376 = lerpResult811_g170376;
				TVEModelData Data15_g170379 = Data16_g169262;
				float Out_Dummy15_g170379 = 0;
				float3 Out_PositionOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170379 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170379 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170379 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170379 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170379 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170379 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170379 = float3( 0,0,0 );
				float4 Out_VertexData15_g170379 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170379 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170379 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170379 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170379 = Data15_g170379.Dummy;
				Out_PositionOS15_g170379 = Data15_g170379.PositionOS;
				Out_PositionWS15_g170379 = Data15_g170379.PositionWS;
				Out_PositionWO15_g170379 = Data15_g170379.PositionWO;
				Out_PositionRawOS15_g170379 = Data15_g170379.PositionRawOS;
				Out_PositionAddOS15_g170379 = Data15_g170379.PositionAddOS;
				Out_PivotOS15_g170379 = Data15_g170379.PivotOS;
				Out_PivotWS15_g170379 = Data15_g170379.PivotWS;
				Out_PivotWO15_g170379 = Data15_g170379.PivotWO;
				Out_NormalOS15_g170379 = Data15_g170379.NormalOS;
				Out_NormalWS15_g170379 = Data15_g170379.NormalWS;
				Out_NormalRawOS15_g170379 = Data15_g170379.NormalRawOS;
				Out_NormalRawWS15_g170379 = Data15_g170379.NormalRawWS;
				Out_TangentOS15_g170379 = Data15_g170379.TangentOS;
				Out_ViewDirWS15_g170379 = Data15_g170379.ViewDirWS;
				Out_VertexData15_g170379 = Data15_g170379.VertexData;
				Out_MotionData15_g170379 = Data15_g170379.MotionData;
				Out_BoundsData15_g170379 = Data15_g170379.BoundsData;
				Out_RotationData15_g170379 = Data15_g170379.RotationData;
				}
				half3 Model_PositionWO602_g170376 = Out_PositionWO15_g170379;
				float4 tex3DNode60_g170382 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170376 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170376 = lerp( 1.0 , tex3DNode60_g170382.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170376 = lerpResult673_g170376;
				half4 Model_VertexMasks752_g170376 = Out_VertexData15_g170379;
				float4 break755_g170376 = Model_VertexMasks752_g170376;
				float4 break33_g170380 = _cutout_vert_mode;
				float temp_output_30_0_g170380 = ( break755_g170376.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break755_g170376.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break755_g170376.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break755_g170376.w * break33_g170380.w ) );
				float clampResult17_g170381 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _CutoutMeshRemap.x;
				float temp_output_10_0_g170384 = ( _CutoutMeshRemap.y - temp_output_7_0_g170384 );
				float lerpResult820_g170376 = lerp( 1.0 , saturate( ( ( clampResult17_g170381 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170385 = lerpResult820_g170376;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170385 = ( temp_output_6_0_g170385 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170385 = temp_output_6_0_g170385;
				#endif
				float temp_output_801_0_g170376 = staticSwitch14_g170385;
				half Local_VertMask766_g170376 = temp_output_801_0_g170376;
				half Visual_MultiMask671_g170376 = temp_output_571_11_g170376;
				float lerpResult683_g170376 = lerp( 1.0 , Visual_MultiMask671_g170376 , _CutoutMultiValue);
				half Local_MultiMask685_g170376 = lerpResult683_g170376;
				float lerpResult728_g170376 = lerp( Visual_AlphaClip667_g170376 , min( Visual_AlphaClip667_g170376 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170376 ) - ( Local_AlphaMask814_g170376 * Local_NoiseMask678_g170376 * Local_VertMask766_g170376 ) ) ) ) , Local_MultiMask685_g170376);
				half Local_AlphaClip784_g170376 = lerpResult728_g170376;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170376 = Local_AlphaClip784_g170376;
				#else
				float staticSwitch577_g170376 = Visual_AlphaClip667_g170376;
				#endif
				half Final_AlphaClip795_g170376 = staticSwitch577_g170376;
				float In_AlphaClip3_g170378 = Final_AlphaClip795_g170376;
				float In_AlphaFade3_g170378 = Out_AlphaFade4_g170377;
				float3 In_Translucency3_g170378 = Out_Translucency4_g170377;
				float In_Transmission3_g170378 = Out_Transmission4_g170377;
				float In_Thickness3_g170378 = Out_Thickness4_g170377;
				float In_Diffusion3_g170378 = Out_Diffusion4_g170377;
				{
				Data3_g170378.Dummy = In_Dummy3_g170378;
				Data3_g170378.Albedo = In_Albedo3_g170378;
				Data3_g170378.NormalTS = In_NormalTS3_g170378;
				Data3_g170378.NormalWS = In_NormalWS3_g170378;
				Data3_g170378.Shader = In_Shader3_g170378;
				Data3_g170378.Emissive= In_Emissive3_g170378;
				Data3_g170378.MultiMask = In_MultiMask3_g170378;
				Data3_g170378.Grayscale = In_Grayscale3_g170378;
				Data3_g170378.Luminosity = In_Luminosity3_g170378;
				Data3_g170378.AlphaClip = In_AlphaClip3_g170378;
				Data3_g170378.AlphaFade = In_AlphaFade3_g170378;
				Data3_g170378.Translucency = In_Translucency3_g170378;
				Data3_g170378.Transmission = In_Transmission3_g170378;
				Data3_g170378.Thickness = In_Thickness3_g170378;
				Data3_g170378.Diffusion = In_Diffusion3_g170378;
				}
				TVEVisualData Data4_g170392 = Data3_g170378;
				float Out_Dummy4_g170392 = 0;
				float3 Out_Albedo4_g170392 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170392 = float2( 0,0 );
				float3 Out_NormalWS4_g170392 = float3( 0,0,0 );
				float4 Out_Shader4_g170392 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170392 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170392 = 0;
				float Out_Grayscale4_g170392 = 0;
				float Out_Luminosity4_g170392 = 0;
				float Out_AlphaClip4_g170392 = 0;
				float Out_AlphaFade4_g170392 = 0;
				float3 Out_Translucency4_g170392 = float3( 0,0,0 );
				float Out_Transmission4_g170392 = 0;
				float Out_Thickness4_g170392 = 0;
				float Out_Diffusion4_g170392 = 0;
				{
				Out_Dummy4_g170392 = Data4_g170392.Dummy;
				Out_Albedo4_g170392 = Data4_g170392.Albedo;
				Out_NormalTS4_g170392 = Data4_g170392.NormalTS;
				Out_NormalWS4_g170392 = Data4_g170392.NormalWS;
				Out_Shader4_g170392 = Data4_g170392.Shader;
				Out_Emissive4_g170392= Data4_g170392.Emissive;
				Out_MultiMask4_g170392 = Data4_g170392.MultiMask;
				Out_Grayscale4_g170392 = Data4_g170392.Grayscale;
				Out_Luminosity4_g170392= Data4_g170392.Luminosity;
				Out_AlphaClip4_g170392 = Data4_g170392.AlphaClip;
				Out_AlphaFade4_g170392 = Data4_g170392.AlphaFade;
				Out_Translucency4_g170392 = Data4_g170392.Translucency;
				Out_Transmission4_g170392 = Data4_g170392.Transmission;
				Out_Thickness4_g170392 = Data4_g170392.Thickness;
				Out_Diffusion4_g170392 = Data4_g170392.Diffusion;
				}
				float3 In_Albedo3_g170393 = Out_Albedo4_g170392;
				float2 In_NormalTS3_g170393 = Out_NormalTS4_g170392;
				float3 In_NormalWS3_g170393 = Out_NormalWS4_g170392;
				float4 In_Shader3_g170393 = Out_Shader4_g170392;
				float4 In_Emissive3_g170393 = Out_Emissive4_g170392;
				float In_Grayscale3_g170393 = Out_Grayscale4_g170392;
				float In_Luminosity3_g170393 = Out_Luminosity4_g170392;
				float temp_output_821_11_g170389 = Out_MultiMask4_g170392;
				float In_MultiMask3_g170393 = temp_output_821_11_g170389;
				half Visual_AlphaClip754_g170389 = Out_AlphaClip4_g170392;
				half Dither_Constant768_g170389 = _DitherConstantValue;
				float3 ase_worldPos = IN.ase_texcoord10.xyz;
				float temp_output_756_0_g170389 = distance( ase_worldPos , _WorldSpaceCameraPos );
				half Dither_Proximity767_g170389 = ( ( 1.0 - saturate( ( temp_output_756_0_g170389 / _DitherProximityDistValue ) ) ) * _DitherProximityValue );
				TVEModelData Data15_g170391 = Data16_g169262;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_MotionData15_g170391 = Data15_g170391.MotionData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionWS776_g170389 = Out_PositionWS15_g170391;
				float temp_output_7_0_g170398 = _DitherDistanceMinValue;
				float temp_output_10_0_g170398 = ( _DitherDistanceMaxValue - temp_output_7_0_g170398 );
				half Dither_Distance856_g170389 = ( saturate( ( ( distance( Model_PositionWS776_g170389 , _WorldSpaceCameraPos ) - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170389 = Out_ViewDirWS15_g170391;
				float3 normalizeResult792_g170389 = normalize( cross( ddy( ase_worldPos ) , ddx( ase_worldPos ) ) );
				float dotResult778_g170389 = dot( Model_ViewDirWS845_g170389 , normalizeResult792_g170389 );
				half Dither_Glancing784_g170389 = ( saturate( ( ( 1.0 - abs( dotResult778_g170389 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170389 = max( max( max( Dither_Constant768_g170389 , Dither_Proximity767_g170389 ) , Dither_Distance856_g170389 ) , Dither_Glancing784_g170389 );
				half3 Model_PositionWO602_g170389 = Out_PositionWO15_g170391;
				float4 tex3DNode60_g170396 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170389 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				half Local_MaskNoise678_g170389 = tex3DNode60_g170396.r;
				half Visual_MultiMask671_g170389 = temp_output_821_11_g170389;
				float lerpResult683_g170389 = lerp( 1.0 , Visual_MultiMask671_g170389 , _DitherMultiValue);
				half Local_MaskMulti685_g170389 = lerpResult683_g170389;
				float lerpResult728_g170389 = lerp( Visual_AlphaClip754_g170389 , min( Visual_AlphaClip754_g170389 , ( -0.001 - ( Dither_Value429_g170389 - Local_MaskNoise678_g170389 ) ) ) , Local_MaskMulti685_g170389);
				half Local_AlphaClip834_g170389 = lerpResult728_g170389;
				#ifdef TVE_DITHER
				float staticSwitch577_g170389 = Local_AlphaClip834_g170389;
				#else
				float staticSwitch577_g170389 = Visual_AlphaClip754_g170389;
				#endif
				half Final_AlphaClip493_g170389 = staticSwitch577_g170389;
				float In_AlphaClip3_g170393 = Final_AlphaClip493_g170389;
				float In_AlphaFade3_g170393 = Out_AlphaFade4_g170392;
				float3 In_Translucency3_g170393 = Out_Translucency4_g170392;
				float In_Transmission3_g170393 = Out_Transmission4_g170392;
				float In_Thickness3_g170393 = Out_Thickness4_g170392;
				float In_Diffusion3_g170393 = Out_Diffusion4_g170392;
				{
				Data3_g170393.Dummy = In_Dummy3_g170393;
				Data3_g170393.Albedo = In_Albedo3_g170393;
				Data3_g170393.NormalTS = In_NormalTS3_g170393;
				Data3_g170393.NormalWS = In_NormalWS3_g170393;
				Data3_g170393.Shader = In_Shader3_g170393;
				Data3_g170393.Emissive= In_Emissive3_g170393;
				Data3_g170393.MultiMask = In_MultiMask3_g170393;
				Data3_g170393.Grayscale = In_Grayscale3_g170393;
				Data3_g170393.Luminosity = In_Luminosity3_g170393;
				Data3_g170393.AlphaClip = In_AlphaClip3_g170393;
				Data3_g170393.AlphaFade = In_AlphaFade3_g170393;
				Data3_g170393.Translucency = In_Translucency3_g170393;
				Data3_g170393.Transmission = In_Transmission3_g170393;
				Data3_g170393.Thickness = In_Thickness3_g170393;
				Data3_g170393.Diffusion = In_Diffusion3_g170393;
				}
				TVEVisualData Data4_g170418 = Data3_g170393;
				float Out_Dummy4_g170418 = 0;
				float3 Out_Albedo4_g170418 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170418 = float2( 0,0 );
				float3 Out_NormalWS4_g170418 = float3( 0,0,0 );
				float4 Out_Shader4_g170418 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170418 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170418 = 0;
				float Out_Grayscale4_g170418 = 0;
				float Out_Luminosity4_g170418 = 0;
				float Out_AlphaClip4_g170418 = 0;
				float Out_AlphaFade4_g170418 = 0;
				float3 Out_Translucency4_g170418 = float3( 0,0,0 );
				float Out_Transmission4_g170418 = 0;
				float Out_Thickness4_g170418 = 0;
				float Out_Diffusion4_g170418 = 0;
				{
				Out_Dummy4_g170418 = Data4_g170418.Dummy;
				Out_Albedo4_g170418 = Data4_g170418.Albedo;
				Out_NormalTS4_g170418 = Data4_g170418.NormalTS;
				Out_NormalWS4_g170418 = Data4_g170418.NormalWS;
				Out_Shader4_g170418 = Data4_g170418.Shader;
				Out_Emissive4_g170418= Data4_g170418.Emissive;
				Out_MultiMask4_g170418 = Data4_g170418.MultiMask;
				Out_Grayscale4_g170418 = Data4_g170418.Grayscale;
				Out_Luminosity4_g170418= Data4_g170418.Luminosity;
				Out_AlphaClip4_g170418 = Data4_g170418.AlphaClip;
				Out_AlphaFade4_g170418 = Data4_g170418.AlphaFade;
				Out_Translucency4_g170418 = Data4_g170418.Translucency;
				Out_Transmission4_g170418 = Data4_g170418.Transmission;
				Out_Thickness4_g170418 = Data4_g170418.Thickness;
				Out_Diffusion4_g170418 = Data4_g170418.Diffusion;
				}
				float3 temp_output_297_0_g170407 = Out_Albedo4_g170418;
				float3 In_Albedo3_g170419 = temp_output_297_0_g170407;
				float2 In_NormalTS3_g170419 = Out_NormalTS4_g170418;
				float3 In_NormalWS3_g170419 = Out_NormalWS4_g170418;
				float4 In_Shader3_g170419 = Out_Shader4_g170418;
				float4 temp_cast_41 = (0.0).xxxx;
				half4 Visual_Emissive255_g170407 = Out_Emissive4_g170418;
				TVEModelData Data15_g170408 = Data16_g169262;
				float Out_Dummy15_g170408 = 0;
				float3 Out_PositionOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170408 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170408 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170408 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170408 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170408 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170408 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170408 = float3( 0,0,0 );
				float4 Out_VertexData15_g170408 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170408 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170408 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170408 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170408 = Data15_g170408.Dummy;
				Out_PositionOS15_g170408 = Data15_g170408.PositionOS;
				Out_PositionWS15_g170408 = Data15_g170408.PositionWS;
				Out_PositionWO15_g170408 = Data15_g170408.PositionWO;
				Out_PositionRawOS15_g170408 = Data15_g170408.PositionRawOS;
				Out_PositionAddOS15_g170408 = Data15_g170408.PositionAddOS;
				Out_PivotOS15_g170408 = Data15_g170408.PivotOS;
				Out_PivotWS15_g170408 = Data15_g170408.PivotWS;
				Out_PivotWO15_g170408 = Data15_g170408.PivotWO;
				Out_NormalOS15_g170408 = Data15_g170408.NormalOS;
				Out_NormalWS15_g170408 = Data15_g170408.NormalWS;
				Out_NormalRawOS15_g170408 = Data15_g170408.NormalRawOS;
				Out_NormalRawWS15_g170408 = Data15_g170408.NormalRawWS;
				Out_TangentOS15_g170408 = Data15_g170408.TangentOS;
				Out_ViewDirWS15_g170408 = Data15_g170408.ViewDirWS;
				Out_VertexData15_g170408 = Data15_g170408.VertexData;
				Out_MotionData15_g170408 = Data15_g170408.MotionData;
				Out_BoundsData15_g170408 = Data15_g170408.BoundsData;
				Out_RotationData15_g170408 = Data15_g170408.RotationData;
				}
				half4 Model_VertexMasks216_g170407 = Out_VertexData15_g170408;
				float4 break251_g170407 = Model_VertexMasks216_g170407;
				float4 break33_g170412 = _emissive_vert_mode;
				float temp_output_30_0_g170412 = ( break251_g170407.x * break33_g170412.x );
				float temp_output_29_0_g170412 = ( break251_g170407.y * break33_g170412.y );
				float temp_output_31_0_g170412 = ( break251_g170407.z * break33_g170412.z );
				float temp_output_28_0_g170412 = ( temp_output_30_0_g170412 + temp_output_29_0_g170412 + temp_output_31_0_g170412 + ( break251_g170407.w * break33_g170412.w ) );
				float clampResult17_g170411 = clamp( temp_output_28_0_g170412 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170415 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170415 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170415 );
				float lerpResult303_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170411 - temp_output_7_0_g170415 ) / ( temp_output_10_0_g170415 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170421 = lerpResult303_g170407;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170421 = ( temp_output_6_0_g170421 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170421 = temp_output_6_0_g170421;
				#endif
				float temp_output_263_0_g170407 = staticSwitch14_g170421;
				half Emissive_MeshMask221_g170407 = temp_output_263_0_g170407;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170410) = _EmissiveMaskTex;
				SamplerState Sampler276_g170410 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170416 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170416 = ( temp_output_6_0_g170416 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170416 = temp_output_6_0_g170416;
				#endif
				half4 Emissive_Coords167_g170407 = staticSwitch14_g170416;
				float4 temp_output_37_0_g170410 = Emissive_Coords167_g170407;
				half4 Coords276_g170410 = temp_output_37_0_g170410;
				half2 TexCoord276_g170410 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170410 = SampleMain( Texture276_g170410 , Sampler276_g170410 , Coords276_g170410 , TexCoord276_g170410 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170410) = _EmissiveMaskTex;
				SamplerState Sampler275_g170410 = sampler_Linear_Repeat;
				half4 Coords275_g170410 = temp_output_37_0_g170410;
				half2 TexCoord275_g170410 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170410 = SampleExtra( Texture275_g170410 , Sampler275_g170410 , Coords275_g170410 , TexCoord275_g170410 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170407 = localSampleExtra275_g170410;
				#else
				float4 staticSwitch176_g170407 = localSampleMain276_g170410;
				#endif
				half4 Emissive_MaskTex201_g170407 = staticSwitch176_g170407;
				float clampResult17_g170414 = clamp( (Emissive_MaskTex201_g170407).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170413 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170413 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170413 );
				float lerpResult302_g170407 = lerp( 1.0 , saturate( ( ( clampResult17_g170414 - temp_output_7_0_g170413 ) / ( temp_output_10_0_g170413 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170407 = lerpResult302_g170407;
				float temp_output_279_0_g170407 = ( Emissive_MeshMask221_g170407 * Emissive_Mask103_g170407 );
				float3 appendResult293_g170407 = (float3(temp_output_279_0_g170407 , temp_output_279_0_g170407 , temp_output_279_0_g170407));
				half3 Local_EmissiveColor278_g170407 = appendResult293_g170407;
				float3 temp_cast_42 = (1.0).xxx;
				TVEGlobalData Data15_g170409 = Data204_g169264;
				float Out_Dummy15_g170409 = 0;
				float4 Out_CoatParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170409 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170409 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170409 = Data15_g170409.Dummy;
				Out_CoatParams15_g170409 = Data15_g170409.CoatParams;
				Out_PaintParams15_g170409 = Data15_g170409.PaintParams;
				Out_GlowParams15_g170409 = Data15_g170409.GlowParams;
				Out_AtmoParams15_g170409= Data15_g170409.AtmoParams;
				Out_FadeParams15_g170409= Data15_g170409.FadeParams;
				Out_FormParams15_g170409 = Data15_g170409.FormParams;
				Out_LandParams15_g170409 = Data15_g170409.LandParams;
				Out_WindParams15_g170409 = Data15_g170409.WindParams;
				Out_PushParams15_g170409 = Data15_g170409.PushParams;
				}
				half4 Global_GlowParams179_g170407 = Out_GlowParams15_g170409;
				float3 lerpResult299_g170407 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170407).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170407 = lerpResult299_g170407;
				#else
				float3 staticSwitch228_g170407 = temp_cast_42;
				#endif
				half3 Emissive_GlobalMask248_g170407 = staticSwitch228_g170407;
				half3 Local_EmissiveValue88_g170407 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170407 );
				half3 Emissive_Blend260_g170407 = ( ( (Visual_Emissive255_g170407).xyz * Local_EmissiveColor278_g170407 ) * Local_EmissiveValue88_g170407 );
				float3 temp_output_3_0_g170417 = Emissive_Blend260_g170407;
				float temp_output_15_0_g170417 = _emissive_power_value;
				float3 temp_output_23_0_g170417 = ( temp_output_3_0_g170417 * temp_output_15_0_g170417 );
				float4 appendResult295_g170407 = (float4(temp_output_23_0_g170417 , Emissive_Mask103_g170407));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170407 = appendResult295_g170407;
				#else
				float4 staticSwitch129_g170407 = temp_cast_41;
				#endif
				half4 Final_Emissive184_g170407 = staticSwitch129_g170407;
				float4 In_Emissive3_g170419 = Final_Emissive184_g170407;
				float In_Grayscale3_g170419 = Out_Grayscale4_g170418;
				float In_Luminosity3_g170419 = Out_Luminosity4_g170418;
				float temp_output_297_11_g170407 = Out_MultiMask4_g170418;
				float In_MultiMask3_g170419 = temp_output_297_11_g170407;
				float In_AlphaClip3_g170419 = Out_AlphaClip4_g170418;
				float In_AlphaFade3_g170419 = Out_AlphaFade4_g170418;
				float3 In_Translucency3_g170419 = Out_Translucency4_g170418;
				float In_Transmission3_g170419 = Out_Transmission4_g170418;
				float In_Thickness3_g170419 = Out_Thickness4_g170418;
				float In_Diffusion3_g170419 = Out_Diffusion4_g170418;
				{
				Data3_g170419.Dummy = In_Dummy3_g170419;
				Data3_g170419.Albedo = In_Albedo3_g170419;
				Data3_g170419.NormalTS = In_NormalTS3_g170419;
				Data3_g170419.NormalWS = In_NormalWS3_g170419;
				Data3_g170419.Shader = In_Shader3_g170419;
				Data3_g170419.Emissive= In_Emissive3_g170419;
				Data3_g170419.MultiMask = In_MultiMask3_g170419;
				Data3_g170419.Grayscale = In_Grayscale3_g170419;
				Data3_g170419.Luminosity = In_Luminosity3_g170419;
				Data3_g170419.AlphaClip = In_AlphaClip3_g170419;
				Data3_g170419.AlphaFade = In_AlphaFade3_g170419;
				Data3_g170419.Translucency = In_Translucency3_g170419;
				Data3_g170419.Transmission = In_Transmission3_g170419;
				Data3_g170419.Thickness = In_Thickness3_g170419;
				Data3_g170419.Diffusion = In_Diffusion3_g170419;
				}
				TVEVisualData Data4_g170439 = Data3_g170419;
				float Out_Dummy4_g170439 = 0;
				float3 Out_Albedo4_g170439 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170439 = float2( 0,0 );
				float3 Out_NormalWS4_g170439 = float3( 0,0,0 );
				float4 Out_Shader4_g170439 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170439 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170439 = 0;
				float Out_Grayscale4_g170439 = 0;
				float Out_Luminosity4_g170439 = 0;
				float Out_AlphaClip4_g170439 = 0;
				float Out_AlphaFade4_g170439 = 0;
				float3 Out_Translucency4_g170439 = float3( 0,0,0 );
				float Out_Transmission4_g170439 = 0;
				float Out_Thickness4_g170439 = 0;
				float Out_Diffusion4_g170439 = 0;
				{
				Out_Dummy4_g170439 = Data4_g170439.Dummy;
				Out_Albedo4_g170439 = Data4_g170439.Albedo;
				Out_NormalTS4_g170439 = Data4_g170439.NormalTS;
				Out_NormalWS4_g170439 = Data4_g170439.NormalWS;
				Out_Shader4_g170439 = Data4_g170439.Shader;
				Out_Emissive4_g170439= Data4_g170439.Emissive;
				Out_MultiMask4_g170439 = Data4_g170439.MultiMask;
				Out_Grayscale4_g170439 = Data4_g170439.Grayscale;
				Out_Luminosity4_g170439= Data4_g170439.Luminosity;
				Out_AlphaClip4_g170439 = Data4_g170439.AlphaClip;
				Out_AlphaFade4_g170439 = Data4_g170439.AlphaFade;
				Out_Translucency4_g170439 = Data4_g170439.Translucency;
				Out_Transmission4_g170439 = Data4_g170439.Transmission;
				Out_Thickness4_g170439 = Data4_g170439.Thickness;
				Out_Diffusion4_g170439 = Data4_g170439.Diffusion;
				}
				half3 Visual_Albedo199_g170438 = Out_Albedo4_g170439;
				float3 temp_cast_43 = (0.0).xxx;
				half3 Subsurface_Color264_g170438 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170438 );
				half Visual_Transmission138_g170438 = Out_Transmission4_g170439;
				half Subsurface_Value268_g170438 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170442 = Data204_g169264;
				float Out_Dummy15_g170442 = 0;
				float4 Out_CoatParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170442 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170442 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170442 = Data15_g170442.Dummy;
				Out_CoatParams15_g170442 = Data15_g170442.CoatParams;
				Out_PaintParams15_g170442 = Data15_g170442.PaintParams;
				Out_GlowParams15_g170442 = Data15_g170442.GlowParams;
				Out_AtmoParams15_g170442= Data15_g170442.AtmoParams;
				Out_FadeParams15_g170442= Data15_g170442.FadeParams;
				Out_FormParams15_g170442 = Data15_g170442.FormParams;
				Out_LandParams15_g170442 = Data15_g170442.LandParams;
				Out_WindParams15_g170442 = Data15_g170442.WindParams;
				Out_PushParams15_g170442 = Data15_g170442.PushParams;
				}
				half4 Global_GlowParams373_g170438 = Out_GlowParams15_g170442;
				float lerpResult403_g170438 = lerp( 1.0 , saturate( (Global_GlowParams373_g170438).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170438 = lerpResult403_g170438;
				#else
				float staticSwitch367_g170438 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170438 = staticSwitch367_g170438;
				float temp_output_301_11_g170438 = Out_MultiMask4_g170439;
				half Visual_MultiMask292_g170438 = temp_output_301_11_g170438;
				float lerpResult293_g170438 = lerp( 1.0 , Visual_MultiMask292_g170438 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170438 = lerpResult293_g170438;
				half Custom_Mask363_g170438 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170438 = ( Visual_Transmission138_g170438 * Subsurface_Value268_g170438 * Subsurface_GlobalMask369_g170438 * Subsurface_MultiMask296_g170438 * Custom_Mask363_g170438 );
				#else
				float staticSwitch345_g170438 = 0.0;
				#endif
				half Final_Transmission269_g170438 = staticSwitch345_g170438;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170438 = ( Subsurface_Color264_g170438 * Final_Transmission269_g170438 * 10.0 );
				#else
				float3 staticSwitch348_g170438 = temp_cast_43;
				#endif
				half3 Final_Translucency254_g170438 = staticSwitch348_g170438;
				TVEModelData Data15_g170441 = Data16_g169262;
				float Out_Dummy15_g170441 = 0;
				float3 Out_PositionOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170441 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170441 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170441 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170441 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170441 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170441 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170441 = float3( 0,0,0 );
				float4 Out_VertexData15_g170441 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170441 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170441 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_PositionOS15_g170441 = Data15_g170441.PositionOS;
				Out_PositionWS15_g170441 = Data15_g170441.PositionWS;
				Out_PositionWO15_g170441 = Data15_g170441.PositionWO;
				Out_PositionRawOS15_g170441 = Data15_g170441.PositionRawOS;
				Out_PositionAddOS15_g170441 = Data15_g170441.PositionAddOS;
				Out_PivotOS15_g170441 = Data15_g170441.PivotOS;
				Out_PivotWS15_g170441 = Data15_g170441.PivotWS;
				Out_PivotWO15_g170441 = Data15_g170441.PivotWO;
				Out_NormalOS15_g170441 = Data15_g170441.NormalOS;
				Out_NormalWS15_g170441 = Data15_g170441.NormalWS;
				Out_NormalRawOS15_g170441 = Data15_g170441.NormalRawOS;
				Out_NormalRawWS15_g170441 = Data15_g170441.NormalRawWS;
				Out_TangentOS15_g170441 = Data15_g170441.TangentOS;
				Out_ViewDirWS15_g170441 = Data15_g170441.ViewDirWS;
				Out_VertexData15_g170441 = Data15_g170441.VertexData;
				Out_MotionData15_g170441 = Data15_g170441.MotionData;
				Out_BoundsData15_g170441 = Data15_g170441.BoundsData;
				Out_RotationData15_g170441 = Data15_g170441.RotationData;
				}
				half3 Model_ViewDirWS392_g170438 = Out_ViewDirWS15_g170441;
				float dotResult324_g170438 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170438 );
				float saferPower323_g170438 = abs( saturate( dotResult324_g170438 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170438 = 0.0;
				#else
				float staticSwitch330_g170438 = ( pow( saferPower323_g170438 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170438 = staticSwitch330_g170438;
				float3 temp_output_6_0_g170443 = ( Final_Translucency254_g170438 * Mask_Subsurface_View320_g170438 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170443 = ( temp_output_6_0_g170443 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g170443 = temp_output_6_0_g170443;
				#endif
				half3 Subsurface_Approximation333_g170438 = staticSwitch14_g170443;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170438 = ( Visual_Albedo199_g170438 + Subsurface_Approximation333_g170438 );
				#else
				float3 staticSwitch353_g170438 = Visual_Albedo199_g170438;
				#endif
				half3 Final_Albedo312_g170438 = staticSwitch353_g170438;
				float3 In_Albedo3_g170440 = Final_Albedo312_g170438;
				float2 In_NormalTS3_g170440 = Out_NormalTS4_g170439;
				float3 In_NormalWS3_g170440 = Out_NormalWS4_g170439;
				float4 In_Shader3_g170440 = Out_Shader4_g170439;
				float4 In_Emissive3_g170440 = Out_Emissive4_g170439;
				float In_Grayscale3_g170440 = Out_Grayscale4_g170439;
				float In_Luminosity3_g170440 = Out_Luminosity4_g170439;
				float In_MultiMask3_g170440 = temp_output_301_11_g170438;
				float In_AlphaClip3_g170440 = Out_AlphaClip4_g170439;
				float In_AlphaFade3_g170440 = Out_AlphaFade4_g170439;
				float3 In_Translucency3_g170440 = Final_Translucency254_g170438;
				float In_Transmission3_g170440 = Final_Transmission269_g170438;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170438 = 0.0;
				#else
				float staticSwitch351_g170438 = 1.0;
				#endif
				half Final_Thickness275_g170438 = staticSwitch351_g170438;
				float In_Thickness3_g170440 = Final_Thickness275_g170438;
				float Final_Diffusion340_g170438 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170440 = Final_Diffusion340_g170438;
				{
				Data3_g170440.Dummy = In_Dummy3_g170440;
				Data3_g170440.Albedo = In_Albedo3_g170440;
				Data3_g170440.NormalTS = In_NormalTS3_g170440;
				Data3_g170440.NormalWS = In_NormalWS3_g170440;
				Data3_g170440.Shader = In_Shader3_g170440;
				Data3_g170440.Emissive= In_Emissive3_g170440;
				Data3_g170440.MultiMask = In_MultiMask3_g170440;
				Data3_g170440.Grayscale = In_Grayscale3_g170440;
				Data3_g170440.Luminosity = In_Luminosity3_g170440;
				Data3_g170440.AlphaClip = In_AlphaClip3_g170440;
				Data3_g170440.AlphaFade = In_AlphaFade3_g170440;
				Data3_g170440.Translucency = In_Translucency3_g170440;
				Data3_g170440.Transmission = In_Transmission3_g170440;
				Data3_g170440.Thickness = In_Thickness3_g170440;
				Data3_g170440.Diffusion = In_Diffusion3_g170440;
				}
				TVEVisualData Data4_g170455 = Data3_g170440;
				float Out_Dummy4_g170455 = 0;
				float3 Out_Albedo4_g170455 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170455 = float2( 0,0 );
				float3 Out_NormalWS4_g170455 = float3( 0,0,0 );
				float4 Out_Shader4_g170455 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170455 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170455 = 0;
				float Out_Grayscale4_g170455 = 0;
				float Out_Luminosity4_g170455 = 0;
				float Out_AlphaClip4_g170455 = 0;
				float Out_AlphaFade4_g170455 = 0;
				float3 Out_Translucency4_g170455 = float3( 0,0,0 );
				float Out_Transmission4_g170455 = 0;
				float Out_Thickness4_g170455 = 0;
				float Out_Diffusion4_g170455 = 0;
				{
				Out_Dummy4_g170455 = Data4_g170455.Dummy;
				Out_Albedo4_g170455 = Data4_g170455.Albedo;
				Out_NormalTS4_g170455 = Data4_g170455.NormalTS;
				Out_NormalWS4_g170455 = Data4_g170455.NormalWS;
				Out_Shader4_g170455 = Data4_g170455.Shader;
				Out_Emissive4_g170455= Data4_g170455.Emissive;
				Out_MultiMask4_g170455 = Data4_g170455.MultiMask;
				Out_Grayscale4_g170455 = Data4_g170455.Grayscale;
				Out_Luminosity4_g170455= Data4_g170455.Luminosity;
				Out_AlphaClip4_g170455 = Data4_g170455.AlphaClip;
				Out_AlphaFade4_g170455 = Data4_g170455.AlphaFade;
				Out_Translucency4_g170455 = Data4_g170455.Translucency;
				Out_Transmission4_g170455 = Data4_g170455.Transmission;
				Out_Thickness4_g170455 = Data4_g170455.Thickness;
				Out_Diffusion4_g170455 = Data4_g170455.Diffusion;
				}
				float temp_output_3_0_g170456 = Out_AlphaClip4_g170455;
				float Alpha19_g170456 = temp_output_3_0_g170456;
				float temp_output_15_0_g170456 = 0.0;
				float Treshold19_g170456 = temp_output_15_0_g170456;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#else
				clip(Alpha19_g170456 - Treshold19_g170456);
				#endif
				#endif
				}
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha19_g170456 * Out_AlphaFade4_g170455 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;1208;-14592,-256;Inherit;False;Block Model;45;;169248;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,193,0,189,0,300,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;1209;-14272,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1210;-13824,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1265;-14272,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1211;-13568,-256;Inherit;False;Block Global;54;;169264;212e17d4006dc88449d56ce0340cb5ff;20,315,1,311,1,388,1,317,1,321,1,319,1,376,0,323,1,337,1,282,1,371,1,349,1,385,1,287,1,285,1,276,1,283,1,308,1,348,1,289,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;1217;-12800,-256;Inherit;False;1265;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1213;-8576,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1212;-13248,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1279;-12544,-256;Inherit;False;Block Pivots Sub;-1;;169968;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1214;-8320,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1215;-8320,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1216;-8320,-256;Inherit;False;Block Main;103;;169971;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;1225;-12160,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1280;-12160,-256;Inherit;False;Block Perspective;468;;169989;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1218;-7936,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1219;-7936,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1220;-7936,-256;Inherit;False;Block Layer;129;;169993;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1228;-11776,-256;Inherit;False;Block Size Fade;473;;170027;467c36a7402d0274b9ad844bbc95de33;0;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1222;-7552,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1223;-7552,-256;Inherit;False;Block Detail;176;;170033;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1281;-11392,-256;Inherit;False;Block Motion;482;;170066;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;1226;-7168,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1227;-7168,-256;Inherit;False;Block Occlusion;221;;170136;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;1263;-10944,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1229;-6784,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1230;-6784,-256;Inherit;False;Block Gradient;233;;170146;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1274;-9472,-256;Inherit;False;1263;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1231;-6400,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1232;-6400,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1233;-6400,-256;Inherit;False;Block Variation;246;;170156;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;1282;-9216,-256;Inherit;False;Block Interp;-1;;170165;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1234;-6016,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1235;-6016,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1236;-6016,-256;Inherit;False;Block Tinting;259;;170166;9f39e156ea8d89e4997ea2a1e194137e;7,352,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;1269;-8896,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;1237;-5632,-256;Inherit;False;Block Dryness;288;;170190;f05795de23f951c45bb73c8b4321e4b7;7,398,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;1264;-5632,-128;Inherit;False;1269;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1238;-5248,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1239;-5248,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1284;-5248,-256;Inherit;False;Block Highlight;0;;170319;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1241;-4864,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1242;-4864,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1243;-4864,-256;Inherit;False;Block Overlay;320;;170322;8ae9c8285a7817844a51243251284d21;9,821,1,819,1,813,1,910,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1244;-4480,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1245;-4480,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1246;-4480,-256;Inherit;False;Block Wetness;366;;170358;52c5a1f52507fc44e926833b126e7855;5,850,1,857,1,945,1,930,1,851,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1247;-4096,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1248;-4096,-256;Inherit;False;Block Cutout;389;;170376;866b4a5fe67e7f34085520e1bb5be2b7;5,775,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1251;-3712,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1252;-3712,-256;Inherit;False;Block Dithering;407;;170389;c7e02d28445e979479d493926695e6f3;5,843,1,859,1,844,1,827,1,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1250;-3712,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1249;-11008,-256;Inherit;False;Block Transform;-1;;170400;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1255;-3328,-256;Inherit;False;Block Emissive;425;;170407;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;1254;-3328,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1267;-3328,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1253;-10624,-256;Inherit;False;Block Normal;544;;170422;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1638,0,1700,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1257;-2944,-256;Inherit;False;Block Subsurface;449;;170438;d738d295ada6b1f409db6776b5efe789;3,315,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;1283;-10240,-256;Inherit;False;Block Pivots Add;-1;;170445;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;1258;-2624,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1266;-9920,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1259;-1920,-256;Inherit;False;1258;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1260;-1920,-192;Inherit;False;1266;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;1171;-1920,-512;Half;False;Property;_render_cull;_render_cull;563;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1172;-1728,-512;Half;False;Property;_render_src;_render_src;564;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1173;-1536,-512;Half;False;Property;_render_dst;_render_dst;565;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1174;-1344,-512;Half;False;Property;_render_zw;_render_zw;566;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1175;-640,-512;Inherit;False;Base Compile;-1;;170448;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1176;-1152,-512;Half;False;Property;_render_coverage;_render_coverage;567;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1177;-1920,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;568;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1178;-1696,-640;Half;False;Property;_IsSimpleShader;_IsSimpleShader;569;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1261;-1664,-256;Inherit;False;Block Render;2;;170449;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1180;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1182;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1183;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1184;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1185;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1181;-1120,-256;Float;False;True;-1;2;TVEShaderGUICore;0;17;BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit;28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;True;True;1;0;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;2;638507966350037256;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638507966389794542;Deferred Pass;0;638541444818398171;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638507966500833844;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;1209;0;1208;314
WireConnection;1265;0;1208;128
WireConnection;1211;206;1210;0
WireConnection;1212;0;1211;151
WireConnection;1279;146;1217;0
WireConnection;1216;225;1213;0
WireConnection;1280;146;1279;128
WireConnection;1220;585;1216;106
WireConnection;1220;633;1214;0
WireConnection;1220;974;1215;0
WireConnection;1228;146;1280;128
WireConnection;1228;186;1225;0
WireConnection;1223;585;1220;552
WireConnection;1223;633;1218;0
WireConnection;1223;971;1219;0
WireConnection;1281;146;1228;128
WireConnection;1227;144;1223;552
WireConnection;1227;204;1222;0
WireConnection;1263;0;1281;1903
WireConnection;1230;144;1227;116
WireConnection;1230;222;1226;0
WireConnection;1233;144;1230;116
WireConnection;1233;222;1229;0
WireConnection;1282;22;1274;0
WireConnection;1236;198;1233;116
WireConnection;1236;223;1232;0
WireConnection;1236;207;1231;0
WireConnection;1269;0;1282;0
WireConnection;1237;279;1236;204
WireConnection;1237;297;1235;0
WireConnection;1237;281;1234;0
WireConnection;1284;144;1237;346
WireConnection;1284;212;1264;0
WireConnection;1243;572;1284;116
WireConnection;1243;596;1238;0
WireConnection;1243;600;1239;0
WireConnection;1246;572;1243;566
WireConnection;1246;596;1242;0
WireConnection;1246;600;1241;0
WireConnection;1248;572;1246;566
WireConnection;1248;596;1245;0
WireConnection;1248;600;1244;0
WireConnection;1252;572;1248;566
WireConnection;1252;596;1247;0
WireConnection;1249;146;1281;128
WireConnection;1255;146;1252;566
WireConnection;1255;148;1250;0
WireConnection;1255;178;1251;0
WireConnection;1253;146;1249;128
WireConnection;1257;146;1255;183
WireConnection;1257;385;1267;0
WireConnection;1257;371;1254;0
WireConnection;1283;146;1253;128
WireConnection;1258;0;1257;183
WireConnection;1266;0;1283;128
WireConnection;1261;17;1259;0
WireConnection;1261;19;1260;0
WireConnection;1181;0;1261;21
WireConnection;1181;1;1261;22
WireConnection;1181;2;1261;34
WireConnection;1181;20;1261;108
WireConnection;1181;21;1261;109
WireConnection;1181;7;1261;28
WireConnection;1181;15;1261;30
WireConnection;1181;16;1261;32
WireConnection;1181;17;1261;33
ASEEND*/
//CHKSM=75058876F287162F5DF71559F4E71CF4B603B55C
